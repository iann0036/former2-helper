AWS.apiLoader.services["ecr"] = {};

AWS.ECR = AWS.Service.defineService("ecr", [ "2015-09-21" ]);

AWS.apiLoader.services["ecr"]["2015-09-21"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-09-21",
        endpointPrefix: "api.ecr",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon ECR",
        serviceFullName: "Amazon EC2 Container Registry",
        serviceId: "ECR",
        signatureVersion: "v4",
        signingName: "ecr",
        targetPrefix: "AmazonEC2ContainerRegistry_V20150921",
        uid: "ecr-2015-09-21"
    },
    operations: {
        BatchCheckLayerAvailability: {
            input: {
                type: "structure",
                required: [ "repositoryName", "layerDigests" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    layerDigests: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    layers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                layerDigest: {},
                                layerAvailability: {},
                                layerSize: {
                                    type: "long"
                                },
                                mediaType: {}
                            }
                        }
                    },
                    failures: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                layerDigest: {},
                                failureCode: {},
                                failureReason: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDeleteImage: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageIds" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageIds: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    imageIds: {
                        shape: "Si"
                    },
                    failures: {
                        shape: "Sn"
                    }
                }
            }
        },
        BatchGetImage: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageIds" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageIds: {
                        shape: "Si"
                    },
                    acceptedMediaTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    images: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    },
                    failures: {
                        shape: "Sn"
                    }
                }
            }
        },
        BatchGetRepositoryScanningConfiguration: {
            input: {
                type: "structure",
                required: [ "repositoryNames" ],
                members: {
                    repositoryNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    scanningConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                repositoryArn: {},
                                repositoryName: {},
                                scanOnPush: {
                                    type: "boolean"
                                },
                                scanFrequency: {},
                                appliedScanFilters: {
                                    shape: "S15"
                                }
                            }
                        }
                    },
                    failures: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                repositoryName: {},
                                failureCode: {},
                                failureReason: {}
                            }
                        }
                    }
                }
            }
        },
        CompleteLayerUpload: {
            input: {
                type: "structure",
                required: [ "repositoryName", "uploadId", "layerDigests" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    layerDigests: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    layerDigest: {}
                }
            }
        },
        CreatePullThroughCacheRule: {
            input: {
                type: "structure",
                required: [ "ecrRepositoryPrefix", "upstreamRegistryUrl" ],
                members: {
                    ecrRepositoryPrefix: {},
                    upstreamRegistryUrl: {},
                    registryId: {},
                    upstreamRegistry: {},
                    credentialArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ecrRepositoryPrefix: {},
                    upstreamRegistryUrl: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    registryId: {},
                    upstreamRegistry: {},
                    credentialArn: {}
                }
            }
        },
        CreateRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    tags: {
                        shape: "S1p"
                    },
                    imageTagMutability: {},
                    imageScanningConfiguration: {
                        shape: "S1u"
                    },
                    encryptionConfiguration: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S1z"
                    }
                }
            }
        },
        DeleteLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    lifecyclePolicyText: {},
                    lastEvaluatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeletePullThroughCacheRule: {
            input: {
                type: "structure",
                required: [ "ecrRepositoryPrefix" ],
                members: {
                    ecrRepositoryPrefix: {},
                    registryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ecrRepositoryPrefix: {},
                    upstreamRegistryUrl: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    registryId: {},
                    credentialArn: {}
                }
            }
        },
        DeleteRegistryPolicy: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    policyText: {}
                }
            }
        },
        DeleteRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repository: {
                        shape: "S1z"
                    }
                }
            }
        },
        DeleteRepositoryPolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {}
                }
            }
        },
        DescribeImageReplicationStatus: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageId" ],
                members: {
                    repositoryName: {},
                    imageId: {
                        shape: "Sj"
                    },
                    registryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryName: {},
                    imageId: {
                        shape: "Sj"
                    },
                    replicationStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                region: {},
                                registryId: {},
                                status: {},
                                failureCode: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeImageScanFindings: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageId" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageId: {
                        shape: "Sj"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageId: {
                        shape: "Sj"
                    },
                    imageScanStatus: {
                        shape: "S2q"
                    },
                    imageScanFindings: {
                        type: "structure",
                        members: {
                            imageScanCompletedAt: {
                                type: "timestamp"
                            },
                            vulnerabilitySourceUpdatedAt: {
                                type: "timestamp"
                            },
                            findingSeverityCounts: {
                                shape: "S2w"
                            },
                            findings: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        description: {},
                                        uri: {},
                                        severity: {},
                                        attributes: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "key" ],
                                                members: {
                                                    key: {},
                                                    value: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            enhancedFindings: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        awsAccountId: {},
                                        description: {},
                                        findingArn: {},
                                        firstObservedAt: {
                                            type: "timestamp"
                                        },
                                        lastObservedAt: {
                                            type: "timestamp"
                                        },
                                        packageVulnerabilityDetails: {
                                            type: "structure",
                                            members: {
                                                cvss: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            baseScore: {
                                                                type: "double"
                                                            },
                                                            scoringVector: {},
                                                            source: {},
                                                            version: {}
                                                        }
                                                    }
                                                },
                                                referenceUrls: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                relatedVulnerabilities: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                source: {},
                                                sourceUrl: {},
                                                vendorCreatedAt: {
                                                    type: "timestamp"
                                                },
                                                vendorSeverity: {},
                                                vendorUpdatedAt: {
                                                    type: "timestamp"
                                                },
                                                vulnerabilityId: {},
                                                vulnerablePackages: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            arch: {},
                                                            epoch: {
                                                                type: "integer"
                                                            },
                                                            filePath: {},
                                                            name: {},
                                                            packageManager: {},
                                                            release: {},
                                                            sourceLayerHash: {},
                                                            version: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        remediation: {
                                            type: "structure",
                                            members: {
                                                recommendation: {
                                                    type: "structure",
                                                    members: {
                                                        url: {},
                                                        text: {}
                                                    }
                                                }
                                            }
                                        },
                                        resources: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    details: {
                                                        type: "structure",
                                                        members: {
                                                            awsEcrContainerImage: {
                                                                type: "structure",
                                                                members: {
                                                                    architecture: {},
                                                                    author: {},
                                                                    imageHash: {},
                                                                    imageTags: {
                                                                        type: "list",
                                                                        member: {}
                                                                    },
                                                                    platform: {},
                                                                    pushedAt: {
                                                                        type: "timestamp"
                                                                    },
                                                                    registry: {},
                                                                    repositoryName: {}
                                                                }
                                                            }
                                                        }
                                                    },
                                                    id: {},
                                                    tags: {
                                                        type: "map",
                                                        key: {},
                                                        value: {}
                                                    },
                                                    type: {}
                                                }
                                            }
                                        },
                                        score: {
                                            type: "double"
                                        },
                                        scoreDetails: {
                                            type: "structure",
                                            members: {
                                                cvss: {
                                                    type: "structure",
                                                    members: {
                                                        adjustments: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    metric: {},
                                                                    reason: {}
                                                                }
                                                            }
                                                        },
                                                        score: {
                                                            type: "double"
                                                        },
                                                        scoreSource: {},
                                                        scoringVector: {},
                                                        version: {}
                                                    }
                                                }
                                            }
                                        },
                                        severity: {},
                                        status: {},
                                        title: {},
                                        type: {},
                                        updatedAt: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeImages: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageIds: {
                        shape: "Si"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            tagStatus: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    imageDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                registryId: {},
                                repositoryName: {},
                                imageDigest: {},
                                imageTags: {
                                    shape: "S4o"
                                },
                                imageSizeInBytes: {
                                    type: "long"
                                },
                                imagePushedAt: {
                                    type: "timestamp"
                                },
                                imageScanStatus: {
                                    shape: "S2q"
                                },
                                imageScanFindingsSummary: {
                                    type: "structure",
                                    members: {
                                        imageScanCompletedAt: {
                                            type: "timestamp"
                                        },
                                        vulnerabilitySourceUpdatedAt: {
                                            type: "timestamp"
                                        },
                                        findingSeverityCounts: {
                                            shape: "S2w"
                                        }
                                    }
                                },
                                imageManifestMediaType: {},
                                artifactMediaType: {},
                                lastRecordedPullTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribePullThroughCacheRules: {
            input: {
                type: "structure",
                members: {
                    registryId: {},
                    ecrRepositoryPrefixes: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pullThroughCacheRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ecrRepositoryPrefix: {},
                                upstreamRegistryUrl: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                registryId: {},
                                credentialArn: {},
                                upstreamRegistry: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeRegistry: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    replicationConfiguration: {
                        shape: "S51"
                    }
                }
            }
        },
        DescribeRepositories: {
            input: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryNames: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        type: "list",
                        member: {
                            shape: "S1z"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetAuthorizationToken: {
            input: {
                type: "structure",
                members: {
                    registryIds: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated. The returned authorization token can be used to access any Amazon ECR registry that the IAM principal has access to, specifying a registry ID doesn't change the permissions scope of the authorization token.",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    authorizationData: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                authorizationToken: {},
                                expiresAt: {
                                    type: "timestamp"
                                },
                                proxyEndpoint: {}
                            }
                        }
                    }
                }
            }
        },
        GetDownloadUrlForLayer: {
            input: {
                type: "structure",
                required: [ "repositoryName", "layerDigest" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    layerDigest: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    downloadUrl: {},
                    layerDigest: {}
                }
            }
        },
        GetLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    lifecyclePolicyText: {},
                    lastEvaluatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetLifecyclePolicyPreview: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageIds: {
                        shape: "Si"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            tagStatus: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    lifecyclePolicyText: {},
                    status: {},
                    nextToken: {},
                    previewResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                imageTags: {
                                    shape: "S4o"
                                },
                                imageDigest: {},
                                imagePushedAt: {
                                    type: "timestamp"
                                },
                                action: {
                                    type: "structure",
                                    members: {
                                        type: {}
                                    }
                                },
                                appliedRulePriority: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    summary: {
                        type: "structure",
                        members: {
                            expiringImageTotalCount: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        GetRegistryPolicy: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    policyText: {}
                }
            }
        },
        GetRegistryScanningConfiguration: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    scanningConfiguration: {
                        shape: "S66"
                    }
                }
            }
        },
        GetRepositoryPolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {}
                }
            }
        },
        InitiateLayerUpload: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    uploadId: {},
                    partSize: {
                        type: "long"
                    }
                }
            }
        },
        ListImages: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            tagStatus: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    imageIds: {
                        shape: "Si"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1p"
                    }
                }
            }
        },
        PutImage: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageManifest" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageManifest: {},
                    imageManifestMediaType: {},
                    imageTag: {},
                    imageDigest: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    image: {
                        shape: "Sv"
                    }
                }
            }
        },
        PutImageScanningConfiguration: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageScanningConfiguration" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageScanningConfiguration: {
                        shape: "S1u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageScanningConfiguration: {
                        shape: "S1u"
                    }
                }
            }
        },
        PutImageTagMutability: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageTagMutability" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageTagMutability: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageTagMutability: {}
                }
            }
        },
        PutLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName", "lifecyclePolicyText" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    lifecyclePolicyText: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    lifecyclePolicyText: {}
                }
            }
        },
        PutRegistryPolicy: {
            input: {
                type: "structure",
                required: [ "policyText" ],
                members: {
                    policyText: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    policyText: {}
                }
            }
        },
        PutRegistryScanningConfiguration: {
            input: {
                type: "structure",
                members: {
                    scanType: {},
                    rules: {
                        shape: "S68"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryScanningConfiguration: {
                        shape: "S66"
                    }
                }
            }
        },
        PutReplicationConfiguration: {
            input: {
                type: "structure",
                required: [ "replicationConfiguration" ],
                members: {
                    replicationConfiguration: {
                        shape: "S51"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    replicationConfiguration: {
                        shape: "S51"
                    }
                }
            }
        },
        SetRepositoryPolicy: {
            input: {
                type: "structure",
                required: [ "repositoryName", "policyText" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    policyText: {}
                }
            }
        },
        StartImageScan: {
            input: {
                type: "structure",
                required: [ "repositoryName", "imageId" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageId: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    imageId: {
                        shape: "Sj"
                    },
                    imageScanStatus: {
                        shape: "S2q"
                    }
                }
            }
        },
        StartLifecyclePolicyPreview: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    lifecyclePolicyText: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    lifecyclePolicyText: {},
                    status: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePullThroughCacheRule: {
            input: {
                type: "structure",
                required: [ "ecrRepositoryPrefix", "credentialArn" ],
                members: {
                    registryId: {},
                    ecrRepositoryPrefix: {},
                    credentialArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ecrRepositoryPrefix: {},
                    registryId: {},
                    updatedAt: {
                        type: "timestamp"
                    },
                    credentialArn: {}
                }
            }
        },
        UploadLayerPart: {
            input: {
                type: "structure",
                required: [ "repositoryName", "uploadId", "partFirstByte", "partLastByte", "layerPartBlob" ],
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    partFirstByte: {
                        type: "long"
                    },
                    partLastByte: {
                        type: "long"
                    },
                    layerPartBlob: {
                        type: "blob"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    registryId: {},
                    repositoryName: {},
                    uploadId: {},
                    lastByteReceived: {
                        type: "long"
                    }
                }
            }
        },
        ValidatePullThroughCacheRule: {
            input: {
                type: "structure",
                required: [ "ecrRepositoryPrefix" ],
                members: {
                    ecrRepositoryPrefix: {},
                    registryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ecrRepositoryPrefix: {},
                    registryId: {},
                    upstreamRegistryUrl: {},
                    credentialArn: {},
                    isValid: {
                        type: "boolean"
                    },
                    failure: {}
                }
            }
        }
    },
    shapes: {
        Si: {
            type: "list",
            member: {
                shape: "Sj"
            }
        },
        Sj: {
            type: "structure",
            members: {
                imageDigest: {},
                imageTag: {}
            }
        },
        Sn: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    imageId: {
                        shape: "Sj"
                    },
                    failureCode: {},
                    failureReason: {}
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                registryId: {},
                repositoryName: {},
                imageId: {
                    shape: "Sj"
                },
                imageManifest: {},
                imageManifestMediaType: {}
            }
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                required: [ "filter", "filterType" ],
                members: {
                    filter: {},
                    filterType: {}
                }
            }
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1u: {
            type: "structure",
            members: {
                scanOnPush: {
                    type: "boolean"
                }
            }
        },
        S1v: {
            type: "structure",
            required: [ "encryptionType" ],
            members: {
                encryptionType: {},
                kmsKey: {}
            }
        },
        S1z: {
            type: "structure",
            members: {
                repositoryArn: {},
                registryId: {},
                repositoryName: {},
                repositoryUri: {},
                createdAt: {
                    type: "timestamp"
                },
                imageTagMutability: {},
                imageScanningConfiguration: {
                    shape: "S1u"
                },
                encryptionConfiguration: {
                    shape: "S1v"
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                status: {},
                description: {}
            }
        },
        S2w: {
            type: "map",
            key: {},
            value: {
                type: "integer"
            }
        },
        S4o: {
            type: "list",
            member: {}
        },
        S51: {
            type: "structure",
            required: [ "rules" ],
            members: {
                rules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "destinations" ],
                        members: {
                            destinations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "region", "registryId" ],
                                    members: {
                                        region: {},
                                        registryId: {}
                                    }
                                }
                            },
                            repositoryFilters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "filter", "filterType" ],
                                    members: {
                                        filter: {},
                                        filterType: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S66: {
            type: "structure",
            members: {
                scanType: {},
                rules: {
                    shape: "S68"
                }
            }
        },
        S68: {
            type: "list",
            member: {
                type: "structure",
                required: [ "scanFrequency", "repositoryFilters" ],
                members: {
                    scanFrequency: {},
                    repositoryFilters: {
                        shape: "S15"
                    }
                }
            }
        }
    },
    paginators: {
        DescribeImageScanFindings: {
            input_token: "nextToken",
            limit_key: "maxResults",
            non_aggregate_keys: [ "registryId", "repositoryName", "imageId", "imageScanStatus", "imageScanFindings" ],
            output_token: "nextToken",
            result_key: [ "imageScanFindings.findings", "imageScanFindings.enhancedFindings" ]
        },
        DescribeImages: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "imageDetails"
        },
        DescribePullThroughCacheRules: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "pullThroughCacheRules"
        },
        DescribeRepositories: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "repositories"
        },
        GetLifecyclePolicyPreview: {
            input_token: "nextToken",
            limit_key: "maxResults",
            non_aggregate_keys: [ "registryId", "repositoryName", "lifecyclePolicyText", "status", "summary" ],
            output_token: "nextToken",
            result_key: "previewResults"
        },
        ListImages: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "imageIds"
        }
    },
    waiters: {
        ImageScanComplete: {
            description: "Wait until an image scan is complete and findings can be accessed",
            operation: "DescribeImageScanFindings",
            delay: 5,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "imageScanStatus.status",
                expected: "COMPLETE"
            }, {
                state: "failure",
                matcher: "path",
                argument: "imageScanStatus.status",
                expected: "FAILED"
            } ]
        },
        LifecyclePolicyPreviewComplete: {
            description: "Wait until a lifecycle policy preview request is complete and results can be accessed",
            operation: "GetLifecyclePolicyPreview",
            delay: 5,
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "status",
                expected: "COMPLETE"
            }, {
                state: "failure",
                matcher: "path",
                argument: "status",
                expected: "FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["ecs"] = {};

AWS.ECS = AWS.Service.defineService("ecs", [ "2014-11-13" ]);

AWS.apiLoader.services["ecs"]["2014-11-13"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-11-13",
        endpointPrefix: "ecs",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon ECS",
        serviceFullName: "Amazon EC2 Container Service",
        serviceId: "ECS",
        signatureVersion: "v4",
        targetPrefix: "AmazonEC2ContainerServiceV20141113",
        uid: "ecs-2014-11-13"
    },
    operations: {
        CreateCapacityProvider: {
            input: {
                type: "structure",
                required: [ "name", "autoScalingGroupProvider" ],
                members: {
                    name: {},
                    autoScalingGroupProvider: {
                        shape: "S3"
                    },
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    capacityProvider: {
                        shape: "Sf"
                    }
                }
            }
        },
        CreateCluster: {
            input: {
                type: "structure",
                members: {
                    clusterName: {},
                    tags: {
                        shape: "Sa"
                    },
                    settings: {
                        shape: "Sj"
                    },
                    configuration: {
                        shape: "Sm"
                    },
                    capacityProviders: {
                        shape: "Sr"
                    },
                    defaultCapacityProviderStrategy: {
                        shape: "Ss"
                    },
                    serviceConnectDefaults: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "Sy"
                    }
                }
            }
        },
        CreateService: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    cluster: {},
                    serviceName: {},
                    taskDefinition: {},
                    loadBalancers: {
                        shape: "S17"
                    },
                    serviceRegistries: {
                        shape: "S1a"
                    },
                    desiredCount: {
                        type: "integer"
                    },
                    clientToken: {},
                    launchType: {},
                    capacityProviderStrategy: {
                        shape: "Ss"
                    },
                    platformVersion: {},
                    role: {},
                    deploymentConfiguration: {
                        shape: "S1d"
                    },
                    placementConstraints: {
                        shape: "S1g"
                    },
                    placementStrategy: {
                        shape: "S1j"
                    },
                    networkConfiguration: {
                        shape: "S1m"
                    },
                    healthCheckGracePeriodSeconds: {
                        type: "integer"
                    },
                    schedulingStrategy: {},
                    deploymentController: {
                        shape: "S1q"
                    },
                    tags: {
                        shape: "Sa"
                    },
                    enableECSManagedTags: {
                        type: "boolean"
                    },
                    propagateTags: {},
                    enableExecuteCommand: {
                        type: "boolean"
                    },
                    serviceConnectConfiguration: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    service: {
                        shape: "S25"
                    }
                }
            }
        },
        CreateTaskSet: {
            input: {
                type: "structure",
                required: [ "service", "cluster", "taskDefinition" ],
                members: {
                    service: {},
                    cluster: {},
                    externalId: {},
                    taskDefinition: {},
                    networkConfiguration: {
                        shape: "S1m"
                    },
                    loadBalancers: {
                        shape: "S17"
                    },
                    serviceRegistries: {
                        shape: "S1a"
                    },
                    launchType: {},
                    capacityProviderStrategy: {
                        shape: "Ss"
                    },
                    platformVersion: {},
                    scale: {
                        shape: "S29"
                    },
                    clientToken: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskSet: {
                        shape: "S27"
                    }
                }
            }
        },
        DeleteAccountSetting: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    principalArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    setting: {
                        shape: "S2p"
                    }
                }
            }
        },
        DeleteAttributes: {
            input: {
                type: "structure",
                required: [ "attributes" ],
                members: {
                    cluster: {},
                    attributes: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributes: {
                        shape: "S2s"
                    }
                }
            }
        },
        DeleteCapacityProvider: {
            input: {
                type: "structure",
                required: [ "capacityProvider" ],
                members: {
                    capacityProvider: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    capacityProvider: {
                        shape: "Sf"
                    }
                }
            }
        },
        DeleteCluster: {
            input: {
                type: "structure",
                required: [ "cluster" ],
                members: {
                    cluster: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "Sy"
                    }
                }
            }
        },
        DeleteService: {
            input: {
                type: "structure",
                required: [ "service" ],
                members: {
                    cluster: {},
                    service: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    service: {
                        shape: "S25"
                    }
                }
            }
        },
        DeleteTaskDefinitions: {
            input: {
                type: "structure",
                required: [ "taskDefinitions" ],
                members: {
                    taskDefinitions: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskDefinitions: {
                        type: "list",
                        member: {
                            shape: "S36"
                        }
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        DeleteTaskSet: {
            input: {
                type: "structure",
                required: [ "cluster", "service", "taskSet" ],
                members: {
                    cluster: {},
                    service: {},
                    taskSet: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskSet: {
                        shape: "S27"
                    }
                }
            }
        },
        DeregisterContainerInstance: {
            input: {
                type: "structure",
                required: [ "containerInstance" ],
                members: {
                    cluster: {},
                    containerInstance: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    containerInstance: {
                        shape: "S5d"
                    }
                }
            }
        },
        DeregisterTaskDefinition: {
            input: {
                type: "structure",
                required: [ "taskDefinition" ],
                members: {
                    taskDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    taskDefinition: {
                        shape: "S36"
                    }
                }
            }
        },
        DescribeCapacityProviders: {
            input: {
                type: "structure",
                members: {
                    capacityProviders: {
                        shape: "Sr"
                    },
                    include: {
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    capacityProviders: {
                        type: "list",
                        member: {
                            shape: "Sf"
                        }
                    },
                    failures: {
                        shape: "S57"
                    },
                    nextToken: {}
                }
            }
        },
        DescribeClusters: {
            input: {
                type: "structure",
                members: {
                    clusters: {
                        shape: "Sr"
                    },
                    include: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clusters: {
                        type: "list",
                        member: {
                            shape: "Sy"
                        }
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        DescribeContainerInstances: {
            input: {
                type: "structure",
                required: [ "containerInstances" ],
                members: {
                    cluster: {},
                    containerInstances: {
                        shape: "Sr"
                    },
                    include: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    containerInstances: {
                        shape: "S64"
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        DescribeServices: {
            input: {
                type: "structure",
                required: [ "services" ],
                members: {
                    cluster: {},
                    services: {
                        shape: "Sr"
                    },
                    include: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    services: {
                        type: "list",
                        member: {
                            shape: "S25"
                        }
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        DescribeTaskDefinition: {
            input: {
                type: "structure",
                required: [ "taskDefinition" ],
                members: {
                    taskDefinition: {},
                    include: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskDefinition: {
                        shape: "S36"
                    },
                    tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        DescribeTaskSets: {
            input: {
                type: "structure",
                required: [ "cluster", "service" ],
                members: {
                    cluster: {},
                    service: {},
                    taskSets: {
                        shape: "Sr"
                    },
                    include: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskSets: {
                        shape: "S26"
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        DescribeTasks: {
            input: {
                type: "structure",
                required: [ "tasks" ],
                members: {
                    cluster: {},
                    tasks: {
                        shape: "Sr"
                    },
                    include: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tasks: {
                        shape: "S6m"
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        DiscoverPollEndpoint: {
            input: {
                type: "structure",
                members: {
                    containerInstance: {},
                    cluster: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {},
                    telemetryEndpoint: {},
                    serviceConnectEndpoint: {}
                }
            }
        },
        ExecuteCommand: {
            input: {
                type: "structure",
                required: [ "command", "interactive", "task" ],
                members: {
                    cluster: {},
                    container: {},
                    command: {},
                    interactive: {
                        type: "boolean"
                    },
                    task: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    clusterArn: {},
                    containerArn: {},
                    containerName: {},
                    interactive: {
                        type: "boolean"
                    },
                    session: {
                        type: "structure",
                        members: {
                            sessionId: {},
                            streamUrl: {},
                            tokenValue: {
                                type: "string",
                                sensitive: true
                            }
                        }
                    },
                    taskArn: {}
                }
            }
        },
        GetTaskProtection: {
            input: {
                type: "structure",
                required: [ "cluster" ],
                members: {
                    cluster: {},
                    tasks: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    protectedTasks: {
                        shape: "S7e"
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        ListAccountSettings: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    value: {},
                    principalArn: {},
                    effectiveSettings: {
                        type: "boolean"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    settings: {
                        type: "list",
                        member: {
                            shape: "S2p"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAttributes: {
            input: {
                type: "structure",
                required: [ "targetType" ],
                members: {
                    cluster: {},
                    targetType: {},
                    attributeName: {},
                    attributeValue: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributes: {
                        shape: "S2s"
                    },
                    nextToken: {}
                }
            }
        },
        ListClusters: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clusterArns: {
                        shape: "Sr"
                    },
                    nextToken: {}
                }
            }
        },
        ListContainerInstances: {
            input: {
                type: "structure",
                members: {
                    cluster: {},
                    filter: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    containerInstanceArns: {
                        shape: "Sr"
                    },
                    nextToken: {}
                }
            }
        },
        ListServices: {
            input: {
                type: "structure",
                members: {
                    cluster: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    launchType: {},
                    schedulingStrategy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceArns: {
                        shape: "Sr"
                    },
                    nextToken: {}
                }
            }
        },
        ListServicesByNamespace: {
            input: {
                type: "structure",
                required: [ "namespace" ],
                members: {
                    namespace: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    serviceArns: {
                        shape: "Sr"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        ListTaskDefinitionFamilies: {
            input: {
                type: "structure",
                members: {
                    familyPrefix: {},
                    status: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    families: {
                        shape: "Sr"
                    },
                    nextToken: {}
                }
            }
        },
        ListTaskDefinitions: {
            input: {
                type: "structure",
                members: {
                    familyPrefix: {},
                    status: {},
                    sort: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskDefinitionArns: {
                        shape: "Sr"
                    },
                    nextToken: {}
                }
            }
        },
        ListTasks: {
            input: {
                type: "structure",
                members: {
                    cluster: {},
                    containerInstance: {},
                    family: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    startedBy: {},
                    serviceName: {},
                    desiredStatus: {},
                    launchType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    taskArns: {
                        shape: "Sr"
                    },
                    nextToken: {}
                }
            }
        },
        PutAccountSetting: {
            input: {
                type: "structure",
                required: [ "name", "value" ],
                members: {
                    name: {},
                    value: {},
                    principalArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    setting: {
                        shape: "S2p"
                    }
                }
            }
        },
        PutAccountSettingDefault: {
            input: {
                type: "structure",
                required: [ "name", "value" ],
                members: {
                    name: {},
                    value: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    setting: {
                        shape: "S2p"
                    }
                }
            }
        },
        PutAttributes: {
            input: {
                type: "structure",
                required: [ "attributes" ],
                members: {
                    cluster: {},
                    attributes: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attributes: {
                        shape: "S2s"
                    }
                }
            }
        },
        PutClusterCapacityProviders: {
            input: {
                type: "structure",
                required: [ "cluster", "capacityProviders", "defaultCapacityProviderStrategy" ],
                members: {
                    cluster: {},
                    capacityProviders: {
                        shape: "Sr"
                    },
                    defaultCapacityProviderStrategy: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "Sy"
                    }
                }
            }
        },
        RegisterContainerInstance: {
            input: {
                type: "structure",
                members: {
                    cluster: {},
                    instanceIdentityDocument: {},
                    instanceIdentityDocumentSignature: {},
                    totalResources: {
                        shape: "S5g"
                    },
                    versionInfo: {
                        shape: "S5f"
                    },
                    containerInstanceArn: {},
                    attributes: {
                        shape: "S2s"
                    },
                    platformDevices: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "type" ],
                            members: {
                                id: {},
                                type: {}
                            }
                        }
                    },
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    containerInstance: {
                        shape: "S5d"
                    }
                }
            }
        },
        RegisterTaskDefinition: {
            input: {
                type: "structure",
                required: [ "family", "containerDefinitions" ],
                members: {
                    family: {},
                    taskRoleArn: {},
                    executionRoleArn: {},
                    networkMode: {},
                    containerDefinitions: {
                        shape: "S37"
                    },
                    volumes: {
                        shape: "S4d"
                    },
                    placementConstraints: {
                        shape: "S4r"
                    },
                    requiresCompatibilities: {
                        shape: "S4u"
                    },
                    cpu: {},
                    memory: {},
                    tags: {
                        shape: "Sa"
                    },
                    pidMode: {},
                    ipcMode: {},
                    proxyConfiguration: {
                        shape: "S53"
                    },
                    inferenceAccelerators: {
                        shape: "S4z"
                    },
                    ephemeralStorage: {
                        shape: "S56"
                    },
                    runtimePlatform: {
                        shape: "S4w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskDefinition: {
                        shape: "S36"
                    },
                    tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        RunTask: {
            input: {
                type: "structure",
                required: [ "taskDefinition" ],
                members: {
                    capacityProviderStrategy: {
                        shape: "Ss"
                    },
                    cluster: {},
                    count: {
                        type: "integer"
                    },
                    enableECSManagedTags: {
                        type: "boolean"
                    },
                    enableExecuteCommand: {
                        type: "boolean"
                    },
                    group: {},
                    launchType: {},
                    networkConfiguration: {
                        shape: "S1m"
                    },
                    overrides: {
                        shape: "S70"
                    },
                    placementConstraints: {
                        shape: "S1g"
                    },
                    placementStrategy: {
                        shape: "S1j"
                    },
                    platformVersion: {},
                    propagateTags: {},
                    referenceId: {},
                    startedBy: {},
                    tags: {
                        shape: "Sa"
                    },
                    taskDefinition: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tasks: {
                        shape: "S6m"
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        StartTask: {
            input: {
                type: "structure",
                required: [ "containerInstances", "taskDefinition" ],
                members: {
                    cluster: {},
                    containerInstances: {
                        shape: "Sr"
                    },
                    enableECSManagedTags: {
                        type: "boolean"
                    },
                    enableExecuteCommand: {
                        type: "boolean"
                    },
                    group: {},
                    networkConfiguration: {
                        shape: "S1m"
                    },
                    overrides: {
                        shape: "S70"
                    },
                    propagateTags: {},
                    referenceId: {},
                    startedBy: {},
                    tags: {
                        shape: "Sa"
                    },
                    taskDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tasks: {
                        shape: "S6m"
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        StopTask: {
            input: {
                type: "structure",
                required: [ "task" ],
                members: {
                    cluster: {},
                    task: {},
                    reason: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    task: {
                        shape: "S6n"
                    }
                }
            }
        },
        SubmitAttachmentStateChanges: {
            input: {
                type: "structure",
                required: [ "attachments" ],
                members: {
                    cluster: {},
                    attachments: {
                        shape: "S8r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    acknowledgment: {}
                }
            }
        },
        SubmitContainerStateChange: {
            input: {
                type: "structure",
                members: {
                    cluster: {},
                    task: {},
                    containerName: {},
                    runtimeId: {},
                    status: {},
                    exitCode: {
                        type: "integer"
                    },
                    reason: {},
                    networkBindings: {
                        shape: "S6r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    acknowledgment: {}
                }
            }
        },
        SubmitTaskStateChange: {
            input: {
                type: "structure",
                members: {
                    cluster: {},
                    task: {},
                    status: {},
                    reason: {},
                    containers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                containerName: {},
                                imageDigest: {},
                                runtimeId: {},
                                exitCode: {
                                    type: "integer"
                                },
                                networkBindings: {
                                    shape: "S6r"
                                },
                                reason: {},
                                status: {}
                            }
                        }
                    },
                    attachments: {
                        shape: "S8r"
                    },
                    managedAgents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "containerName", "managedAgentName", "status" ],
                            members: {
                                containerName: {},
                                managedAgentName: {},
                                status: {},
                                reason: {}
                            }
                        }
                    },
                    pullStartedAt: {
                        type: "timestamp"
                    },
                    pullStoppedAt: {
                        type: "timestamp"
                    },
                    executionStoppedAt: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    acknowledgment: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCapacityProvider: {
            input: {
                type: "structure",
                required: [ "name", "autoScalingGroupProvider" ],
                members: {
                    name: {},
                    autoScalingGroupProvider: {
                        type: "structure",
                        members: {
                            managedScaling: {
                                shape: "S4"
                            },
                            managedTerminationProtection: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    capacityProvider: {
                        shape: "Sf"
                    }
                }
            }
        },
        UpdateCluster: {
            input: {
                type: "structure",
                required: [ "cluster" ],
                members: {
                    cluster: {},
                    settings: {
                        shape: "Sj"
                    },
                    configuration: {
                        shape: "Sm"
                    },
                    serviceConnectDefaults: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "Sy"
                    }
                }
            }
        },
        UpdateClusterSettings: {
            input: {
                type: "structure",
                required: [ "cluster", "settings" ],
                members: {
                    cluster: {},
                    settings: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "Sy"
                    }
                }
            }
        },
        UpdateContainerAgent: {
            input: {
                type: "structure",
                required: [ "containerInstance" ],
                members: {
                    cluster: {},
                    containerInstance: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    containerInstance: {
                        shape: "S5d"
                    }
                }
            }
        },
        UpdateContainerInstancesState: {
            input: {
                type: "structure",
                required: [ "containerInstances", "status" ],
                members: {
                    cluster: {},
                    containerInstances: {
                        shape: "Sr"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    containerInstances: {
                        shape: "S64"
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        UpdateService: {
            input: {
                type: "structure",
                required: [ "service" ],
                members: {
                    cluster: {},
                    service: {},
                    desiredCount: {
                        type: "integer"
                    },
                    taskDefinition: {},
                    capacityProviderStrategy: {
                        shape: "Ss"
                    },
                    deploymentConfiguration: {
                        shape: "S1d"
                    },
                    networkConfiguration: {
                        shape: "S1m"
                    },
                    placementConstraints: {
                        shape: "S1g"
                    },
                    placementStrategy: {
                        shape: "S1j"
                    },
                    platformVersion: {},
                    forceNewDeployment: {
                        type: "boolean"
                    },
                    healthCheckGracePeriodSeconds: {
                        type: "integer"
                    },
                    enableExecuteCommand: {
                        type: "boolean"
                    },
                    enableECSManagedTags: {
                        type: "boolean"
                    },
                    loadBalancers: {
                        shape: "S17"
                    },
                    propagateTags: {},
                    serviceRegistries: {
                        shape: "S1a"
                    },
                    serviceConnectConfiguration: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    service: {
                        shape: "S25"
                    }
                }
            }
        },
        UpdateServicePrimaryTaskSet: {
            input: {
                type: "structure",
                required: [ "cluster", "service", "primaryTaskSet" ],
                members: {
                    cluster: {},
                    service: {},
                    primaryTaskSet: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    taskSet: {
                        shape: "S27"
                    }
                }
            }
        },
        UpdateTaskProtection: {
            input: {
                type: "structure",
                required: [ "cluster", "tasks", "protectionEnabled" ],
                members: {
                    cluster: {},
                    tasks: {
                        shape: "Sr"
                    },
                    protectionEnabled: {
                        type: "boolean"
                    },
                    expiresInMinutes: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    protectedTasks: {
                        shape: "S7e"
                    },
                    failures: {
                        shape: "S57"
                    }
                }
            }
        },
        UpdateTaskSet: {
            input: {
                type: "structure",
                required: [ "cluster", "service", "taskSet", "scale" ],
                members: {
                    cluster: {},
                    service: {},
                    taskSet: {},
                    scale: {
                        shape: "S29"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskSet: {
                        shape: "S27"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "autoScalingGroupArn" ],
            members: {
                autoScalingGroupArn: {},
                managedScaling: {
                    shape: "S4"
                },
                managedTerminationProtection: {}
            }
        },
        S4: {
            type: "structure",
            members: {
                status: {},
                targetCapacity: {
                    type: "integer"
                },
                minimumScalingStepSize: {
                    type: "integer"
                },
                maximumScalingStepSize: {
                    type: "integer"
                },
                instanceWarmupPeriod: {
                    type: "integer"
                }
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sf: {
            type: "structure",
            members: {
                capacityProviderArn: {},
                name: {},
                status: {},
                autoScalingGroupProvider: {
                    shape: "S3"
                },
                updateStatus: {},
                updateStatusReason: {},
                tags: {
                    shape: "Sa"
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    value: {}
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                executeCommandConfiguration: {
                    type: "structure",
                    members: {
                        kmsKeyId: {},
                        logging: {},
                        logConfiguration: {
                            type: "structure",
                            members: {
                                cloudWatchLogGroupName: {},
                                cloudWatchEncryptionEnabled: {
                                    type: "boolean"
                                },
                                s3BucketName: {},
                                s3EncryptionEnabled: {
                                    type: "boolean"
                                },
                                s3KeyPrefix: {}
                            }
                        }
                    }
                }
            }
        },
        Sr: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "capacityProvider" ],
                members: {
                    capacityProvider: {},
                    weight: {
                        type: "integer"
                    },
                    base: {
                        type: "integer"
                    }
                }
            }
        },
        Sw: {
            type: "structure",
            required: [ "namespace" ],
            members: {
                namespace: {}
            }
        },
        Sy: {
            type: "structure",
            members: {
                clusterArn: {},
                clusterName: {},
                configuration: {
                    shape: "Sm"
                },
                status: {},
                registeredContainerInstancesCount: {
                    type: "integer"
                },
                runningTasksCount: {
                    type: "integer"
                },
                pendingTasksCount: {
                    type: "integer"
                },
                activeServicesCount: {
                    type: "integer"
                },
                statistics: {
                    type: "list",
                    member: {
                        shape: "S11"
                    }
                },
                tags: {
                    shape: "Sa"
                },
                settings: {
                    shape: "Sj"
                },
                capacityProviders: {
                    shape: "Sr"
                },
                defaultCapacityProviderStrategy: {
                    shape: "Ss"
                },
                attachments: {
                    shape: "S12"
                },
                attachmentsStatus: {},
                serviceConnectDefaults: {
                    type: "structure",
                    members: {
                        namespace: {}
                    }
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                name: {},
                value: {}
            }
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    type: {},
                    status: {},
                    details: {
                        type: "list",
                        member: {
                            shape: "S11"
                        }
                    }
                }
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    targetGroupArn: {},
                    loadBalancerName: {},
                    containerName: {},
                    containerPort: {
                        type: "integer"
                    }
                }
            }
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    registryArn: {},
                    port: {
                        type: "integer"
                    },
                    containerName: {},
                    containerPort: {
                        type: "integer"
                    }
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                deploymentCircuitBreaker: {
                    type: "structure",
                    required: [ "enable", "rollback" ],
                    members: {
                        enable: {
                            type: "boolean"
                        },
                        rollback: {
                            type: "boolean"
                        }
                    }
                },
                maximumPercent: {
                    type: "integer"
                },
                minimumHealthyPercent: {
                    type: "integer"
                },
                alarms: {
                    type: "structure",
                    required: [ "alarmNames", "enable", "rollback" ],
                    members: {
                        alarmNames: {
                            shape: "Sr"
                        },
                        enable: {
                            type: "boolean"
                        },
                        rollback: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    type: {},
                    expression: {}
                }
            }
        },
        S1j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    type: {},
                    field: {}
                }
            }
        },
        S1m: {
            type: "structure",
            members: {
                awsvpcConfiguration: {
                    type: "structure",
                    required: [ "subnets" ],
                    members: {
                        subnets: {
                            shape: "Sr"
                        },
                        securityGroups: {
                            shape: "Sr"
                        },
                        assignPublicIp: {}
                    }
                }
            }
        },
        S1q: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {}
            }
        },
        S1t: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                },
                namespace: {},
                services: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "portName" ],
                        members: {
                            portName: {},
                            discoveryName: {},
                            clientAliases: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "port" ],
                                    members: {
                                        port: {
                                            type: "integer"
                                        },
                                        dnsName: {}
                                    }
                                }
                            },
                            ingressPortOverride: {
                                type: "integer"
                            }
                        }
                    }
                },
                logConfiguration: {
                    shape: "S1z"
                }
            }
        },
        S1z: {
            type: "structure",
            required: [ "logDriver" ],
            members: {
                logDriver: {},
                options: {
                    type: "map",
                    key: {},
                    value: {}
                },
                secretOptions: {
                    shape: "S22"
                }
            }
        },
        S22: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "valueFrom" ],
                members: {
                    name: {},
                    valueFrom: {}
                }
            }
        },
        S25: {
            type: "structure",
            members: {
                serviceArn: {},
                serviceName: {},
                clusterArn: {},
                loadBalancers: {
                    shape: "S17"
                },
                serviceRegistries: {
                    shape: "S1a"
                },
                status: {},
                desiredCount: {
                    type: "integer"
                },
                runningCount: {
                    type: "integer"
                },
                pendingCount: {
                    type: "integer"
                },
                launchType: {},
                capacityProviderStrategy: {
                    shape: "Ss"
                },
                platformVersion: {},
                platformFamily: {},
                taskDefinition: {},
                deploymentConfiguration: {
                    shape: "S1d"
                },
                taskSets: {
                    shape: "S26"
                },
                deployments: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            id: {},
                            status: {},
                            taskDefinition: {},
                            desiredCount: {
                                type: "integer"
                            },
                            pendingCount: {
                                type: "integer"
                            },
                            runningCount: {
                                type: "integer"
                            },
                            failedTasks: {
                                type: "integer"
                            },
                            createdAt: {
                                type: "timestamp"
                            },
                            updatedAt: {
                                type: "timestamp"
                            },
                            capacityProviderStrategy: {
                                shape: "Ss"
                            },
                            launchType: {},
                            platformVersion: {},
                            platformFamily: {},
                            networkConfiguration: {
                                shape: "S1m"
                            },
                            rolloutState: {},
                            rolloutStateReason: {},
                            serviceConnectConfiguration: {
                                shape: "S1t"
                            },
                            serviceConnectResources: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        discoveryName: {},
                                        discoveryArn: {}
                                    }
                                }
                            }
                        }
                    }
                },
                roleArn: {},
                events: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            id: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            message: {}
                        }
                    }
                },
                createdAt: {
                    type: "timestamp"
                },
                placementConstraints: {
                    shape: "S1g"
                },
                placementStrategy: {
                    shape: "S1j"
                },
                networkConfiguration: {
                    shape: "S1m"
                },
                healthCheckGracePeriodSeconds: {
                    type: "integer"
                },
                schedulingStrategy: {},
                deploymentController: {
                    shape: "S1q"
                },
                tags: {
                    shape: "Sa"
                },
                createdBy: {},
                enableECSManagedTags: {
                    type: "boolean"
                },
                propagateTags: {},
                enableExecuteCommand: {
                    type: "boolean"
                }
            }
        },
        S26: {
            type: "list",
            member: {
                shape: "S27"
            }
        },
        S27: {
            type: "structure",
            members: {
                id: {},
                taskSetArn: {},
                serviceArn: {},
                clusterArn: {},
                startedBy: {},
                externalId: {},
                status: {},
                taskDefinition: {},
                computedDesiredCount: {
                    type: "integer"
                },
                pendingCount: {
                    type: "integer"
                },
                runningCount: {
                    type: "integer"
                },
                createdAt: {
                    type: "timestamp"
                },
                updatedAt: {
                    type: "timestamp"
                },
                launchType: {},
                capacityProviderStrategy: {
                    shape: "Ss"
                },
                platformVersion: {},
                platformFamily: {},
                networkConfiguration: {
                    shape: "S1m"
                },
                loadBalancers: {
                    shape: "S17"
                },
                serviceRegistries: {
                    shape: "S1a"
                },
                scale: {
                    shape: "S29"
                },
                stabilityStatus: {},
                stabilityStatusAt: {
                    type: "timestamp"
                },
                tags: {
                    shape: "Sa"
                }
            }
        },
        S29: {
            type: "structure",
            members: {
                value: {
                    type: "double"
                },
                unit: {}
            }
        },
        S2p: {
            type: "structure",
            members: {
                name: {},
                value: {},
                principalArn: {},
                type: {}
            }
        },
        S2s: {
            type: "list",
            member: {
                shape: "S2t"
            }
        },
        S2t: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                value: {},
                targetType: {},
                targetId: {}
            }
        },
        S36: {
            type: "structure",
            members: {
                taskDefinitionArn: {},
                containerDefinitions: {
                    shape: "S37"
                },
                family: {},
                taskRoleArn: {},
                executionRoleArn: {},
                networkMode: {},
                revision: {
                    type: "integer"
                },
                volumes: {
                    shape: "S4d"
                },
                status: {},
                requiresAttributes: {
                    type: "list",
                    member: {
                        shape: "S2t"
                    }
                },
                placementConstraints: {
                    shape: "S4r"
                },
                compatibilities: {
                    shape: "S4u"
                },
                runtimePlatform: {
                    shape: "S4w"
                },
                requiresCompatibilities: {
                    shape: "S4u"
                },
                cpu: {},
                memory: {},
                inferenceAccelerators: {
                    shape: "S4z"
                },
                pidMode: {},
                ipcMode: {},
                proxyConfiguration: {
                    shape: "S53"
                },
                registeredAt: {
                    type: "timestamp"
                },
                deregisteredAt: {
                    type: "timestamp"
                },
                registeredBy: {},
                ephemeralStorage: {
                    shape: "S56"
                }
            }
        },
        S37: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    image: {},
                    repositoryCredentials: {
                        type: "structure",
                        required: [ "credentialsParameter" ],
                        members: {
                            credentialsParameter: {}
                        }
                    },
                    cpu: {
                        type: "integer"
                    },
                    memory: {
                        type: "integer"
                    },
                    memoryReservation: {
                        type: "integer"
                    },
                    links: {
                        shape: "Sr"
                    },
                    portMappings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                containerPort: {
                                    type: "integer"
                                },
                                hostPort: {
                                    type: "integer"
                                },
                                protocol: {},
                                name: {},
                                appProtocol: {},
                                containerPortRange: {}
                            }
                        }
                    },
                    essential: {
                        type: "boolean"
                    },
                    entryPoint: {
                        shape: "Sr"
                    },
                    command: {
                        shape: "Sr"
                    },
                    environment: {
                        shape: "S3e"
                    },
                    environmentFiles: {
                        shape: "S3f"
                    },
                    mountPoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                sourceVolume: {},
                                containerPath: {},
                                readOnly: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    volumesFrom: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                sourceContainer: {},
                                readOnly: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    linuxParameters: {
                        type: "structure",
                        members: {
                            capabilities: {
                                type: "structure",
                                members: {
                                    add: {
                                        shape: "Sr"
                                    },
                                    drop: {
                                        shape: "Sr"
                                    }
                                }
                            },
                            devices: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "hostPath" ],
                                    members: {
                                        hostPath: {},
                                        containerPath: {},
                                        permissions: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            },
                            initProcessEnabled: {
                                type: "boolean"
                            },
                            sharedMemorySize: {
                                type: "integer"
                            },
                            tmpfs: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "containerPath", "size" ],
                                    members: {
                                        containerPath: {},
                                        size: {
                                            type: "integer"
                                        },
                                        mountOptions: {
                                            shape: "Sr"
                                        }
                                    }
                                }
                            },
                            maxSwap: {
                                type: "integer"
                            },
                            swappiness: {
                                type: "integer"
                            }
                        }
                    },
                    secrets: {
                        shape: "S22"
                    },
                    dependsOn: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "containerName", "condition" ],
                            members: {
                                containerName: {},
                                condition: {}
                            }
                        }
                    },
                    startTimeout: {
                        type: "integer"
                    },
                    stopTimeout: {
                        type: "integer"
                    },
                    hostname: {},
                    user: {},
                    workingDirectory: {},
                    disableNetworking: {
                        type: "boolean"
                    },
                    privileged: {
                        type: "boolean"
                    },
                    readonlyRootFilesystem: {
                        type: "boolean"
                    },
                    dnsServers: {
                        shape: "Sr"
                    },
                    dnsSearchDomains: {
                        shape: "Sr"
                    },
                    extraHosts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "hostname", "ipAddress" ],
                            members: {
                                hostname: {},
                                ipAddress: {}
                            }
                        }
                    },
                    dockerSecurityOptions: {
                        shape: "Sr"
                    },
                    interactive: {
                        type: "boolean"
                    },
                    pseudoTerminal: {
                        type: "boolean"
                    },
                    dockerLabels: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    ulimits: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "softLimit", "hardLimit" ],
                            members: {
                                name: {},
                                softLimit: {
                                    type: "integer"
                                },
                                hardLimit: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    logConfiguration: {
                        shape: "S1z"
                    },
                    healthCheck: {
                        type: "structure",
                        required: [ "command" ],
                        members: {
                            command: {
                                shape: "Sr"
                            },
                            interval: {
                                type: "integer"
                            },
                            timeout: {
                                type: "integer"
                            },
                            retries: {
                                type: "integer"
                            },
                            startPeriod: {
                                type: "integer"
                            }
                        }
                    },
                    systemControls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                namespace: {},
                                value: {}
                            }
                        }
                    },
                    resourceRequirements: {
                        shape: "S46"
                    },
                    firelensConfiguration: {
                        type: "structure",
                        required: [ "type" ],
                        members: {
                            type: {},
                            options: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    },
                    credentialSpecs: {
                        shape: "Sr"
                    }
                }
            }
        },
        S3e: {
            type: "list",
            member: {
                shape: "S11"
            }
        },
        S3f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "value", "type" ],
                members: {
                    value: {},
                    type: {}
                }
            }
        },
        S46: {
            type: "list",
            member: {
                type: "structure",
                required: [ "value", "type" ],
                members: {
                    value: {},
                    type: {}
                }
            }
        },
        S4d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    host: {
                        type: "structure",
                        members: {
                            sourcePath: {}
                        }
                    },
                    dockerVolumeConfiguration: {
                        type: "structure",
                        members: {
                            scope: {},
                            autoprovision: {
                                type: "boolean"
                            },
                            driver: {},
                            driverOpts: {
                                shape: "S4i"
                            },
                            labels: {
                                shape: "S4i"
                            }
                        }
                    },
                    efsVolumeConfiguration: {
                        type: "structure",
                        required: [ "fileSystemId" ],
                        members: {
                            fileSystemId: {},
                            rootDirectory: {},
                            transitEncryption: {},
                            transitEncryptionPort: {
                                type: "integer"
                            },
                            authorizationConfig: {
                                type: "structure",
                                members: {
                                    accessPointId: {},
                                    iam: {}
                                }
                            }
                        }
                    },
                    fsxWindowsFileServerVolumeConfiguration: {
                        type: "structure",
                        required: [ "fileSystemId", "rootDirectory", "authorizationConfig" ],
                        members: {
                            fileSystemId: {},
                            rootDirectory: {},
                            authorizationConfig: {
                                type: "structure",
                                required: [ "credentialsParameter", "domain" ],
                                members: {
                                    credentialsParameter: {},
                                    domain: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S4i: {
            type: "map",
            key: {},
            value: {}
        },
        S4r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    type: {},
                    expression: {}
                }
            }
        },
        S4u: {
            type: "list",
            member: {}
        },
        S4w: {
            type: "structure",
            members: {
                cpuArchitecture: {},
                operatingSystemFamily: {}
            }
        },
        S4z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "deviceName", "deviceType" ],
                members: {
                    deviceName: {},
                    deviceType: {}
                }
            }
        },
        S53: {
            type: "structure",
            required: [ "containerName" ],
            members: {
                type: {},
                containerName: {},
                properties: {
                    type: "list",
                    member: {
                        shape: "S11"
                    }
                }
            }
        },
        S56: {
            type: "structure",
            required: [ "sizeInGiB" ],
            members: {
                sizeInGiB: {
                    type: "integer"
                }
            }
        },
        S57: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    reason: {},
                    detail: {}
                }
            }
        },
        S5d: {
            type: "structure",
            members: {
                containerInstanceArn: {},
                ec2InstanceId: {},
                capacityProviderName: {},
                version: {
                    type: "long"
                },
                versionInfo: {
                    shape: "S5f"
                },
                remainingResources: {
                    shape: "S5g"
                },
                registeredResources: {
                    shape: "S5g"
                },
                status: {},
                statusReason: {},
                agentConnected: {
                    type: "boolean"
                },
                runningTasksCount: {
                    type: "integer"
                },
                pendingTasksCount: {
                    type: "integer"
                },
                agentUpdateStatus: {},
                attributes: {
                    shape: "S2s"
                },
                registeredAt: {
                    type: "timestamp"
                },
                attachments: {
                    shape: "S12"
                },
                tags: {
                    shape: "Sa"
                },
                healthStatus: {
                    type: "structure",
                    members: {
                        overallStatus: {},
                        details: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    type: {},
                                    status: {},
                                    lastUpdated: {
                                        type: "timestamp"
                                    },
                                    lastStatusChange: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S5f: {
            type: "structure",
            members: {
                agentVersion: {},
                agentHash: {},
                dockerVersion: {}
            }
        },
        S5g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    type: {},
                    doubleValue: {
                        type: "double"
                    },
                    longValue: {
                        type: "long"
                    },
                    integerValue: {
                        type: "integer"
                    },
                    stringSetValue: {
                        shape: "Sr"
                    }
                }
            }
        },
        S64: {
            type: "list",
            member: {
                shape: "S5d"
            }
        },
        S6m: {
            type: "list",
            member: {
                shape: "S6n"
            }
        },
        S6n: {
            type: "structure",
            members: {
                attachments: {
                    shape: "S12"
                },
                attributes: {
                    shape: "S2s"
                },
                availabilityZone: {},
                capacityProviderName: {},
                clusterArn: {},
                connectivity: {},
                connectivityAt: {
                    type: "timestamp"
                },
                containerInstanceArn: {},
                containers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            containerArn: {},
                            taskArn: {},
                            name: {},
                            image: {},
                            imageDigest: {},
                            runtimeId: {},
                            lastStatus: {},
                            exitCode: {
                                type: "integer"
                            },
                            reason: {},
                            networkBindings: {
                                shape: "S6r"
                            },
                            networkInterfaces: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        attachmentId: {},
                                        privateIpv4Address: {},
                                        ipv6Address: {}
                                    }
                                }
                            },
                            healthStatus: {},
                            managedAgents: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        lastStartedAt: {
                                            type: "timestamp"
                                        },
                                        name: {},
                                        reason: {},
                                        lastStatus: {}
                                    }
                                }
                            },
                            cpu: {},
                            memory: {},
                            memoryReservation: {},
                            gpuIds: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                cpu: {},
                createdAt: {
                    type: "timestamp"
                },
                desiredStatus: {},
                enableExecuteCommand: {
                    type: "boolean"
                },
                executionStoppedAt: {
                    type: "timestamp"
                },
                group: {},
                healthStatus: {},
                inferenceAccelerators: {
                    shape: "S4z"
                },
                lastStatus: {},
                launchType: {},
                memory: {},
                overrides: {
                    shape: "S70"
                },
                platformVersion: {},
                platformFamily: {},
                pullStartedAt: {
                    type: "timestamp"
                },
                pullStoppedAt: {
                    type: "timestamp"
                },
                startedAt: {
                    type: "timestamp"
                },
                startedBy: {},
                stopCode: {},
                stoppedAt: {
                    type: "timestamp"
                },
                stoppedReason: {},
                stoppingAt: {
                    type: "timestamp"
                },
                tags: {
                    shape: "Sa"
                },
                taskArn: {},
                taskDefinitionArn: {},
                version: {
                    type: "long"
                },
                ephemeralStorage: {
                    shape: "S56"
                }
            }
        },
        S6r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    bindIP: {},
                    containerPort: {
                        type: "integer"
                    },
                    hostPort: {
                        type: "integer"
                    },
                    protocol: {},
                    containerPortRange: {},
                    hostPortRange: {}
                }
            }
        },
        S70: {
            type: "structure",
            members: {
                containerOverrides: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {},
                            command: {
                                shape: "Sr"
                            },
                            environment: {
                                shape: "S3e"
                            },
                            environmentFiles: {
                                shape: "S3f"
                            },
                            cpu: {
                                type: "integer"
                            },
                            memory: {
                                type: "integer"
                            },
                            memoryReservation: {
                                type: "integer"
                            },
                            resourceRequirements: {
                                shape: "S46"
                            }
                        }
                    }
                },
                cpu: {},
                inferenceAcceleratorOverrides: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            deviceName: {},
                            deviceType: {}
                        }
                    }
                },
                executionRoleArn: {},
                memory: {},
                taskRoleArn: {},
                ephemeralStorage: {
                    shape: "S56"
                }
            }
        },
        S7e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    taskArn: {},
                    protectionEnabled: {
                        type: "boolean"
                    },
                    expirationDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        S8r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "attachmentArn", "status" ],
                members: {
                    attachmentArn: {},
                    status: {}
                }
            }
        }
    },
    paginators: {
        ListAccountSettings: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "settings"
        },
        ListAttributes: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "attributes"
        },
        ListClusters: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "clusterArns"
        },
        ListContainerInstances: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "containerInstanceArns"
        },
        ListServices: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "serviceArns"
        },
        ListServicesByNamespace: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "serviceArns"
        },
        ListTaskDefinitionFamilies: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "families"
        },
        ListTaskDefinitions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "taskDefinitionArns"
        },
        ListTasks: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "taskArns"
        }
    },
    waiters: {
        TasksRunning: {
            delay: 6,
            operation: "DescribeTasks",
            maxAttempts: 100,
            acceptors: [ {
                expected: "STOPPED",
                matcher: "pathAny",
                state: "failure",
                argument: "tasks[].lastStatus"
            }, {
                expected: "MISSING",
                matcher: "pathAny",
                state: "failure",
                argument: "failures[].reason"
            }, {
                expected: "RUNNING",
                matcher: "pathAll",
                state: "success",
                argument: "tasks[].lastStatus"
            } ]
        },
        TasksStopped: {
            delay: 6,
            operation: "DescribeTasks",
            maxAttempts: 100,
            acceptors: [ {
                expected: "STOPPED",
                matcher: "pathAll",
                state: "success",
                argument: "tasks[].lastStatus"
            } ]
        },
        ServicesStable: {
            delay: 15,
            operation: "DescribeServices",
            maxAttempts: 40,
            acceptors: [ {
                expected: "MISSING",
                matcher: "pathAny",
                state: "failure",
                argument: "failures[].reason"
            }, {
                expected: "DRAINING",
                matcher: "pathAny",
                state: "failure",
                argument: "services[].status"
            }, {
                expected: "INACTIVE",
                matcher: "pathAny",
                state: "failure",
                argument: "services[].status"
            }, {
                expected: true,
                matcher: "path",
                state: "success",
                argument: "length(services[?!(length(deployments) == `1` && runningCount == desiredCount)]) == `0`"
            } ]
        },
        ServicesInactive: {
            delay: 15,
            operation: "DescribeServices",
            maxAttempts: 40,
            acceptors: [ {
                expected: "MISSING",
                matcher: "pathAny",
                state: "failure",
                argument: "failures[].reason"
            }, {
                expected: "INACTIVE",
                matcher: "pathAny",
                state: "success",
                argument: "services[].status"
            } ]
        }
    }
};

AWS.apiLoader.services["efs"] = {};

AWS.EFS = AWS.Service.defineService("efs", [ "2015-02-01" ]);

AWS.apiLoader.services["efs"]["2015-02-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-02-01",
        endpointPrefix: "elasticfilesystem",
        protocol: "rest-json",
        serviceAbbreviation: "EFS",
        serviceFullName: "Amazon Elastic File System",
        serviceId: "EFS",
        signatureVersion: "v4",
        uid: "elasticfilesystem-2015-02-01"
    },
    operations: {
        CreateAccessPoint: {
            http: {
                requestUri: "/2015-02-01/access-points",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ClientToken", "FileSystemId" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S3"
                    },
                    FileSystemId: {},
                    PosixUser: {
                        shape: "S8"
                    },
                    RootDirectory: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                shape: "Si"
            }
        },
        CreateFileSystem: {
            http: {
                requestUri: "/2015-02-01/file-systems",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "CreationToken" ],
                members: {
                    CreationToken: {
                        idempotencyToken: true
                    },
                    PerformanceMode: {},
                    Encrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    ThroughputMode: {},
                    ProvisionedThroughputInMibps: {
                        type: "double"
                    },
                    AvailabilityZoneName: {},
                    Backup: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                shape: "Sx"
            }
        },
        CreateMountTarget: {
            http: {
                requestUri: "/2015-02-01/mount-targets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId", "SubnetId" ],
                members: {
                    FileSystemId: {},
                    SubnetId: {},
                    IpAddress: {},
                    SecurityGroups: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                shape: "S1c"
            }
        },
        CreateReplicationConfiguration: {
            http: {
                requestUri: "/2015-02-01/file-systems/{SourceFileSystemId}/replication-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SourceFileSystemId", "Destinations" ],
                members: {
                    SourceFileSystemId: {
                        location: "uri",
                        locationName: "SourceFileSystemId"
                    },
                    Destinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Region: {},
                                AvailabilityZoneName: {},
                                KmsKeyId: {},
                                FileSystemId: {}
                            }
                        }
                    }
                }
            },
            output: {
                shape: "S1k"
            }
        },
        CreateTags: {
            http: {
                requestUri: "/2015-02-01/create-tags/{FileSystemId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FileSystemId", "Tags" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Use TagResource."
        },
        DeleteAccessPoint: {
            http: {
                method: "DELETE",
                requestUri: "/2015-02-01/access-points/{AccessPointId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccessPointId" ],
                members: {
                    AccessPointId: {
                        location: "uri",
                        locationName: "AccessPointId"
                    }
                }
            }
        },
        DeleteFileSystem: {
            http: {
                method: "DELETE",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    }
                }
            }
        },
        DeleteFileSystemPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    }
                }
            }
        },
        DeleteMountTarget: {
            http: {
                method: "DELETE",
                requestUri: "/2015-02-01/mount-targets/{MountTargetId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MountTargetId" ],
                members: {
                    MountTargetId: {
                        location: "uri",
                        locationName: "MountTargetId"
                    }
                }
            }
        },
        DeleteReplicationConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/2015-02-01/file-systems/{SourceFileSystemId}/replication-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "SourceFileSystemId" ],
                members: {
                    SourceFileSystemId: {
                        location: "uri",
                        locationName: "SourceFileSystemId"
                    }
                }
            }
        },
        DeleteTags: {
            http: {
                requestUri: "/2015-02-01/delete-tags/{FileSystemId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FileSystemId", "TagKeys" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    },
                    TagKeys: {
                        shape: "S1v"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Use UntagResource."
        },
        DescribeAccessPoints: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/access-points",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    AccessPointId: {
                        location: "querystring",
                        locationName: "AccessPointId"
                    },
                    FileSystemId: {
                        location: "querystring",
                        locationName: "FileSystemId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessPoints: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAccountPreferences: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/account-preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceIdPreference: {
                        shape: "S23"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeBackupPolicy: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}/backup-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    }
                }
            },
            output: {
                shape: "S28"
            }
        },
        DescribeFileSystemPolicy: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    }
                }
            },
            output: {
                shape: "S2c"
            }
        },
        DescribeFileSystems: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/file-systems",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    CreationToken: {
                        location: "querystring",
                        locationName: "CreationToken"
                    },
                    FileSystemId: {
                        location: "querystring",
                        locationName: "FileSystemId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    FileSystems: {
                        type: "list",
                        member: {
                            shape: "Sx"
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeLifecycleConfiguration: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}/lifecycle-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    }
                }
            },
            output: {
                shape: "S2k"
            }
        },
        DescribeMountTargetSecurityGroups: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/mount-targets/{MountTargetId}/security-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MountTargetId" ],
                members: {
                    MountTargetId: {
                        location: "uri",
                        locationName: "MountTargetId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SecurityGroups" ],
                members: {
                    SecurityGroups: {
                        shape: "S1a"
                    }
                }
            }
        },
        DescribeMountTargets: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/mount-targets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    FileSystemId: {
                        location: "querystring",
                        locationName: "FileSystemId"
                    },
                    MountTargetId: {
                        location: "querystring",
                        locationName: "MountTargetId"
                    },
                    AccessPointId: {
                        location: "querystring",
                        locationName: "AccessPointId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    MountTargets: {
                        type: "list",
                        member: {
                            shape: "S1c"
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeReplicationConfigurations: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/file-systems/replication-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FileSystemId: {
                        location: "querystring",
                        locationName: "FileSystemId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Replications: {
                        type: "list",
                        member: {
                            shape: "S1k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeTags: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/tags/{FileSystemId}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Marker: {},
                    Tags: {
                        shape: "S3"
                    },
                    NextMarker: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Use ListTagsForResource."
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2015-02-01/resource-tags/{ResourceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S3"
                    },
                    NextToken: {}
                }
            }
        },
        ModifyMountTargetSecurityGroups: {
            http: {
                method: "PUT",
                requestUri: "/2015-02-01/mount-targets/{MountTargetId}/security-groups",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MountTargetId" ],
                members: {
                    MountTargetId: {
                        location: "uri",
                        locationName: "MountTargetId"
                    },
                    SecurityGroups: {
                        shape: "S1a"
                    }
                }
            }
        },
        PutAccountPreferences: {
            http: {
                method: "PUT",
                requestUri: "/2015-02-01/account-preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceIdType" ],
                members: {
                    ResourceIdType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceIdPreference: {
                        shape: "S23"
                    }
                }
            }
        },
        PutBackupPolicy: {
            http: {
                method: "PUT",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}/backup-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId", "BackupPolicy" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    },
                    BackupPolicy: {
                        shape: "S29"
                    }
                }
            },
            output: {
                shape: "S28"
            }
        },
        PutFileSystemPolicy: {
            http: {
                method: "PUT",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId", "Policy" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    },
                    Policy: {},
                    BypassPolicyLockoutSafetyCheck: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S2c"
            }
        },
        PutLifecycleConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}/lifecycle-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId", "LifecyclePolicies" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    },
                    LifecyclePolicies: {
                        shape: "S2l"
                    }
                }
            },
            output: {
                shape: "S2k"
            }
        },
        TagResource: {
            http: {
                requestUri: "/2015-02-01/resource-tags/{ResourceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "Tags" ],
                members: {
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/2015-02-01/resource-tags/{ResourceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "TagKeys" ],
                members: {
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    TagKeys: {
                        shape: "S1v",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                }
            }
        },
        UpdateFileSystem: {
            http: {
                method: "PUT",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    },
                    ThroughputMode: {},
                    ProvisionedThroughputInMibps: {
                        type: "double"
                    }
                }
            },
            output: {
                shape: "Sx"
            }
        },
        UpdateFileSystemProtection: {
            http: {
                method: "PUT",
                requestUri: "/2015-02-01/file-systems/{FileSystemId}/protection",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {
                        location: "uri",
                        locationName: "FileSystemId"
                    },
                    ReplicationOverwriteProtection: {}
                }
            },
            output: {
                shape: "S15"
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S8: {
            type: "structure",
            required: [ "Uid", "Gid" ],
            members: {
                Uid: {
                    type: "long"
                },
                Gid: {
                    type: "long"
                },
                SecondaryGids: {
                    type: "list",
                    member: {
                        type: "long"
                    }
                }
            }
        },
        Sc: {
            type: "structure",
            members: {
                Path: {},
                CreationInfo: {
                    type: "structure",
                    required: [ "OwnerUid", "OwnerGid", "Permissions" ],
                    members: {
                        OwnerUid: {
                            type: "long"
                        },
                        OwnerGid: {
                            type: "long"
                        },
                        Permissions: {}
                    }
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                ClientToken: {},
                Name: {},
                Tags: {
                    shape: "S3"
                },
                AccessPointId: {},
                AccessPointArn: {},
                FileSystemId: {},
                PosixUser: {
                    shape: "S8"
                },
                RootDirectory: {
                    shape: "Sc"
                },
                OwnerId: {},
                LifeCycleState: {}
            }
        },
        Sx: {
            type: "structure",
            required: [ "OwnerId", "CreationToken", "FileSystemId", "CreationTime", "LifeCycleState", "NumberOfMountTargets", "SizeInBytes", "PerformanceMode", "Tags" ],
            members: {
                OwnerId: {},
                CreationToken: {},
                FileSystemId: {},
                FileSystemArn: {},
                CreationTime: {
                    type: "timestamp"
                },
                LifeCycleState: {},
                Name: {},
                NumberOfMountTargets: {
                    type: "integer"
                },
                SizeInBytes: {
                    type: "structure",
                    required: [ "Value" ],
                    members: {
                        Value: {
                            type: "long"
                        },
                        Timestamp: {
                            type: "timestamp"
                        },
                        ValueInIA: {
                            type: "long"
                        },
                        ValueInStandard: {
                            type: "long"
                        },
                        ValueInArchive: {
                            type: "long"
                        }
                    }
                },
                PerformanceMode: {},
                Encrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                ThroughputMode: {},
                ProvisionedThroughputInMibps: {
                    type: "double"
                },
                AvailabilityZoneName: {},
                AvailabilityZoneId: {},
                Tags: {
                    shape: "S3"
                },
                FileSystemProtection: {
                    shape: "S15"
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                ReplicationOverwriteProtection: {}
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1c: {
            type: "structure",
            required: [ "MountTargetId", "FileSystemId", "SubnetId", "LifeCycleState" ],
            members: {
                OwnerId: {},
                MountTargetId: {},
                FileSystemId: {},
                SubnetId: {},
                LifeCycleState: {},
                IpAddress: {},
                NetworkInterfaceId: {},
                AvailabilityZoneId: {},
                AvailabilityZoneName: {},
                VpcId: {}
            }
        },
        S1k: {
            type: "structure",
            required: [ "SourceFileSystemId", "SourceFileSystemRegion", "SourceFileSystemArn", "OriginalSourceFileSystemArn", "CreationTime", "Destinations" ],
            members: {
                SourceFileSystemId: {},
                SourceFileSystemRegion: {},
                SourceFileSystemArn: {},
                OriginalSourceFileSystemArn: {},
                CreationTime: {
                    type: "timestamp"
                },
                Destinations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Status", "FileSystemId", "Region" ],
                        members: {
                            Status: {},
                            FileSystemId: {},
                            Region: {},
                            LastReplicatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        S1v: {
            type: "list",
            member: {}
        },
        S23: {
            type: "structure",
            members: {
                ResourceIdType: {},
                Resources: {
                    type: "list",
                    member: {}
                }
            }
        },
        S28: {
            type: "structure",
            members: {
                BackupPolicy: {
                    shape: "S29"
                }
            }
        },
        S29: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {}
            }
        },
        S2c: {
            type: "structure",
            members: {
                FileSystemId: {},
                Policy: {}
            }
        },
        S2k: {
            type: "structure",
            members: {
                LifecyclePolicies: {
                    shape: "S2l"
                }
            }
        },
        S2l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TransitionToIA: {},
                    TransitionToPrimaryStorageClass: {},
                    TransitionToArchive: {}
                }
            }
        }
    },
    paginators: {
        DescribeAccessPoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccessPoints"
        },
        DescribeFileSystems: {
            input_token: "Marker",
            output_token: "NextMarker",
            limit_key: "MaxItems",
            result_key: "FileSystems"
        },
        DescribeMountTargets: {
            input_token: "Marker",
            output_token: "NextMarker",
            limit_key: "MaxItems",
            result_key: "MountTargets"
        },
        DescribeReplicationConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Replications"
        },
        DescribeTags: {
            input_token: "Marker",
            output_token: "NextMarker",
            limit_key: "MaxItems",
            result_key: "Tags"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["elasticache"] = {};

AWS.ElastiCache = AWS.Service.defineService("elasticache", [ "2015-02-02" ]);

AWS.apiLoader.services["elasticache"]["2015-02-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-02-02",
        endpointPrefix: "elasticache",
        protocol: "query",
        serviceFullName: "Amazon ElastiCache",
        serviceId: "ElastiCache",
        signatureVersion: "v4",
        uid: "elasticache-2015-02-02",
        xmlNamespace: "http://elasticache.amazonaws.com/doc/2015-02-02/"
    },
    operations: {
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "Tags" ],
                members: {
                    ResourceName: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                shape: "S5",
                resultWrapper: "AddTagsToResourceResult"
            }
        },
        AuthorizeCacheSecurityGroupIngress: {
            input: {
                type: "structure",
                required: [ "CacheSecurityGroupName", "EC2SecurityGroupName", "EC2SecurityGroupOwnerId" ],
                members: {
                    CacheSecurityGroupName: {},
                    EC2SecurityGroupName: {},
                    EC2SecurityGroupOwnerId: {}
                }
            },
            output: {
                resultWrapper: "AuthorizeCacheSecurityGroupIngressResult",
                type: "structure",
                members: {
                    CacheSecurityGroup: {
                        shape: "S8"
                    }
                }
            }
        },
        BatchApplyUpdateAction: {
            input: {
                type: "structure",
                required: [ "ServiceUpdateName" ],
                members: {
                    ReplicationGroupIds: {
                        shape: "Sc"
                    },
                    CacheClusterIds: {
                        shape: "Sd"
                    },
                    ServiceUpdateName: {}
                }
            },
            output: {
                shape: "Se",
                resultWrapper: "BatchApplyUpdateActionResult"
            }
        },
        BatchStopUpdateAction: {
            input: {
                type: "structure",
                required: [ "ServiceUpdateName" ],
                members: {
                    ReplicationGroupIds: {
                        shape: "Sc"
                    },
                    CacheClusterIds: {
                        shape: "Sd"
                    },
                    ServiceUpdateName: {}
                }
            },
            output: {
                shape: "Se",
                resultWrapper: "BatchStopUpdateActionResult"
            }
        },
        CompleteMigration: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId" ],
                members: {
                    ReplicationGroupId: {},
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CompleteMigrationResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        },
        CopyServerlessCacheSnapshot: {
            input: {
                type: "structure",
                required: [ "SourceServerlessCacheSnapshotName", "TargetServerlessCacheSnapshotName" ],
                members: {
                    SourceServerlessCacheSnapshotName: {},
                    TargetServerlessCacheSnapshotName: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "CopyServerlessCacheSnapshotResult",
                type: "structure",
                members: {
                    ServerlessCacheSnapshot: {
                        shape: "S1u"
                    }
                }
            }
        },
        CopySnapshot: {
            input: {
                type: "structure",
                required: [ "SourceSnapshotName", "TargetSnapshotName" ],
                members: {
                    SourceSnapshotName: {},
                    TargetSnapshotName: {},
                    TargetBucket: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "CopySnapshotResult",
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S1y"
                    }
                }
            }
        },
        CreateCacheCluster: {
            input: {
                type: "structure",
                required: [ "CacheClusterId" ],
                members: {
                    CacheClusterId: {},
                    ReplicationGroupId: {},
                    AZMode: {},
                    PreferredAvailabilityZone: {},
                    PreferredAvailabilityZones: {
                        shape: "S27"
                    },
                    NumCacheNodes: {
                        type: "integer"
                    },
                    CacheNodeType: {},
                    Engine: {},
                    EngineVersion: {},
                    CacheParameterGroupName: {},
                    CacheSubnetGroupName: {},
                    CacheSecurityGroupNames: {
                        shape: "S28"
                    },
                    SecurityGroupIds: {
                        shape: "S29"
                    },
                    Tags: {
                        shape: "S3"
                    },
                    SnapshotArns: {
                        shape: "S2a"
                    },
                    SnapshotName: {},
                    PreferredMaintenanceWindow: {},
                    Port: {
                        type: "integer"
                    },
                    NotificationTopicArn: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    SnapshotWindow: {},
                    AuthToken: {},
                    OutpostMode: {},
                    PreferredOutpostArn: {},
                    PreferredOutpostArns: {
                        shape: "S2c"
                    },
                    LogDeliveryConfigurations: {
                        shape: "S2d"
                    },
                    TransitEncryptionEnabled: {
                        type: "boolean"
                    },
                    NetworkType: {},
                    IpDiscovery: {}
                }
            },
            output: {
                resultWrapper: "CreateCacheClusterResult",
                type: "structure",
                members: {
                    CacheCluster: {
                        shape: "S2g"
                    }
                }
            }
        },
        CreateCacheParameterGroup: {
            input: {
                type: "structure",
                required: [ "CacheParameterGroupName", "CacheParameterGroupFamily", "Description" ],
                members: {
                    CacheParameterGroupName: {},
                    CacheParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "CreateCacheParameterGroupResult",
                type: "structure",
                members: {
                    CacheParameterGroup: {
                        shape: "S2t"
                    }
                }
            }
        },
        CreateCacheSecurityGroup: {
            input: {
                type: "structure",
                required: [ "CacheSecurityGroupName", "Description" ],
                members: {
                    CacheSecurityGroupName: {},
                    Description: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "CreateCacheSecurityGroupResult",
                type: "structure",
                members: {
                    CacheSecurityGroup: {
                        shape: "S8"
                    }
                }
            }
        },
        CreateCacheSubnetGroup: {
            input: {
                type: "structure",
                required: [ "CacheSubnetGroupName", "CacheSubnetGroupDescription", "SubnetIds" ],
                members: {
                    CacheSubnetGroupName: {},
                    CacheSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S2x"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "CreateCacheSubnetGroupResult",
                type: "structure",
                members: {
                    CacheSubnetGroup: {
                        shape: "S2z"
                    }
                }
            }
        },
        CreateGlobalReplicationGroup: {
            input: {
                type: "structure",
                required: [ "GlobalReplicationGroupIdSuffix", "PrimaryReplicationGroupId" ],
                members: {
                    GlobalReplicationGroupIdSuffix: {},
                    GlobalReplicationGroupDescription: {},
                    PrimaryReplicationGroupId: {}
                }
            },
            output: {
                resultWrapper: "CreateGlobalReplicationGroupResult",
                type: "structure",
                members: {
                    GlobalReplicationGroup: {
                        shape: "S37"
                    }
                }
            }
        },
        CreateReplicationGroup: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId", "ReplicationGroupDescription" ],
                members: {
                    ReplicationGroupId: {},
                    ReplicationGroupDescription: {},
                    GlobalReplicationGroupId: {},
                    PrimaryClusterId: {},
                    AutomaticFailoverEnabled: {
                        type: "boolean"
                    },
                    MultiAZEnabled: {
                        type: "boolean"
                    },
                    NumCacheClusters: {
                        type: "integer"
                    },
                    PreferredCacheClusterAZs: {
                        shape: "S23"
                    },
                    NumNodeGroups: {
                        type: "integer"
                    },
                    ReplicasPerNodeGroup: {
                        type: "integer"
                    },
                    NodeGroupConfiguration: {
                        type: "list",
                        member: {
                            shape: "S21",
                            locationName: "NodeGroupConfiguration"
                        }
                    },
                    CacheNodeType: {},
                    Engine: {},
                    EngineVersion: {},
                    CacheParameterGroupName: {},
                    CacheSubnetGroupName: {},
                    CacheSecurityGroupNames: {
                        shape: "S28"
                    },
                    SecurityGroupIds: {
                        shape: "S29"
                    },
                    Tags: {
                        shape: "S3"
                    },
                    SnapshotArns: {
                        shape: "S2a"
                    },
                    SnapshotName: {},
                    PreferredMaintenanceWindow: {},
                    Port: {
                        type: "integer"
                    },
                    NotificationTopicArn: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    SnapshotWindow: {},
                    AuthToken: {},
                    TransitEncryptionEnabled: {
                        type: "boolean"
                    },
                    AtRestEncryptionEnabled: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    UserGroupIds: {
                        type: "list",
                        member: {}
                    },
                    LogDeliveryConfigurations: {
                        shape: "S2d"
                    },
                    DataTieringEnabled: {
                        type: "boolean"
                    },
                    NetworkType: {},
                    IpDiscovery: {},
                    TransitEncryptionMode: {},
                    ClusterMode: {},
                    ServerlessCacheSnapshotName: {}
                }
            },
            output: {
                resultWrapper: "CreateReplicationGroupResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        },
        CreateServerlessCache: {
            input: {
                type: "structure",
                required: [ "ServerlessCacheName", "Engine" ],
                members: {
                    ServerlessCacheName: {},
                    Description: {},
                    Engine: {},
                    MajorEngineVersion: {},
                    CacheUsageLimits: {
                        shape: "S3h"
                    },
                    KmsKeyId: {},
                    SecurityGroupIds: {
                        shape: "S29"
                    },
                    SnapshotArnsToRestore: {
                        shape: "S2a"
                    },
                    Tags: {
                        shape: "S3"
                    },
                    UserGroupId: {},
                    SubnetIds: {
                        shape: "S3l"
                    },
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    DailySnapshotTime: {}
                }
            },
            output: {
                resultWrapper: "CreateServerlessCacheResult",
                type: "structure",
                members: {
                    ServerlessCache: {
                        shape: "S3n"
                    }
                }
            }
        },
        CreateServerlessCacheSnapshot: {
            input: {
                type: "structure",
                required: [ "ServerlessCacheSnapshotName", "ServerlessCacheName" ],
                members: {
                    ServerlessCacheSnapshotName: {},
                    ServerlessCacheName: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "CreateServerlessCacheSnapshotResult",
                type: "structure",
                members: {
                    ServerlessCacheSnapshot: {
                        shape: "S1u"
                    }
                }
            }
        },
        CreateSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotName" ],
                members: {
                    ReplicationGroupId: {},
                    CacheClusterId: {},
                    SnapshotName: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "CreateSnapshotResult",
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S1y"
                    }
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "UserId", "UserName", "Engine", "AccessString" ],
                members: {
                    UserId: {},
                    UserName: {},
                    Engine: {},
                    Passwords: {
                        shape: "S3w"
                    },
                    AccessString: {},
                    NoPasswordRequired: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S3"
                    },
                    AuthenticationMode: {
                        shape: "S3y"
                    }
                }
            },
            output: {
                shape: "S40",
                resultWrapper: "CreateUserResult"
            }
        },
        CreateUserGroup: {
            input: {
                type: "structure",
                required: [ "UserGroupId", "Engine" ],
                members: {
                    UserGroupId: {},
                    Engine: {},
                    UserIds: {
                        shape: "S44"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                shape: "S45",
                resultWrapper: "CreateUserGroupResult"
            }
        },
        DecreaseNodeGroupsInGlobalReplicationGroup: {
            input: {
                type: "structure",
                required: [ "GlobalReplicationGroupId", "NodeGroupCount", "ApplyImmediately" ],
                members: {
                    GlobalReplicationGroupId: {},
                    NodeGroupCount: {
                        type: "integer"
                    },
                    GlobalNodeGroupsToRemove: {
                        shape: "S4b"
                    },
                    GlobalNodeGroupsToRetain: {
                        shape: "S4b"
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DecreaseNodeGroupsInGlobalReplicationGroupResult",
                type: "structure",
                members: {
                    GlobalReplicationGroup: {
                        shape: "S37"
                    }
                }
            }
        },
        DecreaseReplicaCount: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId", "ApplyImmediately" ],
                members: {
                    ReplicationGroupId: {},
                    NewReplicaCount: {
                        type: "integer"
                    },
                    ReplicaConfiguration: {
                        shape: "S4e"
                    },
                    ReplicasToRemove: {
                        type: "list",
                        member: {}
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DecreaseReplicaCountResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        },
        DeleteCacheCluster: {
            input: {
                type: "structure",
                required: [ "CacheClusterId" ],
                members: {
                    CacheClusterId: {},
                    FinalSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteCacheClusterResult",
                type: "structure",
                members: {
                    CacheCluster: {
                        shape: "S2g"
                    }
                }
            }
        },
        DeleteCacheParameterGroup: {
            input: {
                type: "structure",
                required: [ "CacheParameterGroupName" ],
                members: {
                    CacheParameterGroupName: {}
                }
            }
        },
        DeleteCacheSecurityGroup: {
            input: {
                type: "structure",
                required: [ "CacheSecurityGroupName" ],
                members: {
                    CacheSecurityGroupName: {}
                }
            }
        },
        DeleteCacheSubnetGroup: {
            input: {
                type: "structure",
                required: [ "CacheSubnetGroupName" ],
                members: {
                    CacheSubnetGroupName: {}
                }
            }
        },
        DeleteGlobalReplicationGroup: {
            input: {
                type: "structure",
                required: [ "GlobalReplicationGroupId", "RetainPrimaryReplicationGroup" ],
                members: {
                    GlobalReplicationGroupId: {},
                    RetainPrimaryReplicationGroup: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DeleteGlobalReplicationGroupResult",
                type: "structure",
                members: {
                    GlobalReplicationGroup: {
                        shape: "S37"
                    }
                }
            }
        },
        DeleteReplicationGroup: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId" ],
                members: {
                    ReplicationGroupId: {},
                    RetainPrimaryCluster: {
                        type: "boolean"
                    },
                    FinalSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteReplicationGroupResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        },
        DeleteServerlessCache: {
            input: {
                type: "structure",
                required: [ "ServerlessCacheName" ],
                members: {
                    ServerlessCacheName: {},
                    FinalSnapshotName: {}
                }
            },
            output: {
                resultWrapper: "DeleteServerlessCacheResult",
                type: "structure",
                members: {
                    ServerlessCache: {
                        shape: "S3n"
                    }
                }
            }
        },
        DeleteServerlessCacheSnapshot: {
            input: {
                type: "structure",
                required: [ "ServerlessCacheSnapshotName" ],
                members: {
                    ServerlessCacheSnapshotName: {}
                }
            },
            output: {
                resultWrapper: "DeleteServerlessCacheSnapshotResult",
                type: "structure",
                members: {
                    ServerlessCacheSnapshot: {
                        shape: "S1u"
                    }
                }
            }
        },
        DeleteSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotName" ],
                members: {
                    SnapshotName: {}
                }
            },
            output: {
                resultWrapper: "DeleteSnapshotResult",
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S1y"
                    }
                }
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    UserId: {}
                }
            },
            output: {
                shape: "S40",
                resultWrapper: "DeleteUserResult"
            }
        },
        DeleteUserGroup: {
            input: {
                type: "structure",
                required: [ "UserGroupId" ],
                members: {
                    UserGroupId: {}
                }
            },
            output: {
                shape: "S45",
                resultWrapper: "DeleteUserGroupResult"
            }
        },
        DescribeCacheClusters: {
            input: {
                type: "structure",
                members: {
                    CacheClusterId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    ShowCacheNodeInfo: {
                        type: "boolean"
                    },
                    ShowCacheClustersNotInReplicationGroups: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeCacheClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    CacheClusters: {
                        type: "list",
                        member: {
                            shape: "S2g",
                            locationName: "CacheCluster"
                        }
                    }
                }
            }
        },
        DescribeCacheEngineVersions: {
            input: {
                type: "structure",
                members: {
                    Engine: {},
                    EngineVersion: {},
                    CacheParameterGroupFamily: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    DefaultOnly: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeCacheEngineVersionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    CacheEngineVersions: {
                        type: "list",
                        member: {
                            locationName: "CacheEngineVersion",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                CacheParameterGroupFamily: {},
                                CacheEngineDescription: {},
                                CacheEngineVersionDescription: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeCacheParameterGroups: {
            input: {
                type: "structure",
                members: {
                    CacheParameterGroupName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeCacheParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    CacheParameterGroups: {
                        type: "list",
                        member: {
                            shape: "S2t",
                            locationName: "CacheParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeCacheParameters: {
            input: {
                type: "structure",
                required: [ "CacheParameterGroupName" ],
                members: {
                    CacheParameterGroupName: {},
                    Source: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeCacheParametersResult",
                type: "structure",
                members: {
                    Marker: {},
                    Parameters: {
                        shape: "S5b"
                    },
                    CacheNodeTypeSpecificParameters: {
                        shape: "S5e"
                    }
                }
            }
        },
        DescribeCacheSecurityGroups: {
            input: {
                type: "structure",
                members: {
                    CacheSecurityGroupName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeCacheSecurityGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    CacheSecurityGroups: {
                        type: "list",
                        member: {
                            shape: "S8",
                            locationName: "CacheSecurityGroup"
                        }
                    }
                }
            }
        },
        DescribeCacheSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    CacheSubnetGroupName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeCacheSubnetGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    CacheSubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S2z",
                            locationName: "CacheSubnetGroup"
                        }
                    }
                }
            }
        },
        DescribeEngineDefaultParameters: {
            input: {
                type: "structure",
                required: [ "CacheParameterGroupFamily" ],
                members: {
                    CacheParameterGroupFamily: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEngineDefaultParametersResult",
                type: "structure",
                members: {
                    EngineDefaults: {
                        type: "structure",
                        members: {
                            CacheParameterGroupFamily: {},
                            Marker: {},
                            Parameters: {
                                shape: "S5b"
                            },
                            CacheNodeTypeSpecificParameters: {
                                shape: "S5e"
                            }
                        },
                        wrapper: true
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceIdentifier: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Events: {
                        type: "list",
                        member: {
                            locationName: "Event",
                            type: "structure",
                            members: {
                                SourceIdentifier: {},
                                SourceType: {},
                                Message: {},
                                Date: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeGlobalReplicationGroups: {
            input: {
                type: "structure",
                members: {
                    GlobalReplicationGroupId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    ShowMemberInfo: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeGlobalReplicationGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    GlobalReplicationGroups: {
                        type: "list",
                        member: {
                            shape: "S37",
                            locationName: "GlobalReplicationGroup"
                        }
                    }
                }
            }
        },
        DescribeReplicationGroups: {
            input: {
                type: "structure",
                members: {
                    ReplicationGroupId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeReplicationGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ReplicationGroups: {
                        type: "list",
                        member: {
                            shape: "So",
                            locationName: "ReplicationGroup"
                        }
                    }
                }
            }
        },
        DescribeReservedCacheNodes: {
            input: {
                type: "structure",
                members: {
                    ReservedCacheNodeId: {},
                    ReservedCacheNodesOfferingId: {},
                    CacheNodeType: {},
                    Duration: {},
                    ProductDescription: {},
                    OfferingType: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeReservedCacheNodesResult",
                type: "structure",
                members: {
                    Marker: {},
                    ReservedCacheNodes: {
                        type: "list",
                        member: {
                            shape: "S65",
                            locationName: "ReservedCacheNode"
                        }
                    }
                }
            }
        },
        DescribeReservedCacheNodesOfferings: {
            input: {
                type: "structure",
                members: {
                    ReservedCacheNodesOfferingId: {},
                    CacheNodeType: {},
                    Duration: {},
                    ProductDescription: {},
                    OfferingType: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeReservedCacheNodesOfferingsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ReservedCacheNodesOfferings: {
                        type: "list",
                        member: {
                            locationName: "ReservedCacheNodesOffering",
                            type: "structure",
                            members: {
                                ReservedCacheNodesOfferingId: {},
                                CacheNodeType: {},
                                Duration: {
                                    type: "integer"
                                },
                                FixedPrice: {
                                    type: "double"
                                },
                                UsagePrice: {
                                    type: "double"
                                },
                                ProductDescription: {},
                                OfferingType: {},
                                RecurringCharges: {
                                    shape: "S66"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeServerlessCacheSnapshots: {
            input: {
                type: "structure",
                members: {
                    ServerlessCacheName: {},
                    ServerlessCacheSnapshotName: {},
                    SnapshotType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeServerlessCacheSnapshotsResult",
                type: "structure",
                members: {
                    NextToken: {},
                    ServerlessCacheSnapshots: {
                        type: "list",
                        member: {
                            shape: "S1u",
                            locationName: "ServerlessCacheSnapshot"
                        }
                    }
                }
            }
        },
        DescribeServerlessCaches: {
            input: {
                type: "structure",
                members: {
                    ServerlessCacheName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeServerlessCachesResult",
                type: "structure",
                members: {
                    NextToken: {},
                    ServerlessCaches: {
                        type: "list",
                        member: {
                            shape: "S3n"
                        }
                    }
                }
            }
        },
        DescribeServiceUpdates: {
            input: {
                type: "structure",
                members: {
                    ServiceUpdateName: {},
                    ServiceUpdateStatus: {
                        shape: "S6j"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeServiceUpdatesResult",
                type: "structure",
                members: {
                    Marker: {},
                    ServiceUpdates: {
                        type: "list",
                        member: {
                            locationName: "ServiceUpdate",
                            type: "structure",
                            members: {
                                ServiceUpdateName: {},
                                ServiceUpdateReleaseDate: {
                                    type: "timestamp"
                                },
                                ServiceUpdateEndDate: {
                                    type: "timestamp"
                                },
                                ServiceUpdateSeverity: {},
                                ServiceUpdateRecommendedApplyByDate: {
                                    type: "timestamp"
                                },
                                ServiceUpdateStatus: {},
                                ServiceUpdateDescription: {},
                                ServiceUpdateType: {},
                                Engine: {},
                                EngineVersion: {},
                                AutoUpdateAfterRecommendedApplyByDate: {
                                    type: "boolean"
                                },
                                EstimatedUpdateTime: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeSnapshots: {
            input: {
                type: "structure",
                members: {
                    ReplicationGroupId: {},
                    CacheClusterId: {},
                    SnapshotName: {},
                    SnapshotSource: {},
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    ShowNodeGroupConfig: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeSnapshotsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Snapshots: {
                        type: "list",
                        member: {
                            shape: "S1y",
                            locationName: "Snapshot"
                        }
                    }
                }
            }
        },
        DescribeUpdateActions: {
            input: {
                type: "structure",
                members: {
                    ServiceUpdateName: {},
                    ReplicationGroupIds: {
                        shape: "Sc"
                    },
                    CacheClusterIds: {
                        shape: "Sd"
                    },
                    Engine: {},
                    ServiceUpdateStatus: {
                        shape: "S6j"
                    },
                    ServiceUpdateTimeRange: {
                        type: "structure",
                        members: {
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    UpdateActionStatus: {
                        type: "list",
                        member: {}
                    },
                    ShowNodeLevelUpdateStatus: {
                        type: "boolean"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeUpdateActionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    UpdateActions: {
                        type: "list",
                        member: {
                            locationName: "UpdateAction",
                            type: "structure",
                            members: {
                                ReplicationGroupId: {},
                                CacheClusterId: {},
                                ServiceUpdateName: {},
                                ServiceUpdateReleaseDate: {
                                    type: "timestamp"
                                },
                                ServiceUpdateSeverity: {},
                                ServiceUpdateStatus: {},
                                ServiceUpdateRecommendedApplyByDate: {
                                    type: "timestamp"
                                },
                                ServiceUpdateType: {},
                                UpdateActionAvailableDate: {
                                    type: "timestamp"
                                },
                                UpdateActionStatus: {},
                                NodesUpdated: {},
                                UpdateActionStatusModifiedDate: {
                                    type: "timestamp"
                                },
                                SlaMet: {},
                                NodeGroupUpdateStatus: {
                                    type: "list",
                                    member: {
                                        locationName: "NodeGroupUpdateStatus",
                                        type: "structure",
                                        members: {
                                            NodeGroupId: {},
                                            NodeGroupMemberUpdateStatus: {
                                                type: "list",
                                                member: {
                                                    locationName: "NodeGroupMemberUpdateStatus",
                                                    type: "structure",
                                                    members: {
                                                        CacheClusterId: {},
                                                        CacheNodeId: {},
                                                        NodeUpdateStatus: {},
                                                        NodeDeletionDate: {
                                                            type: "timestamp"
                                                        },
                                                        NodeUpdateStartDate: {
                                                            type: "timestamp"
                                                        },
                                                        NodeUpdateEndDate: {
                                                            type: "timestamp"
                                                        },
                                                        NodeUpdateInitiatedBy: {},
                                                        NodeUpdateInitiatedDate: {
                                                            type: "timestamp"
                                                        },
                                                        NodeUpdateStatusModifiedDate: {
                                                            type: "timestamp"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                CacheNodeUpdateStatus: {
                                    type: "list",
                                    member: {
                                        locationName: "CacheNodeUpdateStatus",
                                        type: "structure",
                                        members: {
                                            CacheNodeId: {},
                                            NodeUpdateStatus: {},
                                            NodeDeletionDate: {
                                                type: "timestamp"
                                            },
                                            NodeUpdateStartDate: {
                                                type: "timestamp"
                                            },
                                            NodeUpdateEndDate: {
                                                type: "timestamp"
                                            },
                                            NodeUpdateInitiatedBy: {},
                                            NodeUpdateInitiatedDate: {
                                                type: "timestamp"
                                            },
                                            NodeUpdateStatusModifiedDate: {
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                },
                                EstimatedUpdateTime: {},
                                Engine: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeUserGroups: {
            input: {
                type: "structure",
                members: {
                    UserGroupId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeUserGroupsResult",
                type: "structure",
                members: {
                    UserGroups: {
                        type: "list",
                        member: {
                            shape: "S45"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeUsers: {
            input: {
                type: "structure",
                members: {
                    Engine: {},
                    UserId: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeUsersResult",
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            shape: "S40"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DisassociateGlobalReplicationGroup: {
            input: {
                type: "structure",
                required: [ "GlobalReplicationGroupId", "ReplicationGroupId", "ReplicationGroupRegion" ],
                members: {
                    GlobalReplicationGroupId: {},
                    ReplicationGroupId: {},
                    ReplicationGroupRegion: {}
                }
            },
            output: {
                resultWrapper: "DisassociateGlobalReplicationGroupResult",
                type: "structure",
                members: {
                    GlobalReplicationGroup: {
                        shape: "S37"
                    }
                }
            }
        },
        ExportServerlessCacheSnapshot: {
            input: {
                type: "structure",
                required: [ "ServerlessCacheSnapshotName", "S3BucketName" ],
                members: {
                    ServerlessCacheSnapshotName: {},
                    S3BucketName: {}
                }
            },
            output: {
                resultWrapper: "ExportServerlessCacheSnapshotResult",
                type: "structure",
                members: {
                    ServerlessCacheSnapshot: {
                        shape: "S1u"
                    }
                }
            }
        },
        FailoverGlobalReplicationGroup: {
            input: {
                type: "structure",
                required: [ "GlobalReplicationGroupId", "PrimaryRegion", "PrimaryReplicationGroupId" ],
                members: {
                    GlobalReplicationGroupId: {},
                    PrimaryRegion: {},
                    PrimaryReplicationGroupId: {}
                }
            },
            output: {
                resultWrapper: "FailoverGlobalReplicationGroupResult",
                type: "structure",
                members: {
                    GlobalReplicationGroup: {
                        shape: "S37"
                    }
                }
            }
        },
        IncreaseNodeGroupsInGlobalReplicationGroup: {
            input: {
                type: "structure",
                required: [ "GlobalReplicationGroupId", "NodeGroupCount", "ApplyImmediately" ],
                members: {
                    GlobalReplicationGroupId: {},
                    NodeGroupCount: {
                        type: "integer"
                    },
                    RegionalConfigurations: {
                        type: "list",
                        member: {
                            locationName: "RegionalConfiguration",
                            type: "structure",
                            required: [ "ReplicationGroupId", "ReplicationGroupRegion", "ReshardingConfiguration" ],
                            members: {
                                ReplicationGroupId: {},
                                ReplicationGroupRegion: {},
                                ReshardingConfiguration: {
                                    shape: "S7s"
                                }
                            }
                        }
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "IncreaseNodeGroupsInGlobalReplicationGroupResult",
                type: "structure",
                members: {
                    GlobalReplicationGroup: {
                        shape: "S37"
                    }
                }
            }
        },
        IncreaseReplicaCount: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId", "ApplyImmediately" ],
                members: {
                    ReplicationGroupId: {},
                    NewReplicaCount: {
                        type: "integer"
                    },
                    ReplicaConfiguration: {
                        shape: "S4e"
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "IncreaseReplicaCountResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        },
        ListAllowedNodeTypeModifications: {
            input: {
                type: "structure",
                members: {
                    CacheClusterId: {},
                    ReplicationGroupId: {}
                }
            },
            output: {
                resultWrapper: "ListAllowedNodeTypeModificationsResult",
                type: "structure",
                members: {
                    ScaleUpModifications: {
                        shape: "S7z"
                    },
                    ScaleDownModifications: {
                        shape: "S7z"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceName" ],
                members: {
                    ResourceName: {}
                }
            },
            output: {
                shape: "S5",
                resultWrapper: "ListTagsForResourceResult"
            }
        },
        ModifyCacheCluster: {
            input: {
                type: "structure",
                required: [ "CacheClusterId" ],
                members: {
                    CacheClusterId: {},
                    NumCacheNodes: {
                        type: "integer"
                    },
                    CacheNodeIdsToRemove: {
                        shape: "S2i"
                    },
                    AZMode: {},
                    NewAvailabilityZones: {
                        shape: "S27"
                    },
                    CacheSecurityGroupNames: {
                        shape: "S28"
                    },
                    SecurityGroupIds: {
                        shape: "S29"
                    },
                    PreferredMaintenanceWindow: {},
                    NotificationTopicArn: {},
                    CacheParameterGroupName: {},
                    NotificationTopicStatus: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    SnapshotWindow: {},
                    CacheNodeType: {},
                    AuthToken: {},
                    AuthTokenUpdateStrategy: {},
                    LogDeliveryConfigurations: {
                        shape: "S2d"
                    },
                    IpDiscovery: {}
                }
            },
            output: {
                resultWrapper: "ModifyCacheClusterResult",
                type: "structure",
                members: {
                    CacheCluster: {
                        shape: "S2g"
                    }
                }
            }
        },
        ModifyCacheParameterGroup: {
            input: {
                type: "structure",
                required: [ "CacheParameterGroupName", "ParameterNameValues" ],
                members: {
                    CacheParameterGroupName: {},
                    ParameterNameValues: {
                        shape: "S85"
                    }
                }
            },
            output: {
                shape: "S87",
                resultWrapper: "ModifyCacheParameterGroupResult"
            }
        },
        ModifyCacheSubnetGroup: {
            input: {
                type: "structure",
                required: [ "CacheSubnetGroupName" ],
                members: {
                    CacheSubnetGroupName: {},
                    CacheSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S2x"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyCacheSubnetGroupResult",
                type: "structure",
                members: {
                    CacheSubnetGroup: {
                        shape: "S2z"
                    }
                }
            }
        },
        ModifyGlobalReplicationGroup: {
            input: {
                type: "structure",
                required: [ "GlobalReplicationGroupId", "ApplyImmediately" ],
                members: {
                    GlobalReplicationGroupId: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    CacheNodeType: {},
                    EngineVersion: {},
                    CacheParameterGroupName: {},
                    GlobalReplicationGroupDescription: {},
                    AutomaticFailoverEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyGlobalReplicationGroupResult",
                type: "structure",
                members: {
                    GlobalReplicationGroup: {
                        shape: "S37"
                    }
                }
            }
        },
        ModifyReplicationGroup: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId" ],
                members: {
                    ReplicationGroupId: {},
                    ReplicationGroupDescription: {},
                    PrimaryClusterId: {},
                    SnapshottingClusterId: {},
                    AutomaticFailoverEnabled: {
                        type: "boolean"
                    },
                    MultiAZEnabled: {
                        type: "boolean"
                    },
                    NodeGroupId: {
                        deprecated: true
                    },
                    CacheSecurityGroupNames: {
                        shape: "S28"
                    },
                    SecurityGroupIds: {
                        shape: "S29"
                    },
                    PreferredMaintenanceWindow: {},
                    NotificationTopicArn: {},
                    CacheParameterGroupName: {},
                    NotificationTopicStatus: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    SnapshotWindow: {},
                    CacheNodeType: {},
                    AuthToken: {},
                    AuthTokenUpdateStrategy: {},
                    UserGroupIdsToAdd: {
                        shape: "Sx"
                    },
                    UserGroupIdsToRemove: {
                        shape: "Sx"
                    },
                    RemoveUserGroups: {
                        type: "boolean"
                    },
                    LogDeliveryConfigurations: {
                        shape: "S2d"
                    },
                    IpDiscovery: {},
                    TransitEncryptionEnabled: {
                        type: "boolean"
                    },
                    TransitEncryptionMode: {},
                    ClusterMode: {}
                }
            },
            output: {
                resultWrapper: "ModifyReplicationGroupResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        },
        ModifyReplicationGroupShardConfiguration: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId", "NodeGroupCount", "ApplyImmediately" ],
                members: {
                    ReplicationGroupId: {},
                    NodeGroupCount: {
                        type: "integer"
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    ReshardingConfiguration: {
                        shape: "S7s"
                    },
                    NodeGroupsToRemove: {
                        type: "list",
                        member: {
                            locationName: "NodeGroupToRemove"
                        }
                    },
                    NodeGroupsToRetain: {
                        type: "list",
                        member: {
                            locationName: "NodeGroupToRetain"
                        }
                    }
                }
            },
            output: {
                resultWrapper: "ModifyReplicationGroupShardConfigurationResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        },
        ModifyServerlessCache: {
            input: {
                type: "structure",
                required: [ "ServerlessCacheName" ],
                members: {
                    ServerlessCacheName: {},
                    Description: {},
                    CacheUsageLimits: {
                        shape: "S3h"
                    },
                    RemoveUserGroup: {
                        type: "boolean"
                    },
                    UserGroupId: {},
                    SecurityGroupIds: {
                        shape: "S29"
                    },
                    SnapshotRetentionLimit: {
                        type: "integer"
                    },
                    DailySnapshotTime: {}
                }
            },
            output: {
                resultWrapper: "ModifyServerlessCacheResult",
                type: "structure",
                members: {
                    ServerlessCache: {
                        shape: "S3n"
                    }
                }
            }
        },
        ModifyUser: {
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    UserId: {},
                    AccessString: {},
                    AppendAccessString: {},
                    Passwords: {
                        shape: "S3w"
                    },
                    NoPasswordRequired: {
                        type: "boolean"
                    },
                    AuthenticationMode: {
                        shape: "S3y"
                    }
                }
            },
            output: {
                shape: "S40",
                resultWrapper: "ModifyUserResult"
            }
        },
        ModifyUserGroup: {
            input: {
                type: "structure",
                required: [ "UserGroupId" ],
                members: {
                    UserGroupId: {},
                    UserIdsToAdd: {
                        shape: "S44"
                    },
                    UserIdsToRemove: {
                        shape: "S44"
                    }
                }
            },
            output: {
                shape: "S45",
                resultWrapper: "ModifyUserGroupResult"
            }
        },
        PurchaseReservedCacheNodesOffering: {
            input: {
                type: "structure",
                required: [ "ReservedCacheNodesOfferingId" ],
                members: {
                    ReservedCacheNodesOfferingId: {},
                    ReservedCacheNodeId: {},
                    CacheNodeCount: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "PurchaseReservedCacheNodesOfferingResult",
                type: "structure",
                members: {
                    ReservedCacheNode: {
                        shape: "S65"
                    }
                }
            }
        },
        RebalanceSlotsInGlobalReplicationGroup: {
            input: {
                type: "structure",
                required: [ "GlobalReplicationGroupId", "ApplyImmediately" ],
                members: {
                    GlobalReplicationGroupId: {},
                    ApplyImmediately: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RebalanceSlotsInGlobalReplicationGroupResult",
                type: "structure",
                members: {
                    GlobalReplicationGroup: {
                        shape: "S37"
                    }
                }
            }
        },
        RebootCacheCluster: {
            input: {
                type: "structure",
                required: [ "CacheClusterId", "CacheNodeIdsToReboot" ],
                members: {
                    CacheClusterId: {},
                    CacheNodeIdsToReboot: {
                        shape: "S2i"
                    }
                }
            },
            output: {
                resultWrapper: "RebootCacheClusterResult",
                type: "structure",
                members: {
                    CacheCluster: {
                        shape: "S2g"
                    }
                }
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "TagKeys" ],
                members: {
                    ResourceName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                shape: "S5",
                resultWrapper: "RemoveTagsFromResourceResult"
            }
        },
        ResetCacheParameterGroup: {
            input: {
                type: "structure",
                required: [ "CacheParameterGroupName" ],
                members: {
                    CacheParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    ParameterNameValues: {
                        shape: "S85"
                    }
                }
            },
            output: {
                shape: "S87",
                resultWrapper: "ResetCacheParameterGroupResult"
            }
        },
        RevokeCacheSecurityGroupIngress: {
            input: {
                type: "structure",
                required: [ "CacheSecurityGroupName", "EC2SecurityGroupName", "EC2SecurityGroupOwnerId" ],
                members: {
                    CacheSecurityGroupName: {},
                    EC2SecurityGroupName: {},
                    EC2SecurityGroupOwnerId: {}
                }
            },
            output: {
                resultWrapper: "RevokeCacheSecurityGroupIngressResult",
                type: "structure",
                members: {
                    CacheSecurityGroup: {
                        shape: "S8"
                    }
                }
            }
        },
        StartMigration: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId", "CustomerNodeEndpointList" ],
                members: {
                    ReplicationGroupId: {},
                    CustomerNodeEndpointList: {
                        shape: "S8y"
                    }
                }
            },
            output: {
                resultWrapper: "StartMigrationResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        },
        TestFailover: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId", "NodeGroupId" ],
                members: {
                    ReplicationGroupId: {},
                    NodeGroupId: {}
                }
            },
            output: {
                resultWrapper: "TestFailoverResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        },
        TestMigration: {
            input: {
                type: "structure",
                required: [ "ReplicationGroupId", "CustomerNodeEndpointList" ],
                members: {
                    ReplicationGroupId: {},
                    CustomerNodeEndpointList: {
                        shape: "S8y"
                    }
                }
            },
            output: {
                resultWrapper: "TestMigrationResult",
                type: "structure",
                members: {
                    ReplicationGroup: {
                        shape: "So"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                locationName: "Tag",
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S5: {
            type: "structure",
            members: {
                TagList: {
                    shape: "S3"
                }
            }
        },
        S8: {
            type: "structure",
            members: {
                OwnerId: {},
                CacheSecurityGroupName: {},
                Description: {},
                EC2SecurityGroups: {
                    type: "list",
                    member: {
                        locationName: "EC2SecurityGroup",
                        type: "structure",
                        members: {
                            Status: {},
                            EC2SecurityGroupName: {},
                            EC2SecurityGroupOwnerId: {}
                        }
                    }
                },
                ARN: {}
            },
            wrapper: true
        },
        Sc: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "list",
            member: {}
        },
        Se: {
            type: "structure",
            members: {
                ProcessedUpdateActions: {
                    type: "list",
                    member: {
                        locationName: "ProcessedUpdateAction",
                        type: "structure",
                        members: {
                            ReplicationGroupId: {},
                            CacheClusterId: {},
                            ServiceUpdateName: {},
                            UpdateActionStatus: {}
                        }
                    }
                },
                UnprocessedUpdateActions: {
                    type: "list",
                    member: {
                        locationName: "UnprocessedUpdateAction",
                        type: "structure",
                        members: {
                            ReplicationGroupId: {},
                            CacheClusterId: {},
                            ServiceUpdateName: {},
                            ErrorType: {},
                            ErrorMessage: {}
                        }
                    }
                }
            }
        },
        So: {
            type: "structure",
            members: {
                ReplicationGroupId: {},
                Description: {},
                GlobalReplicationGroupInfo: {
                    type: "structure",
                    members: {
                        GlobalReplicationGroupId: {},
                        GlobalReplicationGroupMemberRole: {}
                    }
                },
                Status: {},
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        PrimaryClusterId: {},
                        AutomaticFailoverStatus: {},
                        Resharding: {
                            type: "structure",
                            members: {
                                SlotMigration: {
                                    type: "structure",
                                    members: {
                                        ProgressPercentage: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        },
                        AuthTokenStatus: {},
                        UserGroups: {
                            type: "structure",
                            members: {
                                UserGroupIdsToAdd: {
                                    shape: "Sx"
                                },
                                UserGroupIdsToRemove: {
                                    shape: "Sx"
                                }
                            }
                        },
                        LogDeliveryConfigurations: {
                            shape: "Sz"
                        },
                        TransitEncryptionEnabled: {
                            type: "boolean"
                        },
                        TransitEncryptionMode: {},
                        ClusterMode: {}
                    }
                },
                MemberClusters: {
                    type: "list",
                    member: {
                        locationName: "ClusterId"
                    }
                },
                NodeGroups: {
                    type: "list",
                    member: {
                        locationName: "NodeGroup",
                        type: "structure",
                        members: {
                            NodeGroupId: {},
                            Status: {},
                            PrimaryEndpoint: {
                                shape: "S1d"
                            },
                            ReaderEndpoint: {
                                shape: "S1d"
                            },
                            Slots: {},
                            NodeGroupMembers: {
                                type: "list",
                                member: {
                                    locationName: "NodeGroupMember",
                                    type: "structure",
                                    members: {
                                        CacheClusterId: {},
                                        CacheNodeId: {},
                                        ReadEndpoint: {
                                            shape: "S1d"
                                        },
                                        PreferredAvailabilityZone: {},
                                        PreferredOutpostArn: {},
                                        CurrentRole: {}
                                    }
                                }
                            }
                        }
                    }
                },
                SnapshottingClusterId: {},
                AutomaticFailover: {},
                MultiAZ: {},
                ConfigurationEndpoint: {
                    shape: "S1d"
                },
                SnapshotRetentionLimit: {
                    type: "integer"
                },
                SnapshotWindow: {},
                ClusterEnabled: {
                    type: "boolean"
                },
                CacheNodeType: {},
                AuthTokenEnabled: {
                    type: "boolean"
                },
                AuthTokenLastModifiedDate: {
                    type: "timestamp"
                },
                TransitEncryptionEnabled: {
                    type: "boolean"
                },
                AtRestEncryptionEnabled: {
                    type: "boolean"
                },
                MemberClustersOutpostArns: {
                    type: "list",
                    member: {
                        locationName: "ReplicationGroupOutpostArn"
                    }
                },
                KmsKeyId: {},
                ARN: {},
                UserGroupIds: {
                    shape: "Sx"
                },
                LogDeliveryConfigurations: {
                    shape: "S1m"
                },
                ReplicationGroupCreateTime: {
                    type: "timestamp"
                },
                DataTiering: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                NetworkType: {},
                IpDiscovery: {},
                TransitEncryptionMode: {},
                ClusterMode: {}
            },
            wrapper: true
        },
        Sx: {
            type: "list",
            member: {}
        },
        Sz: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LogType: {},
                    DestinationType: {},
                    DestinationDetails: {
                        shape: "S13"
                    },
                    LogFormat: {}
                }
            },
            locationName: "PendingLogDeliveryConfiguration"
        },
        S13: {
            type: "structure",
            members: {
                CloudWatchLogsDetails: {
                    type: "structure",
                    members: {
                        LogGroup: {}
                    }
                },
                KinesisFirehoseDetails: {
                    type: "structure",
                    members: {
                        DeliveryStream: {}
                    }
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                Address: {},
                Port: {
                    type: "integer"
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                locationName: "LogDeliveryConfiguration",
                type: "structure",
                members: {
                    LogType: {},
                    DestinationType: {},
                    DestinationDetails: {
                        shape: "S13"
                    },
                    LogFormat: {},
                    Status: {},
                    Message: {}
                }
            }
        },
        S1u: {
            type: "structure",
            members: {
                ServerlessCacheSnapshotName: {},
                ARN: {},
                KmsKeyId: {},
                SnapshotType: {},
                Status: {},
                CreateTime: {
                    type: "timestamp"
                },
                ExpiryTime: {
                    type: "timestamp"
                },
                BytesUsedForCache: {},
                ServerlessCacheConfiguration: {
                    type: "structure",
                    members: {
                        ServerlessCacheName: {},
                        Engine: {},
                        MajorEngineVersion: {}
                    }
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                SnapshotName: {},
                ReplicationGroupId: {},
                ReplicationGroupDescription: {},
                CacheClusterId: {},
                SnapshotStatus: {},
                SnapshotSource: {},
                CacheNodeType: {},
                Engine: {},
                EngineVersion: {},
                NumCacheNodes: {
                    type: "integer"
                },
                PreferredAvailabilityZone: {},
                PreferredOutpostArn: {},
                CacheClusterCreateTime: {
                    type: "timestamp"
                },
                PreferredMaintenanceWindow: {},
                TopicArn: {},
                Port: {
                    type: "integer"
                },
                CacheParameterGroupName: {},
                CacheSubnetGroupName: {},
                VpcId: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                SnapshotRetentionLimit: {
                    type: "integer"
                },
                SnapshotWindow: {},
                NumNodeGroups: {
                    type: "integer"
                },
                AutomaticFailover: {},
                NodeSnapshots: {
                    type: "list",
                    member: {
                        locationName: "NodeSnapshot",
                        type: "structure",
                        members: {
                            CacheClusterId: {},
                            NodeGroupId: {},
                            CacheNodeId: {},
                            NodeGroupConfiguration: {
                                shape: "S21"
                            },
                            CacheSize: {},
                            CacheNodeCreateTime: {
                                type: "timestamp"
                            },
                            SnapshotCreateTime: {
                                type: "timestamp"
                            }
                        },
                        wrapper: true
                    }
                },
                KmsKeyId: {},
                ARN: {},
                DataTiering: {}
            },
            wrapper: true
        },
        S21: {
            type: "structure",
            members: {
                NodeGroupId: {},
                Slots: {},
                ReplicaCount: {
                    type: "integer"
                },
                PrimaryAvailabilityZone: {},
                ReplicaAvailabilityZones: {
                    shape: "S23"
                },
                PrimaryOutpostArn: {},
                ReplicaOutpostArns: {
                    type: "list",
                    member: {
                        locationName: "OutpostArn"
                    }
                }
            }
        },
        S23: {
            type: "list",
            member: {
                locationName: "AvailabilityZone"
            }
        },
        S27: {
            type: "list",
            member: {
                locationName: "PreferredAvailabilityZone"
            }
        },
        S28: {
            type: "list",
            member: {
                locationName: "CacheSecurityGroupName"
            }
        },
        S29: {
            type: "list",
            member: {
                locationName: "SecurityGroupId"
            }
        },
        S2a: {
            type: "list",
            member: {
                locationName: "SnapshotArn"
            }
        },
        S2c: {
            type: "list",
            member: {
                locationName: "PreferredOutpostArn"
            }
        },
        S2d: {
            type: "list",
            member: {
                locationName: "LogDeliveryConfigurationRequest",
                type: "structure",
                members: {
                    LogType: {},
                    DestinationType: {},
                    DestinationDetails: {
                        shape: "S13"
                    },
                    LogFormat: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        S2g: {
            type: "structure",
            members: {
                CacheClusterId: {},
                ConfigurationEndpoint: {
                    shape: "S1d"
                },
                ClientDownloadLandingPage: {},
                CacheNodeType: {},
                Engine: {},
                EngineVersion: {},
                CacheClusterStatus: {},
                NumCacheNodes: {
                    type: "integer"
                },
                PreferredAvailabilityZone: {},
                PreferredOutpostArn: {},
                CacheClusterCreateTime: {
                    type: "timestamp"
                },
                PreferredMaintenanceWindow: {},
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        NumCacheNodes: {
                            type: "integer"
                        },
                        CacheNodeIdsToRemove: {
                            shape: "S2i"
                        },
                        EngineVersion: {},
                        CacheNodeType: {},
                        AuthTokenStatus: {},
                        LogDeliveryConfigurations: {
                            shape: "Sz"
                        },
                        TransitEncryptionEnabled: {
                            type: "boolean"
                        },
                        TransitEncryptionMode: {}
                    }
                },
                NotificationConfiguration: {
                    type: "structure",
                    members: {
                        TopicArn: {},
                        TopicStatus: {}
                    }
                },
                CacheSecurityGroups: {
                    type: "list",
                    member: {
                        locationName: "CacheSecurityGroup",
                        type: "structure",
                        members: {
                            CacheSecurityGroupName: {},
                            Status: {}
                        }
                    }
                },
                CacheParameterGroup: {
                    type: "structure",
                    members: {
                        CacheParameterGroupName: {},
                        ParameterApplyStatus: {},
                        CacheNodeIdsToReboot: {
                            shape: "S2i"
                        }
                    }
                },
                CacheSubnetGroupName: {},
                CacheNodes: {
                    type: "list",
                    member: {
                        locationName: "CacheNode",
                        type: "structure",
                        members: {
                            CacheNodeId: {},
                            CacheNodeStatus: {},
                            CacheNodeCreateTime: {
                                type: "timestamp"
                            },
                            Endpoint: {
                                shape: "S1d"
                            },
                            ParameterGroupStatus: {},
                            SourceCacheNodeId: {},
                            CustomerAvailabilityZone: {},
                            CustomerOutpostArn: {}
                        }
                    }
                },
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                SecurityGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SecurityGroupId: {},
                            Status: {}
                        }
                    }
                },
                ReplicationGroupId: {},
                SnapshotRetentionLimit: {
                    type: "integer"
                },
                SnapshotWindow: {},
                AuthTokenEnabled: {
                    type: "boolean"
                },
                AuthTokenLastModifiedDate: {
                    type: "timestamp"
                },
                TransitEncryptionEnabled: {
                    type: "boolean"
                },
                AtRestEncryptionEnabled: {
                    type: "boolean"
                },
                ARN: {},
                ReplicationGroupLogDeliveryEnabled: {
                    type: "boolean"
                },
                LogDeliveryConfigurations: {
                    shape: "S1m"
                },
                NetworkType: {},
                IpDiscovery: {},
                TransitEncryptionMode: {}
            },
            wrapper: true
        },
        S2i: {
            type: "list",
            member: {
                locationName: "CacheNodeId"
            }
        },
        S2t: {
            type: "structure",
            members: {
                CacheParameterGroupName: {},
                CacheParameterGroupFamily: {},
                Description: {},
                IsGlobal: {
                    type: "boolean"
                },
                ARN: {}
            },
            wrapper: true
        },
        S2x: {
            type: "list",
            member: {
                locationName: "SubnetIdentifier"
            }
        },
        S2z: {
            type: "structure",
            members: {
                CacheSubnetGroupName: {},
                CacheSubnetGroupDescription: {},
                VpcId: {},
                Subnets: {
                    type: "list",
                    member: {
                        locationName: "Subnet",
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {
                                type: "structure",
                                members: {
                                    Name: {}
                                },
                                wrapper: true
                            },
                            SubnetOutpost: {
                                type: "structure",
                                members: {
                                    SubnetOutpostArn: {}
                                }
                            },
                            SupportedNetworkTypes: {
                                shape: "S34"
                            }
                        }
                    }
                },
                ARN: {},
                SupportedNetworkTypes: {
                    shape: "S34"
                }
            },
            wrapper: true
        },
        S34: {
            type: "list",
            member: {}
        },
        S37: {
            type: "structure",
            members: {
                GlobalReplicationGroupId: {},
                GlobalReplicationGroupDescription: {},
                Status: {},
                CacheNodeType: {},
                Engine: {},
                EngineVersion: {},
                Members: {
                    type: "list",
                    member: {
                        locationName: "GlobalReplicationGroupMember",
                        type: "structure",
                        members: {
                            ReplicationGroupId: {},
                            ReplicationGroupRegion: {},
                            Role: {},
                            AutomaticFailover: {},
                            Status: {}
                        },
                        wrapper: true
                    }
                },
                ClusterEnabled: {
                    type: "boolean"
                },
                GlobalNodeGroups: {
                    type: "list",
                    member: {
                        locationName: "GlobalNodeGroup",
                        type: "structure",
                        members: {
                            GlobalNodeGroupId: {},
                            Slots: {}
                        }
                    }
                },
                AuthTokenEnabled: {
                    type: "boolean"
                },
                TransitEncryptionEnabled: {
                    type: "boolean"
                },
                AtRestEncryptionEnabled: {
                    type: "boolean"
                },
                ARN: {}
            },
            wrapper: true
        },
        S3h: {
            type: "structure",
            members: {
                DataStorage: {
                    type: "structure",
                    required: [ "Maximum", "Unit" ],
                    members: {
                        Maximum: {
                            type: "integer"
                        },
                        Unit: {}
                    }
                },
                ECPUPerSecond: {
                    type: "structure",
                    required: [ "Maximum" ],
                    members: {
                        Maximum: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S3l: {
            type: "list",
            member: {
                locationName: "SubnetId"
            }
        },
        S3n: {
            type: "structure",
            members: {
                ServerlessCacheName: {},
                Description: {},
                CreateTime: {
                    type: "timestamp"
                },
                Status: {},
                Engine: {},
                MajorEngineVersion: {},
                FullEngineVersion: {},
                CacheUsageLimits: {
                    shape: "S3h"
                },
                KmsKeyId: {},
                SecurityGroupIds: {
                    shape: "S29"
                },
                Endpoint: {
                    shape: "S1d"
                },
                ReaderEndpoint: {
                    shape: "S1d"
                },
                ARN: {},
                UserGroupId: {},
                SubnetIds: {
                    shape: "S3l"
                },
                SnapshotRetentionLimit: {
                    type: "integer"
                },
                DailySnapshotTime: {}
            }
        },
        S3w: {
            type: "list",
            member: {}
        },
        S3y: {
            type: "structure",
            members: {
                Type: {},
                Passwords: {
                    shape: "S3w"
                }
            }
        },
        S40: {
            type: "structure",
            members: {
                UserId: {},
                UserName: {},
                Status: {},
                Engine: {},
                MinimumEngineVersion: {},
                AccessString: {},
                UserGroupIds: {
                    shape: "Sx"
                },
                Authentication: {
                    type: "structure",
                    members: {
                        Type: {},
                        PasswordCount: {
                            type: "integer"
                        }
                    }
                },
                ARN: {}
            }
        },
        S44: {
            type: "list",
            member: {}
        },
        S45: {
            type: "structure",
            members: {
                UserGroupId: {},
                Status: {},
                Engine: {},
                UserIds: {
                    shape: "S46"
                },
                MinimumEngineVersion: {},
                PendingChanges: {
                    type: "structure",
                    members: {
                        UserIdsToRemove: {
                            shape: "S46"
                        },
                        UserIdsToAdd: {
                            shape: "S46"
                        }
                    }
                },
                ReplicationGroups: {
                    type: "list",
                    member: {}
                },
                ServerlessCaches: {
                    type: "list",
                    member: {}
                },
                ARN: {}
            }
        },
        S46: {
            type: "list",
            member: {}
        },
        S4b: {
            type: "list",
            member: {
                locationName: "GlobalNodeGroupId"
            }
        },
        S4e: {
            type: "list",
            member: {
                locationName: "ConfigureShard",
                type: "structure",
                required: [ "NodeGroupId", "NewReplicaCount" ],
                members: {
                    NodeGroupId: {},
                    NewReplicaCount: {
                        type: "integer"
                    },
                    PreferredAvailabilityZones: {
                        shape: "S27"
                    },
                    PreferredOutpostArns: {
                        shape: "S2c"
                    }
                }
            }
        },
        S5b: {
            type: "list",
            member: {
                locationName: "Parameter",
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterValue: {},
                    Description: {},
                    Source: {},
                    DataType: {},
                    AllowedValues: {},
                    IsModifiable: {
                        type: "boolean"
                    },
                    MinimumEngineVersion: {},
                    ChangeType: {}
                }
            }
        },
        S5e: {
            type: "list",
            member: {
                locationName: "CacheNodeTypeSpecificParameter",
                type: "structure",
                members: {
                    ParameterName: {},
                    Description: {},
                    Source: {},
                    DataType: {},
                    AllowedValues: {},
                    IsModifiable: {
                        type: "boolean"
                    },
                    MinimumEngineVersion: {},
                    CacheNodeTypeSpecificValues: {
                        type: "list",
                        member: {
                            locationName: "CacheNodeTypeSpecificValue",
                            type: "structure",
                            members: {
                                CacheNodeType: {},
                                Value: {}
                            }
                        }
                    },
                    ChangeType: {}
                }
            }
        },
        S65: {
            type: "structure",
            members: {
                ReservedCacheNodeId: {},
                ReservedCacheNodesOfferingId: {},
                CacheNodeType: {},
                StartTime: {
                    type: "timestamp"
                },
                Duration: {
                    type: "integer"
                },
                FixedPrice: {
                    type: "double"
                },
                UsagePrice: {
                    type: "double"
                },
                CacheNodeCount: {
                    type: "integer"
                },
                ProductDescription: {},
                OfferingType: {},
                State: {},
                RecurringCharges: {
                    shape: "S66"
                },
                ReservationARN: {}
            },
            wrapper: true
        },
        S66: {
            type: "list",
            member: {
                locationName: "RecurringCharge",
                type: "structure",
                members: {
                    RecurringChargeAmount: {
                        type: "double"
                    },
                    RecurringChargeFrequency: {}
                },
                wrapper: true
            }
        },
        S6j: {
            type: "list",
            member: {}
        },
        S7s: {
            type: "list",
            member: {
                locationName: "ReshardingConfiguration",
                type: "structure",
                members: {
                    NodeGroupId: {},
                    PreferredAvailabilityZones: {
                        shape: "S23"
                    }
                }
            }
        },
        S7z: {
            type: "list",
            member: {}
        },
        S85: {
            type: "list",
            member: {
                locationName: "ParameterNameValue",
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterValue: {}
                }
            }
        },
        S87: {
            type: "structure",
            members: {
                CacheParameterGroupName: {}
            }
        },
        S8y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Address: {},
                    Port: {
                        type: "integer"
                    }
                }
            }
        }
    },
    paginators: {
        DescribeCacheClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "CacheClusters"
        },
        DescribeCacheEngineVersions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "CacheEngineVersions"
        },
        DescribeCacheParameterGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "CacheParameterGroups"
        },
        DescribeCacheParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Parameters"
        },
        DescribeCacheSecurityGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "CacheSecurityGroups"
        },
        DescribeCacheSubnetGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "CacheSubnetGroups"
        },
        DescribeEngineDefaultParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "EngineDefaults.Marker",
            result_key: "EngineDefaults.Parameters"
        },
        DescribeEvents: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Events"
        },
        DescribeGlobalReplicationGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "GlobalReplicationGroups"
        },
        DescribeReplicationGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReplicationGroups"
        },
        DescribeReservedCacheNodes: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReservedCacheNodes"
        },
        DescribeReservedCacheNodesOfferings: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReservedCacheNodesOfferings"
        },
        DescribeServerlessCacheSnapshots: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ServerlessCacheSnapshots"
        },
        DescribeServerlessCaches: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ServerlessCaches"
        },
        DescribeServiceUpdates: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ServiceUpdates"
        },
        DescribeSnapshots: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Snapshots"
        },
        DescribeUpdateActions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "UpdateActions"
        },
        DescribeUserGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "UserGroups"
        },
        DescribeUsers: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Users"
        }
    },
    waiters: {
        CacheClusterAvailable: {
            acceptors: [ {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "available",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "deleted",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "deleting",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "incompatible-network",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "restore-failed",
                matcher: "pathAny",
                state: "failure"
            } ],
            delay: 15,
            description: "Wait until ElastiCache cluster is available.",
            maxAttempts: 40,
            operation: "DescribeCacheClusters"
        },
        CacheClusterDeleted: {
            acceptors: [ {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "deleted",
                matcher: "pathAll",
                state: "success"
            }, {
                expected: "CacheClusterNotFound",
                matcher: "error",
                state: "success"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "available",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "creating",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "incompatible-network",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "modifying",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "restore-failed",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "CacheClusters[].CacheClusterStatus",
                expected: "snapshotting",
                matcher: "pathAny",
                state: "failure"
            } ],
            delay: 15,
            description: "Wait until ElastiCache cluster is deleted.",
            maxAttempts: 40,
            operation: "DescribeCacheClusters"
        },
        ReplicationGroupAvailable: {
            acceptors: [ {
                argument: "ReplicationGroups[].Status",
                expected: "available",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "ReplicationGroups[].Status",
                expected: "deleted",
                matcher: "pathAny",
                state: "failure"
            } ],
            delay: 15,
            description: "Wait until ElastiCache replication group is available.",
            maxAttempts: 40,
            operation: "DescribeReplicationGroups"
        },
        ReplicationGroupDeleted: {
            acceptors: [ {
                argument: "ReplicationGroups[].Status",
                expected: "deleted",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "ReplicationGroups[].Status",
                expected: "available",
                matcher: "pathAny",
                state: "failure"
            }, {
                expected: "ReplicationGroupNotFoundFault",
                matcher: "error",
                state: "success"
            } ],
            delay: 15,
            description: "Wait until ElastiCache replication group is deleted.",
            maxAttempts: 40,
            operation: "DescribeReplicationGroups"
        }
    }
};

AWS.apiLoader.services["elasticbeanstalk"] = {};

AWS.ElasticBeanstalk = AWS.Service.defineService("elasticbeanstalk", [ "2010-12-01" ]);

AWS.apiLoader.services["elasticbeanstalk"]["2010-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2010-12-01",
        endpointPrefix: "elasticbeanstalk",
        protocol: "query",
        serviceAbbreviation: "Elastic Beanstalk",
        serviceFullName: "AWS Elastic Beanstalk",
        serviceId: "Elastic Beanstalk",
        signatureVersion: "v4",
        uid: "elasticbeanstalk-2010-12-01",
        xmlNamespace: "http://elasticbeanstalk.amazonaws.com/docs/2010-12-01/"
    },
    operations: {
        AbortEnvironmentUpdate: {
            input: {
                type: "structure",
                members: {
                    EnvironmentId: {},
                    EnvironmentName: {}
                }
            }
        },
        ApplyEnvironmentManagedAction: {
            input: {
                type: "structure",
                required: [ "ActionId" ],
                members: {
                    EnvironmentName: {},
                    EnvironmentId: {},
                    ActionId: {}
                }
            },
            output: {
                resultWrapper: "ApplyEnvironmentManagedActionResult",
                type: "structure",
                members: {
                    ActionId: {},
                    ActionDescription: {},
                    ActionType: {},
                    Status: {}
                }
            }
        },
        AssociateEnvironmentOperationsRole: {
            input: {
                type: "structure",
                required: [ "EnvironmentName", "OperationsRole" ],
                members: {
                    EnvironmentName: {},
                    OperationsRole: {}
                }
            }
        },
        CheckDNSAvailability: {
            input: {
                type: "structure",
                required: [ "CNAMEPrefix" ],
                members: {
                    CNAMEPrefix: {}
                }
            },
            output: {
                resultWrapper: "CheckDNSAvailabilityResult",
                type: "structure",
                members: {
                    Available: {
                        type: "boolean"
                    },
                    FullyQualifiedCNAME: {}
                }
            }
        },
        ComposeEnvironments: {
            input: {
                type: "structure",
                members: {
                    ApplicationName: {},
                    GroupName: {},
                    VersionLabels: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                shape: "Sk",
                resultWrapper: "ComposeEnvironmentsResult"
            }
        },
        CreateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    Description: {},
                    ResourceLifecycleConfig: {
                        shape: "S19"
                    },
                    Tags: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                shape: "S1j",
                resultWrapper: "CreateApplicationResult"
            }
        },
        CreateApplicationVersion: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "VersionLabel" ],
                members: {
                    ApplicationName: {},
                    VersionLabel: {},
                    Description: {},
                    SourceBuildInformation: {
                        shape: "S1p"
                    },
                    SourceBundle: {
                        shape: "S1t"
                    },
                    BuildConfiguration: {
                        type: "structure",
                        required: [ "CodeBuildServiceRole", "Image" ],
                        members: {
                            ArtifactName: {},
                            CodeBuildServiceRole: {},
                            ComputeType: {},
                            Image: {},
                            TimeoutInMinutes: {
                                type: "integer"
                            }
                        }
                    },
                    AutoCreateApplication: {
                        type: "boolean"
                    },
                    Process: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                shape: "S21",
                resultWrapper: "CreateApplicationVersionResult"
            }
        },
        CreateConfigurationTemplate: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "TemplateName" ],
                members: {
                    ApplicationName: {},
                    TemplateName: {},
                    SolutionStackName: {},
                    PlatformArn: {},
                    SourceConfiguration: {
                        type: "structure",
                        members: {
                            ApplicationName: {},
                            TemplateName: {}
                        }
                    },
                    EnvironmentId: {},
                    Description: {},
                    OptionSettings: {
                        shape: "S27"
                    },
                    Tags: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                shape: "S2d",
                resultWrapper: "CreateConfigurationTemplateResult"
            }
        },
        CreateEnvironment: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    EnvironmentName: {},
                    GroupName: {},
                    Description: {},
                    CNAMEPrefix: {},
                    Tier: {
                        shape: "S13"
                    },
                    Tags: {
                        shape: "S1f"
                    },
                    VersionLabel: {},
                    TemplateName: {},
                    SolutionStackName: {},
                    PlatformArn: {},
                    OptionSettings: {
                        shape: "S27"
                    },
                    OptionsToRemove: {
                        shape: "S2g"
                    },
                    OperationsRole: {}
                }
            },
            output: {
                shape: "Sm",
                resultWrapper: "CreateEnvironmentResult"
            }
        },
        CreatePlatformVersion: {
            input: {
                type: "structure",
                required: [ "PlatformName", "PlatformVersion", "PlatformDefinitionBundle" ],
                members: {
                    PlatformName: {},
                    PlatformVersion: {},
                    PlatformDefinitionBundle: {
                        shape: "S1t"
                    },
                    EnvironmentName: {},
                    OptionSettings: {
                        shape: "S27"
                    },
                    Tags: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                resultWrapper: "CreatePlatformVersionResult",
                type: "structure",
                members: {
                    PlatformSummary: {
                        shape: "S2m"
                    },
                    Builder: {
                        type: "structure",
                        members: {
                            ARN: {}
                        }
                    }
                }
            }
        },
        CreateStorageLocation: {
            output: {
                resultWrapper: "CreateStorageLocationResult",
                type: "structure",
                members: {
                    S3Bucket: {}
                }
            }
        },
        DeleteApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    TerminateEnvByForce: {
                        type: "boolean"
                    }
                }
            }
        },
        DeleteApplicationVersion: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "VersionLabel" ],
                members: {
                    ApplicationName: {},
                    VersionLabel: {},
                    DeleteSourceBundle: {
                        type: "boolean"
                    }
                }
            }
        },
        DeleteConfigurationTemplate: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "TemplateName" ],
                members: {
                    ApplicationName: {},
                    TemplateName: {}
                }
            }
        },
        DeleteEnvironmentConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "EnvironmentName" ],
                members: {
                    ApplicationName: {},
                    EnvironmentName: {}
                }
            }
        },
        DeletePlatformVersion: {
            input: {
                type: "structure",
                members: {
                    PlatformArn: {}
                }
            },
            output: {
                resultWrapper: "DeletePlatformVersionResult",
                type: "structure",
                members: {
                    PlatformSummary: {
                        shape: "S2m"
                    }
                }
            }
        },
        DescribeAccountAttributes: {
            output: {
                resultWrapper: "DescribeAccountAttributesResult",
                type: "structure",
                members: {
                    ResourceQuotas: {
                        type: "structure",
                        members: {
                            ApplicationQuota: {
                                shape: "S3c"
                            },
                            ApplicationVersionQuota: {
                                shape: "S3c"
                            },
                            EnvironmentQuota: {
                                shape: "S3c"
                            },
                            ConfigurationTemplateQuota: {
                                shape: "S3c"
                            },
                            CustomPlatformQuota: {
                                shape: "S3c"
                            }
                        }
                    }
                }
            }
        },
        DescribeApplicationVersions: {
            input: {
                type: "structure",
                members: {
                    ApplicationName: {},
                    VersionLabels: {
                        shape: "S1m"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeApplicationVersionsResult",
                type: "structure",
                members: {
                    ApplicationVersions: {
                        type: "list",
                        member: {
                            shape: "S22"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeApplications: {
            input: {
                type: "structure",
                members: {
                    ApplicationNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DescribeApplicationsResult",
                type: "structure",
                members: {
                    Applications: {
                        type: "list",
                        member: {
                            shape: "S1k"
                        }
                    }
                }
            }
        },
        DescribeConfigurationOptions: {
            input: {
                type: "structure",
                members: {
                    ApplicationName: {},
                    TemplateName: {},
                    EnvironmentName: {},
                    SolutionStackName: {},
                    PlatformArn: {},
                    Options: {
                        shape: "S2g"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeConfigurationOptionsResult",
                type: "structure",
                members: {
                    SolutionStackName: {},
                    PlatformArn: {},
                    Options: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Namespace: {},
                                Name: {},
                                DefaultValue: {},
                                ChangeSeverity: {},
                                UserDefined: {
                                    type: "boolean"
                                },
                                ValueType: {},
                                ValueOptions: {
                                    type: "list",
                                    member: {}
                                },
                                MinValue: {
                                    type: "integer"
                                },
                                MaxValue: {
                                    type: "integer"
                                },
                                MaxLength: {
                                    type: "integer"
                                },
                                Regex: {
                                    type: "structure",
                                    members: {
                                        Pattern: {},
                                        Label: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeConfigurationSettings: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    TemplateName: {},
                    EnvironmentName: {}
                }
            },
            output: {
                resultWrapper: "DescribeConfigurationSettingsResult",
                type: "structure",
                members: {
                    ConfigurationSettings: {
                        type: "list",
                        member: {
                            shape: "S2d"
                        }
                    }
                }
            }
        },
        DescribeEnvironmentHealth: {
            input: {
                type: "structure",
                members: {
                    EnvironmentName: {},
                    EnvironmentId: {},
                    AttributeNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DescribeEnvironmentHealthResult",
                type: "structure",
                members: {
                    EnvironmentName: {},
                    HealthStatus: {},
                    Status: {},
                    Color: {},
                    Causes: {
                        shape: "S48"
                    },
                    ApplicationMetrics: {
                        shape: "S4a"
                    },
                    InstancesHealth: {
                        type: "structure",
                        members: {
                            NoData: {
                                type: "integer"
                            },
                            Unknown: {
                                type: "integer"
                            },
                            Pending: {
                                type: "integer"
                            },
                            Ok: {
                                type: "integer"
                            },
                            Info: {
                                type: "integer"
                            },
                            Warning: {
                                type: "integer"
                            },
                            Degraded: {
                                type: "integer"
                            },
                            Severe: {
                                type: "integer"
                            }
                        }
                    },
                    RefreshedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeEnvironmentManagedActionHistory: {
            input: {
                type: "structure",
                members: {
                    EnvironmentId: {},
                    EnvironmentName: {},
                    NextToken: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeEnvironmentManagedActionHistoryResult",
                type: "structure",
                members: {
                    ManagedActionHistoryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ActionId: {},
                                ActionType: {},
                                ActionDescription: {},
                                FailureType: {},
                                Status: {},
                                FailureDescription: {},
                                ExecutedTime: {
                                    type: "timestamp"
                                },
                                FinishedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeEnvironmentManagedActions: {
            input: {
                type: "structure",
                members: {
                    EnvironmentName: {},
                    EnvironmentId: {},
                    Status: {}
                }
            },
            output: {
                resultWrapper: "DescribeEnvironmentManagedActionsResult",
                type: "structure",
                members: {
                    ManagedActions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ActionId: {},
                                ActionDescription: {},
                                ActionType: {},
                                Status: {},
                                WindowStartTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeEnvironmentResources: {
            input: {
                type: "structure",
                members: {
                    EnvironmentId: {},
                    EnvironmentName: {}
                }
            },
            output: {
                resultWrapper: "DescribeEnvironmentResourcesResult",
                type: "structure",
                members: {
                    EnvironmentResources: {
                        type: "structure",
                        members: {
                            EnvironmentName: {},
                            AutoScalingGroups: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {}
                                    }
                                }
                            },
                            Instances: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Id: {}
                                    }
                                }
                            },
                            LaunchConfigurations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {}
                                    }
                                }
                            },
                            LaunchTemplates: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Id: {}
                                    }
                                }
                            },
                            LoadBalancers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {}
                                    }
                                }
                            },
                            Triggers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {}
                                    }
                                }
                            },
                            Queues: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        URL: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeEnvironments: {
            input: {
                type: "structure",
                members: {
                    ApplicationName: {},
                    VersionLabel: {},
                    EnvironmentIds: {
                        type: "list",
                        member: {}
                    },
                    EnvironmentNames: {
                        type: "list",
                        member: {}
                    },
                    IncludeDeleted: {
                        type: "boolean"
                    },
                    IncludedDeletedBackTo: {
                        type: "timestamp"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                shape: "Sk",
                resultWrapper: "DescribeEnvironmentsResult"
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    ApplicationName: {},
                    VersionLabel: {},
                    TemplateName: {},
                    EnvironmentId: {},
                    EnvironmentName: {},
                    PlatformArn: {},
                    RequestId: {},
                    Severity: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventsResult",
                type: "structure",
                members: {
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventDate: {
                                    type: "timestamp"
                                },
                                Message: {},
                                ApplicationName: {},
                                VersionLabel: {},
                                TemplateName: {},
                                EnvironmentName: {},
                                PlatformArn: {},
                                RequestId: {},
                                Severity: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstancesHealth: {
            input: {
                type: "structure",
                members: {
                    EnvironmentName: {},
                    EnvironmentId: {},
                    AttributeNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeInstancesHealthResult",
                type: "structure",
                members: {
                    InstanceHealthList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceId: {},
                                HealthStatus: {},
                                Color: {},
                                Causes: {
                                    shape: "S48"
                                },
                                LaunchedAt: {
                                    type: "timestamp"
                                },
                                ApplicationMetrics: {
                                    shape: "S4a"
                                },
                                System: {
                                    type: "structure",
                                    members: {
                                        CPUUtilization: {
                                            type: "structure",
                                            members: {
                                                User: {
                                                    type: "double"
                                                },
                                                Nice: {
                                                    type: "double"
                                                },
                                                System: {
                                                    type: "double"
                                                },
                                                Idle: {
                                                    type: "double"
                                                },
                                                IOWait: {
                                                    type: "double"
                                                },
                                                IRQ: {
                                                    type: "double"
                                                },
                                                SoftIRQ: {
                                                    type: "double"
                                                },
                                                Privileged: {
                                                    type: "double"
                                                }
                                            }
                                        },
                                        LoadAverage: {
                                            type: "list",
                                            member: {
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                Deployment: {
                                    type: "structure",
                                    members: {
                                        VersionLabel: {},
                                        DeploymentId: {
                                            type: "long"
                                        },
                                        Status: {},
                                        DeploymentTime: {
                                            type: "timestamp"
                                        }
                                    }
                                },
                                AvailabilityZone: {},
                                InstanceType: {}
                            }
                        }
                    },
                    RefreshedAt: {
                        type: "timestamp"
                    },
                    NextToken: {}
                }
            }
        },
        DescribePlatformVersion: {
            input: {
                type: "structure",
                members: {
                    PlatformArn: {}
                }
            },
            output: {
                resultWrapper: "DescribePlatformVersionResult",
                type: "structure",
                members: {
                    PlatformDescription: {
                        type: "structure",
                        members: {
                            PlatformArn: {},
                            PlatformOwner: {},
                            PlatformName: {},
                            PlatformVersion: {},
                            SolutionStackName: {},
                            PlatformStatus: {},
                            DateCreated: {
                                type: "timestamp"
                            },
                            DateUpdated: {
                                type: "timestamp"
                            },
                            PlatformCategory: {},
                            Description: {},
                            Maintainer: {},
                            OperatingSystemName: {},
                            OperatingSystemVersion: {},
                            ProgrammingLanguages: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Version: {}
                                    }
                                }
                            },
                            Frameworks: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Version: {}
                                    }
                                }
                            },
                            CustomAmiList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        VirtualizationType: {},
                                        ImageId: {}
                                    }
                                }
                            },
                            SupportedTierList: {
                                shape: "S2s"
                            },
                            SupportedAddonList: {
                                shape: "S2u"
                            },
                            PlatformLifecycleState: {},
                            PlatformBranchName: {},
                            PlatformBranchLifecycleState: {}
                        }
                    }
                }
            }
        },
        DisassociateEnvironmentOperationsRole: {
            input: {
                type: "structure",
                required: [ "EnvironmentName" ],
                members: {
                    EnvironmentName: {}
                }
            }
        },
        ListAvailableSolutionStacks: {
            output: {
                resultWrapper: "ListAvailableSolutionStacksResult",
                type: "structure",
                members: {
                    SolutionStacks: {
                        type: "list",
                        member: {}
                    },
                    SolutionStackDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SolutionStackName: {},
                                PermittedFileTypes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPlatformBranches: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Attribute: {},
                                Operator: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListPlatformBranchesResult",
                type: "structure",
                members: {
                    PlatformBranchSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PlatformName: {},
                                BranchName: {},
                                LifecycleState: {},
                                BranchOrder: {
                                    type: "integer"
                                },
                                SupportedTierList: {
                                    shape: "S2s"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPlatformVersions: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Operator: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListPlatformVersionsResult",
                type: "structure",
                members: {
                    PlatformSummaryList: {
                        type: "list",
                        member: {
                            shape: "S2m"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                resultWrapper: "ListTagsForResourceResult",
                type: "structure",
                members: {
                    ResourceArn: {},
                    ResourceTags: {
                        shape: "S7g"
                    }
                }
            }
        },
        RebuildEnvironment: {
            input: {
                type: "structure",
                members: {
                    EnvironmentId: {},
                    EnvironmentName: {}
                }
            }
        },
        RequestEnvironmentInfo: {
            input: {
                type: "structure",
                required: [ "InfoType" ],
                members: {
                    EnvironmentId: {},
                    EnvironmentName: {},
                    InfoType: {}
                }
            }
        },
        RestartAppServer: {
            input: {
                type: "structure",
                members: {
                    EnvironmentId: {},
                    EnvironmentName: {}
                }
            }
        },
        RetrieveEnvironmentInfo: {
            input: {
                type: "structure",
                required: [ "InfoType" ],
                members: {
                    EnvironmentId: {},
                    EnvironmentName: {},
                    InfoType: {}
                }
            },
            output: {
                resultWrapper: "RetrieveEnvironmentInfoResult",
                type: "structure",
                members: {
                    EnvironmentInfo: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InfoType: {},
                                Ec2InstanceId: {},
                                SampleTimestamp: {
                                    type: "timestamp"
                                },
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        SwapEnvironmentCNAMEs: {
            input: {
                type: "structure",
                members: {
                    SourceEnvironmentId: {},
                    SourceEnvironmentName: {},
                    DestinationEnvironmentId: {},
                    DestinationEnvironmentName: {}
                }
            }
        },
        TerminateEnvironment: {
            input: {
                type: "structure",
                members: {
                    EnvironmentId: {},
                    EnvironmentName: {},
                    TerminateResources: {
                        type: "boolean"
                    },
                    ForceTerminate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "Sm",
                resultWrapper: "TerminateEnvironmentResult"
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    Description: {}
                }
            },
            output: {
                shape: "S1j",
                resultWrapper: "UpdateApplicationResult"
            }
        },
        UpdateApplicationResourceLifecycle: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "ResourceLifecycleConfig" ],
                members: {
                    ApplicationName: {},
                    ResourceLifecycleConfig: {
                        shape: "S19"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateApplicationResourceLifecycleResult",
                type: "structure",
                members: {
                    ApplicationName: {},
                    ResourceLifecycleConfig: {
                        shape: "S19"
                    }
                }
            }
        },
        UpdateApplicationVersion: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "VersionLabel" ],
                members: {
                    ApplicationName: {},
                    VersionLabel: {},
                    Description: {}
                }
            },
            output: {
                shape: "S21",
                resultWrapper: "UpdateApplicationVersionResult"
            }
        },
        UpdateConfigurationTemplate: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "TemplateName" ],
                members: {
                    ApplicationName: {},
                    TemplateName: {},
                    Description: {},
                    OptionSettings: {
                        shape: "S27"
                    },
                    OptionsToRemove: {
                        shape: "S2g"
                    }
                }
            },
            output: {
                shape: "S2d",
                resultWrapper: "UpdateConfigurationTemplateResult"
            }
        },
        UpdateEnvironment: {
            input: {
                type: "structure",
                members: {
                    ApplicationName: {},
                    EnvironmentId: {},
                    EnvironmentName: {},
                    GroupName: {},
                    Description: {},
                    Tier: {
                        shape: "S13"
                    },
                    VersionLabel: {},
                    TemplateName: {},
                    SolutionStackName: {},
                    PlatformArn: {},
                    OptionSettings: {
                        shape: "S27"
                    },
                    OptionsToRemove: {
                        shape: "S2g"
                    }
                }
            },
            output: {
                shape: "Sm",
                resultWrapper: "UpdateEnvironmentResult"
            }
        },
        UpdateTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    TagsToAdd: {
                        shape: "S7g"
                    },
                    TagsToRemove: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ValidateConfigurationSettings: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "OptionSettings" ],
                members: {
                    ApplicationName: {},
                    TemplateName: {},
                    EnvironmentName: {},
                    OptionSettings: {
                        shape: "S27"
                    }
                }
            },
            output: {
                resultWrapper: "ValidateConfigurationSettingsResult",
                type: "structure",
                members: {
                    Messages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Message: {},
                                Severity: {},
                                Namespace: {},
                                OptionName: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        Sk: {
            type: "structure",
            members: {
                Environments: {
                    type: "list",
                    member: {
                        shape: "Sm"
                    }
                },
                NextToken: {}
            }
        },
        Sm: {
            type: "structure",
            members: {
                EnvironmentName: {},
                EnvironmentId: {},
                ApplicationName: {},
                VersionLabel: {},
                SolutionStackName: {},
                PlatformArn: {},
                TemplateName: {},
                Description: {},
                EndpointURL: {},
                CNAME: {},
                DateCreated: {
                    type: "timestamp"
                },
                DateUpdated: {
                    type: "timestamp"
                },
                Status: {},
                AbortableOperationInProgress: {
                    type: "boolean"
                },
                Health: {},
                HealthStatus: {},
                Resources: {
                    type: "structure",
                    members: {
                        LoadBalancer: {
                            type: "structure",
                            members: {
                                LoadBalancerName: {},
                                Domain: {},
                                Listeners: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Protocol: {},
                                            Port: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Tier: {
                    shape: "S13"
                },
                EnvironmentLinks: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            LinkName: {},
                            EnvironmentName: {}
                        }
                    }
                },
                EnvironmentArn: {},
                OperationsRole: {}
            }
        },
        S13: {
            type: "structure",
            members: {
                Name: {},
                Type: {},
                Version: {}
            }
        },
        S19: {
            type: "structure",
            members: {
                ServiceRole: {},
                VersionLifecycleConfig: {
                    type: "structure",
                    members: {
                        MaxCountRule: {
                            type: "structure",
                            required: [ "Enabled" ],
                            members: {
                                Enabled: {
                                    type: "boolean"
                                },
                                MaxCount: {
                                    type: "integer"
                                },
                                DeleteSourceFromS3: {
                                    type: "boolean"
                                }
                            }
                        },
                        MaxAgeRule: {
                            type: "structure",
                            required: [ "Enabled" ],
                            members: {
                                Enabled: {
                                    type: "boolean"
                                },
                                MaxAgeInDays: {
                                    type: "integer"
                                },
                                DeleteSourceFromS3: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1f: {
            type: "list",
            member: {
                shape: "S1g"
            }
        },
        S1g: {
            type: "structure",
            members: {
                Key: {},
                Value: {}
            }
        },
        S1j: {
            type: "structure",
            members: {
                Application: {
                    shape: "S1k"
                }
            }
        },
        S1k: {
            type: "structure",
            members: {
                ApplicationArn: {},
                ApplicationName: {},
                Description: {},
                DateCreated: {
                    type: "timestamp"
                },
                DateUpdated: {
                    type: "timestamp"
                },
                Versions: {
                    shape: "S1m"
                },
                ConfigurationTemplates: {
                    type: "list",
                    member: {}
                },
                ResourceLifecycleConfig: {
                    shape: "S19"
                }
            }
        },
        S1m: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "structure",
            required: [ "SourceType", "SourceRepository", "SourceLocation" ],
            members: {
                SourceType: {},
                SourceRepository: {},
                SourceLocation: {}
            }
        },
        S1t: {
            type: "structure",
            members: {
                S3Bucket: {},
                S3Key: {}
            }
        },
        S21: {
            type: "structure",
            members: {
                ApplicationVersion: {
                    shape: "S22"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                ApplicationVersionArn: {},
                ApplicationName: {},
                Description: {},
                VersionLabel: {},
                SourceBuildInformation: {
                    shape: "S1p"
                },
                BuildArn: {},
                SourceBundle: {
                    shape: "S1t"
                },
                DateCreated: {
                    type: "timestamp"
                },
                DateUpdated: {
                    type: "timestamp"
                },
                Status: {}
            }
        },
        S27: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceName: {},
                    Namespace: {},
                    OptionName: {},
                    Value: {}
                }
            }
        },
        S2d: {
            type: "structure",
            members: {
                SolutionStackName: {},
                PlatformArn: {},
                ApplicationName: {},
                TemplateName: {},
                Description: {},
                EnvironmentName: {},
                DeploymentStatus: {},
                DateCreated: {
                    type: "timestamp"
                },
                DateUpdated: {
                    type: "timestamp"
                },
                OptionSettings: {
                    shape: "S27"
                }
            }
        },
        S2g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceName: {},
                    Namespace: {},
                    OptionName: {}
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                PlatformArn: {},
                PlatformOwner: {},
                PlatformStatus: {},
                PlatformCategory: {},
                OperatingSystemName: {},
                OperatingSystemVersion: {},
                SupportedTierList: {
                    shape: "S2s"
                },
                SupportedAddonList: {
                    shape: "S2u"
                },
                PlatformLifecycleState: {},
                PlatformVersion: {},
                PlatformBranchName: {},
                PlatformBranchLifecycleState: {}
            }
        },
        S2s: {
            type: "list",
            member: {}
        },
        S2u: {
            type: "list",
            member: {}
        },
        S3c: {
            type: "structure",
            members: {
                Maximum: {
                    type: "integer"
                }
            }
        },
        S48: {
            type: "list",
            member: {}
        },
        S4a: {
            type: "structure",
            members: {
                Duration: {
                    type: "integer"
                },
                RequestCount: {
                    type: "integer"
                },
                StatusCodes: {
                    type: "structure",
                    members: {
                        Status2xx: {
                            type: "integer"
                        },
                        Status3xx: {
                            type: "integer"
                        },
                        Status4xx: {
                            type: "integer"
                        },
                        Status5xx: {
                            type: "integer"
                        }
                    }
                },
                Latency: {
                    type: "structure",
                    members: {
                        P999: {
                            type: "double"
                        },
                        P99: {
                            type: "double"
                        },
                        P95: {
                            type: "double"
                        },
                        P90: {
                            type: "double"
                        },
                        P85: {
                            type: "double"
                        },
                        P75: {
                            type: "double"
                        },
                        P50: {
                            type: "double"
                        },
                        P10: {
                            type: "double"
                        }
                    }
                }
            }
        },
        S7g: {
            type: "list",
            member: {
                shape: "S1g"
            }
        }
    },
    paginators: {
        DescribeApplicationVersions: {
            result_key: "ApplicationVersions"
        },
        DescribeApplications: {
            result_key: "Applications"
        },
        DescribeConfigurationOptions: {
            result_key: "Options"
        },
        DescribeEnvironmentManagedActionHistory: {
            input_token: "NextToken",
            limit_key: "MaxItems",
            output_token: "NextToken",
            result_key: "ManagedActionHistoryItems"
        },
        DescribeEnvironments: {
            result_key: "Environments"
        },
        DescribeEvents: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "Events"
        },
        ListAvailableSolutionStacks: {
            result_key: "SolutionStacks"
        },
        ListPlatformBranches: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken"
        },
        ListPlatformVersions: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "PlatformSummaryList"
        }
    },
    waiters: {
        EnvironmentExists: {
            delay: 20,
            maxAttempts: 20,
            operation: "DescribeEnvironments",
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "Environments[].Status",
                expected: "Ready"
            }, {
                state: "retry",
                matcher: "pathAll",
                argument: "Environments[].Status",
                expected: "Launching"
            } ]
        },
        EnvironmentUpdated: {
            delay: 20,
            maxAttempts: 20,
            operation: "DescribeEnvironments",
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "Environments[].Status",
                expected: "Ready"
            }, {
                state: "retry",
                matcher: "pathAll",
                argument: "Environments[].Status",
                expected: "Updating"
            } ]
        },
        EnvironmentTerminated: {
            delay: 20,
            maxAttempts: 20,
            operation: "DescribeEnvironments",
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "Environments[].Status",
                expected: "Terminated"
            }, {
                state: "retry",
                matcher: "pathAll",
                argument: "Environments[].Status",
                expected: "Terminating"
            } ]
        }
    }
};

AWS.apiLoader.services["elb"] = {};

AWS.ELB = AWS.Service.defineService("elb", [ "2012-06-01" ]);

AWS.apiLoader.services["elb"]["2012-06-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-06-01",
        endpointPrefix: "elasticloadbalancing",
        protocol: "query",
        serviceFullName: "Elastic Load Balancing",
        serviceId: "Elastic Load Balancing",
        signatureVersion: "v4",
        uid: "elasticloadbalancing-2012-06-01",
        xmlNamespace: "http://elasticloadbalancing.amazonaws.com/doc/2012-06-01/"
    },
    operations: {
        AddTags: {
            input: {
                type: "structure",
                required: [ "LoadBalancerNames", "Tags" ],
                members: {
                    LoadBalancerNames: {
                        shape: "S2"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                resultWrapper: "AddTagsResult",
                type: "structure",
                members: {}
            }
        },
        ApplySecurityGroupsToLoadBalancer: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "SecurityGroups" ],
                members: {
                    LoadBalancerName: {},
                    SecurityGroups: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "ApplySecurityGroupsToLoadBalancerResult",
                type: "structure",
                members: {
                    SecurityGroups: {
                        shape: "Sa"
                    }
                }
            }
        },
        AttachLoadBalancerToSubnets: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "Subnets" ],
                members: {
                    LoadBalancerName: {},
                    Subnets: {
                        shape: "Se"
                    }
                }
            },
            output: {
                resultWrapper: "AttachLoadBalancerToSubnetsResult",
                type: "structure",
                members: {
                    Subnets: {
                        shape: "Se"
                    }
                }
            }
        },
        ConfigureHealthCheck: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "HealthCheck" ],
                members: {
                    LoadBalancerName: {},
                    HealthCheck: {
                        shape: "Si"
                    }
                }
            },
            output: {
                resultWrapper: "ConfigureHealthCheckResult",
                type: "structure",
                members: {
                    HealthCheck: {
                        shape: "Si"
                    }
                }
            }
        },
        CreateAppCookieStickinessPolicy: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "PolicyName", "CookieName" ],
                members: {
                    LoadBalancerName: {},
                    PolicyName: {},
                    CookieName: {}
                }
            },
            output: {
                resultWrapper: "CreateAppCookieStickinessPolicyResult",
                type: "structure",
                members: {}
            }
        },
        CreateLBCookieStickinessPolicy: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "PolicyName" ],
                members: {
                    LoadBalancerName: {},
                    PolicyName: {},
                    CookieExpirationPeriod: {
                        type: "long"
                    }
                }
            },
            output: {
                resultWrapper: "CreateLBCookieStickinessPolicyResult",
                type: "structure",
                members: {}
            }
        },
        CreateLoadBalancer: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "Listeners" ],
                members: {
                    LoadBalancerName: {},
                    Listeners: {
                        shape: "Sx"
                    },
                    AvailabilityZones: {
                        shape: "S13"
                    },
                    Subnets: {
                        shape: "Se"
                    },
                    SecurityGroups: {
                        shape: "Sa"
                    },
                    Scheme: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                resultWrapper: "CreateLoadBalancerResult",
                type: "structure",
                members: {
                    DNSName: {}
                }
            }
        },
        CreateLoadBalancerListeners: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "Listeners" ],
                members: {
                    LoadBalancerName: {},
                    Listeners: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                resultWrapper: "CreateLoadBalancerListenersResult",
                type: "structure",
                members: {}
            }
        },
        CreateLoadBalancerPolicy: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "PolicyName", "PolicyTypeName" ],
                members: {
                    LoadBalancerName: {},
                    PolicyName: {},
                    PolicyTypeName: {},
                    PolicyAttributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AttributeName: {},
                                AttributeValue: {}
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "CreateLoadBalancerPolicyResult",
                type: "structure",
                members: {}
            }
        },
        DeleteLoadBalancer: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName" ],
                members: {
                    LoadBalancerName: {}
                }
            },
            output: {
                resultWrapper: "DeleteLoadBalancerResult",
                type: "structure",
                members: {}
            }
        },
        DeleteLoadBalancerListeners: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "LoadBalancerPorts" ],
                members: {
                    LoadBalancerName: {},
                    LoadBalancerPorts: {
                        type: "list",
                        member: {
                            type: "integer"
                        }
                    }
                }
            },
            output: {
                resultWrapper: "DeleteLoadBalancerListenersResult",
                type: "structure",
                members: {}
            }
        },
        DeleteLoadBalancerPolicy: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "PolicyName" ],
                members: {
                    LoadBalancerName: {},
                    PolicyName: {}
                }
            },
            output: {
                resultWrapper: "DeleteLoadBalancerPolicyResult",
                type: "structure",
                members: {}
            }
        },
        DeregisterInstancesFromLoadBalancer: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "Instances" ],
                members: {
                    LoadBalancerName: {},
                    Instances: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                resultWrapper: "DeregisterInstancesFromLoadBalancerResult",
                type: "structure",
                members: {
                    Instances: {
                        shape: "S1p"
                    }
                }
            }
        },
        DescribeAccountLimits: {
            input: {
                type: "structure",
                members: {
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeAccountLimitsResult",
                type: "structure",
                members: {
                    Limits: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Max: {}
                            }
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeInstanceHealth: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName" ],
                members: {
                    LoadBalancerName: {},
                    Instances: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeInstanceHealthResult",
                type: "structure",
                members: {
                    InstanceStates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceId: {},
                                State: {},
                                ReasonCode: {},
                                Description: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeLoadBalancerAttributes: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName" ],
                members: {
                    LoadBalancerName: {}
                }
            },
            output: {
                resultWrapper: "DescribeLoadBalancerAttributesResult",
                type: "structure",
                members: {
                    LoadBalancerAttributes: {
                        shape: "S2a"
                    }
                }
            }
        },
        DescribeLoadBalancerPolicies: {
            input: {
                type: "structure",
                members: {
                    LoadBalancerName: {},
                    PolicyNames: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeLoadBalancerPoliciesResult",
                type: "structure",
                members: {
                    PolicyDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyName: {},
                                PolicyTypeName: {},
                                PolicyAttributeDescriptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            AttributeName: {},
                                            AttributeValue: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeLoadBalancerPolicyTypes: {
            input: {
                type: "structure",
                members: {
                    PolicyTypeNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DescribeLoadBalancerPolicyTypesResult",
                type: "structure",
                members: {
                    PolicyTypeDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyTypeName: {},
                                Description: {},
                                PolicyAttributeTypeDescriptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            AttributeName: {},
                                            AttributeType: {},
                                            Description: {},
                                            DefaultValue: {},
                                            Cardinality: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeLoadBalancers: {
            input: {
                type: "structure",
                members: {
                    LoadBalancerNames: {
                        shape: "S2"
                    },
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeLoadBalancersResult",
                type: "structure",
                members: {
                    LoadBalancerDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LoadBalancerName: {},
                                DNSName: {},
                                CanonicalHostedZoneName: {},
                                CanonicalHostedZoneNameID: {},
                                ListenerDescriptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Listener: {
                                                shape: "Sy"
                                            },
                                            PolicyNames: {
                                                shape: "S2s"
                                            }
                                        }
                                    }
                                },
                                Policies: {
                                    type: "structure",
                                    members: {
                                        AppCookieStickinessPolicies: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    PolicyName: {},
                                                    CookieName: {}
                                                }
                                            }
                                        },
                                        LBCookieStickinessPolicies: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    PolicyName: {},
                                                    CookieExpirationPeriod: {
                                                        type: "long"
                                                    }
                                                }
                                            }
                                        },
                                        OtherPolicies: {
                                            shape: "S2s"
                                        }
                                    }
                                },
                                BackendServerDescriptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            InstancePort: {
                                                type: "integer"
                                            },
                                            PolicyNames: {
                                                shape: "S2s"
                                            }
                                        }
                                    }
                                },
                                AvailabilityZones: {
                                    shape: "S13"
                                },
                                Subnets: {
                                    shape: "Se"
                                },
                                VPCId: {},
                                Instances: {
                                    shape: "S1p"
                                },
                                HealthCheck: {
                                    shape: "Si"
                                },
                                SourceSecurityGroup: {
                                    type: "structure",
                                    members: {
                                        OwnerAlias: {},
                                        GroupName: {}
                                    }
                                },
                                SecurityGroups: {
                                    shape: "Sa"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Scheme: {}
                            }
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                required: [ "LoadBalancerNames" ],
                members: {
                    LoadBalancerNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTagsResult",
                type: "structure",
                members: {
                    TagDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LoadBalancerName: {},
                                Tags: {
                                    shape: "S4"
                                }
                            }
                        }
                    }
                }
            }
        },
        DetachLoadBalancerFromSubnets: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "Subnets" ],
                members: {
                    LoadBalancerName: {},
                    Subnets: {
                        shape: "Se"
                    }
                }
            },
            output: {
                resultWrapper: "DetachLoadBalancerFromSubnetsResult",
                type: "structure",
                members: {
                    Subnets: {
                        shape: "Se"
                    }
                }
            }
        },
        DisableAvailabilityZonesForLoadBalancer: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "AvailabilityZones" ],
                members: {
                    LoadBalancerName: {},
                    AvailabilityZones: {
                        shape: "S13"
                    }
                }
            },
            output: {
                resultWrapper: "DisableAvailabilityZonesForLoadBalancerResult",
                type: "structure",
                members: {
                    AvailabilityZones: {
                        shape: "S13"
                    }
                }
            }
        },
        EnableAvailabilityZonesForLoadBalancer: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "AvailabilityZones" ],
                members: {
                    LoadBalancerName: {},
                    AvailabilityZones: {
                        shape: "S13"
                    }
                }
            },
            output: {
                resultWrapper: "EnableAvailabilityZonesForLoadBalancerResult",
                type: "structure",
                members: {
                    AvailabilityZones: {
                        shape: "S13"
                    }
                }
            }
        },
        ModifyLoadBalancerAttributes: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "LoadBalancerAttributes" ],
                members: {
                    LoadBalancerName: {},
                    LoadBalancerAttributes: {
                        shape: "S2a"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyLoadBalancerAttributesResult",
                type: "structure",
                members: {
                    LoadBalancerName: {},
                    LoadBalancerAttributes: {
                        shape: "S2a"
                    }
                }
            }
        },
        RegisterInstancesWithLoadBalancer: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "Instances" ],
                members: {
                    LoadBalancerName: {},
                    Instances: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                resultWrapper: "RegisterInstancesWithLoadBalancerResult",
                type: "structure",
                members: {
                    Instances: {
                        shape: "S1p"
                    }
                }
            }
        },
        RemoveTags: {
            input: {
                type: "structure",
                required: [ "LoadBalancerNames", "Tags" ],
                members: {
                    LoadBalancerNames: {
                        shape: "S2"
                    },
                    Tags: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {}
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "RemoveTagsResult",
                type: "structure",
                members: {}
            }
        },
        SetLoadBalancerListenerSSLCertificate: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "LoadBalancerPort", "SSLCertificateId" ],
                members: {
                    LoadBalancerName: {},
                    LoadBalancerPort: {
                        type: "integer"
                    },
                    SSLCertificateId: {}
                }
            },
            output: {
                resultWrapper: "SetLoadBalancerListenerSSLCertificateResult",
                type: "structure",
                members: {}
            }
        },
        SetLoadBalancerPoliciesForBackendServer: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "InstancePort", "PolicyNames" ],
                members: {
                    LoadBalancerName: {},
                    InstancePort: {
                        type: "integer"
                    },
                    PolicyNames: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                resultWrapper: "SetLoadBalancerPoliciesForBackendServerResult",
                type: "structure",
                members: {}
            }
        },
        SetLoadBalancerPoliciesOfListener: {
            input: {
                type: "structure",
                required: [ "LoadBalancerName", "LoadBalancerPort", "PolicyNames" ],
                members: {
                    LoadBalancerName: {},
                    LoadBalancerPort: {
                        type: "integer"
                    },
                    PolicyNames: {
                        shape: "S2s"
                    }
                }
            },
            output: {
                resultWrapper: "SetLoadBalancerPoliciesOfListenerResult",
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sa: {
            type: "list",
            member: {}
        },
        Se: {
            type: "list",
            member: {}
        },
        Si: {
            type: "structure",
            required: [ "Target", "Interval", "Timeout", "UnhealthyThreshold", "HealthyThreshold" ],
            members: {
                Target: {},
                Interval: {
                    type: "integer"
                },
                Timeout: {
                    type: "integer"
                },
                UnhealthyThreshold: {
                    type: "integer"
                },
                HealthyThreshold: {
                    type: "integer"
                }
            }
        },
        Sx: {
            type: "list",
            member: {
                shape: "Sy"
            }
        },
        Sy: {
            type: "structure",
            required: [ "Protocol", "LoadBalancerPort", "InstancePort" ],
            members: {
                Protocol: {},
                LoadBalancerPort: {
                    type: "integer"
                },
                InstanceProtocol: {},
                InstancePort: {
                    type: "integer"
                },
                SSLCertificateId: {}
            }
        },
        S13: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    InstanceId: {}
                }
            }
        },
        S2a: {
            type: "structure",
            members: {
                CrossZoneLoadBalancing: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    }
                },
                AccessLog: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        S3BucketName: {},
                        EmitInterval: {
                            type: "integer"
                        },
                        S3BucketPrefix: {}
                    }
                },
                ConnectionDraining: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        Timeout: {
                            type: "integer"
                        }
                    }
                },
                ConnectionSettings: {
                    type: "structure",
                    required: [ "IdleTimeout" ],
                    members: {
                        IdleTimeout: {
                            type: "integer"
                        }
                    }
                },
                AdditionalAttributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {}
                        }
                    }
                }
            }
        },
        S2s: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeInstanceHealth: {
            result_key: "InstanceStates"
        },
        DescribeLoadBalancerPolicies: {
            result_key: "PolicyDescriptions"
        },
        DescribeLoadBalancerPolicyTypes: {
            result_key: "PolicyTypeDescriptions"
        },
        DescribeLoadBalancers: {
            input_token: "Marker",
            output_token: "NextMarker",
            result_key: "LoadBalancerDescriptions"
        }
    },
    waiters: {
        InstanceDeregistered: {
            delay: 15,
            operation: "DescribeInstanceHealth",
            maxAttempts: 40,
            acceptors: [ {
                expected: "OutOfService",
                matcher: "pathAll",
                state: "success",
                argument: "InstanceStates[].State"
            }, {
                matcher: "error",
                expected: "InvalidInstance",
                state: "success"
            } ]
        },
        AnyInstanceInService: {
            acceptors: [ {
                argument: "InstanceStates[].State",
                expected: "InService",
                matcher: "pathAny",
                state: "success"
            } ],
            delay: 15,
            maxAttempts: 40,
            operation: "DescribeInstanceHealth"
        },
        InstanceInService: {
            acceptors: [ {
                argument: "InstanceStates[].State",
                expected: "InService",
                matcher: "pathAll",
                state: "success"
            }, {
                matcher: "error",
                expected: "InvalidInstance",
                state: "retry"
            } ],
            delay: 15,
            maxAttempts: 40,
            operation: "DescribeInstanceHealth"
        }
    }
};

AWS.apiLoader.services["elbv2"] = {};

AWS.ELBv2 = AWS.Service.defineService("elbv2", [ "2015-12-01" ]);

AWS.apiLoader.services["elbv2"]["2015-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-12-01",
        endpointPrefix: "elasticloadbalancing",
        protocol: "query",
        serviceAbbreviation: "Elastic Load Balancing v2",
        serviceFullName: "Elastic Load Balancing",
        serviceId: "Elastic Load Balancing v2",
        signatureVersion: "v4",
        uid: "elasticloadbalancingv2-2015-12-01",
        xmlNamespace: "http://elasticloadbalancing.amazonaws.com/doc/2015-12-01/"
    },
    operations: {
        AddListenerCertificates: {
            input: {
                type: "structure",
                required: [ "ListenerArn", "Certificates" ],
                members: {
                    ListenerArn: {},
                    Certificates: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "AddListenerCertificatesResult",
                type: "structure",
                members: {
                    Certificates: {
                        shape: "S3"
                    }
                }
            }
        },
        AddTags: {
            input: {
                type: "structure",
                required: [ "ResourceArns", "Tags" ],
                members: {
                    ResourceArns: {
                        shape: "S9"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "AddTagsResult",
                type: "structure",
                members: {}
            }
        },
        AddTrustStoreRevocations: {
            input: {
                type: "structure",
                required: [ "TrustStoreArn" ],
                members: {
                    TrustStoreArn: {},
                    RevocationContents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                S3Bucket: {},
                                S3Key: {},
                                S3ObjectVersion: {},
                                RevocationType: {}
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "AddTrustStoreRevocationsResult",
                type: "structure",
                members: {
                    TrustStoreRevocations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrustStoreArn: {},
                                RevocationId: {
                                    type: "long"
                                },
                                RevocationType: {},
                                NumberOfRevokedEntries: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateListener: {
            input: {
                type: "structure",
                required: [ "LoadBalancerArn", "DefaultActions" ],
                members: {
                    LoadBalancerArn: {},
                    Protocol: {},
                    Port: {
                        type: "integer"
                    },
                    SslPolicy: {},
                    Certificates: {
                        shape: "S3"
                    },
                    DefaultActions: {
                        shape: "Sy"
                    },
                    AlpnPolicy: {
                        shape: "S2b"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    MutualAuthentication: {
                        shape: "S2d"
                    }
                }
            },
            output: {
                resultWrapper: "CreateListenerResult",
                type: "structure",
                members: {
                    Listeners: {
                        shape: "S2h"
                    }
                }
            }
        },
        CreateLoadBalancer: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Subnets: {
                        shape: "S2l"
                    },
                    SubnetMappings: {
                        shape: "S2n"
                    },
                    SecurityGroups: {
                        shape: "S2s"
                    },
                    Scheme: {},
                    Tags: {
                        shape: "Sb"
                    },
                    Type: {},
                    IpAddressType: {},
                    CustomerOwnedIpv4Pool: {}
                }
            },
            output: {
                resultWrapper: "CreateLoadBalancerResult",
                type: "structure",
                members: {
                    LoadBalancers: {
                        shape: "S2z"
                    }
                }
            }
        },
        CreateRule: {
            input: {
                type: "structure",
                required: [ "ListenerArn", "Conditions", "Priority", "Actions" ],
                members: {
                    ListenerArn: {},
                    Conditions: {
                        shape: "S3h"
                    },
                    Priority: {
                        type: "integer"
                    },
                    Actions: {
                        shape: "Sy"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateRuleResult",
                type: "structure",
                members: {
                    Rules: {
                        shape: "S3x"
                    }
                }
            }
        },
        CreateTargetGroup: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Protocol: {},
                    ProtocolVersion: {},
                    Port: {
                        type: "integer"
                    },
                    VpcId: {},
                    HealthCheckProtocol: {},
                    HealthCheckPort: {},
                    HealthCheckEnabled: {
                        type: "boolean"
                    },
                    HealthCheckPath: {},
                    HealthCheckIntervalSeconds: {
                        type: "integer"
                    },
                    HealthCheckTimeoutSeconds: {
                        type: "integer"
                    },
                    HealthyThresholdCount: {
                        type: "integer"
                    },
                    UnhealthyThresholdCount: {
                        type: "integer"
                    },
                    Matcher: {
                        shape: "S4b"
                    },
                    TargetType: {},
                    Tags: {
                        shape: "Sb"
                    },
                    IpAddressType: {}
                }
            },
            output: {
                resultWrapper: "CreateTargetGroupResult",
                type: "structure",
                members: {
                    TargetGroups: {
                        shape: "S4h"
                    }
                }
            }
        },
        CreateTrustStore: {
            input: {
                type: "structure",
                required: [ "Name", "CaCertificatesBundleS3Bucket", "CaCertificatesBundleS3Key" ],
                members: {
                    Name: {},
                    CaCertificatesBundleS3Bucket: {},
                    CaCertificatesBundleS3Key: {},
                    CaCertificatesBundleS3ObjectVersion: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateTrustStoreResult",
                type: "structure",
                members: {
                    TrustStores: {
                        shape: "S4n"
                    }
                }
            }
        },
        DeleteListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {}
                }
            },
            output: {
                resultWrapper: "DeleteListenerResult",
                type: "structure",
                members: {}
            }
        },
        DeleteLoadBalancer: {
            input: {
                type: "structure",
                required: [ "LoadBalancerArn" ],
                members: {
                    LoadBalancerArn: {}
                }
            },
            output: {
                resultWrapper: "DeleteLoadBalancerResult",
                type: "structure",
                members: {}
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "RuleArn" ],
                members: {
                    RuleArn: {}
                }
            },
            output: {
                resultWrapper: "DeleteRuleResult",
                type: "structure",
                members: {}
            }
        },
        DeleteTargetGroup: {
            input: {
                type: "structure",
                required: [ "TargetGroupArn" ],
                members: {
                    TargetGroupArn: {}
                }
            },
            output: {
                resultWrapper: "DeleteTargetGroupResult",
                type: "structure",
                members: {}
            }
        },
        DeleteTrustStore: {
            input: {
                type: "structure",
                required: [ "TrustStoreArn" ],
                members: {
                    TrustStoreArn: {}
                }
            },
            output: {
                resultWrapper: "DeleteTrustStoreResult",
                type: "structure",
                members: {}
            }
        },
        DeregisterTargets: {
            input: {
                type: "structure",
                required: [ "TargetGroupArn", "Targets" ],
                members: {
                    TargetGroupArn: {},
                    Targets: {
                        shape: "S53"
                    }
                }
            },
            output: {
                resultWrapper: "DeregisterTargetsResult",
                type: "structure",
                members: {}
            }
        },
        DescribeAccountLimits: {
            input: {
                type: "structure",
                members: {
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeAccountLimitsResult",
                type: "structure",
                members: {
                    Limits: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Max: {}
                            }
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeListenerCertificates: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {},
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeListenerCertificatesResult",
                type: "structure",
                members: {
                    Certificates: {
                        shape: "S3"
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeListeners: {
            input: {
                type: "structure",
                members: {
                    LoadBalancerArn: {},
                    ListenerArns: {
                        type: "list",
                        member: {}
                    },
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeListenersResult",
                type: "structure",
                members: {
                    Listeners: {
                        shape: "S2h"
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeLoadBalancerAttributes: {
            input: {
                type: "structure",
                required: [ "LoadBalancerArn" ],
                members: {
                    LoadBalancerArn: {}
                }
            },
            output: {
                resultWrapper: "DescribeLoadBalancerAttributesResult",
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S5m"
                    }
                }
            }
        },
        DescribeLoadBalancers: {
            input: {
                type: "structure",
                members: {
                    LoadBalancerArns: {
                        shape: "S4j"
                    },
                    Names: {
                        type: "list",
                        member: {}
                    },
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeLoadBalancersResult",
                type: "structure",
                members: {
                    LoadBalancers: {
                        shape: "S2z"
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeRules: {
            input: {
                type: "structure",
                members: {
                    ListenerArn: {},
                    RuleArns: {
                        type: "list",
                        member: {}
                    },
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeRulesResult",
                type: "structure",
                members: {
                    Rules: {
                        shape: "S3x"
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeSSLPolicies: {
            input: {
                type: "structure",
                members: {
                    Names: {
                        type: "list",
                        member: {}
                    },
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    },
                    LoadBalancerType: {}
                }
            },
            output: {
                resultWrapper: "DescribeSSLPoliciesResult",
                type: "structure",
                members: {
                    SslPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SslProtocols: {
                                    type: "list",
                                    member: {}
                                },
                                Ciphers: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Priority: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                Name: {},
                                SupportedLoadBalancerTypes: {
                                    shape: "S3k"
                                }
                            }
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                required: [ "ResourceArns" ],
                members: {
                    ResourceArns: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTagsResult",
                type: "structure",
                members: {
                    TagDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                Tags: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTargetGroupAttributes: {
            input: {
                type: "structure",
                required: [ "TargetGroupArn" ],
                members: {
                    TargetGroupArn: {}
                }
            },
            output: {
                resultWrapper: "DescribeTargetGroupAttributesResult",
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S6d"
                    }
                }
            }
        },
        DescribeTargetGroups: {
            input: {
                type: "structure",
                members: {
                    LoadBalancerArn: {},
                    TargetGroupArns: {
                        type: "list",
                        member: {}
                    },
                    Names: {
                        type: "list",
                        member: {}
                    },
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTargetGroupsResult",
                type: "structure",
                members: {
                    TargetGroups: {
                        shape: "S4h"
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeTargetHealth: {
            input: {
                type: "structure",
                required: [ "TargetGroupArn" ],
                members: {
                    TargetGroupArn: {},
                    Targets: {
                        shape: "S53"
                    },
                    Include: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTargetHealthResult",
                type: "structure",
                members: {
                    TargetHealthDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Target: {
                                    shape: "S54"
                                },
                                HealthCheckPort: {},
                                TargetHealth: {
                                    type: "structure",
                                    members: {
                                        State: {},
                                        Reason: {},
                                        Description: {}
                                    }
                                },
                                AnomalyDetection: {
                                    type: "structure",
                                    members: {
                                        Result: {},
                                        MitigationInEffect: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTrustStoreAssociations: {
            input: {
                type: "structure",
                required: [ "TrustStoreArn" ],
                members: {
                    TrustStoreArn: {},
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTrustStoreAssociationsResult",
                type: "structure",
                members: {
                    TrustStoreAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {}
                            }
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeTrustStoreRevocations: {
            input: {
                type: "structure",
                required: [ "TrustStoreArn" ],
                members: {
                    TrustStoreArn: {},
                    RevocationIds: {
                        shape: "S74"
                    },
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTrustStoreRevocationsResult",
                type: "structure",
                members: {
                    TrustStoreRevocations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrustStoreArn: {},
                                RevocationId: {
                                    type: "long"
                                },
                                RevocationType: {},
                                NumberOfRevokedEntries: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        DescribeTrustStores: {
            input: {
                type: "structure",
                members: {
                    TrustStoreArns: {
                        type: "list",
                        member: {}
                    },
                    Names: {
                        type: "list",
                        member: {}
                    },
                    Marker: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTrustStoresResult",
                type: "structure",
                members: {
                    TrustStores: {
                        shape: "S4n"
                    },
                    NextMarker: {}
                }
            }
        },
        GetTrustStoreCaCertificatesBundle: {
            input: {
                type: "structure",
                required: [ "TrustStoreArn" ],
                members: {
                    TrustStoreArn: {}
                }
            },
            output: {
                resultWrapper: "GetTrustStoreCaCertificatesBundleResult",
                type: "structure",
                members: {
                    Location: {}
                }
            }
        },
        GetTrustStoreRevocationContent: {
            input: {
                type: "structure",
                required: [ "TrustStoreArn", "RevocationId" ],
                members: {
                    TrustStoreArn: {},
                    RevocationId: {
                        type: "long"
                    }
                }
            },
            output: {
                resultWrapper: "GetTrustStoreRevocationContentResult",
                type: "structure",
                members: {
                    Location: {}
                }
            }
        },
        ModifyListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {},
                    Port: {
                        type: "integer"
                    },
                    Protocol: {},
                    SslPolicy: {},
                    Certificates: {
                        shape: "S3"
                    },
                    DefaultActions: {
                        shape: "Sy"
                    },
                    AlpnPolicy: {
                        shape: "S2b"
                    },
                    MutualAuthentication: {
                        shape: "S2d"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyListenerResult",
                type: "structure",
                members: {
                    Listeners: {
                        shape: "S2h"
                    }
                }
            }
        },
        ModifyLoadBalancerAttributes: {
            input: {
                type: "structure",
                required: [ "LoadBalancerArn", "Attributes" ],
                members: {
                    LoadBalancerArn: {},
                    Attributes: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyLoadBalancerAttributesResult",
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S5m"
                    }
                }
            }
        },
        ModifyRule: {
            input: {
                type: "structure",
                required: [ "RuleArn" ],
                members: {
                    RuleArn: {},
                    Conditions: {
                        shape: "S3h"
                    },
                    Actions: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyRuleResult",
                type: "structure",
                members: {
                    Rules: {
                        shape: "S3x"
                    }
                }
            }
        },
        ModifyTargetGroup: {
            input: {
                type: "structure",
                required: [ "TargetGroupArn" ],
                members: {
                    TargetGroupArn: {},
                    HealthCheckProtocol: {},
                    HealthCheckPort: {},
                    HealthCheckPath: {},
                    HealthCheckEnabled: {
                        type: "boolean"
                    },
                    HealthCheckIntervalSeconds: {
                        type: "integer"
                    },
                    HealthCheckTimeoutSeconds: {
                        type: "integer"
                    },
                    HealthyThresholdCount: {
                        type: "integer"
                    },
                    UnhealthyThresholdCount: {
                        type: "integer"
                    },
                    Matcher: {
                        shape: "S4b"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyTargetGroupResult",
                type: "structure",
                members: {
                    TargetGroups: {
                        shape: "S4h"
                    }
                }
            }
        },
        ModifyTargetGroupAttributes: {
            input: {
                type: "structure",
                required: [ "TargetGroupArn", "Attributes" ],
                members: {
                    TargetGroupArn: {},
                    Attributes: {
                        shape: "S6d"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyTargetGroupAttributesResult",
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S6d"
                    }
                }
            }
        },
        ModifyTrustStore: {
            input: {
                type: "structure",
                required: [ "TrustStoreArn", "CaCertificatesBundleS3Bucket", "CaCertificatesBundleS3Key" ],
                members: {
                    TrustStoreArn: {},
                    CaCertificatesBundleS3Bucket: {},
                    CaCertificatesBundleS3Key: {},
                    CaCertificatesBundleS3ObjectVersion: {}
                }
            },
            output: {
                resultWrapper: "ModifyTrustStoreResult",
                type: "structure",
                members: {
                    TrustStores: {
                        shape: "S4n"
                    }
                }
            }
        },
        RegisterTargets: {
            input: {
                type: "structure",
                required: [ "TargetGroupArn", "Targets" ],
                members: {
                    TargetGroupArn: {},
                    Targets: {
                        shape: "S53"
                    }
                }
            },
            output: {
                resultWrapper: "RegisterTargetsResult",
                type: "structure",
                members: {}
            }
        },
        RemoveListenerCertificates: {
            input: {
                type: "structure",
                required: [ "ListenerArn", "Certificates" ],
                members: {
                    ListenerArn: {},
                    Certificates: {
                        shape: "S3"
                    }
                }
            },
            output: {
                resultWrapper: "RemoveListenerCertificatesResult",
                type: "structure",
                members: {}
            }
        },
        RemoveTags: {
            input: {
                type: "structure",
                required: [ "ResourceArns", "TagKeys" ],
                members: {
                    ResourceArns: {
                        shape: "S9"
                    },
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "RemoveTagsResult",
                type: "structure",
                members: {}
            }
        },
        RemoveTrustStoreRevocations: {
            input: {
                type: "structure",
                required: [ "TrustStoreArn", "RevocationIds" ],
                members: {
                    TrustStoreArn: {},
                    RevocationIds: {
                        shape: "S74"
                    }
                }
            },
            output: {
                resultWrapper: "RemoveTrustStoreRevocationsResult",
                type: "structure",
                members: {}
            }
        },
        SetIpAddressType: {
            input: {
                type: "structure",
                required: [ "LoadBalancerArn", "IpAddressType" ],
                members: {
                    LoadBalancerArn: {},
                    IpAddressType: {}
                }
            },
            output: {
                resultWrapper: "SetIpAddressTypeResult",
                type: "structure",
                members: {
                    IpAddressType: {}
                }
            }
        },
        SetRulePriorities: {
            input: {
                type: "structure",
                required: [ "RulePriorities" ],
                members: {
                    RulePriorities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleArn: {},
                                Priority: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "SetRulePrioritiesResult",
                type: "structure",
                members: {
                    Rules: {
                        shape: "S3x"
                    }
                }
            }
        },
        SetSecurityGroups: {
            input: {
                type: "structure",
                required: [ "LoadBalancerArn", "SecurityGroups" ],
                members: {
                    LoadBalancerArn: {},
                    SecurityGroups: {
                        shape: "S2s"
                    },
                    EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic: {}
                }
            },
            output: {
                resultWrapper: "SetSecurityGroupsResult",
                type: "structure",
                members: {
                    SecurityGroupIds: {
                        shape: "S2s"
                    },
                    EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic: {}
                }
            }
        },
        SetSubnets: {
            input: {
                type: "structure",
                required: [ "LoadBalancerArn" ],
                members: {
                    LoadBalancerArn: {},
                    Subnets: {
                        shape: "S2l"
                    },
                    SubnetMappings: {
                        shape: "S2n"
                    },
                    IpAddressType: {}
                }
            },
            output: {
                resultWrapper: "SetSubnetsResult",
                type: "structure",
                members: {
                    AvailabilityZones: {
                        shape: "S38"
                    },
                    IpAddressType: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CertificateArn: {},
                    IsDefault: {
                        type: "boolean"
                    }
                }
            }
        },
        S9: {
            type: "list",
            member: {}
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    Type: {},
                    TargetGroupArn: {},
                    AuthenticateOidcConfig: {
                        type: "structure",
                        required: [ "Issuer", "AuthorizationEndpoint", "TokenEndpoint", "UserInfoEndpoint", "ClientId" ],
                        members: {
                            Issuer: {},
                            AuthorizationEndpoint: {},
                            TokenEndpoint: {},
                            UserInfoEndpoint: {},
                            ClientId: {},
                            ClientSecret: {},
                            SessionCookieName: {},
                            Scope: {},
                            SessionTimeout: {
                                type: "long"
                            },
                            AuthenticationRequestExtraParams: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            OnUnauthenticatedRequest: {},
                            UseExistingClientSecret: {
                                type: "boolean"
                            }
                        }
                    },
                    AuthenticateCognitoConfig: {
                        type: "structure",
                        required: [ "UserPoolArn", "UserPoolClientId", "UserPoolDomain" ],
                        members: {
                            UserPoolArn: {},
                            UserPoolClientId: {},
                            UserPoolDomain: {},
                            SessionCookieName: {},
                            Scope: {},
                            SessionTimeout: {
                                type: "long"
                            },
                            AuthenticationRequestExtraParams: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            OnUnauthenticatedRequest: {}
                        }
                    },
                    Order: {
                        type: "integer"
                    },
                    RedirectConfig: {
                        type: "structure",
                        required: [ "StatusCode" ],
                        members: {
                            Protocol: {},
                            Port: {},
                            Host: {},
                            Path: {},
                            Query: {},
                            StatusCode: {}
                        }
                    },
                    FixedResponseConfig: {
                        type: "structure",
                        required: [ "StatusCode" ],
                        members: {
                            MessageBody: {},
                            StatusCode: {},
                            ContentType: {}
                        }
                    },
                    ForwardConfig: {
                        type: "structure",
                        members: {
                            TargetGroups: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        TargetGroupArn: {},
                                        Weight: {
                                            type: "integer"
                                        }
                                    }
                                }
                            },
                            TargetGroupStickinessConfig: {
                                type: "structure",
                                members: {
                                    Enabled: {
                                        type: "boolean"
                                    },
                                    DurationSeconds: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2b: {
            type: "list",
            member: {}
        },
        S2d: {
            type: "structure",
            members: {
                Mode: {},
                TrustStoreArn: {},
                IgnoreClientCertificateExpiry: {
                    type: "boolean"
                }
            }
        },
        S2h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ListenerArn: {},
                    LoadBalancerArn: {},
                    Port: {
                        type: "integer"
                    },
                    Protocol: {},
                    Certificates: {
                        shape: "S3"
                    },
                    SslPolicy: {},
                    DefaultActions: {
                        shape: "Sy"
                    },
                    AlpnPolicy: {
                        shape: "S2b"
                    },
                    MutualAuthentication: {
                        shape: "S2d"
                    }
                }
            }
        },
        S2l: {
            type: "list",
            member: {}
        },
        S2n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SubnetId: {},
                    AllocationId: {},
                    PrivateIPv4Address: {},
                    IPv6Address: {}
                }
            }
        },
        S2s: {
            type: "list",
            member: {}
        },
        S2z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LoadBalancerArn: {},
                    DNSName: {},
                    CanonicalHostedZoneId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LoadBalancerName: {},
                    Scheme: {},
                    VpcId: {},
                    State: {
                        type: "structure",
                        members: {
                            Code: {},
                            Reason: {}
                        }
                    },
                    Type: {},
                    AvailabilityZones: {
                        shape: "S38"
                    },
                    SecurityGroups: {
                        shape: "S2s"
                    },
                    IpAddressType: {},
                    CustomerOwnedIpv4Pool: {},
                    EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic: {}
                }
            }
        },
        S38: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ZoneName: {},
                    SubnetId: {},
                    OutpostId: {},
                    LoadBalancerAddresses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IpAddress: {},
                                AllocationId: {},
                                PrivateIPv4Address: {},
                                IPv6Address: {}
                            }
                        }
                    }
                }
            }
        },
        S3h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Field: {},
                    Values: {
                        shape: "S3k"
                    },
                    HostHeaderConfig: {
                        type: "structure",
                        members: {
                            Values: {
                                shape: "S3k"
                            }
                        }
                    },
                    PathPatternConfig: {
                        type: "structure",
                        members: {
                            Values: {
                                shape: "S3k"
                            }
                        }
                    },
                    HttpHeaderConfig: {
                        type: "structure",
                        members: {
                            HttpHeaderName: {},
                            Values: {
                                shape: "S3k"
                            }
                        }
                    },
                    QueryStringConfig: {
                        type: "structure",
                        members: {
                            Values: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Key: {},
                                        Value: {}
                                    }
                                }
                            }
                        }
                    },
                    HttpRequestMethodConfig: {
                        type: "structure",
                        members: {
                            Values: {
                                shape: "S3k"
                            }
                        }
                    },
                    SourceIpConfig: {
                        type: "structure",
                        members: {
                            Values: {
                                shape: "S3k"
                            }
                        }
                    }
                }
            }
        },
        S3k: {
            type: "list",
            member: {}
        },
        S3x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RuleArn: {},
                    Priority: {},
                    Conditions: {
                        shape: "S3h"
                    },
                    Actions: {
                        shape: "Sy"
                    },
                    IsDefault: {
                        type: "boolean"
                    }
                }
            }
        },
        S4b: {
            type: "structure",
            members: {
                HttpCode: {},
                GrpcCode: {}
            }
        },
        S4h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TargetGroupArn: {},
                    TargetGroupName: {},
                    Protocol: {},
                    Port: {
                        type: "integer"
                    },
                    VpcId: {},
                    HealthCheckProtocol: {},
                    HealthCheckPort: {},
                    HealthCheckEnabled: {
                        type: "boolean"
                    },
                    HealthCheckIntervalSeconds: {
                        type: "integer"
                    },
                    HealthCheckTimeoutSeconds: {
                        type: "integer"
                    },
                    HealthyThresholdCount: {
                        type: "integer"
                    },
                    UnhealthyThresholdCount: {
                        type: "integer"
                    },
                    HealthCheckPath: {},
                    Matcher: {
                        shape: "S4b"
                    },
                    LoadBalancerArns: {
                        shape: "S4j"
                    },
                    TargetType: {},
                    ProtocolVersion: {},
                    IpAddressType: {}
                }
            }
        },
        S4j: {
            type: "list",
            member: {}
        },
        S4n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    TrustStoreArn: {},
                    Status: {},
                    NumberOfCaCertificates: {
                        type: "integer"
                    },
                    TotalRevokedEntries: {
                        type: "long"
                    }
                }
            }
        },
        S53: {
            type: "list",
            member: {
                shape: "S54"
            }
        },
        S54: {
            type: "structure",
            required: [ "Id" ],
            members: {
                Id: {},
                Port: {
                    type: "integer"
                },
                AvailabilityZone: {}
            }
        },
        S5m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S6d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S74: {
            type: "list",
            member: {
                type: "long"
            }
        }
    },
    paginators: {
        DescribeListeners: {
            input_token: "Marker",
            output_token: "NextMarker",
            result_key: "Listeners"
        },
        DescribeLoadBalancers: {
            input_token: "Marker",
            output_token: "NextMarker",
            result_key: "LoadBalancers"
        },
        DescribeTargetGroups: {
            input_token: "Marker",
            output_token: "NextMarker",
            result_key: "TargetGroups"
        },
        DescribeTrustStoreAssociations: {
            input_token: "Marker",
            limit_key: "PageSize",
            output_token: "NextMarker"
        },
        DescribeTrustStoreRevocations: {
            input_token: "Marker",
            limit_key: "PageSize",
            output_token: "NextMarker"
        },
        DescribeTrustStores: {
            input_token: "Marker",
            limit_key: "PageSize",
            output_token: "NextMarker"
        }
    },
    waiters: {
        LoadBalancerExists: {
            delay: 15,
            operation: "DescribeLoadBalancers",
            maxAttempts: 40,
            acceptors: [ {
                matcher: "status",
                expected: 200,
                state: "success"
            }, {
                matcher: "error",
                expected: "LoadBalancerNotFound",
                state: "retry"
            } ]
        },
        LoadBalancerAvailable: {
            delay: 15,
            operation: "DescribeLoadBalancers",
            maxAttempts: 40,
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "LoadBalancers[].State.Code",
                expected: "active"
            }, {
                state: "retry",
                matcher: "pathAny",
                argument: "LoadBalancers[].State.Code",
                expected: "provisioning"
            }, {
                state: "retry",
                matcher: "error",
                expected: "LoadBalancerNotFound"
            } ]
        },
        LoadBalancersDeleted: {
            delay: 15,
            operation: "DescribeLoadBalancers",
            maxAttempts: 40,
            acceptors: [ {
                state: "retry",
                matcher: "pathAll",
                argument: "LoadBalancers[].State.Code",
                expected: "active"
            }, {
                matcher: "error",
                expected: "LoadBalancerNotFound",
                state: "success"
            } ]
        },
        TargetInService: {
            delay: 15,
            maxAttempts: 40,
            operation: "DescribeTargetHealth",
            acceptors: [ {
                argument: "TargetHealthDescriptions[].TargetHealth.State",
                expected: "healthy",
                matcher: "pathAll",
                state: "success"
            }, {
                matcher: "error",
                expected: "InvalidInstance",
                state: "retry"
            } ]
        },
        TargetDeregistered: {
            delay: 15,
            maxAttempts: 40,
            operation: "DescribeTargetHealth",
            acceptors: [ {
                matcher: "error",
                expected: "InvalidTarget",
                state: "success"
            }, {
                argument: "TargetHealthDescriptions[].TargetHealth.State",
                expected: "unused",
                matcher: "pathAll",
                state: "success"
            } ]
        }
    }
};

AWS.apiLoader.services["emr"] = {};

AWS.EMR = AWS.Service.defineService("emr", [ "2009-03-31" ]);

AWS.apiLoader.services["emr"]["2009-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2009-03-31",
        endpointPrefix: "elasticmapreduce",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon EMR",
        serviceFullName: "Amazon EMR",
        serviceId: "EMR",
        signatureVersion: "v4",
        targetPrefix: "ElasticMapReduce",
        uid: "elasticmapreduce-2009-03-31"
    },
    operations: {
        AddInstanceFleet: {
            input: {
                type: "structure",
                required: [ "ClusterId", "InstanceFleet" ],
                members: {
                    ClusterId: {},
                    InstanceFleet: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterId: {},
                    InstanceFleetId: {},
                    ClusterArn: {}
                }
            }
        },
        AddInstanceGroups: {
            input: {
                type: "structure",
                required: [ "InstanceGroups", "JobFlowId" ],
                members: {
                    InstanceGroups: {
                        shape: "S11"
                    },
                    JobFlowId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobFlowId: {},
                    InstanceGroupIds: {
                        type: "list",
                        member: {}
                    },
                    ClusterArn: {}
                }
            }
        },
        AddJobFlowSteps: {
            input: {
                type: "structure",
                required: [ "JobFlowId", "Steps" ],
                members: {
                    JobFlowId: {},
                    Steps: {
                        shape: "S1m"
                    },
                    ExecutionRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StepIds: {
                        shape: "S1v"
                    }
                }
            }
        },
        AddTags: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Tags" ],
                members: {
                    ResourceId: {},
                    Tags: {
                        shape: "S1y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelSteps: {
            input: {
                type: "structure",
                required: [ "ClusterId", "StepIds" ],
                members: {
                    ClusterId: {},
                    StepIds: {
                        shape: "S1v"
                    },
                    StepCancellationOption: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CancelStepsInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StepId: {},
                                Status: {},
                                Reason: {}
                            }
                        }
                    }
                }
            }
        },
        CreateSecurityConfiguration: {
            input: {
                type: "structure",
                required: [ "Name", "SecurityConfiguration" ],
                members: {
                    Name: {},
                    SecurityConfiguration: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "CreationDateTime" ],
                members: {
                    Name: {},
                    CreationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateStudio: {
            input: {
                type: "structure",
                required: [ "Name", "AuthMode", "VpcId", "SubnetIds", "ServiceRole", "WorkspaceSecurityGroupId", "EngineSecurityGroupId", "DefaultS3Location" ],
                members: {
                    Name: {},
                    Description: {},
                    AuthMode: {},
                    VpcId: {},
                    SubnetIds: {
                        shape: "S2d"
                    },
                    ServiceRole: {},
                    UserRole: {},
                    WorkspaceSecurityGroupId: {},
                    EngineSecurityGroupId: {},
                    DefaultS3Location: {},
                    IdpAuthUrl: {},
                    IdpRelayStateParameterName: {},
                    Tags: {
                        shape: "S1y"
                    },
                    TrustedIdentityPropagationEnabled: {
                        type: "boolean"
                    },
                    IdcUserAssignment: {},
                    IdcInstanceArn: {},
                    EncryptionKeyArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StudioId: {},
                    Url: {}
                }
            }
        },
        CreateStudioSessionMapping: {
            input: {
                type: "structure",
                required: [ "StudioId", "IdentityType", "SessionPolicyArn" ],
                members: {
                    StudioId: {},
                    IdentityId: {},
                    IdentityName: {},
                    IdentityType: {},
                    SessionPolicyArn: {}
                }
            }
        },
        DeleteSecurityConfiguration: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStudio: {
            input: {
                type: "structure",
                required: [ "StudioId" ],
                members: {
                    StudioId: {}
                }
            }
        },
        DeleteStudioSessionMapping: {
            input: {
                type: "structure",
                required: [ "StudioId", "IdentityType" ],
                members: {
                    StudioId: {},
                    IdentityId: {},
                    IdentityName: {},
                    IdentityType: {}
                }
            }
        },
        DescribeCluster: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {},
                            Status: {
                                shape: "S2q"
                            },
                            Ec2InstanceAttributes: {
                                type: "structure",
                                members: {
                                    Ec2KeyName: {},
                                    Ec2SubnetId: {},
                                    RequestedEc2SubnetIds: {
                                        shape: "S2z"
                                    },
                                    Ec2AvailabilityZone: {},
                                    RequestedEc2AvailabilityZones: {
                                        shape: "S2z"
                                    },
                                    IamInstanceProfile: {},
                                    EmrManagedMasterSecurityGroup: {},
                                    EmrManagedSlaveSecurityGroup: {},
                                    ServiceAccessSecurityGroup: {},
                                    AdditionalMasterSecurityGroups: {
                                        shape: "S30"
                                    },
                                    AdditionalSlaveSecurityGroups: {
                                        shape: "S30"
                                    }
                                }
                            },
                            InstanceCollectionType: {},
                            LogUri: {},
                            LogEncryptionKmsKeyId: {},
                            RequestedAmiVersion: {},
                            RunningAmiVersion: {},
                            ReleaseLabel: {},
                            AutoTerminate: {
                                type: "boolean"
                            },
                            TerminationProtected: {
                                type: "boolean"
                            },
                            VisibleToAllUsers: {
                                type: "boolean"
                            },
                            Applications: {
                                shape: "S33"
                            },
                            Tags: {
                                shape: "S1y"
                            },
                            ServiceRole: {},
                            NormalizedInstanceHours: {
                                type: "integer"
                            },
                            MasterPublicDnsName: {},
                            Configurations: {
                                shape: "Si"
                            },
                            SecurityConfiguration: {},
                            AutoScalingRole: {},
                            ScaleDownBehavior: {},
                            CustomAmiId: {},
                            EbsRootVolumeSize: {
                                type: "integer"
                            },
                            RepoUpgradeOnBoot: {},
                            KerberosAttributes: {
                                shape: "S37"
                            },
                            ClusterArn: {},
                            OutpostArn: {},
                            StepConcurrencyLevel: {
                                type: "integer"
                            },
                            PlacementGroups: {
                                shape: "S39"
                            },
                            OSReleaseLabel: {},
                            EbsRootVolumeIops: {
                                type: "integer"
                            },
                            EbsRootVolumeThroughput: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        DescribeJobFlows: {
            input: {
                type: "structure",
                members: {
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    JobFlowIds: {
                        shape: "S1t"
                    },
                    JobFlowStates: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobFlows: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "JobFlowId", "Name", "ExecutionStatusDetail", "Instances" ],
                            members: {
                                JobFlowId: {},
                                Name: {},
                                LogUri: {},
                                LogEncryptionKmsKeyId: {},
                                AmiVersion: {},
                                ExecutionStatusDetail: {
                                    type: "structure",
                                    required: [ "State", "CreationDateTime" ],
                                    members: {
                                        State: {},
                                        CreationDateTime: {
                                            type: "timestamp"
                                        },
                                        StartDateTime: {
                                            type: "timestamp"
                                        },
                                        ReadyDateTime: {
                                            type: "timestamp"
                                        },
                                        EndDateTime: {
                                            type: "timestamp"
                                        },
                                        LastStateChangeReason: {}
                                    }
                                },
                                Instances: {
                                    type: "structure",
                                    required: [ "MasterInstanceType", "SlaveInstanceType", "InstanceCount" ],
                                    members: {
                                        MasterInstanceType: {},
                                        MasterPublicDnsName: {},
                                        MasterInstanceId: {},
                                        SlaveInstanceType: {},
                                        InstanceCount: {
                                            type: "integer"
                                        },
                                        InstanceGroups: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "Market", "InstanceRole", "InstanceType", "InstanceRequestCount", "InstanceRunningCount", "State", "CreationDateTime" ],
                                                members: {
                                                    InstanceGroupId: {},
                                                    Name: {},
                                                    Market: {},
                                                    InstanceRole: {},
                                                    BidPrice: {},
                                                    InstanceType: {},
                                                    InstanceRequestCount: {
                                                        type: "integer"
                                                    },
                                                    InstanceRunningCount: {
                                                        type: "integer"
                                                    },
                                                    State: {},
                                                    LastStateChangeReason: {},
                                                    CreationDateTime: {
                                                        type: "timestamp"
                                                    },
                                                    StartDateTime: {
                                                        type: "timestamp"
                                                    },
                                                    ReadyDateTime: {
                                                        type: "timestamp"
                                                    },
                                                    EndDateTime: {
                                                        type: "timestamp"
                                                    },
                                                    CustomAmiId: {}
                                                }
                                            }
                                        },
                                        NormalizedInstanceHours: {
                                            type: "integer"
                                        },
                                        Ec2KeyName: {},
                                        Ec2SubnetId: {},
                                        Placement: {
                                            shape: "S3n"
                                        },
                                        KeepJobFlowAliveWhenNoSteps: {
                                            type: "boolean"
                                        },
                                        TerminationProtected: {
                                            type: "boolean"
                                        },
                                        HadoopVersion: {}
                                    }
                                },
                                Steps: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "StepConfig", "ExecutionStatusDetail" ],
                                        members: {
                                            StepConfig: {
                                                shape: "S1n"
                                            },
                                            ExecutionStatusDetail: {
                                                type: "structure",
                                                required: [ "State", "CreationDateTime" ],
                                                members: {
                                                    State: {},
                                                    CreationDateTime: {
                                                        type: "timestamp"
                                                    },
                                                    StartDateTime: {
                                                        type: "timestamp"
                                                    },
                                                    EndDateTime: {
                                                        type: "timestamp"
                                                    },
                                                    LastStateChangeReason: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                BootstrapActions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            BootstrapActionConfig: {
                                                shape: "S3u"
                                            }
                                        }
                                    }
                                },
                                SupportedProducts: {
                                    shape: "S3w"
                                },
                                VisibleToAllUsers: {
                                    type: "boolean"
                                },
                                JobFlowRole: {},
                                ServiceRole: {},
                                AutoScalingRole: {},
                                ScaleDownBehavior: {}
                            }
                        }
                    }
                }
            },
            deprecated: true
        },
        DescribeNotebookExecution: {
            input: {
                type: "structure",
                required: [ "NotebookExecutionId" ],
                members: {
                    NotebookExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookExecution: {
                        type: "structure",
                        members: {
                            NotebookExecutionId: {},
                            EditorId: {},
                            ExecutionEngine: {
                                shape: "S40"
                            },
                            NotebookExecutionName: {},
                            NotebookParams: {},
                            Status: {},
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            },
                            Arn: {},
                            OutputNotebookURI: {},
                            LastStateChangeReason: {},
                            NotebookInstanceSecurityGroupId: {},
                            Tags: {
                                shape: "S1y"
                            },
                            NotebookS3Location: {
                                shape: "S44"
                            },
                            OutputNotebookS3Location: {
                                type: "structure",
                                members: {
                                    Bucket: {},
                                    Key: {}
                                }
                            },
                            OutputNotebookFormat: {},
                            EnvironmentVariables: {
                                shape: "S48"
                            }
                        }
                    }
                }
            }
        },
        DescribeReleaseLabel: {
            input: {
                type: "structure",
                members: {
                    ReleaseLabel: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReleaseLabel: {},
                    Applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Version: {}
                            }
                        }
                    },
                    NextToken: {},
                    AvailableOSReleases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Label: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeSecurityConfiguration: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    SecurityConfiguration: {},
                    CreationDateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeStep: {
            input: {
                type: "structure",
                required: [ "ClusterId", "StepId" ],
                members: {
                    ClusterId: {},
                    StepId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Step: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {},
                            Config: {
                                shape: "S4l"
                            },
                            ActionOnFailure: {},
                            Status: {
                                shape: "S4m"
                            },
                            ExecutionRoleArn: {}
                        }
                    }
                }
            }
        },
        DescribeStudio: {
            input: {
                type: "structure",
                required: [ "StudioId" ],
                members: {
                    StudioId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Studio: {
                        type: "structure",
                        members: {
                            StudioId: {},
                            StudioArn: {},
                            Name: {},
                            Description: {},
                            AuthMode: {},
                            VpcId: {},
                            SubnetIds: {
                                shape: "S2d"
                            },
                            ServiceRole: {},
                            UserRole: {},
                            WorkspaceSecurityGroupId: {},
                            EngineSecurityGroupId: {},
                            Url: {},
                            CreationTime: {
                                type: "timestamp"
                            },
                            DefaultS3Location: {},
                            IdpAuthUrl: {},
                            IdpRelayStateParameterName: {},
                            Tags: {
                                shape: "S1y"
                            },
                            IdcInstanceArn: {},
                            TrustedIdentityPropagationEnabled: {
                                type: "boolean"
                            },
                            IdcUserAssignment: {},
                            EncryptionKeyArn: {}
                        }
                    }
                }
            }
        },
        GetAutoTerminationPolicy: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AutoTerminationPolicy: {
                        shape: "S4x"
                    }
                }
            }
        },
        GetBlockPublicAccessConfiguration: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "BlockPublicAccessConfiguration", "BlockPublicAccessConfigurationMetadata" ],
                members: {
                    BlockPublicAccessConfiguration: {
                        shape: "S51"
                    },
                    BlockPublicAccessConfigurationMetadata: {
                        type: "structure",
                        required: [ "CreationDateTime", "CreatedByArn" ],
                        members: {
                            CreationDateTime: {
                                type: "timestamp"
                            },
                            CreatedByArn: {}
                        }
                    }
                }
            }
        },
        GetClusterSessionCredentials: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    ExecutionRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Credentials: {
                        type: "structure",
                        members: {
                            UsernamePassword: {
                                type: "structure",
                                members: {
                                    Username: {},
                                    Password: {}
                                },
                                sensitive: true
                            }
                        },
                        union: true
                    },
                    ExpiresAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetManagedScalingPolicy: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedScalingPolicy: {
                        shape: "S5c"
                    }
                }
            }
        },
        GetStudioSessionMapping: {
            input: {
                type: "structure",
                required: [ "StudioId", "IdentityType" ],
                members: {
                    StudioId: {},
                    IdentityId: {},
                    IdentityName: {},
                    IdentityType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SessionMapping: {
                        type: "structure",
                        members: {
                            StudioId: {},
                            IdentityId: {},
                            IdentityName: {},
                            IdentityType: {},
                            SessionPolicyArn: {},
                            CreationTime: {
                                type: "timestamp"
                            },
                            LastModifiedTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        ListBootstrapActions: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BootstrapActions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                ScriptPath: {},
                                Args: {
                                    shape: "S30"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListClusters: {
            input: {
                type: "structure",
                members: {
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    ClusterStates: {
                        type: "list",
                        member: {}
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Clusters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Status: {
                                    shape: "S2q"
                                },
                                NormalizedInstanceHours: {
                                    type: "integer"
                                },
                                ClusterArn: {},
                                OutpostArn: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListInstanceFleets: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceFleets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Status: {
                                    type: "structure",
                                    members: {
                                        State: {},
                                        StateChangeReason: {
                                            type: "structure",
                                            members: {
                                                Code: {},
                                                Message: {}
                                            }
                                        },
                                        Timeline: {
                                            type: "structure",
                                            members: {
                                                CreationDateTime: {
                                                    type: "timestamp"
                                                },
                                                ReadyDateTime: {
                                                    type: "timestamp"
                                                },
                                                EndDateTime: {
                                                    type: "timestamp"
                                                }
                                            }
                                        }
                                    }
                                },
                                InstanceFleetType: {},
                                TargetOnDemandCapacity: {
                                    type: "integer"
                                },
                                TargetSpotCapacity: {
                                    type: "integer"
                                },
                                ProvisionedOnDemandCapacity: {
                                    type: "integer"
                                },
                                ProvisionedSpotCapacity: {
                                    type: "integer"
                                },
                                InstanceTypeSpecifications: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            InstanceType: {},
                                            WeightedCapacity: {
                                                type: "integer"
                                            },
                                            BidPrice: {},
                                            BidPriceAsPercentageOfOnDemandPrice: {
                                                type: "double"
                                            },
                                            Configurations: {
                                                shape: "Si"
                                            },
                                            EbsBlockDevices: {
                                                shape: "S63"
                                            },
                                            EbsOptimized: {
                                                type: "boolean"
                                            },
                                            CustomAmiId: {}
                                        }
                                    }
                                },
                                LaunchSpecifications: {
                                    shape: "Sl"
                                },
                                ResizeSpecifications: {
                                    shape: "Su"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListInstanceGroups: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Market: {},
                                InstanceGroupType: {},
                                BidPrice: {},
                                InstanceType: {},
                                RequestedInstanceCount: {
                                    type: "integer"
                                },
                                RunningInstanceCount: {
                                    type: "integer"
                                },
                                Status: {
                                    type: "structure",
                                    members: {
                                        State: {},
                                        StateChangeReason: {
                                            type: "structure",
                                            members: {
                                                Code: {},
                                                Message: {}
                                            }
                                        },
                                        Timeline: {
                                            type: "structure",
                                            members: {
                                                CreationDateTime: {
                                                    type: "timestamp"
                                                },
                                                ReadyDateTime: {
                                                    type: "timestamp"
                                                },
                                                EndDateTime: {
                                                    type: "timestamp"
                                                }
                                            }
                                        }
                                    }
                                },
                                Configurations: {
                                    shape: "Si"
                                },
                                ConfigurationsVersion: {
                                    type: "long"
                                },
                                LastSuccessfullyAppliedConfigurations: {
                                    shape: "Si"
                                },
                                LastSuccessfullyAppliedConfigurationsVersion: {
                                    type: "long"
                                },
                                EbsBlockDevices: {
                                    shape: "S63"
                                },
                                EbsOptimized: {
                                    type: "boolean"
                                },
                                ShrinkPolicy: {
                                    shape: "S6f"
                                },
                                AutoScalingPolicy: {
                                    shape: "S6j"
                                },
                                CustomAmiId: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListInstances: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    InstanceGroupId: {},
                    InstanceGroupTypes: {
                        type: "list",
                        member: {}
                    },
                    InstanceFleetId: {},
                    InstanceFleetType: {},
                    InstanceStates: {
                        type: "list",
                        member: {}
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Ec2InstanceId: {},
                                PublicDnsName: {},
                                PublicIpAddress: {},
                                PrivateDnsName: {},
                                PrivateIpAddress: {},
                                Status: {
                                    type: "structure",
                                    members: {
                                        State: {},
                                        StateChangeReason: {
                                            type: "structure",
                                            members: {
                                                Code: {},
                                                Message: {}
                                            }
                                        },
                                        Timeline: {
                                            type: "structure",
                                            members: {
                                                CreationDateTime: {
                                                    type: "timestamp"
                                                },
                                                ReadyDateTime: {
                                                    type: "timestamp"
                                                },
                                                EndDateTime: {
                                                    type: "timestamp"
                                                }
                                            }
                                        }
                                    }
                                },
                                InstanceGroupId: {},
                                InstanceFleetId: {},
                                Market: {},
                                InstanceType: {},
                                EbsVolumes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Device: {},
                                            VolumeId: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListNotebookExecutions: {
            input: {
                type: "structure",
                members: {
                    EditorId: {},
                    Status: {},
                    From: {
                        type: "timestamp"
                    },
                    To: {
                        type: "timestamp"
                    },
                    Marker: {},
                    ExecutionEngineId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NotebookExecutionId: {},
                                EditorId: {},
                                NotebookExecutionName: {},
                                Status: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                NotebookS3Location: {
                                    shape: "S44"
                                },
                                ExecutionEngineId: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListReleaseLabels: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "structure",
                        members: {
                            Prefix: {},
                            Application: {}
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReleaseLabels: {
                        shape: "S30"
                    },
                    NextToken: {}
                }
            }
        },
        ListSecurityConfigurations: {
            input: {
                type: "structure",
                members: {
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                CreationDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListSteps: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    StepStates: {
                        type: "list",
                        member: {}
                    },
                    StepIds: {
                        shape: "S1t"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Steps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Config: {
                                    shape: "S4l"
                                },
                                ActionOnFailure: {},
                                Status: {
                                    shape: "S4m"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListStudioSessionMappings: {
            input: {
                type: "structure",
                members: {
                    StudioId: {},
                    IdentityType: {},
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SessionMappings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StudioId: {},
                                IdentityId: {},
                                IdentityName: {},
                                IdentityType: {},
                                SessionPolicyArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListStudios: {
            input: {
                type: "structure",
                members: {
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Studios: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StudioId: {},
                                Name: {},
                                VpcId: {},
                                Description: {},
                                Url: {},
                                AuthMode: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListSupportedInstanceTypes: {
            input: {
                type: "structure",
                required: [ "ReleaseLabel" ],
                members: {
                    ReleaseLabel: {},
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SupportedInstanceTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                MemoryGB: {
                                    type: "float"
                                },
                                StorageGB: {
                                    type: "integer"
                                },
                                VCPU: {
                                    type: "integer"
                                },
                                Is64BitsOnly: {
                                    type: "boolean"
                                },
                                InstanceFamilyId: {},
                                EbsOptimizedAvailable: {
                                    type: "boolean"
                                },
                                EbsOptimizedByDefault: {
                                    type: "boolean"
                                },
                                NumberOfDisks: {
                                    type: "integer"
                                },
                                EbsStorageOnly: {
                                    type: "boolean"
                                },
                                Architecture: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ModifyCluster: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    StepConcurrencyLevel: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StepConcurrencyLevel: {
                        type: "integer"
                    }
                }
            }
        },
        ModifyInstanceFleet: {
            input: {
                type: "structure",
                required: [ "ClusterId", "InstanceFleet" ],
                members: {
                    ClusterId: {},
                    InstanceFleet: {
                        type: "structure",
                        required: [ "InstanceFleetId" ],
                        members: {
                            InstanceFleetId: {},
                            TargetOnDemandCapacity: {
                                type: "integer"
                            },
                            TargetSpotCapacity: {
                                type: "integer"
                            },
                            ResizeSpecifications: {
                                shape: "Su"
                            }
                        }
                    }
                }
            }
        },
        ModifyInstanceGroups: {
            input: {
                type: "structure",
                members: {
                    ClusterId: {},
                    InstanceGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "InstanceGroupId" ],
                            members: {
                                InstanceGroupId: {},
                                InstanceCount: {
                                    type: "integer"
                                },
                                EC2InstanceIdsToTerminate: {
                                    type: "list",
                                    member: {}
                                },
                                ShrinkPolicy: {
                                    shape: "S6f"
                                },
                                ReconfigurationType: {},
                                Configurations: {
                                    shape: "Si"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutAutoScalingPolicy: {
            input: {
                type: "structure",
                required: [ "ClusterId", "InstanceGroupId", "AutoScalingPolicy" ],
                members: {
                    ClusterId: {},
                    InstanceGroupId: {},
                    AutoScalingPolicy: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterId: {},
                    InstanceGroupId: {},
                    AutoScalingPolicy: {
                        shape: "S6j"
                    },
                    ClusterArn: {}
                }
            }
        },
        PutAutoTerminationPolicy: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    AutoTerminationPolicy: {
                        shape: "S4x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutBlockPublicAccessConfiguration: {
            input: {
                type: "structure",
                required: [ "BlockPublicAccessConfiguration" ],
                members: {
                    BlockPublicAccessConfiguration: {
                        shape: "S51"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutManagedScalingPolicy: {
            input: {
                type: "structure",
                required: [ "ClusterId", "ManagedScalingPolicy" ],
                members: {
                    ClusterId: {},
                    ManagedScalingPolicy: {
                        shape: "S5c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveAutoScalingPolicy: {
            input: {
                type: "structure",
                required: [ "ClusterId", "InstanceGroupId" ],
                members: {
                    ClusterId: {},
                    InstanceGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveAutoTerminationPolicy: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveManagedScalingPolicy: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveTags: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagKeys" ],
                members: {
                    ResourceId: {},
                    TagKeys: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RunJobFlow: {
            input: {
                type: "structure",
                required: [ "Name", "Instances" ],
                members: {
                    Name: {},
                    LogUri: {},
                    LogEncryptionKmsKeyId: {},
                    AdditionalInfo: {},
                    AmiVersion: {},
                    ReleaseLabel: {},
                    Instances: {
                        type: "structure",
                        members: {
                            MasterInstanceType: {},
                            SlaveInstanceType: {},
                            InstanceCount: {
                                type: "integer"
                            },
                            InstanceGroups: {
                                shape: "S11"
                            },
                            InstanceFleets: {
                                type: "list",
                                member: {
                                    shape: "S3"
                                }
                            },
                            Ec2KeyName: {},
                            Placement: {
                                shape: "S3n"
                            },
                            KeepJobFlowAliveWhenNoSteps: {
                                type: "boolean"
                            },
                            TerminationProtected: {
                                type: "boolean"
                            },
                            HadoopVersion: {},
                            Ec2SubnetId: {},
                            Ec2SubnetIds: {
                                shape: "S2z"
                            },
                            EmrManagedMasterSecurityGroup: {},
                            EmrManagedSlaveSecurityGroup: {},
                            ServiceAccessSecurityGroup: {},
                            AdditionalMasterSecurityGroups: {
                                shape: "S8m"
                            },
                            AdditionalSlaveSecurityGroups: {
                                shape: "S8m"
                            }
                        }
                    },
                    Steps: {
                        shape: "S1m"
                    },
                    BootstrapActions: {
                        type: "list",
                        member: {
                            shape: "S3u"
                        }
                    },
                    SupportedProducts: {
                        shape: "S3w"
                    },
                    NewSupportedProducts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Args: {
                                    shape: "S1t"
                                }
                            }
                        }
                    },
                    Applications: {
                        shape: "S33"
                    },
                    Configurations: {
                        shape: "Si"
                    },
                    VisibleToAllUsers: {
                        type: "boolean"
                    },
                    JobFlowRole: {},
                    ServiceRole: {},
                    Tags: {
                        shape: "S1y"
                    },
                    SecurityConfiguration: {},
                    AutoScalingRole: {},
                    ScaleDownBehavior: {},
                    CustomAmiId: {},
                    EbsRootVolumeSize: {
                        type: "integer"
                    },
                    RepoUpgradeOnBoot: {},
                    KerberosAttributes: {
                        shape: "S37"
                    },
                    StepConcurrencyLevel: {
                        type: "integer"
                    },
                    ManagedScalingPolicy: {
                        shape: "S5c"
                    },
                    PlacementGroupConfigs: {
                        shape: "S39"
                    },
                    AutoTerminationPolicy: {
                        shape: "S4x"
                    },
                    OSReleaseLabel: {},
                    EbsRootVolumeIops: {
                        type: "integer"
                    },
                    EbsRootVolumeThroughput: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobFlowId: {},
                    ClusterArn: {}
                }
            }
        },
        SetTerminationProtection: {
            input: {
                type: "structure",
                required: [ "JobFlowIds", "TerminationProtected" ],
                members: {
                    JobFlowIds: {
                        shape: "S1t"
                    },
                    TerminationProtected: {
                        type: "boolean"
                    }
                }
            }
        },
        SetVisibleToAllUsers: {
            input: {
                type: "structure",
                required: [ "JobFlowIds", "VisibleToAllUsers" ],
                members: {
                    JobFlowIds: {
                        shape: "S1t"
                    },
                    VisibleToAllUsers: {
                        type: "boolean"
                    }
                }
            }
        },
        StartNotebookExecution: {
            input: {
                type: "structure",
                required: [ "ExecutionEngine", "ServiceRole" ],
                members: {
                    EditorId: {},
                    RelativePath: {},
                    NotebookExecutionName: {},
                    NotebookParams: {},
                    ExecutionEngine: {
                        shape: "S40"
                    },
                    ServiceRole: {},
                    NotebookInstanceSecurityGroupId: {},
                    Tags: {
                        shape: "S1y"
                    },
                    NotebookS3Location: {
                        type: "structure",
                        members: {
                            Bucket: {},
                            Key: {}
                        }
                    },
                    OutputNotebookS3Location: {
                        type: "structure",
                        members: {
                            Bucket: {},
                            Key: {}
                        }
                    },
                    OutputNotebookFormat: {},
                    EnvironmentVariables: {
                        shape: "S48"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookExecutionId: {}
                }
            }
        },
        StopNotebookExecution: {
            input: {
                type: "structure",
                required: [ "NotebookExecutionId" ],
                members: {
                    NotebookExecutionId: {}
                }
            }
        },
        TerminateJobFlows: {
            input: {
                type: "structure",
                required: [ "JobFlowIds" ],
                members: {
                    JobFlowIds: {
                        shape: "S1t"
                    }
                }
            }
        },
        UpdateStudio: {
            input: {
                type: "structure",
                required: [ "StudioId" ],
                members: {
                    StudioId: {},
                    Name: {},
                    Description: {},
                    SubnetIds: {
                        shape: "S2d"
                    },
                    DefaultS3Location: {},
                    EncryptionKeyArn: {}
                }
            }
        },
        UpdateStudioSessionMapping: {
            input: {
                type: "structure",
                required: [ "StudioId", "IdentityType", "SessionPolicyArn" ],
                members: {
                    StudioId: {},
                    IdentityId: {},
                    IdentityName: {},
                    IdentityType: {},
                    SessionPolicyArn: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "InstanceFleetType" ],
            members: {
                Name: {},
                InstanceFleetType: {},
                TargetOnDemandCapacity: {
                    type: "integer"
                },
                TargetSpotCapacity: {
                    type: "integer"
                },
                InstanceTypeConfigs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "InstanceType" ],
                        members: {
                            InstanceType: {},
                            WeightedCapacity: {
                                type: "integer"
                            },
                            BidPrice: {},
                            BidPriceAsPercentageOfOnDemandPrice: {
                                type: "double"
                            },
                            EbsConfiguration: {
                                shape: "Sa"
                            },
                            Configurations: {
                                shape: "Si"
                            },
                            CustomAmiId: {}
                        }
                    }
                },
                LaunchSpecifications: {
                    shape: "Sl"
                },
                ResizeSpecifications: {
                    shape: "Su"
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                EbsBlockDeviceConfigs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "VolumeSpecification" ],
                        members: {
                            VolumeSpecification: {
                                shape: "Sd"
                            },
                            VolumesPerInstance: {
                                type: "integer"
                            }
                        }
                    }
                },
                EbsOptimized: {
                    type: "boolean"
                }
            }
        },
        Sd: {
            type: "structure",
            required: [ "VolumeType", "SizeInGB" ],
            members: {
                VolumeType: {},
                Iops: {
                    type: "integer"
                },
                SizeInGB: {
                    type: "integer"
                },
                Throughput: {
                    type: "integer"
                }
            }
        },
        Si: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Classification: {},
                    Configurations: {
                        shape: "Si"
                    },
                    Properties: {
                        shape: "Sk"
                    }
                }
            }
        },
        Sk: {
            type: "map",
            key: {},
            value: {}
        },
        Sl: {
            type: "structure",
            members: {
                SpotSpecification: {
                    type: "structure",
                    required: [ "TimeoutDurationMinutes", "TimeoutAction" ],
                    members: {
                        TimeoutDurationMinutes: {
                            type: "integer"
                        },
                        TimeoutAction: {},
                        BlockDurationMinutes: {
                            type: "integer"
                        },
                        AllocationStrategy: {}
                    }
                },
                OnDemandSpecification: {
                    type: "structure",
                    required: [ "AllocationStrategy" ],
                    members: {
                        AllocationStrategy: {},
                        CapacityReservationOptions: {
                            type: "structure",
                            members: {
                                UsageStrategy: {},
                                CapacityReservationPreference: {},
                                CapacityReservationResourceGroupArn: {}
                            }
                        }
                    }
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                SpotResizeSpecification: {
                    type: "structure",
                    required: [ "TimeoutDurationMinutes" ],
                    members: {
                        TimeoutDurationMinutes: {
                            type: "integer"
                        }
                    }
                },
                OnDemandResizeSpecification: {
                    type: "structure",
                    required: [ "TimeoutDurationMinutes" ],
                    members: {
                        TimeoutDurationMinutes: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S11: {
            type: "list",
            member: {
                type: "structure",
                required: [ "InstanceRole", "InstanceType", "InstanceCount" ],
                members: {
                    Name: {},
                    Market: {},
                    InstanceRole: {},
                    BidPrice: {},
                    InstanceType: {},
                    InstanceCount: {
                        type: "integer"
                    },
                    Configurations: {
                        shape: "Si"
                    },
                    EbsConfiguration: {
                        shape: "Sa"
                    },
                    AutoScalingPolicy: {
                        shape: "S15"
                    },
                    CustomAmiId: {}
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "Constraints", "Rules" ],
            members: {
                Constraints: {
                    shape: "S16"
                },
                Rules: {
                    shape: "S17"
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "MinCapacity", "MaxCapacity" ],
            members: {
                MinCapacity: {
                    type: "integer"
                },
                MaxCapacity: {
                    type: "integer"
                }
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Action", "Trigger" ],
                members: {
                    Name: {},
                    Description: {},
                    Action: {
                        type: "structure",
                        required: [ "SimpleScalingPolicyConfiguration" ],
                        members: {
                            Market: {},
                            SimpleScalingPolicyConfiguration: {
                                type: "structure",
                                required: [ "ScalingAdjustment" ],
                                members: {
                                    AdjustmentType: {},
                                    ScalingAdjustment: {
                                        type: "integer"
                                    },
                                    CoolDown: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    Trigger: {
                        type: "structure",
                        required: [ "CloudWatchAlarmDefinition" ],
                        members: {
                            CloudWatchAlarmDefinition: {
                                type: "structure",
                                required: [ "ComparisonOperator", "MetricName", "Period", "Threshold" ],
                                members: {
                                    ComparisonOperator: {},
                                    EvaluationPeriods: {
                                        type: "integer"
                                    },
                                    MetricName: {},
                                    Namespace: {},
                                    Period: {
                                        type: "integer"
                                    },
                                    Statistic: {},
                                    Threshold: {
                                        type: "double"
                                    },
                                    Unit: {},
                                    Dimensions: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Key: {},
                                                Value: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                shape: "S1n"
            }
        },
        S1n: {
            type: "structure",
            required: [ "Name", "HadoopJarStep" ],
            members: {
                Name: {},
                ActionOnFailure: {},
                HadoopJarStep: {
                    type: "structure",
                    required: [ "Jar" ],
                    members: {
                        Properties: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Key: {},
                                    Value: {}
                                }
                            }
                        },
                        Jar: {},
                        MainClass: {},
                        Args: {
                            shape: "S1t"
                        }
                    }
                }
            }
        },
        S1t: {
            type: "list",
            member: {}
        },
        S1v: {
            type: "list",
            member: {}
        },
        S1y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S2d: {
            type: "list",
            member: {}
        },
        S2q: {
            type: "structure",
            members: {
                State: {},
                StateChangeReason: {
                    type: "structure",
                    members: {
                        Code: {},
                        Message: {}
                    }
                },
                Timeline: {
                    type: "structure",
                    members: {
                        CreationDateTime: {
                            type: "timestamp"
                        },
                        ReadyDateTime: {
                            type: "timestamp"
                        },
                        EndDateTime: {
                            type: "timestamp"
                        }
                    }
                },
                ErrorDetails: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ErrorCode: {},
                            ErrorData: {
                                type: "list",
                                member: {
                                    shape: "Sk"
                                }
                            },
                            ErrorMessage: {}
                        }
                    }
                }
            }
        },
        S2z: {
            type: "list",
            member: {}
        },
        S30: {
            type: "list",
            member: {}
        },
        S33: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Version: {},
                    Args: {
                        shape: "S30"
                    },
                    AdditionalInfo: {
                        shape: "Sk"
                    }
                }
            }
        },
        S37: {
            type: "structure",
            required: [ "Realm", "KdcAdminPassword" ],
            members: {
                Realm: {},
                KdcAdminPassword: {},
                CrossRealmTrustPrincipalPassword: {},
                ADDomainJoinUser: {},
                ADDomainJoinPassword: {}
            }
        },
        S39: {
            type: "list",
            member: {
                type: "structure",
                required: [ "InstanceRole" ],
                members: {
                    InstanceRole: {},
                    PlacementStrategy: {}
                }
            }
        },
        S3n: {
            type: "structure",
            members: {
                AvailabilityZone: {},
                AvailabilityZones: {
                    shape: "S2z"
                }
            }
        },
        S3u: {
            type: "structure",
            required: [ "Name", "ScriptBootstrapAction" ],
            members: {
                Name: {},
                ScriptBootstrapAction: {
                    type: "structure",
                    required: [ "Path" ],
                    members: {
                        Path: {},
                        Args: {
                            shape: "S1t"
                        }
                    }
                }
            }
        },
        S3w: {
            type: "list",
            member: {}
        },
        S40: {
            type: "structure",
            required: [ "Id" ],
            members: {
                Id: {},
                Type: {},
                MasterInstanceSecurityGroupId: {},
                ExecutionRoleArn: {}
            }
        },
        S44: {
            type: "structure",
            members: {
                Bucket: {},
                Key: {}
            }
        },
        S48: {
            type: "map",
            key: {},
            value: {}
        },
        S4l: {
            type: "structure",
            members: {
                Jar: {},
                Properties: {
                    shape: "Sk"
                },
                MainClass: {},
                Args: {
                    shape: "S30"
                }
            }
        },
        S4m: {
            type: "structure",
            members: {
                State: {},
                StateChangeReason: {
                    type: "structure",
                    members: {
                        Code: {},
                        Message: {}
                    }
                },
                FailureDetails: {
                    type: "structure",
                    members: {
                        Reason: {},
                        Message: {},
                        LogFile: {}
                    }
                },
                Timeline: {
                    type: "structure",
                    members: {
                        CreationDateTime: {
                            type: "timestamp"
                        },
                        StartDateTime: {
                            type: "timestamp"
                        },
                        EndDateTime: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        S4x: {
            type: "structure",
            members: {
                IdleTimeout: {
                    type: "long"
                }
            }
        },
        S51: {
            type: "structure",
            required: [ "BlockPublicSecurityGroupRules" ],
            members: {
                BlockPublicSecurityGroupRules: {
                    type: "boolean"
                },
                PermittedPublicSecurityGroupRuleRanges: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "MinRange" ],
                        members: {
                            MinRange: {
                                type: "integer"
                            },
                            MaxRange: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S5c: {
            type: "structure",
            members: {
                ComputeLimits: {
                    type: "structure",
                    required: [ "UnitType", "MinimumCapacityUnits", "MaximumCapacityUnits" ],
                    members: {
                        UnitType: {},
                        MinimumCapacityUnits: {
                            type: "integer"
                        },
                        MaximumCapacityUnits: {
                            type: "integer"
                        },
                        MaximumOnDemandCapacityUnits: {
                            type: "integer"
                        },
                        MaximumCoreCapacityUnits: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S63: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    VolumeSpecification: {
                        shape: "Sd"
                    },
                    Device: {}
                }
            }
        },
        S6f: {
            type: "structure",
            members: {
                DecommissionTimeout: {
                    type: "integer"
                },
                InstanceResizePolicy: {
                    type: "structure",
                    members: {
                        InstancesToTerminate: {
                            shape: "S6h"
                        },
                        InstancesToProtect: {
                            shape: "S6h"
                        },
                        InstanceTerminationTimeout: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S6h: {
            type: "list",
            member: {}
        },
        S6j: {
            type: "structure",
            members: {
                Status: {
                    type: "structure",
                    members: {
                        State: {},
                        StateChangeReason: {
                            type: "structure",
                            members: {
                                Code: {},
                                Message: {}
                            }
                        }
                    }
                },
                Constraints: {
                    shape: "S16"
                },
                Rules: {
                    shape: "S17"
                }
            }
        },
        S8m: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeJobFlows: {
            result_key: "JobFlows"
        },
        ListBootstrapActions: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "BootstrapActions"
        },
        ListClusters: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "Clusters"
        },
        ListInstanceFleets: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "InstanceFleets"
        },
        ListInstanceGroups: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "InstanceGroups"
        },
        ListInstances: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "Instances"
        },
        ListNotebookExecutions: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "NotebookExecutions"
        },
        ListReleaseLabels: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListSecurityConfigurations: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "SecurityConfigurations"
        },
        ListSteps: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "Steps"
        },
        ListStudioSessionMappings: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "SessionMappings"
        },
        ListStudios: {
            input_token: "Marker",
            output_token: "Marker",
            result_key: "Studios"
        },
        ListSupportedInstanceTypes: {
            input_token: "Marker",
            output_token: "Marker"
        }
    },
    waiters: {
        ClusterRunning: {
            delay: 30,
            operation: "DescribeCluster",
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Cluster.Status.State",
                expected: "RUNNING"
            }, {
                state: "success",
                matcher: "path",
                argument: "Cluster.Status.State",
                expected: "WAITING"
            }, {
                state: "failure",
                matcher: "path",
                argument: "Cluster.Status.State",
                expected: "TERMINATING"
            }, {
                state: "failure",
                matcher: "path",
                argument: "Cluster.Status.State",
                expected: "TERMINATED"
            }, {
                state: "failure",
                matcher: "path",
                argument: "Cluster.Status.State",
                expected: "TERMINATED_WITH_ERRORS"
            } ]
        },
        StepComplete: {
            delay: 30,
            operation: "DescribeStep",
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Step.Status.State",
                expected: "COMPLETED"
            }, {
                state: "failure",
                matcher: "path",
                argument: "Step.Status.State",
                expected: "FAILED"
            }, {
                state: "failure",
                matcher: "path",
                argument: "Step.Status.State",
                expected: "CANCELLED"
            } ]
        },
        ClusterTerminated: {
            delay: 30,
            operation: "DescribeCluster",
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Cluster.Status.State",
                expected: "TERMINATED"
            }, {
                state: "failure",
                matcher: "path",
                argument: "Cluster.Status.State",
                expected: "TERMINATED_WITH_ERRORS"
            } ]
        }
    }
};

AWS.apiLoader.services["es"] = {};

AWS.ES = AWS.Service.defineService("es", [ "2015-01-01" ]);

AWS.apiLoader.services["es"]["2015-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-01-01",
        endpointPrefix: "es",
        protocol: "rest-json",
        serviceFullName: "Amazon Elasticsearch Service",
        serviceId: "Elasticsearch Service",
        signatureVersion: "v4",
        uid: "es-2015-01-01"
    },
    operations: {
        AcceptInboundCrossClusterSearchConnection: {
            http: {
                method: "PUT",
                requestUri: "/2015-01-01/es/ccs/inboundConnection/{ConnectionId}/accept"
            },
            input: {
                type: "structure",
                required: [ "CrossClusterSearchConnectionId" ],
                members: {
                    CrossClusterSearchConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossClusterSearchConnection: {
                        shape: "S4"
                    }
                }
            }
        },
        AddTags: {
            http: {
                requestUri: "/2015-01-01/tags"
            },
            input: {
                type: "structure",
                required: [ "ARN", "TagList" ],
                members: {
                    ARN: {},
                    TagList: {
                        shape: "Se"
                    }
                }
            }
        },
        AssociatePackage: {
            http: {
                requestUri: "/2015-01-01/packages/associate/{PackageID}/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "PackageID", "DomainName" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetails: {
                        shape: "Sl"
                    }
                }
            }
        },
        AuthorizeVpcEndpointAccess: {
            http: {
                requestUri: "/2015-01-01/es/domain/{DomainName}/authorizeVpcEndpointAccess"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Account" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Account: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AuthorizedPrincipal" ],
                members: {
                    AuthorizedPrincipal: {
                        shape: "Sy"
                    }
                }
            }
        },
        CancelElasticsearchServiceSoftwareUpdate: {
            http: {
                requestUri: "/2015-01-01/es/serviceSoftwareUpdate/cancel"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceSoftwareOptions: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateElasticsearchDomain: {
            http: {
                requestUri: "/2015-01-01/es/domain"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    ElasticsearchVersion: {},
                    ElasticsearchClusterConfig: {
                        shape: "S19"
                    },
                    EBSOptions: {
                        shape: "S1f"
                    },
                    AccessPolicies: {},
                    SnapshotOptions: {
                        shape: "S1i"
                    },
                    VPCOptions: {
                        shape: "S1j"
                    },
                    CognitoOptions: {
                        shape: "S1l"
                    },
                    EncryptionAtRestOptions: {
                        shape: "S1p"
                    },
                    NodeToNodeEncryptionOptions: {
                        shape: "S1r"
                    },
                    AdvancedOptions: {
                        shape: "S1s"
                    },
                    LogPublishingOptions: {
                        shape: "S1t"
                    },
                    DomainEndpointOptions: {
                        shape: "S1x"
                    },
                    AdvancedSecurityOptions: {
                        shape: "S20"
                    },
                    AutoTuneOptions: {
                        type: "structure",
                        members: {
                            DesiredState: {},
                            MaintenanceSchedules: {
                                shape: "S2b"
                            }
                        }
                    },
                    TagList: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainStatus: {
                        shape: "S2i"
                    }
                }
            }
        },
        CreateOutboundCrossClusterSearchConnection: {
            http: {
                requestUri: "/2015-01-01/es/ccs/outboundConnection"
            },
            input: {
                type: "structure",
                required: [ "SourceDomainInfo", "DestinationDomainInfo", "ConnectionAlias" ],
                members: {
                    SourceDomainInfo: {
                        shape: "S5"
                    },
                    DestinationDomainInfo: {
                        shape: "S5"
                    },
                    ConnectionAlias: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SourceDomainInfo: {
                        shape: "S5"
                    },
                    DestinationDomainInfo: {
                        shape: "S5"
                    },
                    ConnectionAlias: {},
                    ConnectionStatus: {
                        shape: "S2y"
                    },
                    CrossClusterSearchConnectionId: {}
                }
            }
        },
        CreatePackage: {
            http: {
                requestUri: "/2015-01-01/packages"
            },
            input: {
                type: "structure",
                required: [ "PackageName", "PackageType", "PackageSource" ],
                members: {
                    PackageName: {},
                    PackageType: {},
                    PackageDescription: {},
                    PackageSource: {
                        shape: "S32"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetails: {
                        shape: "S36"
                    }
                }
            }
        },
        CreateVpcEndpoint: {
            http: {
                requestUri: "/2015-01-01/es/vpcEndpoints"
            },
            input: {
                type: "structure",
                required: [ "DomainArn", "VpcOptions" ],
                members: {
                    DomainArn: {},
                    VpcOptions: {
                        shape: "S1j"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpoint" ],
                members: {
                    VpcEndpoint: {
                        shape: "S3d"
                    }
                }
            }
        },
        DeleteElasticsearchDomain: {
            http: {
                method: "DELETE",
                requestUri: "/2015-01-01/es/domain/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainStatus: {
                        shape: "S2i"
                    }
                }
            }
        },
        DeleteElasticsearchServiceRole: {
            http: {
                method: "DELETE",
                requestUri: "/2015-01-01/es/role"
            }
        },
        DeleteInboundCrossClusterSearchConnection: {
            http: {
                method: "DELETE",
                requestUri: "/2015-01-01/es/ccs/inboundConnection/{ConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "CrossClusterSearchConnectionId" ],
                members: {
                    CrossClusterSearchConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossClusterSearchConnection: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteOutboundCrossClusterSearchConnection: {
            http: {
                method: "DELETE",
                requestUri: "/2015-01-01/es/ccs/outboundConnection/{ConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "CrossClusterSearchConnectionId" ],
                members: {
                    CrossClusterSearchConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossClusterSearchConnection: {
                        shape: "S3n"
                    }
                }
            }
        },
        DeletePackage: {
            http: {
                method: "DELETE",
                requestUri: "/2015-01-01/packages/{PackageID}"
            },
            input: {
                type: "structure",
                required: [ "PackageID" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetails: {
                        shape: "S36"
                    }
                }
            }
        },
        DeleteVpcEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/2015-01-01/es/vpcEndpoints/{VpcEndpointId}"
            },
            input: {
                type: "structure",
                required: [ "VpcEndpointId" ],
                members: {
                    VpcEndpointId: {
                        location: "uri",
                        locationName: "VpcEndpointId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpointSummary" ],
                members: {
                    VpcEndpointSummary: {
                        shape: "S3s"
                    }
                }
            }
        },
        DescribeDomainAutoTunes: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/domain/{DomainName}/autoTunes"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AutoTunes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutoTuneType: {},
                                AutoTuneDetails: {
                                    type: "structure",
                                    members: {
                                        ScheduledAutoTuneDetails: {
                                            type: "structure",
                                            members: {
                                                Date: {
                                                    type: "timestamp"
                                                },
                                                ActionType: {},
                                                Action: {},
                                                Severity: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDomainChangeProgress: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/domain/{DomainName}/progress"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ChangeId: {
                        location: "querystring",
                        locationName: "changeid"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeProgressStatus: {
                        type: "structure",
                        members: {
                            ChangeId: {},
                            StartTime: {
                                type: "timestamp"
                            },
                            Status: {},
                            PendingProperties: {
                                shape: "S1k"
                            },
                            CompletedProperties: {
                                shape: "S1k"
                            },
                            TotalNumberOfStages: {
                                type: "integer"
                            },
                            ChangeProgressStages: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Status: {},
                                        Description: {},
                                        LastUpdated: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeElasticsearchDomain: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/domain/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainStatus" ],
                members: {
                    DomainStatus: {
                        shape: "S2i"
                    }
                }
            }
        },
        DescribeElasticsearchDomainConfig: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/domain/{DomainName}/config"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainConfig" ],
                members: {
                    DomainConfig: {
                        shape: "S4l"
                    }
                }
            }
        },
        DescribeElasticsearchDomains: {
            http: {
                requestUri: "/2015-01-01/es/domain-info"
            },
            input: {
                type: "structure",
                required: [ "DomainNames" ],
                members: {
                    DomainNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainStatusList" ],
                members: {
                    DomainStatusList: {
                        type: "list",
                        member: {
                            shape: "S2i"
                        }
                    }
                }
            }
        },
        DescribeElasticsearchInstanceTypeLimits: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/instanceTypeLimits/{ElasticsearchVersion}/{InstanceType}"
            },
            input: {
                type: "structure",
                required: [ "InstanceType", "ElasticsearchVersion" ],
                members: {
                    DomainName: {
                        location: "querystring",
                        locationName: "domainName"
                    },
                    InstanceType: {
                        location: "uri",
                        locationName: "InstanceType"
                    },
                    ElasticsearchVersion: {
                        location: "uri",
                        locationName: "ElasticsearchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LimitsByRole: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                StorageTypes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            StorageTypeName: {},
                                            StorageSubTypeName: {},
                                            StorageTypeLimits: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        LimitName: {},
                                                        LimitValues: {
                                                            shape: "S5m"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                InstanceLimits: {
                                    type: "structure",
                                    members: {
                                        InstanceCountLimits: {
                                            type: "structure",
                                            members: {
                                                MinimumInstanceCount: {
                                                    type: "integer"
                                                },
                                                MaximumInstanceCount: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                AdditionalLimits: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            LimitName: {},
                                            LimitValues: {
                                                shape: "S5m"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeInboundCrossClusterSearchConnections: {
            http: {
                requestUri: "/2015-01-01/es/ccs/inboundConnection/search"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S5v"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossClusterSearchConnections: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeOutboundCrossClusterSearchConnections: {
            http: {
                requestUri: "/2015-01-01/es/ccs/outboundConnection/search"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S5v"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossClusterSearchConnections: {
                        type: "list",
                        member: {
                            shape: "S3n"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePackages: {
            http: {
                requestUri: "/2015-01-01/packages/describe"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Value: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetailsList: {
                        type: "list",
                        member: {
                            shape: "S36"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeReservedElasticsearchInstanceOfferings: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/reservedInstanceOfferings"
            },
            input: {
                type: "structure",
                members: {
                    ReservedElasticsearchInstanceOfferingId: {
                        location: "querystring",
                        locationName: "offeringId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ReservedElasticsearchInstanceOfferings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReservedElasticsearchInstanceOfferingId: {},
                                ElasticsearchInstanceType: {},
                                Duration: {
                                    type: "integer"
                                },
                                FixedPrice: {
                                    type: "double"
                                },
                                UsagePrice: {
                                    type: "double"
                                },
                                CurrencyCode: {},
                                PaymentOption: {},
                                RecurringCharges: {
                                    shape: "S6j"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeReservedElasticsearchInstances: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/reservedInstances"
            },
            input: {
                type: "structure",
                members: {
                    ReservedElasticsearchInstanceId: {
                        location: "querystring",
                        locationName: "reservationId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ReservedElasticsearchInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReservationName: {},
                                ReservedElasticsearchInstanceId: {},
                                ReservedElasticsearchInstanceOfferingId: {},
                                ElasticsearchInstanceType: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                Duration: {
                                    type: "integer"
                                },
                                FixedPrice: {
                                    type: "double"
                                },
                                UsagePrice: {
                                    type: "double"
                                },
                                CurrencyCode: {},
                                ElasticsearchInstanceCount: {
                                    type: "integer"
                                },
                                State: {},
                                PaymentOption: {},
                                RecurringCharges: {
                                    shape: "S6j"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeVpcEndpoints: {
            http: {
                requestUri: "/2015-01-01/es/vpcEndpoints/describe"
            },
            input: {
                type: "structure",
                required: [ "VpcEndpointIds" ],
                members: {
                    VpcEndpointIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpoints", "VpcEndpointErrors" ],
                members: {
                    VpcEndpoints: {
                        type: "list",
                        member: {
                            shape: "S3d"
                        }
                    },
                    VpcEndpointErrors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VpcEndpointId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        DissociatePackage: {
            http: {
                requestUri: "/2015-01-01/packages/dissociate/{PackageID}/{DomainName}"
            },
            input: {
                type: "structure",
                required: [ "PackageID", "DomainName" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetails: {
                        shape: "Sl"
                    }
                }
            }
        },
        GetCompatibleElasticsearchVersions: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/compatibleVersions"
            },
            input: {
                type: "structure",
                members: {
                    DomainName: {
                        location: "querystring",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CompatibleElasticsearchVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceVersion: {},
                                TargetVersions: {
                                    shape: "S73"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetPackageVersionHistory: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/packages/{PackageID}/history"
            },
            input: {
                type: "structure",
                required: [ "PackageID" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageID: {},
                    PackageVersionHistoryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PackageVersion: {},
                                CommitMessage: {},
                                CreatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetUpgradeHistory: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/upgradeDomain/{DomainName}/history"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradeHistories: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UpgradeName: {},
                                StartTimestamp: {
                                    type: "timestamp"
                                },
                                UpgradeStatus: {},
                                StepsList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            UpgradeStep: {},
                                            UpgradeStepStatus: {},
                                            Issues: {
                                                type: "list",
                                                member: {}
                                            },
                                            ProgressPercent: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetUpgradeStatus: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/upgradeDomain/{DomainName}/status"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradeStep: {},
                    StepStatus: {},
                    UpgradeName: {}
                }
            }
        },
        ListDomainNames: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/domain"
            },
            input: {
                type: "structure",
                members: {
                    EngineType: {
                        location: "querystring",
                        locationName: "engineType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainNames: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                EngineType: {}
                            }
                        }
                    }
                }
            }
        },
        ListDomainsForPackage: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/packages/{PackageID}/domains"
            },
            input: {
                type: "structure",
                required: [ "PackageID" ],
                members: {
                    PackageID: {
                        location: "uri",
                        locationName: "PackageID"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetailsList: {
                        shape: "S7u"
                    },
                    NextToken: {}
                }
            }
        },
        ListElasticsearchInstanceTypes: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/instanceTypes/{ElasticsearchVersion}"
            },
            input: {
                type: "structure",
                required: [ "ElasticsearchVersion" ],
                members: {
                    ElasticsearchVersion: {
                        location: "uri",
                        locationName: "ElasticsearchVersion"
                    },
                    DomainName: {
                        location: "querystring",
                        locationName: "domainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ElasticsearchInstanceTypes: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListElasticsearchVersions: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/versions"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ElasticsearchVersions: {
                        shape: "S73"
                    },
                    NextToken: {}
                }
            }
        },
        ListPackagesForDomain: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/domain/{DomainName}/packages"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainPackageDetailsList: {
                        shape: "S7u"
                    },
                    NextToken: {}
                }
            }
        },
        ListTags: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/tags/"
            },
            input: {
                type: "structure",
                required: [ "ARN" ],
                members: {
                    ARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Se"
                    }
                }
            }
        },
        ListVpcEndpointAccess: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/domain/{DomainName}/listVpcEndpointAccess"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AuthorizedPrincipalList", "NextToken" ],
                members: {
                    AuthorizedPrincipalList: {
                        type: "list",
                        member: {
                            shape: "Sy"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVpcEndpoints: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/vpcEndpoints"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpointSummaryList", "NextToken" ],
                members: {
                    VpcEndpointSummaryList: {
                        shape: "S89"
                    },
                    NextToken: {}
                }
            }
        },
        ListVpcEndpointsForDomain: {
            http: {
                method: "GET",
                requestUri: "/2015-01-01/es/domain/{DomainName}/vpcEndpoints"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpointSummaryList", "NextToken" ],
                members: {
                    VpcEndpointSummaryList: {
                        shape: "S89"
                    },
                    NextToken: {}
                }
            }
        },
        PurchaseReservedElasticsearchInstanceOffering: {
            http: {
                requestUri: "/2015-01-01/es/purchaseReservedInstanceOffering"
            },
            input: {
                type: "structure",
                required: [ "ReservedElasticsearchInstanceOfferingId", "ReservationName" ],
                members: {
                    ReservedElasticsearchInstanceOfferingId: {},
                    ReservationName: {},
                    InstanceCount: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedElasticsearchInstanceId: {},
                    ReservationName: {}
                }
            }
        },
        RejectInboundCrossClusterSearchConnection: {
            http: {
                method: "PUT",
                requestUri: "/2015-01-01/es/ccs/inboundConnection/{ConnectionId}/reject"
            },
            input: {
                type: "structure",
                required: [ "CrossClusterSearchConnectionId" ],
                members: {
                    CrossClusterSearchConnectionId: {
                        location: "uri",
                        locationName: "ConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossClusterSearchConnection: {
                        shape: "S4"
                    }
                }
            }
        },
        RemoveTags: {
            http: {
                requestUri: "/2015-01-01/tags-removal"
            },
            input: {
                type: "structure",
                required: [ "ARN", "TagKeys" ],
                members: {
                    ARN: {},
                    TagKeys: {
                        shape: "S1k"
                    }
                }
            }
        },
        RevokeVpcEndpointAccess: {
            http: {
                requestUri: "/2015-01-01/es/domain/{DomainName}/revokeVpcEndpointAccess"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "Account" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    Account: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartElasticsearchServiceSoftwareUpdate: {
            http: {
                requestUri: "/2015-01-01/es/serviceSoftwareUpdate/start"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceSoftwareOptions: {
                        shape: "S13"
                    }
                }
            }
        },
        UpdateElasticsearchDomainConfig: {
            http: {
                requestUri: "/2015-01-01/es/domain/{DomainName}/config"
            },
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {
                        location: "uri",
                        locationName: "DomainName"
                    },
                    ElasticsearchClusterConfig: {
                        shape: "S19"
                    },
                    EBSOptions: {
                        shape: "S1f"
                    },
                    SnapshotOptions: {
                        shape: "S1i"
                    },
                    VPCOptions: {
                        shape: "S1j"
                    },
                    CognitoOptions: {
                        shape: "S1l"
                    },
                    AdvancedOptions: {
                        shape: "S1s"
                    },
                    AccessPolicies: {},
                    LogPublishingOptions: {
                        shape: "S1t"
                    },
                    DomainEndpointOptions: {
                        shape: "S1x"
                    },
                    AdvancedSecurityOptions: {
                        shape: "S20"
                    },
                    NodeToNodeEncryptionOptions: {
                        shape: "S1r"
                    },
                    EncryptionAtRestOptions: {
                        shape: "S1p"
                    },
                    AutoTuneOptions: {
                        shape: "S53"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainConfig" ],
                members: {
                    DomainConfig: {
                        shape: "S4l"
                    },
                    DryRunResults: {
                        type: "structure",
                        members: {
                            DeploymentType: {},
                            Message: {}
                        }
                    }
                }
            }
        },
        UpdatePackage: {
            http: {
                requestUri: "/2015-01-01/packages/update"
            },
            input: {
                type: "structure",
                required: [ "PackageID", "PackageSource" ],
                members: {
                    PackageID: {},
                    PackageSource: {
                        shape: "S32"
                    },
                    PackageDescription: {},
                    CommitMessage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PackageDetails: {
                        shape: "S36"
                    }
                }
            }
        },
        UpdateVpcEndpoint: {
            http: {
                requestUri: "/2015-01-01/es/vpcEndpoints/update"
            },
            input: {
                type: "structure",
                required: [ "VpcEndpointId", "VpcOptions" ],
                members: {
                    VpcEndpointId: {},
                    VpcOptions: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VpcEndpoint" ],
                members: {
                    VpcEndpoint: {
                        shape: "S3d"
                    }
                }
            }
        },
        UpgradeElasticsearchDomain: {
            http: {
                requestUri: "/2015-01-01/es/upgradeDomain"
            },
            input: {
                type: "structure",
                required: [ "DomainName", "TargetVersion" ],
                members: {
                    DomainName: {},
                    TargetVersion: {},
                    PerformCheckOnly: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainName: {},
                    TargetVersion: {},
                    PerformCheckOnly: {
                        type: "boolean"
                    },
                    ChangeProgressDetails: {
                        shape: "S2s"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                SourceDomainInfo: {
                    shape: "S5"
                },
                DestinationDomainInfo: {
                    shape: "S5"
                },
                CrossClusterSearchConnectionId: {},
                ConnectionStatus: {
                    type: "structure",
                    members: {
                        StatusCode: {},
                        Message: {}
                    }
                }
            }
        },
        S5: {
            type: "structure",
            required: [ "DomainName" ],
            members: {
                OwnerId: {},
                DomainName: {},
                Region: {}
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sl: {
            type: "structure",
            members: {
                PackageID: {},
                PackageName: {},
                PackageType: {},
                LastUpdated: {
                    type: "timestamp"
                },
                DomainName: {},
                DomainPackageStatus: {},
                PackageVersion: {},
                ReferencePath: {},
                ErrorDetails: {
                    shape: "Ss"
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                ErrorType: {},
                ErrorMessage: {}
            }
        },
        Sy: {
            type: "structure",
            members: {
                PrincipalType: {},
                Principal: {}
            }
        },
        S13: {
            type: "structure",
            members: {
                CurrentVersion: {},
                NewVersion: {},
                UpdateAvailable: {
                    type: "boolean"
                },
                Cancellable: {
                    type: "boolean"
                },
                UpdateStatus: {},
                Description: {},
                AutomatedUpdateDate: {
                    type: "timestamp"
                },
                OptionalDeployment: {
                    type: "boolean"
                }
            }
        },
        S19: {
            type: "structure",
            members: {
                InstanceType: {},
                InstanceCount: {
                    type: "integer"
                },
                DedicatedMasterEnabled: {
                    type: "boolean"
                },
                ZoneAwarenessEnabled: {
                    type: "boolean"
                },
                ZoneAwarenessConfig: {
                    type: "structure",
                    members: {
                        AvailabilityZoneCount: {
                            type: "integer"
                        }
                    }
                },
                DedicatedMasterType: {},
                DedicatedMasterCount: {
                    type: "integer"
                },
                WarmEnabled: {
                    type: "boolean"
                },
                WarmType: {},
                WarmCount: {
                    type: "integer"
                },
                ColdStorageOptions: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                EBSEnabled: {
                    type: "boolean"
                },
                VolumeType: {},
                VolumeSize: {
                    type: "integer"
                },
                Iops: {
                    type: "integer"
                },
                Throughput: {
                    type: "integer"
                }
            }
        },
        S1i: {
            type: "structure",
            members: {
                AutomatedSnapshotStartHour: {
                    type: "integer"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                SubnetIds: {
                    shape: "S1k"
                },
                SecurityGroupIds: {
                    shape: "S1k"
                }
            }
        },
        S1k: {
            type: "list",
            member: {}
        },
        S1l: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                UserPoolId: {},
                IdentityPoolId: {},
                RoleArn: {}
            }
        },
        S1p: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                KmsKeyId: {}
            }
        },
        S1r: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S1s: {
            type: "map",
            key: {},
            value: {}
        },
        S1t: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    CloudWatchLogsLogGroupArn: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                EnforceHTTPS: {
                    type: "boolean"
                },
                TLSSecurityPolicy: {},
                CustomEndpointEnabled: {
                    type: "boolean"
                },
                CustomEndpoint: {},
                CustomEndpointCertificateArn: {}
            }
        },
        S20: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                InternalUserDatabaseEnabled: {
                    type: "boolean"
                },
                MasterUserOptions: {
                    type: "structure",
                    members: {
                        MasterUserARN: {},
                        MasterUserName: {
                            shape: "S22"
                        },
                        MasterUserPassword: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                SAMLOptions: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        Idp: {
                            shape: "S25"
                        },
                        MasterUserName: {
                            shape: "S22"
                        },
                        MasterBackendRole: {},
                        SubjectKey: {},
                        RolesKey: {},
                        SessionTimeoutMinutes: {
                            type: "integer"
                        }
                    }
                },
                AnonymousAuthEnabled: {
                    type: "boolean"
                }
            }
        },
        S22: {
            type: "string",
            sensitive: true
        },
        S25: {
            type: "structure",
            required: [ "MetadataContent", "EntityId" ],
            members: {
                MetadataContent: {},
                EntityId: {}
            }
        },
        S2b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StartAt: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "structure",
                        members: {
                            Value: {
                                type: "long"
                            },
                            Unit: {}
                        }
                    },
                    CronExpressionForRecurrence: {}
                }
            }
        },
        S2i: {
            type: "structure",
            required: [ "DomainId", "DomainName", "ARN", "ElasticsearchClusterConfig" ],
            members: {
                DomainId: {},
                DomainName: {},
                ARN: {},
                Created: {
                    type: "boolean"
                },
                Deleted: {
                    type: "boolean"
                },
                Endpoint: {},
                Endpoints: {
                    type: "map",
                    key: {},
                    value: {}
                },
                Processing: {
                    type: "boolean"
                },
                UpgradeProcessing: {
                    type: "boolean"
                },
                ElasticsearchVersion: {},
                ElasticsearchClusterConfig: {
                    shape: "S19"
                },
                EBSOptions: {
                    shape: "S1f"
                },
                AccessPolicies: {},
                SnapshotOptions: {
                    shape: "S1i"
                },
                VPCOptions: {
                    shape: "S2m"
                },
                CognitoOptions: {
                    shape: "S1l"
                },
                EncryptionAtRestOptions: {
                    shape: "S1p"
                },
                NodeToNodeEncryptionOptions: {
                    shape: "S1r"
                },
                AdvancedOptions: {
                    shape: "S1s"
                },
                LogPublishingOptions: {
                    shape: "S1t"
                },
                ServiceSoftwareOptions: {
                    shape: "S13"
                },
                DomainEndpointOptions: {
                    shape: "S1x"
                },
                AdvancedSecurityOptions: {
                    shape: "S2n"
                },
                AutoTuneOptions: {
                    type: "structure",
                    members: {
                        State: {},
                        ErrorMessage: {}
                    }
                },
                ChangeProgressDetails: {
                    shape: "S2s"
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                VPCId: {},
                SubnetIds: {
                    shape: "S1k"
                },
                AvailabilityZones: {
                    shape: "S1k"
                },
                SecurityGroupIds: {
                    shape: "S1k"
                }
            }
        },
        S2n: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                InternalUserDatabaseEnabled: {
                    type: "boolean"
                },
                SAMLOptions: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        Idp: {
                            shape: "S25"
                        },
                        SubjectKey: {},
                        RolesKey: {},
                        SessionTimeoutMinutes: {
                            type: "integer"
                        }
                    }
                },
                AnonymousAuthDisableDate: {
                    type: "timestamp"
                },
                AnonymousAuthEnabled: {
                    type: "boolean"
                }
            }
        },
        S2s: {
            type: "structure",
            members: {
                ChangeId: {},
                Message: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                StatusCode: {},
                Message: {}
            }
        },
        S32: {
            type: "structure",
            members: {
                S3BucketName: {},
                S3Key: {}
            }
        },
        S36: {
            type: "structure",
            members: {
                PackageID: {},
                PackageName: {},
                PackageType: {},
                PackageDescription: {},
                PackageStatus: {},
                CreatedAt: {
                    type: "timestamp"
                },
                LastUpdatedAt: {
                    type: "timestamp"
                },
                AvailablePackageVersion: {},
                ErrorDetails: {
                    shape: "Ss"
                }
            }
        },
        S3d: {
            type: "structure",
            members: {
                VpcEndpointId: {},
                VpcEndpointOwner: {},
                DomainArn: {},
                VpcOptions: {
                    shape: "S2m"
                },
                Status: {},
                Endpoint: {}
            }
        },
        S3n: {
            type: "structure",
            members: {
                SourceDomainInfo: {
                    shape: "S5"
                },
                DestinationDomainInfo: {
                    shape: "S5"
                },
                CrossClusterSearchConnectionId: {},
                ConnectionAlias: {},
                ConnectionStatus: {
                    shape: "S2y"
                }
            }
        },
        S3s: {
            type: "structure",
            members: {
                VpcEndpointId: {},
                VpcEndpointOwner: {},
                DomainArn: {},
                Status: {}
            }
        },
        S4l: {
            type: "structure",
            members: {
                ElasticsearchVersion: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {},
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                ElasticsearchClusterConfig: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S19"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                EBSOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1f"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                AccessPolicies: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {},
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                SnapshotOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1i"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                VPCOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S2m"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                CognitoOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1l"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                EncryptionAtRestOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1p"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                NodeToNodeEncryptionOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1r"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                AdvancedOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1s"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                LogPublishingOptions: {
                    type: "structure",
                    members: {
                        Options: {
                            shape: "S1t"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                DomainEndpointOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S1x"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                AdvancedSecurityOptions: {
                    type: "structure",
                    required: [ "Options", "Status" ],
                    members: {
                        Options: {
                            shape: "S2n"
                        },
                        Status: {
                            shape: "S4n"
                        }
                    }
                },
                AutoTuneOptions: {
                    type: "structure",
                    members: {
                        Options: {
                            shape: "S53"
                        },
                        Status: {
                            type: "structure",
                            required: [ "CreationDate", "UpdateDate", "State" ],
                            members: {
                                CreationDate: {
                                    type: "timestamp"
                                },
                                UpdateDate: {
                                    type: "timestamp"
                                },
                                UpdateVersion: {
                                    type: "integer"
                                },
                                State: {},
                                ErrorMessage: {},
                                PendingDeletion: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                ChangeProgressDetails: {
                    shape: "S2s"
                }
            }
        },
        S4n: {
            type: "structure",
            required: [ "CreationDate", "UpdateDate", "State" ],
            members: {
                CreationDate: {
                    type: "timestamp"
                },
                UpdateDate: {
                    type: "timestamp"
                },
                UpdateVersion: {
                    type: "integer"
                },
                State: {},
                PendingDeletion: {
                    type: "boolean"
                }
            }
        },
        S53: {
            type: "structure",
            members: {
                DesiredState: {},
                RollbackOnDisable: {},
                MaintenanceSchedules: {
                    shape: "S2b"
                }
            }
        },
        S5m: {
            type: "list",
            member: {}
        },
        S5v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S6j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RecurringChargeAmount: {
                        type: "double"
                    },
                    RecurringChargeFrequency: {}
                }
            }
        },
        S73: {
            type: "list",
            member: {}
        },
        S7u: {
            type: "list",
            member: {
                shape: "Sl"
            }
        },
        S89: {
            type: "list",
            member: {
                shape: "S3s"
            }
        }
    },
    paginators: {
        DescribeDomainAutoTunes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeInboundCrossClusterSearchConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeOutboundCrossClusterSearchConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribePackages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeReservedElasticsearchInstanceOfferings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeReservedElasticsearchInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetPackageVersionHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetUpgradeHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDomainsForPackage: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListElasticsearchInstanceTypes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListElasticsearchVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPackagesForDomain: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["elastictranscoder"] = {};

AWS.ElasticTranscoder = AWS.Service.defineService("elastictranscoder", [ "2012-09-25" ]);

AWS.apiLoader.services["elastictranscoder"]["2012-09-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-09-25",
        endpointPrefix: "elastictranscoder",
        protocol: "rest-json",
        serviceFullName: "Amazon Elastic Transcoder",
        serviceId: "Elastic Transcoder",
        signatureVersion: "v4",
        uid: "elastictranscoder-2012-09-25"
    },
    operations: {
        CancelJob: {
            http: {
                method: "DELETE",
                requestUri: "/2012-09-25/jobs/{Id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateJob: {
            http: {
                requestUri: "/2012-09-25/jobs",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "PipelineId" ],
                members: {
                    PipelineId: {},
                    Input: {
                        shape: "S5"
                    },
                    Inputs: {
                        shape: "St"
                    },
                    Output: {
                        shape: "Su"
                    },
                    Outputs: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    OutputKeyPrefix: {},
                    Playlists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Format: {},
                                OutputKeys: {
                                    shape: "S1l"
                                },
                                HlsContentProtection: {
                                    shape: "S1m"
                                },
                                PlayReadyDrm: {
                                    shape: "S1q"
                                }
                            }
                        }
                    },
                    UserMetadata: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1y"
                    }
                }
            }
        },
        CreatePipeline: {
            http: {
                requestUri: "/2012-09-25/pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "InputBucket", "Role" ],
                members: {
                    Name: {},
                    InputBucket: {},
                    OutputBucket: {},
                    Role: {},
                    AwsKmsKeyArn: {},
                    Notifications: {
                        shape: "S2a"
                    },
                    ContentConfig: {
                        shape: "S2c"
                    },
                    ThumbnailConfig: {
                        shape: "S2c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "S2l"
                    },
                    Warnings: {
                        shape: "S2n"
                    }
                }
            }
        },
        CreatePreset: {
            http: {
                requestUri: "/2012-09-25/presets",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "Container" ],
                members: {
                    Name: {},
                    Description: {},
                    Container: {},
                    Video: {
                        shape: "S2r"
                    },
                    Audio: {
                        shape: "S37"
                    },
                    Thumbnails: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Preset: {
                        shape: "S3m"
                    },
                    Warning: {}
                }
            }
        },
        DeletePipeline: {
            http: {
                method: "DELETE",
                requestUri: "/2012-09-25/pipelines/{Id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePreset: {
            http: {
                method: "DELETE",
                requestUri: "/2012-09-25/presets/{Id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListJobsByPipeline: {
            http: {
                method: "GET",
                requestUri: "/2012-09-25/jobsByPipeline/{PipelineId}"
            },
            input: {
                type: "structure",
                required: [ "PipelineId" ],
                members: {
                    PipelineId: {
                        location: "uri",
                        locationName: "PipelineId"
                    },
                    Ascending: {
                        location: "querystring",
                        locationName: "Ascending"
                    },
                    PageToken: {
                        location: "querystring",
                        locationName: "PageToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        shape: "S3v"
                    },
                    NextPageToken: {}
                }
            }
        },
        ListJobsByStatus: {
            http: {
                method: "GET",
                requestUri: "/2012-09-25/jobsByStatus/{Status}"
            },
            input: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {
                        location: "uri",
                        locationName: "Status"
                    },
                    Ascending: {
                        location: "querystring",
                        locationName: "Ascending"
                    },
                    PageToken: {
                        location: "querystring",
                        locationName: "PageToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        shape: "S3v"
                    },
                    NextPageToken: {}
                }
            }
        },
        ListPipelines: {
            http: {
                method: "GET",
                requestUri: "/2012-09-25/pipelines"
            },
            input: {
                type: "structure",
                members: {
                    Ascending: {
                        location: "querystring",
                        locationName: "Ascending"
                    },
                    PageToken: {
                        location: "querystring",
                        locationName: "PageToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipelines: {
                        type: "list",
                        member: {
                            shape: "S2l"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListPresets: {
            http: {
                method: "GET",
                requestUri: "/2012-09-25/presets"
            },
            input: {
                type: "structure",
                members: {
                    Ascending: {
                        location: "querystring",
                        locationName: "Ascending"
                    },
                    PageToken: {
                        location: "querystring",
                        locationName: "PageToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Presets: {
                        type: "list",
                        member: {
                            shape: "S3m"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ReadJob: {
            http: {
                method: "GET",
                requestUri: "/2012-09-25/jobs/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1y"
                    }
                }
            }
        },
        ReadPipeline: {
            http: {
                method: "GET",
                requestUri: "/2012-09-25/pipelines/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "S2l"
                    },
                    Warnings: {
                        shape: "S2n"
                    }
                }
            }
        },
        ReadPreset: {
            http: {
                method: "GET",
                requestUri: "/2012-09-25/presets/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Preset: {
                        shape: "S3m"
                    }
                }
            }
        },
        TestRole: {
            http: {
                requestUri: "/2012-09-25/roleTests",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Role", "InputBucket", "OutputBucket", "Topics" ],
                members: {
                    Role: {},
                    InputBucket: {},
                    OutputBucket: {},
                    Topics: {
                        type: "list",
                        member: {}
                    }
                },
                deprecated: true
            },
            output: {
                type: "structure",
                members: {
                    Success: {},
                    Messages: {
                        type: "list",
                        member: {}
                    }
                },
                deprecated: true
            },
            deprecated: true
        },
        UpdatePipeline: {
            http: {
                method: "PUT",
                requestUri: "/2012-09-25/pipelines/{Id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Name: {},
                    InputBucket: {},
                    Role: {},
                    AwsKmsKeyArn: {},
                    Notifications: {
                        shape: "S2a"
                    },
                    ContentConfig: {
                        shape: "S2c"
                    },
                    ThumbnailConfig: {
                        shape: "S2c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "S2l"
                    },
                    Warnings: {
                        shape: "S2n"
                    }
                }
            }
        },
        UpdatePipelineNotifications: {
            http: {
                requestUri: "/2012-09-25/pipelines/{Id}/notifications"
            },
            input: {
                type: "structure",
                required: [ "Id", "Notifications" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Notifications: {
                        shape: "S2a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "S2l"
                    }
                }
            }
        },
        UpdatePipelineStatus: {
            http: {
                requestUri: "/2012-09-25/pipelines/{Id}/status"
            },
            input: {
                type: "structure",
                required: [ "Id", "Status" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Pipeline: {
                        shape: "S2l"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                Key: {},
                FrameRate: {},
                Resolution: {},
                AspectRatio: {},
                Interlaced: {},
                Container: {},
                Encryption: {
                    shape: "Sc"
                },
                TimeSpan: {
                    shape: "Sg"
                },
                InputCaptions: {
                    type: "structure",
                    members: {
                        MergePolicy: {},
                        CaptionSources: {
                            shape: "Sk"
                        }
                    }
                },
                DetectedProperties: {
                    type: "structure",
                    members: {
                        Width: {
                            type: "integer"
                        },
                        Height: {
                            type: "integer"
                        },
                        FrameRate: {},
                        FileSize: {
                            type: "long"
                        },
                        DurationMillis: {
                            type: "long"
                        }
                    }
                }
            }
        },
        Sc: {
            type: "structure",
            members: {
                Mode: {},
                Key: {},
                KeyMd5: {},
                InitializationVector: {}
            }
        },
        Sg: {
            type: "structure",
            members: {
                StartTime: {},
                Duration: {}
            }
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Language: {},
                    TimeOffset: {},
                    Label: {},
                    Encryption: {
                        shape: "Sc"
                    }
                }
            }
        },
        St: {
            type: "list",
            member: {
                shape: "S5"
            }
        },
        Su: {
            type: "structure",
            members: {
                Key: {},
                ThumbnailPattern: {},
                ThumbnailEncryption: {
                    shape: "Sc"
                },
                Rotate: {},
                PresetId: {},
                SegmentDuration: {},
                Watermarks: {
                    shape: "Sx"
                },
                AlbumArt: {
                    shape: "S11"
                },
                Composition: {
                    shape: "S19",
                    deprecated: true
                },
                Captions: {
                    shape: "S1b"
                },
                Encryption: {
                    shape: "Sc"
                }
            }
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PresetWatermarkId: {},
                    InputKey: {},
                    Encryption: {
                        shape: "Sc"
                    }
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                MergePolicy: {},
                Artwork: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            InputKey: {},
                            MaxWidth: {},
                            MaxHeight: {},
                            SizingPolicy: {},
                            PaddingPolicy: {},
                            AlbumArtFormat: {},
                            Encryption: {
                                shape: "Sc"
                            }
                        }
                    }
                }
            }
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TimeSpan: {
                        shape: "Sg"
                    }
                },
                deprecated: true
            },
            deprecated: true
        },
        S1b: {
            type: "structure",
            members: {
                MergePolicy: {
                    deprecated: true
                },
                CaptionSources: {
                    shape: "Sk",
                    deprecated: true
                },
                CaptionFormats: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Format: {},
                            Pattern: {},
                            Encryption: {
                                shape: "Sc"
                            }
                        }
                    }
                }
            }
        },
        S1l: {
            type: "list",
            member: {}
        },
        S1m: {
            type: "structure",
            members: {
                Method: {},
                Key: {},
                KeyMd5: {},
                InitializationVector: {},
                LicenseAcquisitionUrl: {},
                KeyStoragePolicy: {}
            }
        },
        S1q: {
            type: "structure",
            members: {
                Format: {},
                Key: {},
                KeyMd5: {},
                KeyId: {},
                InitializationVector: {},
                LicenseAcquisitionUrl: {}
            }
        },
        S1v: {
            type: "map",
            key: {},
            value: {}
        },
        S1y: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                PipelineId: {},
                Input: {
                    shape: "S5"
                },
                Inputs: {
                    shape: "St"
                },
                Output: {
                    shape: "S1z"
                },
                Outputs: {
                    type: "list",
                    member: {
                        shape: "S1z"
                    }
                },
                OutputKeyPrefix: {},
                Playlists: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            Format: {},
                            OutputKeys: {
                                shape: "S1l"
                            },
                            HlsContentProtection: {
                                shape: "S1m"
                            },
                            PlayReadyDrm: {
                                shape: "S1q"
                            },
                            Status: {},
                            StatusDetail: {}
                        }
                    }
                },
                Status: {},
                UserMetadata: {
                    shape: "S1v"
                },
                Timing: {
                    type: "structure",
                    members: {
                        SubmitTimeMillis: {
                            type: "long"
                        },
                        StartTimeMillis: {
                            type: "long"
                        },
                        FinishTimeMillis: {
                            type: "long"
                        }
                    }
                }
            }
        },
        S1z: {
            type: "structure",
            members: {
                Id: {},
                Key: {},
                ThumbnailPattern: {},
                ThumbnailEncryption: {
                    shape: "Sc"
                },
                Rotate: {},
                PresetId: {},
                SegmentDuration: {},
                Status: {},
                StatusDetail: {},
                Duration: {
                    type: "long"
                },
                Width: {
                    type: "integer"
                },
                Height: {
                    type: "integer"
                },
                FrameRate: {},
                FileSize: {
                    type: "long"
                },
                DurationMillis: {
                    type: "long"
                },
                Watermarks: {
                    shape: "Sx"
                },
                AlbumArt: {
                    shape: "S11"
                },
                Composition: {
                    shape: "S19",
                    deprecated: true
                },
                Captions: {
                    shape: "S1b"
                },
                Encryption: {
                    shape: "Sc"
                },
                AppliedColorSpaceConversion: {}
            }
        },
        S2a: {
            type: "structure",
            members: {
                Progressing: {},
                Completed: {},
                Warning: {},
                Error: {}
            }
        },
        S2c: {
            type: "structure",
            members: {
                Bucket: {},
                StorageClass: {},
                Permissions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            GranteeType: {},
                            Grantee: {},
                            Access: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                Status: {},
                InputBucket: {},
                OutputBucket: {},
                Role: {},
                AwsKmsKeyArn: {},
                Notifications: {
                    shape: "S2a"
                },
                ContentConfig: {
                    shape: "S2c"
                },
                ThumbnailConfig: {
                    shape: "S2c"
                }
            }
        },
        S2n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Code: {},
                    Message: {}
                }
            }
        },
        S2r: {
            type: "structure",
            members: {
                Codec: {},
                CodecOptions: {
                    type: "map",
                    key: {},
                    value: {}
                },
                KeyframesMaxDist: {},
                FixedGOP: {},
                BitRate: {},
                FrameRate: {},
                MaxFrameRate: {},
                Resolution: {},
                AspectRatio: {},
                MaxWidth: {},
                MaxHeight: {},
                DisplayAspectRatio: {},
                SizingPolicy: {},
                PaddingPolicy: {},
                Watermarks: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Id: {},
                            MaxWidth: {},
                            MaxHeight: {},
                            SizingPolicy: {},
                            HorizontalAlign: {},
                            HorizontalOffset: {},
                            VerticalAlign: {},
                            VerticalOffset: {},
                            Opacity: {},
                            Target: {}
                        }
                    }
                }
            }
        },
        S37: {
            type: "structure",
            members: {
                Codec: {},
                SampleRate: {},
                BitRate: {},
                Channels: {},
                AudioPackingMode: {},
                CodecOptions: {
                    type: "structure",
                    members: {
                        Profile: {},
                        BitDepth: {},
                        BitOrder: {},
                        Signed: {}
                    }
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                Format: {},
                Interval: {},
                Resolution: {},
                AspectRatio: {},
                MaxWidth: {},
                MaxHeight: {},
                SizingPolicy: {},
                PaddingPolicy: {}
            }
        },
        S3m: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                Description: {},
                Container: {},
                Audio: {
                    shape: "S37"
                },
                Video: {
                    shape: "S2r"
                },
                Thumbnails: {
                    shape: "S3i"
                },
                Type: {}
            }
        },
        S3v: {
            type: "list",
            member: {
                shape: "S1y"
            }
        }
    },
    paginators: {
        ListJobsByPipeline: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            result_key: "Jobs"
        },
        ListJobsByStatus: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            result_key: "Jobs"
        },
        ListPipelines: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            result_key: "Pipelines"
        },
        ListPresets: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            result_key: "Presets"
        }
    },
    waiters: {
        JobComplete: {
            delay: 30,
            operation: "ReadJob",
            maxAttempts: 120,
            acceptors: [ {
                expected: "Complete",
                matcher: "path",
                state: "success",
                argument: "Job.Status"
            }, {
                expected: "Canceled",
                matcher: "path",
                state: "failure",
                argument: "Job.Status"
            }, {
                expected: "Error",
                matcher: "path",
                state: "failure",
                argument: "Job.Status"
            } ]
        }
    }
};

AWS.apiLoader.services["firehose"] = {};

AWS.Firehose = AWS.Service.defineService("firehose", [ "2015-08-04" ]);

AWS.apiLoader.services["firehose"]["2015-08-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-08-04",
        endpointPrefix: "firehose",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Firehose",
        serviceFullName: "Amazon Kinesis Firehose",
        serviceId: "Firehose",
        signatureVersion: "v4",
        targetPrefix: "Firehose_20150804",
        uid: "firehose-2015-08-04"
    },
    operations: {
        CreateDeliveryStream: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName" ],
                members: {
                    DeliveryStreamName: {},
                    DeliveryStreamType: {},
                    KinesisStreamSourceConfiguration: {
                        type: "structure",
                        required: [ "KinesisStreamARN", "RoleARN" ],
                        members: {
                            KinesisStreamARN: {},
                            RoleARN: {}
                        }
                    },
                    DeliveryStreamEncryptionConfigurationInput: {
                        shape: "S7"
                    },
                    S3DestinationConfiguration: {
                        shape: "Sa",
                        deprecated: true
                    },
                    ExtendedS3DestinationConfiguration: {
                        type: "structure",
                        required: [ "RoleARN", "BucketARN" ],
                        members: {
                            RoleARN: {},
                            BucketARN: {},
                            Prefix: {},
                            ErrorOutputPrefix: {},
                            BufferingHints: {
                                shape: "Se"
                            },
                            CompressionFormat: {},
                            EncryptionConfiguration: {
                                shape: "Si"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            S3BackupMode: {},
                            S3BackupConfiguration: {
                                shape: "Sa"
                            },
                            DataFormatConversionConfiguration: {
                                shape: "Sz"
                            },
                            DynamicPartitioningConfiguration: {
                                shape: "S1o"
                            }
                        }
                    },
                    RedshiftDestinationConfiguration: {
                        type: "structure",
                        required: [ "RoleARN", "ClusterJDBCURL", "CopyCommand", "Username", "Password", "S3Configuration" ],
                        members: {
                            RoleARN: {},
                            ClusterJDBCURL: {},
                            CopyCommand: {
                                shape: "S1t"
                            },
                            Username: {
                                shape: "S1x"
                            },
                            Password: {
                                shape: "S1y"
                            },
                            RetryOptions: {
                                shape: "S1z"
                            },
                            S3Configuration: {
                                shape: "Sa"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            S3BackupMode: {},
                            S3BackupConfiguration: {
                                shape: "Sa"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            }
                        }
                    },
                    ElasticsearchDestinationConfiguration: {
                        type: "structure",
                        required: [ "RoleARN", "IndexName", "S3Configuration" ],
                        members: {
                            RoleARN: {},
                            DomainARN: {},
                            ClusterEndpoint: {},
                            IndexName: {},
                            TypeName: {},
                            IndexRotationPeriod: {},
                            BufferingHints: {
                                shape: "S28"
                            },
                            RetryOptions: {
                                shape: "S2b"
                            },
                            S3BackupMode: {},
                            S3Configuration: {
                                shape: "Sa"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            VpcConfiguration: {
                                shape: "S2e"
                            },
                            DocumentIdOptions: {
                                shape: "S2h"
                            }
                        }
                    },
                    AmazonopensearchserviceDestinationConfiguration: {
                        type: "structure",
                        required: [ "RoleARN", "IndexName", "S3Configuration" ],
                        members: {
                            RoleARN: {},
                            DomainARN: {},
                            ClusterEndpoint: {},
                            IndexName: {},
                            TypeName: {},
                            IndexRotationPeriod: {},
                            BufferingHints: {
                                shape: "S2p"
                            },
                            RetryOptions: {
                                shape: "S2s"
                            },
                            S3BackupMode: {},
                            S3Configuration: {
                                shape: "Sa"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            VpcConfiguration: {
                                shape: "S2e"
                            },
                            DocumentIdOptions: {
                                shape: "S2h"
                            }
                        }
                    },
                    SplunkDestinationConfiguration: {
                        type: "structure",
                        required: [ "HECEndpoint", "HECEndpointType", "HECToken", "S3Configuration" ],
                        members: {
                            HECEndpoint: {},
                            HECEndpointType: {},
                            HECToken: {},
                            HECAcknowledgmentTimeoutInSeconds: {
                                type: "integer"
                            },
                            RetryOptions: {
                                shape: "S30"
                            },
                            S3BackupMode: {},
                            S3Configuration: {
                                shape: "Sa"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            BufferingHints: {
                                shape: "S33"
                            }
                        }
                    },
                    HttpEndpointDestinationConfiguration: {
                        type: "structure",
                        required: [ "EndpointConfiguration", "S3Configuration" ],
                        members: {
                            EndpointConfiguration: {
                                shape: "S37"
                            },
                            BufferingHints: {
                                shape: "S3b"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            RequestConfiguration: {
                                shape: "S3e"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            RoleARN: {},
                            RetryOptions: {
                                shape: "S3k"
                            },
                            S3BackupMode: {},
                            S3Configuration: {
                                shape: "Sa"
                            }
                        }
                    },
                    Tags: {
                        shape: "S3n"
                    },
                    AmazonOpenSearchServerlessDestinationConfiguration: {
                        type: "structure",
                        required: [ "RoleARN", "IndexName", "S3Configuration" ],
                        members: {
                            RoleARN: {},
                            CollectionEndpoint: {},
                            IndexName: {},
                            BufferingHints: {
                                shape: "S3u"
                            },
                            RetryOptions: {
                                shape: "S3x"
                            },
                            S3BackupMode: {},
                            S3Configuration: {
                                shape: "Sa"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            VpcConfiguration: {
                                shape: "S2e"
                            }
                        }
                    },
                    MSKSourceConfiguration: {
                        type: "structure",
                        required: [ "MSKClusterARN", "TopicName", "AuthenticationConfiguration" ],
                        members: {
                            MSKClusterARN: {},
                            TopicName: {},
                            AuthenticationConfiguration: {
                                shape: "S43"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeliveryStreamARN: {}
                }
            }
        },
        DeleteDeliveryStream: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName" ],
                members: {
                    DeliveryStreamName: {},
                    AllowForceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeDeliveryStream: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName" ],
                members: {
                    DeliveryStreamName: {},
                    Limit: {
                        type: "integer"
                    },
                    ExclusiveStartDestinationId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeliveryStreamDescription" ],
                members: {
                    DeliveryStreamDescription: {
                        type: "structure",
                        required: [ "DeliveryStreamName", "DeliveryStreamARN", "DeliveryStreamStatus", "DeliveryStreamType", "VersionId", "Destinations", "HasMoreDestinations" ],
                        members: {
                            DeliveryStreamName: {},
                            DeliveryStreamARN: {},
                            DeliveryStreamStatus: {},
                            FailureDescription: {
                                shape: "S4f"
                            },
                            DeliveryStreamEncryptionConfiguration: {
                                type: "structure",
                                members: {
                                    KeyARN: {},
                                    KeyType: {},
                                    Status: {},
                                    FailureDescription: {
                                        shape: "S4f"
                                    }
                                }
                            },
                            DeliveryStreamType: {},
                            VersionId: {},
                            CreateTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdateTimestamp: {
                                type: "timestamp"
                            },
                            Source: {
                                type: "structure",
                                members: {
                                    KinesisStreamSourceDescription: {
                                        type: "structure",
                                        members: {
                                            KinesisStreamARN: {},
                                            RoleARN: {},
                                            DeliveryStartTimestamp: {
                                                type: "timestamp"
                                            }
                                        }
                                    },
                                    MSKSourceDescription: {
                                        type: "structure",
                                        members: {
                                            MSKClusterARN: {},
                                            TopicName: {},
                                            AuthenticationConfiguration: {
                                                shape: "S43"
                                            },
                                            DeliveryStartTimestamp: {
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                }
                            },
                            Destinations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "DestinationId" ],
                                    members: {
                                        DestinationId: {},
                                        S3DestinationDescription: {
                                            shape: "S4r"
                                        },
                                        ExtendedS3DestinationDescription: {
                                            type: "structure",
                                            required: [ "RoleARN", "BucketARN", "BufferingHints", "CompressionFormat", "EncryptionConfiguration" ],
                                            members: {
                                                RoleARN: {},
                                                BucketARN: {},
                                                Prefix: {},
                                                ErrorOutputPrefix: {},
                                                BufferingHints: {
                                                    shape: "Se"
                                                },
                                                CompressionFormat: {},
                                                EncryptionConfiguration: {
                                                    shape: "Si"
                                                },
                                                CloudWatchLoggingOptions: {
                                                    shape: "Sl"
                                                },
                                                ProcessingConfiguration: {
                                                    shape: "Sq"
                                                },
                                                S3BackupMode: {},
                                                S3BackupDescription: {
                                                    shape: "S4r"
                                                },
                                                DataFormatConversionConfiguration: {
                                                    shape: "Sz"
                                                },
                                                DynamicPartitioningConfiguration: {
                                                    shape: "S1o"
                                                }
                                            }
                                        },
                                        RedshiftDestinationDescription: {
                                            type: "structure",
                                            required: [ "RoleARN", "ClusterJDBCURL", "CopyCommand", "Username", "S3DestinationDescription" ],
                                            members: {
                                                RoleARN: {},
                                                ClusterJDBCURL: {},
                                                CopyCommand: {
                                                    shape: "S1t"
                                                },
                                                Username: {
                                                    shape: "S1x"
                                                },
                                                RetryOptions: {
                                                    shape: "S1z"
                                                },
                                                S3DestinationDescription: {
                                                    shape: "S4r"
                                                },
                                                ProcessingConfiguration: {
                                                    shape: "Sq"
                                                },
                                                S3BackupMode: {},
                                                S3BackupDescription: {
                                                    shape: "S4r"
                                                },
                                                CloudWatchLoggingOptions: {
                                                    shape: "Sl"
                                                }
                                            }
                                        },
                                        ElasticsearchDestinationDescription: {
                                            type: "structure",
                                            members: {
                                                RoleARN: {},
                                                DomainARN: {},
                                                ClusterEndpoint: {},
                                                IndexName: {},
                                                TypeName: {},
                                                IndexRotationPeriod: {},
                                                BufferingHints: {
                                                    shape: "S28"
                                                },
                                                RetryOptions: {
                                                    shape: "S2b"
                                                },
                                                S3BackupMode: {},
                                                S3DestinationDescription: {
                                                    shape: "S4r"
                                                },
                                                ProcessingConfiguration: {
                                                    shape: "Sq"
                                                },
                                                CloudWatchLoggingOptions: {
                                                    shape: "Sl"
                                                },
                                                VpcConfigurationDescription: {
                                                    shape: "S4v"
                                                },
                                                DocumentIdOptions: {
                                                    shape: "S2h"
                                                }
                                            }
                                        },
                                        AmazonopensearchserviceDestinationDescription: {
                                            type: "structure",
                                            members: {
                                                RoleARN: {},
                                                DomainARN: {},
                                                ClusterEndpoint: {},
                                                IndexName: {},
                                                TypeName: {},
                                                IndexRotationPeriod: {},
                                                BufferingHints: {
                                                    shape: "S2p"
                                                },
                                                RetryOptions: {
                                                    shape: "S2s"
                                                },
                                                S3BackupMode: {},
                                                S3DestinationDescription: {
                                                    shape: "S4r"
                                                },
                                                ProcessingConfiguration: {
                                                    shape: "Sq"
                                                },
                                                CloudWatchLoggingOptions: {
                                                    shape: "Sl"
                                                },
                                                VpcConfigurationDescription: {
                                                    shape: "S4v"
                                                },
                                                DocumentIdOptions: {
                                                    shape: "S2h"
                                                }
                                            }
                                        },
                                        SplunkDestinationDescription: {
                                            type: "structure",
                                            members: {
                                                HECEndpoint: {},
                                                HECEndpointType: {},
                                                HECToken: {},
                                                HECAcknowledgmentTimeoutInSeconds: {
                                                    type: "integer"
                                                },
                                                RetryOptions: {
                                                    shape: "S30"
                                                },
                                                S3BackupMode: {},
                                                S3DestinationDescription: {
                                                    shape: "S4r"
                                                },
                                                ProcessingConfiguration: {
                                                    shape: "Sq"
                                                },
                                                CloudWatchLoggingOptions: {
                                                    shape: "Sl"
                                                },
                                                BufferingHints: {
                                                    shape: "S33"
                                                }
                                            }
                                        },
                                        HttpEndpointDestinationDescription: {
                                            type: "structure",
                                            members: {
                                                EndpointConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        Url: {
                                                            shape: "S38"
                                                        },
                                                        Name: {}
                                                    }
                                                },
                                                BufferingHints: {
                                                    shape: "S3b"
                                                },
                                                CloudWatchLoggingOptions: {
                                                    shape: "Sl"
                                                },
                                                RequestConfiguration: {
                                                    shape: "S3e"
                                                },
                                                ProcessingConfiguration: {
                                                    shape: "Sq"
                                                },
                                                RoleARN: {},
                                                RetryOptions: {
                                                    shape: "S3k"
                                                },
                                                S3BackupMode: {},
                                                S3DestinationDescription: {
                                                    shape: "S4r"
                                                }
                                            }
                                        },
                                        AmazonOpenSearchServerlessDestinationDescription: {
                                            type: "structure",
                                            members: {
                                                RoleARN: {},
                                                CollectionEndpoint: {},
                                                IndexName: {},
                                                BufferingHints: {
                                                    shape: "S3u"
                                                },
                                                RetryOptions: {
                                                    shape: "S3x"
                                                },
                                                S3BackupMode: {},
                                                S3DestinationDescription: {
                                                    shape: "S4r"
                                                },
                                                ProcessingConfiguration: {
                                                    shape: "Sq"
                                                },
                                                CloudWatchLoggingOptions: {
                                                    shape: "Sl"
                                                },
                                                VpcConfigurationDescription: {
                                                    shape: "S4v"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            HasMoreDestinations: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        ListDeliveryStreams: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    DeliveryStreamType: {},
                    ExclusiveStartDeliveryStreamName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeliveryStreamNames", "HasMoreDeliveryStreams" ],
                members: {
                    DeliveryStreamNames: {
                        type: "list",
                        member: {}
                    },
                    HasMoreDeliveryStreams: {
                        type: "boolean"
                    }
                }
            }
        },
        ListTagsForDeliveryStream: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName" ],
                members: {
                    DeliveryStreamName: {},
                    ExclusiveStartTagKey: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Tags", "HasMoreTags" ],
                members: {
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S3o"
                        }
                    },
                    HasMoreTags: {
                        type: "boolean"
                    }
                }
            }
        },
        PutRecord: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName", "Record" ],
                members: {
                    DeliveryStreamName: {},
                    Record: {
                        shape: "S5a"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RecordId" ],
                members: {
                    RecordId: {},
                    Encrypted: {
                        type: "boolean"
                    }
                }
            }
        },
        PutRecordBatch: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName", "Records" ],
                members: {
                    DeliveryStreamName: {},
                    Records: {
                        type: "list",
                        member: {
                            shape: "S5a"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FailedPutCount", "RequestResponses" ],
                members: {
                    FailedPutCount: {
                        type: "integer"
                    },
                    Encrypted: {
                        type: "boolean"
                    },
                    RequestResponses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecordId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        StartDeliveryStreamEncryption: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName" ],
                members: {
                    DeliveryStreamName: {},
                    DeliveryStreamEncryptionConfigurationInput: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopDeliveryStreamEncryption: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName" ],
                members: {
                    DeliveryStreamName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagDeliveryStream: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName", "Tags" ],
                members: {
                    DeliveryStreamName: {},
                    Tags: {
                        shape: "S3n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagDeliveryStream: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName", "TagKeys" ],
                members: {
                    DeliveryStreamName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDestination: {
            input: {
                type: "structure",
                required: [ "DeliveryStreamName", "CurrentDeliveryStreamVersionId", "DestinationId" ],
                members: {
                    DeliveryStreamName: {},
                    CurrentDeliveryStreamVersionId: {},
                    DestinationId: {},
                    S3DestinationUpdate: {
                        shape: "S5v",
                        deprecated: true
                    },
                    ExtendedS3DestinationUpdate: {
                        type: "structure",
                        members: {
                            RoleARN: {},
                            BucketARN: {},
                            Prefix: {},
                            ErrorOutputPrefix: {},
                            BufferingHints: {
                                shape: "Se"
                            },
                            CompressionFormat: {},
                            EncryptionConfiguration: {
                                shape: "Si"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            S3BackupMode: {},
                            S3BackupUpdate: {
                                shape: "S5v"
                            },
                            DataFormatConversionConfiguration: {
                                shape: "Sz"
                            },
                            DynamicPartitioningConfiguration: {
                                shape: "S1o"
                            }
                        }
                    },
                    RedshiftDestinationUpdate: {
                        type: "structure",
                        members: {
                            RoleARN: {},
                            ClusterJDBCURL: {},
                            CopyCommand: {
                                shape: "S1t"
                            },
                            Username: {
                                shape: "S1x"
                            },
                            Password: {
                                shape: "S1y"
                            },
                            RetryOptions: {
                                shape: "S1z"
                            },
                            S3Update: {
                                shape: "S5v"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            S3BackupMode: {},
                            S3BackupUpdate: {
                                shape: "S5v"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            }
                        }
                    },
                    ElasticsearchDestinationUpdate: {
                        type: "structure",
                        members: {
                            RoleARN: {},
                            DomainARN: {},
                            ClusterEndpoint: {},
                            IndexName: {},
                            TypeName: {},
                            IndexRotationPeriod: {},
                            BufferingHints: {
                                shape: "S28"
                            },
                            RetryOptions: {
                                shape: "S2b"
                            },
                            S3Update: {
                                shape: "S5v"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            DocumentIdOptions: {
                                shape: "S2h"
                            }
                        }
                    },
                    AmazonopensearchserviceDestinationUpdate: {
                        type: "structure",
                        members: {
                            RoleARN: {},
                            DomainARN: {},
                            ClusterEndpoint: {},
                            IndexName: {},
                            TypeName: {},
                            IndexRotationPeriod: {},
                            BufferingHints: {
                                shape: "S2p"
                            },
                            RetryOptions: {
                                shape: "S2s"
                            },
                            S3Update: {
                                shape: "S5v"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            DocumentIdOptions: {
                                shape: "S2h"
                            }
                        }
                    },
                    SplunkDestinationUpdate: {
                        type: "structure",
                        members: {
                            HECEndpoint: {},
                            HECEndpointType: {},
                            HECToken: {},
                            HECAcknowledgmentTimeoutInSeconds: {
                                type: "integer"
                            },
                            RetryOptions: {
                                shape: "S30"
                            },
                            S3BackupMode: {},
                            S3Update: {
                                shape: "S5v"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            BufferingHints: {
                                shape: "S33"
                            }
                        }
                    },
                    HttpEndpointDestinationUpdate: {
                        type: "structure",
                        members: {
                            EndpointConfiguration: {
                                shape: "S37"
                            },
                            BufferingHints: {
                                shape: "S3b"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            },
                            RequestConfiguration: {
                                shape: "S3e"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            RoleARN: {},
                            RetryOptions: {
                                shape: "S3k"
                            },
                            S3BackupMode: {},
                            S3Update: {
                                shape: "S5v"
                            }
                        }
                    },
                    AmazonOpenSearchServerlessDestinationUpdate: {
                        type: "structure",
                        members: {
                            RoleARN: {},
                            CollectionEndpoint: {},
                            IndexName: {},
                            BufferingHints: {
                                shape: "S3u"
                            },
                            RetryOptions: {
                                shape: "S3x"
                            },
                            S3Update: {
                                shape: "S5v"
                            },
                            ProcessingConfiguration: {
                                shape: "Sq"
                            },
                            CloudWatchLoggingOptions: {
                                shape: "Sl"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            required: [ "KeyType" ],
            members: {
                KeyARN: {},
                KeyType: {}
            }
        },
        Sa: {
            type: "structure",
            required: [ "RoleARN", "BucketARN" ],
            members: {
                RoleARN: {},
                BucketARN: {},
                Prefix: {},
                ErrorOutputPrefix: {},
                BufferingHints: {
                    shape: "Se"
                },
                CompressionFormat: {},
                EncryptionConfiguration: {
                    shape: "Si"
                },
                CloudWatchLoggingOptions: {
                    shape: "Sl"
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                SizeInMBs: {
                    type: "integer"
                },
                IntervalInSeconds: {
                    type: "integer"
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                NoEncryptionConfig: {},
                KMSEncryptionConfig: {
                    type: "structure",
                    required: [ "AWSKMSKeyARN" ],
                    members: {
                        AWSKMSKeyARN: {}
                    }
                }
            }
        },
        Sl: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                LogGroupName: {},
                LogStreamName: {}
            }
        },
        Sq: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                Processors: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Type: {},
                            Parameters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "ParameterName", "ParameterValue" ],
                                    members: {
                                        ParameterName: {},
                                        ParameterValue: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sz: {
            type: "structure",
            members: {
                SchemaConfiguration: {
                    type: "structure",
                    members: {
                        RoleARN: {},
                        CatalogId: {},
                        DatabaseName: {},
                        TableName: {},
                        Region: {},
                        VersionId: {}
                    }
                },
                InputFormatConfiguration: {
                    type: "structure",
                    members: {
                        Deserializer: {
                            type: "structure",
                            members: {
                                OpenXJsonSerDe: {
                                    type: "structure",
                                    members: {
                                        ConvertDotsInJsonKeysToUnderscores: {
                                            type: "boolean"
                                        },
                                        CaseInsensitive: {
                                            type: "boolean"
                                        },
                                        ColumnToJsonKeyMappings: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        }
                                    }
                                },
                                HiveJsonSerDe: {
                                    type: "structure",
                                    members: {
                                        TimestampFormats: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                OutputFormatConfiguration: {
                    type: "structure",
                    members: {
                        Serializer: {
                            type: "structure",
                            members: {
                                ParquetSerDe: {
                                    type: "structure",
                                    members: {
                                        BlockSizeBytes: {
                                            type: "integer"
                                        },
                                        PageSizeBytes: {
                                            type: "integer"
                                        },
                                        Compression: {},
                                        EnableDictionaryCompression: {
                                            type: "boolean"
                                        },
                                        MaxPaddingBytes: {
                                            type: "integer"
                                        },
                                        WriterVersion: {}
                                    }
                                },
                                OrcSerDe: {
                                    type: "structure",
                                    members: {
                                        StripeSizeBytes: {
                                            type: "integer"
                                        },
                                        BlockSizeBytes: {
                                            type: "integer"
                                        },
                                        RowIndexStride: {
                                            type: "integer"
                                        },
                                        EnablePadding: {
                                            type: "boolean"
                                        },
                                        PaddingTolerance: {
                                            type: "double"
                                        },
                                        Compression: {},
                                        BloomFilterColumns: {
                                            type: "list",
                                            member: {}
                                        },
                                        BloomFilterFalsePositiveProbability: {
                                            type: "double"
                                        },
                                        DictionaryKeyThreshold: {
                                            type: "double"
                                        },
                                        FormatVersion: {}
                                    }
                                }
                            }
                        }
                    }
                },
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                RetryOptions: {
                    type: "structure",
                    members: {
                        DurationInSeconds: {
                            type: "integer"
                        }
                    }
                },
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S1t: {
            type: "structure",
            required: [ "DataTableName" ],
            members: {
                DataTableName: {},
                DataTableColumns: {},
                CopyOptions: {}
            }
        },
        S1x: {
            type: "string",
            sensitive: true
        },
        S1y: {
            type: "string",
            sensitive: true
        },
        S1z: {
            type: "structure",
            members: {
                DurationInSeconds: {
                    type: "integer"
                }
            }
        },
        S28: {
            type: "structure",
            members: {
                IntervalInSeconds: {
                    type: "integer"
                },
                SizeInMBs: {
                    type: "integer"
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                DurationInSeconds: {
                    type: "integer"
                }
            }
        },
        S2e: {
            type: "structure",
            required: [ "SubnetIds", "RoleARN", "SecurityGroupIds" ],
            members: {
                SubnetIds: {
                    shape: "S2f"
                },
                RoleARN: {},
                SecurityGroupIds: {
                    shape: "S2g"
                }
            }
        },
        S2f: {
            type: "list",
            member: {}
        },
        S2g: {
            type: "list",
            member: {}
        },
        S2h: {
            type: "structure",
            required: [ "DefaultDocumentIdFormat" ],
            members: {
                DefaultDocumentIdFormat: {}
            }
        },
        S2p: {
            type: "structure",
            members: {
                IntervalInSeconds: {
                    type: "integer"
                },
                SizeInMBs: {
                    type: "integer"
                }
            }
        },
        S2s: {
            type: "structure",
            members: {
                DurationInSeconds: {
                    type: "integer"
                }
            }
        },
        S30: {
            type: "structure",
            members: {
                DurationInSeconds: {
                    type: "integer"
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                IntervalInSeconds: {
                    type: "integer"
                },
                SizeInMBs: {
                    type: "integer"
                }
            }
        },
        S37: {
            type: "structure",
            required: [ "Url" ],
            members: {
                Url: {
                    shape: "S38"
                },
                Name: {},
                AccessKey: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S38: {
            type: "string",
            sensitive: true
        },
        S3b: {
            type: "structure",
            members: {
                SizeInMBs: {
                    type: "integer"
                },
                IntervalInSeconds: {
                    type: "integer"
                }
            }
        },
        S3e: {
            type: "structure",
            members: {
                ContentEncoding: {},
                CommonAttributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AttributeName", "AttributeValue" ],
                        members: {
                            AttributeName: {
                                type: "string",
                                sensitive: true
                            },
                            AttributeValue: {
                                type: "string",
                                sensitive: true
                            }
                        }
                    }
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                DurationInSeconds: {
                    type: "integer"
                }
            }
        },
        S3n: {
            type: "list",
            member: {
                shape: "S3o"
            }
        },
        S3o: {
            type: "structure",
            required: [ "Key" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        S3u: {
            type: "structure",
            members: {
                IntervalInSeconds: {
                    type: "integer"
                },
                SizeInMBs: {
                    type: "integer"
                }
            }
        },
        S3x: {
            type: "structure",
            members: {
                DurationInSeconds: {
                    type: "integer"
                }
            }
        },
        S43: {
            type: "structure",
            required: [ "RoleARN", "Connectivity" ],
            members: {
                RoleARN: {},
                Connectivity: {}
            }
        },
        S4f: {
            type: "structure",
            required: [ "Type", "Details" ],
            members: {
                Type: {},
                Details: {}
            }
        },
        S4r: {
            type: "structure",
            required: [ "RoleARN", "BucketARN", "BufferingHints", "CompressionFormat", "EncryptionConfiguration" ],
            members: {
                RoleARN: {},
                BucketARN: {},
                Prefix: {},
                ErrorOutputPrefix: {},
                BufferingHints: {
                    shape: "Se"
                },
                CompressionFormat: {},
                EncryptionConfiguration: {
                    shape: "Si"
                },
                CloudWatchLoggingOptions: {
                    shape: "Sl"
                }
            }
        },
        S4v: {
            type: "structure",
            required: [ "SubnetIds", "RoleARN", "SecurityGroupIds", "VpcId" ],
            members: {
                SubnetIds: {
                    shape: "S2f"
                },
                RoleARN: {},
                SecurityGroupIds: {
                    shape: "S2g"
                },
                VpcId: {}
            }
        },
        S5a: {
            type: "structure",
            required: [ "Data" ],
            members: {
                Data: {
                    type: "blob"
                }
            }
        },
        S5v: {
            type: "structure",
            members: {
                RoleARN: {},
                BucketARN: {},
                Prefix: {},
                ErrorOutputPrefix: {},
                BufferingHints: {
                    shape: "Se"
                },
                CompressionFormat: {},
                EncryptionConfiguration: {
                    shape: "Si"
                },
                CloudWatchLoggingOptions: {
                    shape: "Sl"
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["gamelift"] = {};

AWS.GameLift = AWS.Service.defineService("gamelift", [ "2015-10-01" ]);

AWS.apiLoader.services["gamelift"]["2015-10-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-10-01",
        endpointPrefix: "gamelift",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon GameLift",
        serviceId: "GameLift",
        signatureVersion: "v4",
        targetPrefix: "GameLift",
        uid: "gamelift-2015-10-01"
    },
    operations: {
        AcceptMatch: {
            input: {
                type: "structure",
                required: [ "TicketId", "PlayerIds", "AcceptanceType" ],
                members: {
                    TicketId: {},
                    PlayerIds: {
                        type: "list",
                        member: {
                            shape: "S4"
                        },
                        sensitive: true
                    },
                    AcceptanceType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ClaimGameServer: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName" ],
                members: {
                    GameServerGroupName: {},
                    GameServerId: {},
                    GameServerData: {},
                    FilterOption: {
                        type: "structure",
                        members: {
                            InstanceStatuses: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServer: {
                        shape: "Sf"
                    }
                }
            }
        },
        CreateAlias: {
            input: {
                type: "structure",
                required: [ "Name", "RoutingStrategy" ],
                members: {
                    Name: {},
                    Description: {},
                    RoutingStrategy: {
                        shape: "Sq"
                    },
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Alias: {
                        shape: "Sz"
                    }
                }
            }
        },
        CreateBuild: {
            input: {
                type: "structure",
                members: {
                    Name: {},
                    Version: {},
                    StorageLocation: {
                        shape: "S13"
                    },
                    OperatingSystem: {},
                    Tags: {
                        shape: "Su"
                    },
                    ServerSdkVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Build: {
                        shape: "S18"
                    },
                    UploadCredentials: {
                        shape: "S1d"
                    },
                    StorageLocation: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateFleet: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    BuildId: {},
                    ScriptId: {},
                    ServerLaunchPath: {},
                    ServerLaunchParameters: {},
                    LogPaths: {
                        shape: "S1j"
                    },
                    EC2InstanceType: {},
                    EC2InboundPermissions: {
                        shape: "S1l"
                    },
                    NewGameSessionProtectionPolicy: {},
                    RuntimeConfiguration: {
                        shape: "S1r"
                    },
                    ResourceCreationLimitPolicy: {
                        shape: "S1x"
                    },
                    MetricGroups: {
                        shape: "S1z"
                    },
                    PeerVpcAwsAccountId: {},
                    PeerVpcId: {},
                    FleetType: {},
                    InstanceRoleArn: {},
                    CertificateConfiguration: {
                        shape: "S22"
                    },
                    Locations: {
                        shape: "S24"
                    },
                    Tags: {
                        shape: "Su"
                    },
                    ComputeType: {},
                    AnywhereConfiguration: {
                        shape: "S28"
                    },
                    InstanceRoleCredentialsProvider: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetAttributes: {
                        shape: "S2c"
                    },
                    LocationStates: {
                        shape: "S2j"
                    }
                }
            }
        },
        CreateFleetLocations: {
            input: {
                type: "structure",
                required: [ "FleetId", "Locations" ],
                members: {
                    FleetId: {},
                    Locations: {
                        shape: "S24"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {},
                    LocationStates: {
                        shape: "S2j"
                    }
                }
            }
        },
        CreateGameServerGroup: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName", "RoleArn", "MinSize", "MaxSize", "LaunchTemplate", "InstanceDefinitions" ],
                members: {
                    GameServerGroupName: {},
                    RoleArn: {},
                    MinSize: {
                        type: "integer"
                    },
                    MaxSize: {
                        type: "integer"
                    },
                    LaunchTemplate: {
                        type: "structure",
                        members: {
                            LaunchTemplateId: {},
                            LaunchTemplateName: {},
                            Version: {}
                        }
                    },
                    InstanceDefinitions: {
                        shape: "S2u"
                    },
                    AutoScalingPolicy: {
                        type: "structure",
                        required: [ "TargetTrackingConfiguration" ],
                        members: {
                            EstimatedInstanceWarmup: {
                                type: "integer"
                            },
                            TargetTrackingConfiguration: {
                                type: "structure",
                                required: [ "TargetValue" ],
                                members: {
                                    TargetValue: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    BalancingStrategy: {},
                    GameServerProtectionPolicy: {},
                    VpcSubnets: {
                        type: "list",
                        member: {}
                    },
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServerGroup: {
                        shape: "S36"
                    }
                }
            }
        },
        CreateGameSession: {
            input: {
                type: "structure",
                required: [ "MaximumPlayerSessionCount" ],
                members: {
                    FleetId: {},
                    AliasId: {},
                    MaximumPlayerSessionCount: {
                        type: "integer"
                    },
                    Name: {},
                    GameProperties: {
                        shape: "S3d"
                    },
                    CreatorId: {},
                    GameSessionId: {},
                    IdempotencyToken: {},
                    GameSessionData: {},
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSession: {
                        shape: "S3k"
                    }
                }
            }
        },
        CreateGameSessionQueue: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    TimeoutInSeconds: {
                        type: "integer"
                    },
                    PlayerLatencyPolicies: {
                        shape: "S3t"
                    },
                    Destinations: {
                        shape: "S3v"
                    },
                    FilterConfiguration: {
                        shape: "S3y"
                    },
                    PriorityConfiguration: {
                        shape: "S40"
                    },
                    CustomEventData: {},
                    NotificationTarget: {},
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSessionQueue: {
                        shape: "S46"
                    }
                }
            }
        },
        CreateLocation: {
            input: {
                type: "structure",
                required: [ "LocationName" ],
                members: {
                    LocationName: {},
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Location: {
                        shape: "S4b"
                    }
                }
            }
        },
        CreateMatchmakingConfiguration: {
            input: {
                type: "structure",
                required: [ "Name", "RequestTimeoutSeconds", "AcceptanceRequired", "RuleSetName" ],
                members: {
                    Name: {},
                    Description: {},
                    GameSessionQueueArns: {
                        shape: "S4e"
                    },
                    RequestTimeoutSeconds: {
                        type: "integer"
                    },
                    AcceptanceTimeoutSeconds: {
                        type: "integer"
                    },
                    AcceptanceRequired: {
                        type: "boolean"
                    },
                    RuleSetName: {},
                    NotificationTarget: {},
                    AdditionalPlayerCount: {
                        type: "integer"
                    },
                    CustomEventData: {},
                    GameProperties: {
                        shape: "S3d"
                    },
                    GameSessionData: {},
                    BackfillMode: {},
                    FlexMatchMode: {},
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Configuration: {
                        shape: "S4p"
                    }
                }
            }
        },
        CreateMatchmakingRuleSet: {
            input: {
                type: "structure",
                required: [ "Name", "RuleSetBody" ],
                members: {
                    Name: {},
                    RuleSetBody: {},
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RuleSet" ],
                members: {
                    RuleSet: {
                        shape: "S4v"
                    }
                }
            }
        },
        CreatePlayerSession: {
            input: {
                type: "structure",
                required: [ "GameSessionId", "PlayerId" ],
                members: {
                    GameSessionId: {},
                    PlayerId: {
                        shape: "S4"
                    },
                    PlayerData: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PlayerSession: {
                        shape: "S4z"
                    }
                }
            }
        },
        CreatePlayerSessions: {
            input: {
                type: "structure",
                required: [ "GameSessionId", "PlayerIds" ],
                members: {
                    GameSessionId: {},
                    PlayerIds: {
                        type: "list",
                        member: {
                            shape: "S4"
                        },
                        sensitive: true
                    },
                    PlayerDataMap: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PlayerSessions: {
                        shape: "S56"
                    }
                }
            }
        },
        CreateScript: {
            input: {
                type: "structure",
                members: {
                    Name: {},
                    Version: {},
                    StorageLocation: {
                        shape: "S13"
                    },
                    ZipFile: {
                        type: "blob"
                    },
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Script: {
                        shape: "S5a"
                    }
                }
            }
        },
        CreateVpcPeeringAuthorization: {
            input: {
                type: "structure",
                required: [ "GameLiftAwsAccountId", "PeerVpcId" ],
                members: {
                    GameLiftAwsAccountId: {},
                    PeerVpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcPeeringAuthorization: {
                        shape: "S5d"
                    }
                }
            }
        },
        CreateVpcPeeringConnection: {
            input: {
                type: "structure",
                required: [ "FleetId", "PeerVpcAwsAccountId", "PeerVpcId" ],
                members: {
                    FleetId: {},
                    PeerVpcAwsAccountId: {},
                    PeerVpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAlias: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {}
                }
            }
        },
        DeleteBuild: {
            input: {
                type: "structure",
                required: [ "BuildId" ],
                members: {
                    BuildId: {}
                }
            }
        },
        DeleteFleet: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {}
                }
            }
        },
        DeleteFleetLocations: {
            input: {
                type: "structure",
                required: [ "FleetId", "Locations" ],
                members: {
                    FleetId: {},
                    Locations: {
                        shape: "S3z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {},
                    LocationStates: {
                        shape: "S2j"
                    }
                }
            }
        },
        DeleteGameServerGroup: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName" ],
                members: {
                    GameServerGroupName: {},
                    DeleteOption: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServerGroup: {
                        shape: "S36"
                    }
                }
            }
        },
        DeleteGameSessionQueue: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLocation: {
            input: {
                type: "structure",
                required: [ "LocationName" ],
                members: {
                    LocationName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMatchmakingConfiguration: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMatchmakingRuleSet: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteScalingPolicy: {
            input: {
                type: "structure",
                required: [ "Name", "FleetId" ],
                members: {
                    Name: {},
                    FleetId: {}
                }
            }
        },
        DeleteScript: {
            input: {
                type: "structure",
                required: [ "ScriptId" ],
                members: {
                    ScriptId: {}
                }
            }
        },
        DeleteVpcPeeringAuthorization: {
            input: {
                type: "structure",
                required: [ "GameLiftAwsAccountId", "PeerVpcId" ],
                members: {
                    GameLiftAwsAccountId: {},
                    PeerVpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteVpcPeeringConnection: {
            input: {
                type: "structure",
                required: [ "FleetId", "VpcPeeringConnectionId" ],
                members: {
                    FleetId: {},
                    VpcPeeringConnectionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterCompute: {
            input: {
                type: "structure",
                required: [ "FleetId", "ComputeName" ],
                members: {
                    FleetId: {},
                    ComputeName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterGameServer: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName", "GameServerId" ],
                members: {
                    GameServerGroupName: {},
                    GameServerId: {}
                }
            }
        },
        DescribeAlias: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Alias: {
                        shape: "Sz"
                    }
                }
            }
        },
        DescribeBuild: {
            input: {
                type: "structure",
                required: [ "BuildId" ],
                members: {
                    BuildId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Build: {
                        shape: "S18"
                    }
                }
            }
        },
        DescribeCompute: {
            input: {
                type: "structure",
                required: [ "FleetId", "ComputeName" ],
                members: {
                    FleetId: {},
                    ComputeName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Compute: {
                        shape: "S6f"
                    }
                }
            }
        },
        DescribeEC2InstanceLimits: {
            input: {
                type: "structure",
                members: {
                    EC2InstanceType: {},
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EC2InstanceLimits: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EC2InstanceType: {},
                                CurrentInstances: {
                                    type: "integer"
                                },
                                InstanceLimit: {
                                    type: "integer"
                                },
                                Location: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeFleetAttributes: {
            input: {
                type: "structure",
                members: {
                    FleetIds: {
                        shape: "S6p"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetAttributes: {
                        type: "list",
                        member: {
                            shape: "S2c"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFleetCapacity: {
            input: {
                type: "structure",
                members: {
                    FleetIds: {
                        shape: "S6p"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetCapacity: {
                        type: "list",
                        member: {
                            shape: "S6v"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFleetEvents: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventId: {},
                                ResourceId: {},
                                EventCode: {},
                                Message: {},
                                EventTime: {
                                    type: "timestamp"
                                },
                                PreSignedLogUrl: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFleetLocationAttributes: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {},
                    Locations: {
                        shape: "S3z"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {},
                    LocationAttributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LocationState: {
                                    shape: "S2k"
                                },
                                StoppedActions: {
                                    shape: "S2h"
                                },
                                UpdateStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFleetLocationCapacity: {
            input: {
                type: "structure",
                required: [ "FleetId", "Location" ],
                members: {
                    FleetId: {},
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetCapacity: {
                        shape: "S6v"
                    }
                }
            }
        },
        DescribeFleetLocationUtilization: {
            input: {
                type: "structure",
                required: [ "FleetId", "Location" ],
                members: {
                    FleetId: {},
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetUtilization: {
                        shape: "S7b"
                    }
                }
            }
        },
        DescribeFleetPortSettings: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {},
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {},
                    InboundPermissions: {
                        shape: "S1l"
                    },
                    UpdateStatus: {},
                    Location: {}
                }
            }
        },
        DescribeFleetUtilization: {
            input: {
                type: "structure",
                members: {
                    FleetIds: {
                        shape: "S6p"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetUtilization: {
                        type: "list",
                        member: {
                            shape: "S7b"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeGameServer: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName", "GameServerId" ],
                members: {
                    GameServerGroupName: {},
                    GameServerId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServer: {
                        shape: "Sf"
                    }
                }
            }
        },
        DescribeGameServerGroup: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName" ],
                members: {
                    GameServerGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServerGroup: {
                        shape: "S36"
                    }
                }
            }
        },
        DescribeGameServerInstances: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName" ],
                members: {
                    GameServerGroupName: {},
                    InstanceIds: {
                        type: "list",
                        member: {}
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServerInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GameServerGroupName: {},
                                GameServerGroupArn: {},
                                InstanceId: {},
                                InstanceStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeGameSessionDetails: {
            input: {
                type: "structure",
                members: {
                    FleetId: {},
                    GameSessionId: {},
                    AliasId: {},
                    Location: {},
                    StatusFilter: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSessionDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GameSession: {
                                    shape: "S3k"
                                },
                                ProtectionPolicy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeGameSessionPlacement: {
            input: {
                type: "structure",
                required: [ "PlacementId" ],
                members: {
                    PlacementId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSessionPlacement: {
                        shape: "S7x"
                    }
                }
            }
        },
        DescribeGameSessionQueues: {
            input: {
                type: "structure",
                members: {
                    Names: {
                        type: "list",
                        member: {}
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSessionQueues: {
                        type: "list",
                        member: {
                            shape: "S46"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeGameSessions: {
            input: {
                type: "structure",
                members: {
                    FleetId: {},
                    GameSessionId: {},
                    AliasId: {},
                    Location: {},
                    StatusFilter: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSessions: {
                        shape: "S8a"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstances: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {},
                    InstanceId: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {},
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FleetId: {},
                                FleetArn: {},
                                InstanceId: {},
                                IpAddress: {
                                    shape: "S3n"
                                },
                                DnsName: {},
                                OperatingSystem: {},
                                Type: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                Location: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMatchmaking: {
            input: {
                type: "structure",
                required: [ "TicketIds" ],
                members: {
                    TicketIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TicketList: {
                        type: "list",
                        member: {
                            shape: "S8l"
                        }
                    }
                }
            }
        },
        DescribeMatchmakingConfigurations: {
            input: {
                type: "structure",
                members: {
                    Names: {
                        type: "list",
                        member: {}
                    },
                    RuleSetName: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Configurations: {
                        type: "list",
                        member: {
                            shape: "S4p"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMatchmakingRuleSets: {
            input: {
                type: "structure",
                members: {
                    Names: {
                        type: "list",
                        member: {}
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RuleSets" ],
                members: {
                    RuleSets: {
                        type: "list",
                        member: {
                            shape: "S4v"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePlayerSessions: {
            input: {
                type: "structure",
                members: {
                    GameSessionId: {},
                    PlayerId: {
                        shape: "S4"
                    },
                    PlayerSessionId: {},
                    PlayerSessionStatusFilter: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PlayerSessions: {
                        shape: "S56"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRuntimeConfiguration: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuntimeConfiguration: {
                        shape: "S1r"
                    }
                }
            }
        },
        DescribeScalingPolicies: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {},
                    StatusFilter: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {},
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScalingPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FleetId: {},
                                FleetArn: {},
                                Name: {},
                                Status: {},
                                ScalingAdjustment: {
                                    type: "integer"
                                },
                                ScalingAdjustmentType: {},
                                ComparisonOperator: {},
                                Threshold: {
                                    type: "double"
                                },
                                EvaluationPeriods: {
                                    type: "integer"
                                },
                                MetricName: {},
                                PolicyType: {},
                                TargetConfiguration: {
                                    shape: "S9o"
                                },
                                UpdateStatus: {},
                                Location: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeScript: {
            input: {
                type: "structure",
                required: [ "ScriptId" ],
                members: {
                    ScriptId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Script: {
                        shape: "S5a"
                    }
                }
            }
        },
        DescribeVpcPeeringAuthorizations: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    VpcPeeringAuthorizations: {
                        type: "list",
                        member: {
                            shape: "S5d"
                        }
                    }
                }
            }
        },
        DescribeVpcPeeringConnections: {
            input: {
                type: "structure",
                members: {
                    FleetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcPeeringConnections: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FleetId: {},
                                FleetArn: {},
                                IpV4CidrBlock: {},
                                VpcPeeringConnectionId: {},
                                Status: {
                                    type: "structure",
                                    members: {
                                        Code: {},
                                        Message: {}
                                    }
                                },
                                PeerVpcId: {},
                                GameLiftVpcId: {}
                            }
                        }
                    }
                }
            }
        },
        GetComputeAccess: {
            input: {
                type: "structure",
                required: [ "FleetId", "ComputeName" ],
                members: {
                    FleetId: {},
                    ComputeName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {},
                    ComputeName: {},
                    ComputeArn: {},
                    Credentials: {
                        shape: "S1d"
                    }
                }
            }
        },
        GetComputeAuthToken: {
            input: {
                type: "structure",
                required: [ "FleetId", "ComputeName" ],
                members: {
                    FleetId: {},
                    ComputeName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {},
                    ComputeName: {},
                    ComputeArn: {},
                    AuthToken: {},
                    ExpirationTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetGameSessionLogUrl: {
            input: {
                type: "structure",
                required: [ "GameSessionId" ],
                members: {
                    GameSessionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PreSignedUrl: {}
                }
            }
        },
        GetInstanceAccess: {
            input: {
                type: "structure",
                required: [ "FleetId", "InstanceId" ],
                members: {
                    FleetId: {},
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceAccess: {
                        type: "structure",
                        members: {
                            FleetId: {},
                            InstanceId: {},
                            IpAddress: {
                                shape: "S3n"
                            },
                            OperatingSystem: {},
                            Credentials: {
                                type: "structure",
                                members: {
                                    UserName: {},
                                    Secret: {}
                                },
                                sensitive: true
                            }
                        }
                    }
                }
            }
        },
        ListAliases: {
            input: {
                type: "structure",
                members: {
                    RoutingStrategyType: {},
                    Name: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListBuilds: {
            input: {
                type: "structure",
                members: {
                    Status: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Builds: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCompute: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {},
                    Location: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComputeList: {
                        type: "list",
                        member: {
                            shape: "S6f"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFleets: {
            input: {
                type: "structure",
                members: {
                    BuildId: {},
                    ScriptId: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListGameServerGroups: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServerGroups: {
                        type: "list",
                        member: {
                            shape: "S36"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListGameServers: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName" ],
                members: {
                    GameServerGroupName: {},
                    SortOrder: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServers: {
                        type: "list",
                        member: {
                            shape: "Sf"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLocations: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {}
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Locations: {
                        type: "list",
                        member: {
                            shape: "S4b"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListScripts: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Scripts: {
                        type: "list",
                        member: {
                            shape: "S5a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Su"
                    }
                }
            }
        },
        PutScalingPolicy: {
            input: {
                type: "structure",
                required: [ "Name", "FleetId", "MetricName" ],
                members: {
                    Name: {},
                    FleetId: {},
                    ScalingAdjustment: {
                        type: "integer"
                    },
                    ScalingAdjustmentType: {},
                    Threshold: {
                        type: "double"
                    },
                    ComparisonOperator: {},
                    EvaluationPeriods: {
                        type: "integer"
                    },
                    MetricName: {},
                    PolicyType: {},
                    TargetConfiguration: {
                        shape: "S9o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        RegisterCompute: {
            input: {
                type: "structure",
                required: [ "FleetId", "ComputeName" ],
                members: {
                    FleetId: {},
                    ComputeName: {},
                    CertificatePath: {},
                    DnsName: {},
                    IpAddress: {
                        shape: "S3n"
                    },
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Compute: {
                        shape: "S6f"
                    }
                }
            }
        },
        RegisterGameServer: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName", "GameServerId", "InstanceId" ],
                members: {
                    GameServerGroupName: {},
                    GameServerId: {},
                    InstanceId: {},
                    ConnectionInfo: {},
                    GameServerData: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServer: {
                        shape: "Sf"
                    }
                }
            }
        },
        RequestUploadCredentials: {
            input: {
                type: "structure",
                required: [ "BuildId" ],
                members: {
                    BuildId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UploadCredentials: {
                        shape: "S1d"
                    },
                    StorageLocation: {
                        shape: "S13"
                    }
                }
            }
        },
        ResolveAlias: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {}
                }
            }
        },
        ResumeGameServerGroup: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName", "ResumeActions" ],
                members: {
                    GameServerGroupName: {},
                    ResumeActions: {
                        shape: "S39"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServerGroup: {
                        shape: "S36"
                    }
                }
            }
        },
        SearchGameSessions: {
            input: {
                type: "structure",
                members: {
                    FleetId: {},
                    AliasId: {},
                    Location: {},
                    FilterExpression: {},
                    SortExpression: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSessions: {
                        shape: "S8a"
                    },
                    NextToken: {}
                }
            }
        },
        StartFleetActions: {
            input: {
                type: "structure",
                required: [ "FleetId", "Actions" ],
                members: {
                    FleetId: {},
                    Actions: {
                        shape: "S2h"
                    },
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {}
                }
            }
        },
        StartGameSessionPlacement: {
            input: {
                type: "structure",
                required: [ "PlacementId", "GameSessionQueueName", "MaximumPlayerSessionCount" ],
                members: {
                    PlacementId: {},
                    GameSessionQueueName: {},
                    GameProperties: {
                        shape: "S3d"
                    },
                    MaximumPlayerSessionCount: {
                        type: "integer"
                    },
                    GameSessionName: {},
                    PlayerLatencies: {
                        shape: "S7z"
                    },
                    DesiredPlayerSessions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PlayerId: {
                                    shape: "S4"
                                },
                                PlayerData: {}
                            }
                        }
                    },
                    GameSessionData: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSessionPlacement: {
                        shape: "S7x"
                    }
                }
            }
        },
        StartMatchBackfill: {
            input: {
                type: "structure",
                required: [ "ConfigurationName", "Players" ],
                members: {
                    TicketId: {},
                    ConfigurationName: {},
                    GameSessionArn: {},
                    Players: {
                        shape: "S8o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MatchmakingTicket: {
                        shape: "S8l"
                    }
                }
            }
        },
        StartMatchmaking: {
            input: {
                type: "structure",
                required: [ "ConfigurationName", "Players" ],
                members: {
                    TicketId: {},
                    ConfigurationName: {},
                    Players: {
                        shape: "S8o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MatchmakingTicket: {
                        shape: "S8l"
                    }
                }
            }
        },
        StopFleetActions: {
            input: {
                type: "structure",
                required: [ "FleetId", "Actions" ],
                members: {
                    FleetId: {},
                    Actions: {
                        shape: "S2h"
                    },
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {}
                }
            }
        },
        StopGameSessionPlacement: {
            input: {
                type: "structure",
                required: [ "PlacementId" ],
                members: {
                    PlacementId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSessionPlacement: {
                        shape: "S7x"
                    }
                }
            }
        },
        StopMatchmaking: {
            input: {
                type: "structure",
                required: [ "TicketId" ],
                members: {
                    TicketId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SuspendGameServerGroup: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName", "SuspendActions" ],
                members: {
                    GameServerGroupName: {},
                    SuspendActions: {
                        shape: "S39"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServerGroup: {
                        shape: "S36"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAlias: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {},
                    Name: {},
                    Description: {},
                    RoutingStrategy: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Alias: {
                        shape: "Sz"
                    }
                }
            }
        },
        UpdateBuild: {
            input: {
                type: "structure",
                required: [ "BuildId" ],
                members: {
                    BuildId: {},
                    Name: {},
                    Version: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Build: {
                        shape: "S18"
                    }
                }
            }
        },
        UpdateFleetAttributes: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {},
                    Name: {},
                    Description: {},
                    NewGameSessionProtectionPolicy: {},
                    ResourceCreationLimitPolicy: {
                        shape: "S1x"
                    },
                    MetricGroups: {
                        shape: "S1z"
                    },
                    AnywhereConfiguration: {
                        shape: "S28"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {}
                }
            }
        },
        UpdateFleetCapacity: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {},
                    DesiredInstances: {
                        type: "integer"
                    },
                    MinSize: {
                        type: "integer"
                    },
                    MaxSize: {
                        type: "integer"
                    },
                    Location: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {},
                    Location: {}
                }
            }
        },
        UpdateFleetPortSettings: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    FleetId: {},
                    InboundPermissionAuthorizations: {
                        shape: "S1l"
                    },
                    InboundPermissionRevocations: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {},
                    FleetArn: {}
                }
            }
        },
        UpdateGameServer: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName", "GameServerId" ],
                members: {
                    GameServerGroupName: {},
                    GameServerId: {},
                    GameServerData: {},
                    UtilizationStatus: {},
                    HealthCheck: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServer: {
                        shape: "Sf"
                    }
                }
            }
        },
        UpdateGameServerGroup: {
            input: {
                type: "structure",
                required: [ "GameServerGroupName" ],
                members: {
                    GameServerGroupName: {},
                    RoleArn: {},
                    InstanceDefinitions: {
                        shape: "S2u"
                    },
                    GameServerProtectionPolicy: {},
                    BalancingStrategy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameServerGroup: {
                        shape: "S36"
                    }
                }
            }
        },
        UpdateGameSession: {
            input: {
                type: "structure",
                required: [ "GameSessionId" ],
                members: {
                    GameSessionId: {},
                    MaximumPlayerSessionCount: {
                        type: "integer"
                    },
                    Name: {},
                    PlayerSessionCreationPolicy: {},
                    ProtectionPolicy: {},
                    GameProperties: {
                        shape: "S3d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSession: {
                        shape: "S3k"
                    }
                }
            }
        },
        UpdateGameSessionQueue: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    TimeoutInSeconds: {
                        type: "integer"
                    },
                    PlayerLatencyPolicies: {
                        shape: "S3t"
                    },
                    Destinations: {
                        shape: "S3v"
                    },
                    FilterConfiguration: {
                        shape: "S3y"
                    },
                    PriorityConfiguration: {
                        shape: "S40"
                    },
                    CustomEventData: {},
                    NotificationTarget: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GameSessionQueue: {
                        shape: "S46"
                    }
                }
            }
        },
        UpdateMatchmakingConfiguration: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    GameSessionQueueArns: {
                        shape: "S4e"
                    },
                    RequestTimeoutSeconds: {
                        type: "integer"
                    },
                    AcceptanceTimeoutSeconds: {
                        type: "integer"
                    },
                    AcceptanceRequired: {
                        type: "boolean"
                    },
                    RuleSetName: {},
                    NotificationTarget: {},
                    AdditionalPlayerCount: {
                        type: "integer"
                    },
                    CustomEventData: {},
                    GameProperties: {
                        shape: "S3d"
                    },
                    GameSessionData: {},
                    BackfillMode: {},
                    FlexMatchMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Configuration: {
                        shape: "S4p"
                    }
                }
            }
        },
        UpdateRuntimeConfiguration: {
            input: {
                type: "structure",
                required: [ "FleetId", "RuntimeConfiguration" ],
                members: {
                    FleetId: {},
                    RuntimeConfiguration: {
                        shape: "S1r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuntimeConfiguration: {
                        shape: "S1r"
                    }
                }
            }
        },
        UpdateScript: {
            input: {
                type: "structure",
                required: [ "ScriptId" ],
                members: {
                    ScriptId: {},
                    Name: {},
                    Version: {},
                    StorageLocation: {
                        shape: "S13"
                    },
                    ZipFile: {
                        type: "blob"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Script: {
                        shape: "S5a"
                    }
                }
            }
        },
        ValidateMatchmakingRuleSet: {
            input: {
                type: "structure",
                required: [ "RuleSetBody" ],
                members: {
                    RuleSetBody: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Valid: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "string",
            sensitive: true
        },
        Sf: {
            type: "structure",
            members: {
                GameServerGroupName: {},
                GameServerGroupArn: {},
                GameServerId: {},
                InstanceId: {},
                ConnectionInfo: {},
                GameServerData: {},
                ClaimStatus: {},
                UtilizationStatus: {},
                RegistrationTime: {
                    type: "timestamp"
                },
                LastClaimTime: {
                    type: "timestamp"
                },
                LastHealthCheckTime: {
                    type: "timestamp"
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                Type: {},
                FleetId: {},
                Message: {}
            }
        },
        Su: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sz: {
            type: "structure",
            members: {
                AliasId: {},
                Name: {},
                AliasArn: {},
                Description: {},
                RoutingStrategy: {
                    shape: "Sq"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                Bucket: {},
                Key: {},
                RoleArn: {},
                ObjectVersion: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                BuildId: {},
                BuildArn: {},
                Name: {},
                Version: {},
                Status: {},
                SizeOnDisk: {
                    type: "long"
                },
                OperatingSystem: {},
                CreationTime: {
                    type: "timestamp"
                },
                ServerSdkVersion: {}
            }
        },
        S1d: {
            type: "structure",
            members: {
                AccessKeyId: {},
                SecretAccessKey: {},
                SessionToken: {}
            },
            sensitive: true
        },
        S1j: {
            type: "list",
            member: {}
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "FromPort", "ToPort", "IpRange", "Protocol" ],
                members: {
                    FromPort: {
                        shape: "S1n"
                    },
                    ToPort: {
                        shape: "S1n"
                    },
                    IpRange: {
                        type: "string",
                        sensitive: true
                    },
                    Protocol: {}
                }
            }
        },
        S1n: {
            type: "integer",
            sensitive: true
        },
        S1r: {
            type: "structure",
            members: {
                ServerProcesses: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "LaunchPath", "ConcurrentExecutions" ],
                        members: {
                            LaunchPath: {},
                            Parameters: {},
                            ConcurrentExecutions: {
                                type: "integer"
                            }
                        }
                    }
                },
                MaxConcurrentGameSessionActivations: {
                    type: "integer"
                },
                GameSessionActivationTimeoutSeconds: {
                    type: "integer"
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                NewGameSessionsPerCreator: {
                    type: "integer"
                },
                PolicyPeriodInMinutes: {
                    type: "integer"
                }
            }
        },
        S1z: {
            type: "list",
            member: {}
        },
        S22: {
            type: "structure",
            required: [ "CertificateType" ],
            members: {
                CertificateType: {}
            }
        },
        S24: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Location" ],
                members: {
                    Location: {}
                }
            }
        },
        S28: {
            type: "structure",
            required: [ "Cost" ],
            members: {
                Cost: {}
            }
        },
        S2c: {
            type: "structure",
            members: {
                FleetId: {},
                FleetArn: {},
                FleetType: {},
                InstanceType: {},
                Description: {},
                Name: {},
                CreationTime: {
                    type: "timestamp"
                },
                TerminationTime: {
                    type: "timestamp"
                },
                Status: {},
                BuildId: {},
                BuildArn: {},
                ScriptId: {},
                ScriptArn: {},
                ServerLaunchPath: {},
                ServerLaunchParameters: {},
                LogPaths: {
                    shape: "S1j"
                },
                NewGameSessionProtectionPolicy: {},
                OperatingSystem: {},
                ResourceCreationLimitPolicy: {
                    shape: "S1x"
                },
                MetricGroups: {
                    shape: "S1z"
                },
                StoppedActions: {
                    shape: "S2h"
                },
                InstanceRoleArn: {},
                CertificateConfiguration: {
                    shape: "S22"
                },
                ComputeType: {},
                AnywhereConfiguration: {
                    shape: "S28"
                },
                InstanceRoleCredentialsProvider: {}
            }
        },
        S2h: {
            type: "list",
            member: {}
        },
        S2j: {
            type: "list",
            member: {
                shape: "S2k"
            }
        },
        S2k: {
            type: "structure",
            members: {
                Location: {},
                Status: {}
            }
        },
        S2u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "InstanceType" ],
                members: {
                    InstanceType: {},
                    WeightedCapacity: {}
                }
            }
        },
        S36: {
            type: "structure",
            members: {
                GameServerGroupName: {},
                GameServerGroupArn: {},
                RoleArn: {},
                InstanceDefinitions: {
                    shape: "S2u"
                },
                BalancingStrategy: {},
                GameServerProtectionPolicy: {},
                AutoScalingGroupArn: {},
                Status: {},
                StatusReason: {},
                SuspendedActions: {
                    shape: "S39"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                }
            }
        },
        S39: {
            type: "list",
            member: {}
        },
        S3d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                GameSessionId: {},
                Name: {},
                FleetId: {},
                FleetArn: {},
                CreationTime: {
                    type: "timestamp"
                },
                TerminationTime: {
                    type: "timestamp"
                },
                CurrentPlayerSessionCount: {
                    type: "integer"
                },
                MaximumPlayerSessionCount: {
                    type: "integer"
                },
                Status: {},
                StatusReason: {},
                GameProperties: {
                    shape: "S3d"
                },
                IpAddress: {
                    shape: "S3n"
                },
                DnsName: {},
                Port: {
                    shape: "S1n"
                },
                PlayerSessionCreationPolicy: {},
                CreatorId: {},
                GameSessionData: {},
                MatchmakerData: {},
                Location: {}
            }
        },
        S3n: {
            type: "string",
            sensitive: true
        },
        S3t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MaximumIndividualPlayerLatencyMilliseconds: {
                        type: "integer"
                    },
                    PolicyDurationSeconds: {
                        type: "integer"
                    }
                }
            }
        },
        S3v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DestinationArn: {}
                }
            }
        },
        S3y: {
            type: "structure",
            members: {
                AllowedLocations: {
                    shape: "S3z"
                }
            }
        },
        S3z: {
            type: "list",
            member: {}
        },
        S40: {
            type: "structure",
            members: {
                PriorityOrder: {
                    type: "list",
                    member: {}
                },
                LocationOrder: {
                    shape: "S3z"
                }
            }
        },
        S46: {
            type: "structure",
            members: {
                Name: {},
                GameSessionQueueArn: {},
                TimeoutInSeconds: {
                    type: "integer"
                },
                PlayerLatencyPolicies: {
                    shape: "S3t"
                },
                Destinations: {
                    shape: "S3v"
                },
                FilterConfiguration: {
                    shape: "S3y"
                },
                PriorityConfiguration: {
                    shape: "S40"
                },
                CustomEventData: {},
                NotificationTarget: {}
            }
        },
        S4b: {
            type: "structure",
            members: {
                LocationName: {},
                LocationArn: {}
            }
        },
        S4e: {
            type: "list",
            member: {}
        },
        S4p: {
            type: "structure",
            members: {
                Name: {},
                ConfigurationArn: {},
                Description: {},
                GameSessionQueueArns: {
                    shape: "S4e"
                },
                RequestTimeoutSeconds: {
                    type: "integer"
                },
                AcceptanceTimeoutSeconds: {
                    type: "integer"
                },
                AcceptanceRequired: {
                    type: "boolean"
                },
                RuleSetName: {},
                RuleSetArn: {},
                NotificationTarget: {},
                AdditionalPlayerCount: {
                    type: "integer"
                },
                CustomEventData: {},
                CreationTime: {
                    type: "timestamp"
                },
                GameProperties: {
                    shape: "S3d"
                },
                GameSessionData: {},
                BackfillMode: {},
                FlexMatchMode: {}
            }
        },
        S4v: {
            type: "structure",
            required: [ "RuleSetBody" ],
            members: {
                RuleSetName: {},
                RuleSetArn: {},
                RuleSetBody: {},
                CreationTime: {
                    type: "timestamp"
                }
            }
        },
        S4z: {
            type: "structure",
            members: {
                PlayerSessionId: {},
                PlayerId: {
                    shape: "S4"
                },
                GameSessionId: {},
                FleetId: {},
                FleetArn: {},
                CreationTime: {
                    type: "timestamp"
                },
                TerminationTime: {
                    type: "timestamp"
                },
                Status: {},
                IpAddress: {
                    shape: "S3n"
                },
                DnsName: {},
                Port: {
                    shape: "S1n"
                },
                PlayerData: {}
            }
        },
        S56: {
            type: "list",
            member: {
                shape: "S4z"
            }
        },
        S5a: {
            type: "structure",
            members: {
                ScriptId: {},
                ScriptArn: {},
                Name: {},
                Version: {},
                SizeOnDisk: {
                    type: "long"
                },
                CreationTime: {
                    type: "timestamp"
                },
                StorageLocation: {
                    shape: "S13"
                }
            }
        },
        S5d: {
            type: "structure",
            members: {
                GameLiftAwsAccountId: {},
                PeerVpcAwsAccountId: {},
                PeerVpcId: {},
                CreationTime: {
                    type: "timestamp"
                },
                ExpirationTime: {
                    type: "timestamp"
                }
            }
        },
        S6f: {
            type: "structure",
            members: {
                FleetId: {},
                FleetArn: {},
                ComputeName: {},
                ComputeArn: {},
                IpAddress: {
                    shape: "S3n"
                },
                DnsName: {},
                ComputeStatus: {},
                Location: {},
                CreationTime: {
                    type: "timestamp"
                },
                OperatingSystem: {},
                Type: {},
                GameLiftServiceSdkEndpoint: {}
            }
        },
        S6p: {
            type: "list",
            member: {}
        },
        S6v: {
            type: "structure",
            members: {
                FleetId: {},
                FleetArn: {},
                InstanceType: {},
                InstanceCounts: {
                    type: "structure",
                    members: {
                        DESIRED: {
                            type: "integer"
                        },
                        MINIMUM: {
                            type: "integer"
                        },
                        MAXIMUM: {
                            type: "integer"
                        },
                        PENDING: {
                            type: "integer"
                        },
                        ACTIVE: {
                            type: "integer"
                        },
                        IDLE: {
                            type: "integer"
                        },
                        TERMINATING: {
                            type: "integer"
                        }
                    }
                },
                Location: {}
            }
        },
        S7b: {
            type: "structure",
            members: {
                FleetId: {},
                FleetArn: {},
                ActiveServerProcessCount: {
                    type: "integer"
                },
                ActiveGameSessionCount: {
                    type: "integer"
                },
                CurrentPlayerSessionCount: {
                    type: "integer"
                },
                MaximumPlayerSessionCount: {
                    type: "integer"
                },
                Location: {}
            }
        },
        S7x: {
            type: "structure",
            members: {
                PlacementId: {},
                GameSessionQueueName: {},
                Status: {},
                GameProperties: {
                    shape: "S3d"
                },
                MaximumPlayerSessionCount: {
                    type: "integer"
                },
                GameSessionName: {},
                GameSessionId: {},
                GameSessionArn: {},
                GameSessionRegion: {},
                PlayerLatencies: {
                    shape: "S7z"
                },
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                IpAddress: {
                    shape: "S3n"
                },
                DnsName: {},
                Port: {
                    shape: "S1n"
                },
                PlacedPlayerSessions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PlayerId: {
                                shape: "S4"
                            },
                            PlayerSessionId: {}
                        }
                    }
                },
                GameSessionData: {},
                MatchmakerData: {}
            }
        },
        S7z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PlayerId: {
                        shape: "S4"
                    },
                    RegionIdentifier: {},
                    LatencyInMilliseconds: {
                        type: "float"
                    }
                }
            }
        },
        S8a: {
            type: "list",
            member: {
                shape: "S3k"
            }
        },
        S8l: {
            type: "structure",
            members: {
                TicketId: {},
                ConfigurationName: {},
                ConfigurationArn: {},
                Status: {},
                StatusReason: {},
                StatusMessage: {},
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                Players: {
                    shape: "S8o"
                },
                GameSessionConnectionInfo: {
                    type: "structure",
                    members: {
                        GameSessionArn: {},
                        IpAddress: {
                            shape: "S3n"
                        },
                        DnsName: {},
                        Port: {
                            type: "integer"
                        },
                        MatchedPlayerSessions: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    PlayerId: {
                                        shape: "S4"
                                    },
                                    PlayerSessionId: {}
                                }
                            }
                        }
                    }
                },
                EstimatedWaitTime: {
                    type: "integer"
                }
            }
        },
        S8o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PlayerId: {
                        shape: "S4"
                    },
                    PlayerAttributes: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                S: {},
                                N: {
                                    type: "double"
                                },
                                SL: {
                                    type: "list",
                                    member: {}
                                },
                                SDM: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    Team: {},
                    LatencyInMs: {
                        type: "map",
                        key: {},
                        value: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S9o: {
            type: "structure",
            required: [ "TargetValue" ],
            members: {
                TargetValue: {
                    type: "double"
                }
            }
        }
    },
    paginators: {
        DescribeFleetAttributes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "FleetAttributes"
        },
        DescribeFleetCapacity: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "FleetCapacity"
        },
        DescribeFleetEvents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Events"
        },
        DescribeFleetLocationAttributes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit"
        },
        DescribeFleetUtilization: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "FleetUtilization"
        },
        DescribeGameServerInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "GameServerInstances"
        },
        DescribeGameSessionDetails: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "GameSessionDetails"
        },
        DescribeGameSessionQueues: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "GameSessionQueues"
        },
        DescribeGameSessions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "GameSessions"
        },
        DescribeInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Instances"
        },
        DescribeMatchmakingConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Configurations"
        },
        DescribeMatchmakingRuleSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "RuleSets"
        },
        DescribePlayerSessions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "PlayerSessions"
        },
        DescribeScalingPolicies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "ScalingPolicies"
        },
        ListAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Aliases"
        },
        ListBuilds: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Builds"
        },
        ListCompute: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "ComputeList"
        },
        ListFleets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "FleetIds"
        },
        ListGameServerGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "GameServerGroups"
        },
        ListGameServers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "GameServers"
        },
        ListLocations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Locations"
        },
        ListScripts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "Scripts"
        },
        SearchGameSessions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "Limit",
            result_key: "GameSessions"
        }
    }
};

AWS.apiLoader.services["glacier"] = {};

AWS.Glacier = AWS.Service.defineService("glacier", [ "2012-06-01" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    104: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.Glacier.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                if (Array.isArray(request._events.validate)) {
                    request._events.validate.unshift(this.validateAccountId);
                } else {
                    request.on("validate", this.validateAccountId);
                }
                request.removeListener("afterBuild", AWS.EventListeners.Core.COMPUTE_SHA256);
                request.on("build", this.addGlacierApiVersion);
                request.on("build", this.addTreeHashHeaders);
            },
            validateAccountId: function validateAccountId(request) {
                if (request.params.accountId !== undefined) return;
                request.params = AWS.util.copy(request.params);
                request.params.accountId = "-";
            },
            addGlacierApiVersion: function addGlacierApiVersion(request) {
                var version = request.service.api.apiVersion;
                request.httpRequest.headers["x-amz-glacier-version"] = version;
            },
            addTreeHashHeaders: function addTreeHashHeaders(request) {
                if (request.params.body === undefined) return;
                var hashes = request.service.computeChecksums(request.params.body);
                request.httpRequest.headers["X-Amz-Content-Sha256"] = hashes.linearHash;
                if (!request.httpRequest.headers["x-amz-sha256-tree-hash"]) {
                    request.httpRequest.headers["x-amz-sha256-tree-hash"] = hashes.treeHash;
                }
            },
            computeChecksums: function computeChecksums(data) {
                if (!AWS.util.Buffer.isBuffer(data)) data = AWS.util.buffer.toBuffer(data);
                var mb = 1024 * 1024;
                var hashes = [];
                var hash = AWS.util.crypto.createHash("sha256");
                for (var i = 0; i < data.length; i += mb) {
                    var chunk = data.slice(i, Math.min(i + mb, data.length));
                    hash.update(chunk);
                    hashes.push(AWS.util.crypto.sha256(chunk));
                }
                return {
                    linearHash: hash.digest("hex"),
                    treeHash: this.buildHashTree(hashes)
                };
            },
            buildHashTree: function buildHashTree(hashes) {
                while (hashes.length > 1) {
                    var tmpHashes = [];
                    for (var i = 0; i < hashes.length; i += 2) {
                        if (hashes[i + 1]) {
                            var tmpHash = AWS.util.buffer.alloc(64);
                            tmpHash.write(hashes[i], 0, 32, "binary");
                            tmpHash.write(hashes[i + 1], 32, 32, "binary");
                            tmpHashes.push(AWS.util.crypto.sha256(tmpHash));
                        } else {
                            tmpHashes.push(hashes[i]);
                        }
                    }
                    hashes = tmpHashes;
                }
                return AWS.util.crypto.toHex(hashes[0]);
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 104 ]);

AWS.apiLoader.services["glacier"]["2012-06-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-06-01",
        checksumFormat: "sha256",
        endpointPrefix: "glacier",
        protocol: "rest-json",
        serviceFullName: "Amazon Glacier",
        serviceId: "Glacier",
        signatureVersion: "v4",
        uid: "glacier-2012-06-01"
    },
    operations: {
        AbortMultipartUpload: {
            http: {
                method: "DELETE",
                requestUri: "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName", "uploadId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    uploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    }
                }
            }
        },
        AbortVaultLock: {
            http: {
                method: "DELETE",
                requestUri: "/{accountId}/vaults/{vaultName}/lock-policy",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            }
        },
        AddTagsToVault: {
            http: {
                requestUri: "/{accountId}/vaults/{vaultName}/tags?operation=add",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        CompleteMultipartUpload: {
            http: {
                requestUri: "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName", "uploadId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    uploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    archiveSize: {
                        location: "header",
                        locationName: "x-amz-archive-size"
                    },
                    checksum: {
                        location: "header",
                        locationName: "x-amz-sha256-tree-hash"
                    }
                }
            },
            output: {
                shape: "S9"
            }
        },
        CompleteVaultLock: {
            http: {
                requestUri: "/{accountId}/vaults/{vaultName}/lock-policy/{lockId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName", "lockId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    lockId: {
                        location: "uri",
                        locationName: "lockId"
                    }
                }
            }
        },
        CreateVault: {
            http: {
                method: "PUT",
                requestUri: "/{accountId}/vaults/{vaultName}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        DeleteArchive: {
            http: {
                method: "DELETE",
                requestUri: "/{accountId}/vaults/{vaultName}/archives/{archiveId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName", "archiveId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    archiveId: {
                        location: "uri",
                        locationName: "archiveId"
                    }
                }
            }
        },
        DeleteVault: {
            http: {
                method: "DELETE",
                requestUri: "/{accountId}/vaults/{vaultName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            }
        },
        DeleteVaultAccessPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/{accountId}/vaults/{vaultName}/access-policy",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            }
        },
        DeleteVaultNotifications: {
            http: {
                method: "DELETE",
                requestUri: "/{accountId}/vaults/{vaultName}/notification-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            }
        },
        DescribeJob: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName", "jobId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                shape: "Si"
            }
        },
        DescribeVault: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            },
            output: {
                shape: "S1a"
            }
        },
        GetDataRetrievalPolicy: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/policies/data-retrieval"
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetJobOutput: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}/jobs/{jobId}/output"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName", "jobId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    range: {
                        location: "header",
                        locationName: "Range"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    body: {
                        shape: "S1k"
                    },
                    checksum: {
                        location: "header",
                        locationName: "x-amz-sha256-tree-hash"
                    },
                    status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    contentRange: {
                        location: "header",
                        locationName: "Content-Range"
                    },
                    acceptRanges: {
                        location: "header",
                        locationName: "Accept-Ranges"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    archiveDescription: {
                        location: "header",
                        locationName: "x-amz-archive-description"
                    }
                },
                payload: "body"
            }
        },
        GetVaultAccessPolicy: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}/access-policy"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S1o"
                    }
                },
                payload: "policy"
            }
        },
        GetVaultLock: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}/lock-policy"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {},
                    State: {},
                    ExpirationDate: {},
                    CreationDate: {}
                }
            }
        },
        GetVaultNotifications: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}/notification-configuration"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vaultNotificationConfig: {
                        shape: "S1t"
                    }
                },
                payload: "vaultNotificationConfig"
            }
        },
        InitiateJob: {
            http: {
                requestUri: "/{accountId}/vaults/{vaultName}/jobs",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    jobParameters: {
                        type: "structure",
                        members: {
                            Format: {},
                            Type: {},
                            ArchiveId: {},
                            Description: {},
                            SNSTopic: {},
                            RetrievalByteRange: {},
                            Tier: {},
                            InventoryRetrievalParameters: {
                                type: "structure",
                                members: {
                                    StartDate: {},
                                    EndDate: {},
                                    Limit: {},
                                    Marker: {}
                                }
                            },
                            SelectParameters: {
                                shape: "Sp"
                            },
                            OutputLocation: {
                                shape: "Sx"
                            }
                        }
                    }
                },
                payload: "jobParameters"
            },
            output: {
                type: "structure",
                members: {
                    location: {
                        location: "header",
                        locationName: "Location"
                    },
                    jobId: {
                        location: "header",
                        locationName: "x-amz-job-id"
                    },
                    jobOutputPath: {
                        location: "header",
                        locationName: "x-amz-job-output-path"
                    }
                }
            }
        },
        InitiateMultipartUpload: {
            http: {
                requestUri: "/{accountId}/vaults/{vaultName}/multipart-uploads",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    archiveDescription: {
                        location: "header",
                        locationName: "x-amz-archive-description"
                    },
                    partSize: {
                        location: "header",
                        locationName: "x-amz-part-size"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    location: {
                        location: "header",
                        locationName: "Location"
                    },
                    uploadId: {
                        location: "header",
                        locationName: "x-amz-multipart-upload-id"
                    }
                }
            }
        },
        InitiateVaultLock: {
            http: {
                requestUri: "/{accountId}/vaults/{vaultName}/lock-policy",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    policy: {
                        type: "structure",
                        members: {
                            Policy: {}
                        }
                    }
                },
                payload: "policy"
            },
            output: {
                type: "structure",
                members: {
                    lockId: {
                        location: "header",
                        locationName: "x-amz-lock-id"
                    }
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}/jobs"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    statuscode: {
                        location: "querystring",
                        locationName: "statuscode"
                    },
                    completed: {
                        location: "querystring",
                        locationName: "completed"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobList: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListMultipartUploads: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}/multipart-uploads"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UploadsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MultipartUploadId: {},
                                VaultARN: {},
                                ArchiveDescription: {},
                                PartSizeInBytes: {
                                    type: "long"
                                },
                                CreationDate: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListParts: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName", "uploadId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    uploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MultipartUploadId: {},
                    VaultARN: {},
                    ArchiveDescription: {},
                    PartSizeInBytes: {
                        type: "long"
                    },
                    CreationDate: {},
                    Parts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RangeInBytes: {},
                                SHA256TreeHash: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListProvisionedCapacity: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/provisioned-capacity"
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisionedCapacityList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CapacityId: {},
                                StartDate: {},
                                ExpirationDate: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForVault: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults/{vaultName}/tags"
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        ListVaults: {
            http: {
                method: "GET",
                requestUri: "/{accountId}/vaults"
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VaultList: {
                        type: "list",
                        member: {
                            shape: "S1a"
                        }
                    },
                    Marker: {}
                }
            }
        },
        PurchaseProvisionedCapacity: {
            http: {
                requestUri: "/{accountId}/provisioned-capacity",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    capacityId: {
                        location: "header",
                        locationName: "x-amz-capacity-id"
                    }
                }
            }
        },
        RemoveTagsFromVault: {
            http: {
                requestUri: "/{accountId}/vaults/{vaultName}/tags?operation=remove",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        SetDataRetrievalPolicy: {
            http: {
                method: "PUT",
                requestUri: "/{accountId}/policies/data-retrieval",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    Policy: {
                        shape: "S1e"
                    }
                }
            }
        },
        SetVaultAccessPolicy: {
            http: {
                method: "PUT",
                requestUri: "/{accountId}/vaults/{vaultName}/access-policy",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    policy: {
                        shape: "S1o"
                    }
                },
                payload: "policy"
            }
        },
        SetVaultNotifications: {
            http: {
                method: "PUT",
                requestUri: "/{accountId}/vaults/{vaultName}/notification-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    vaultNotificationConfig: {
                        shape: "S1t"
                    }
                },
                payload: "vaultNotificationConfig"
            }
        },
        UploadArchive: {
            http: {
                requestUri: "/{accountId}/vaults/{vaultName}/archives",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "vaultName", "accountId" ],
                members: {
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    archiveDescription: {
                        location: "header",
                        locationName: "x-amz-archive-description"
                    },
                    checksum: {
                        location: "header",
                        locationName: "x-amz-sha256-tree-hash"
                    },
                    body: {
                        shape: "S1k"
                    }
                },
                payload: "body"
            },
            output: {
                shape: "S9"
            }
        },
        UploadMultipartPart: {
            http: {
                method: "PUT",
                requestUri: "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "accountId", "vaultName", "uploadId" ],
                members: {
                    accountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    vaultName: {
                        location: "uri",
                        locationName: "vaultName"
                    },
                    uploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    checksum: {
                        location: "header",
                        locationName: "x-amz-sha256-tree-hash"
                    },
                    range: {
                        location: "header",
                        locationName: "Content-Range"
                    },
                    body: {
                        shape: "S1k"
                    }
                },
                payload: "body"
            },
            output: {
                type: "structure",
                members: {
                    checksum: {
                        location: "header",
                        locationName: "x-amz-sha256-tree-hash"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        S9: {
            type: "structure",
            members: {
                location: {
                    location: "header",
                    locationName: "Location"
                },
                checksum: {
                    location: "header",
                    locationName: "x-amz-sha256-tree-hash"
                },
                archiveId: {
                    location: "header",
                    locationName: "x-amz-archive-id"
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                JobId: {},
                JobDescription: {},
                Action: {},
                ArchiveId: {},
                VaultARN: {},
                CreationDate: {},
                Completed: {
                    type: "boolean"
                },
                StatusCode: {},
                StatusMessage: {},
                ArchiveSizeInBytes: {
                    type: "long"
                },
                InventorySizeInBytes: {
                    type: "long"
                },
                SNSTopic: {},
                CompletionDate: {},
                SHA256TreeHash: {},
                ArchiveSHA256TreeHash: {},
                RetrievalByteRange: {},
                Tier: {},
                InventoryRetrievalParameters: {
                    type: "structure",
                    members: {
                        Format: {},
                        StartDate: {},
                        EndDate: {},
                        Limit: {},
                        Marker: {}
                    }
                },
                JobOutputPath: {},
                SelectParameters: {
                    shape: "Sp"
                },
                OutputLocation: {
                    shape: "Sx"
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                InputSerialization: {
                    type: "structure",
                    members: {
                        csv: {
                            type: "structure",
                            members: {
                                FileHeaderInfo: {},
                                Comments: {},
                                QuoteEscapeCharacter: {},
                                RecordDelimiter: {},
                                FieldDelimiter: {},
                                QuoteCharacter: {}
                            }
                        }
                    }
                },
                ExpressionType: {},
                Expression: {},
                OutputSerialization: {
                    type: "structure",
                    members: {
                        csv: {
                            type: "structure",
                            members: {
                                QuoteFields: {},
                                QuoteEscapeCharacter: {},
                                RecordDelimiter: {},
                                FieldDelimiter: {},
                                QuoteCharacter: {}
                            }
                        }
                    }
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                S3: {
                    type: "structure",
                    members: {
                        BucketName: {},
                        Prefix: {},
                        Encryption: {
                            type: "structure",
                            members: {
                                EncryptionType: {},
                                KMSKeyId: {},
                                KMSContext: {}
                            }
                        },
                        CannedACL: {},
                        AccessControlList: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Grantee: {
                                        type: "structure",
                                        required: [ "Type" ],
                                        members: {
                                            Type: {},
                                            DisplayName: {},
                                            URI: {},
                                            ID: {},
                                            EmailAddress: {}
                                        }
                                    },
                                    Permission: {}
                                }
                            }
                        },
                        Tagging: {
                            shape: "S17"
                        },
                        UserMetadata: {
                            shape: "S17"
                        },
                        StorageClass: {}
                    }
                }
            }
        },
        S17: {
            type: "map",
            key: {},
            value: {}
        },
        S1a: {
            type: "structure",
            members: {
                VaultARN: {},
                VaultName: {},
                CreationDate: {},
                LastInventoryDate: {},
                NumberOfArchives: {
                    type: "long"
                },
                SizeInBytes: {
                    type: "long"
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                Rules: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Strategy: {},
                            BytesPerHour: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S1k: {
            type: "blob",
            streaming: true
        },
        S1o: {
            type: "structure",
            members: {
                Policy: {}
            }
        },
        S1t: {
            type: "structure",
            members: {
                SNSTopic: {},
                Events: {
                    type: "list",
                    member: {}
                }
            }
        }
    },
    paginators: {
        ListJobs: {
            input_token: "marker",
            limit_key: "limit",
            output_token: "Marker",
            result_key: "JobList"
        },
        ListMultipartUploads: {
            input_token: "marker",
            limit_key: "limit",
            output_token: "Marker",
            result_key: "UploadsList"
        },
        ListParts: {
            input_token: "marker",
            limit_key: "limit",
            output_token: "Marker",
            result_key: "Parts"
        },
        ListVaults: {
            input_token: "marker",
            limit_key: "limit",
            output_token: "Marker",
            result_key: "VaultList"
        }
    },
    waiters: {
        VaultExists: {
            operation: "DescribeVault",
            delay: 3,
            maxAttempts: 15,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 200
            }, {
                state: "retry",
                matcher: "error",
                expected: "ResourceNotFoundException"
            } ]
        },
        VaultNotExists: {
            operation: "DescribeVault",
            delay: 3,
            maxAttempts: 15,
            acceptors: [ {
                state: "retry",
                matcher: "status",
                expected: 200
            }, {
                state: "success",
                matcher: "error",
                expected: "ResourceNotFoundException"
            } ]
        }
    }
};

AWS.apiLoader.services["health"] = {};

AWS.Health = AWS.Service.defineService("health", [ "2016-08-04" ]);

AWS.apiLoader.services["health"]["2016-08-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-08-04",
        endpointPrefix: "health",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWSHealth",
        serviceFullName: "AWS Health APIs and Notifications",
        serviceId: "Health",
        signatureVersion: "v4",
        targetPrefix: "AWSHealth_20160804",
        uid: "health-2016-08-04"
    },
    operations: {
        DescribeAffectedAccountsForOrganization: {
            input: {
                type: "structure",
                required: [ "eventArn" ],
                members: {
                    eventArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    affectedAccounts: {
                        type: "list",
                        member: {}
                    },
                    eventScopeCode: {},
                    nextToken: {}
                }
            },
            idempotent: true
        },
        DescribeAffectedEntities: {
            input: {
                type: "structure",
                required: [ "filter" ],
                members: {
                    filter: {
                        type: "structure",
                        required: [ "eventArns" ],
                        members: {
                            eventArns: {
                                shape: "Sb"
                            },
                            entityArns: {
                                shape: "Sc"
                            },
                            entityValues: {
                                shape: "Se"
                            },
                            lastUpdatedTimes: {
                                shape: "Sg"
                            },
                            tags: {
                                shape: "Sj"
                            },
                            statusCodes: {
                                shape: "Sn"
                            }
                        }
                    },
                    locale: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    entities: {
                        shape: "Sr"
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        DescribeAffectedEntitiesForOrganization: {
            input: {
                type: "structure",
                members: {
                    organizationEntityFilters: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated, use organizationEntityAccountFilters instead.",
                        type: "list",
                        member: {
                            shape: "Sw"
                        }
                    },
                    locale: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    organizationEntityAccountFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "eventArn" ],
                            members: {
                                eventArn: {},
                                awsAccountId: {},
                                statusCodes: {
                                    shape: "Sn"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    entities: {
                        shape: "Sr"
                    },
                    failedSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                awsAccountId: {},
                                eventArn: {},
                                errorName: {},
                                errorMessage: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        DescribeEntityAggregates: {
            input: {
                type: "structure",
                members: {
                    eventArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    entityAggregates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                eventArn: {},
                                count: {
                                    type: "integer"
                                },
                                statuses: {
                                    shape: "S1a"
                                }
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeEntityAggregatesForOrganization: {
            input: {
                type: "structure",
                required: [ "eventArns" ],
                members: {
                    eventArns: {
                        type: "list",
                        member: {}
                    },
                    awsAccountIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    organizationEntityAggregates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                eventArn: {},
                                count: {
                                    type: "integer"
                                },
                                statuses: {
                                    shape: "S1a"
                                },
                                accounts: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            accountId: {},
                                            count: {
                                                type: "integer"
                                            },
                                            statuses: {
                                                shape: "S1a"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeEventAggregates: {
            input: {
                type: "structure",
                required: [ "aggregateField" ],
                members: {
                    filter: {
                        shape: "S1k"
                    },
                    aggregateField: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    eventAggregates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                aggregateValue: {},
                                count: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        DescribeEventDetails: {
            input: {
                type: "structure",
                required: [ "eventArns" ],
                members: {
                    eventArns: {
                        shape: "Sb"
                    },
                    locale: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                event: {
                                    shape: "S26"
                                },
                                eventDescription: {
                                    shape: "S28"
                                },
                                eventMetadata: {
                                    shape: "S2a"
                                }
                            }
                        }
                    },
                    failedSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                eventArn: {},
                                errorName: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeEventDetailsForOrganization: {
            input: {
                type: "structure",
                required: [ "organizationEventDetailFilters" ],
                members: {
                    organizationEventDetailFilters: {
                        type: "list",
                        member: {
                            shape: "Sw"
                        }
                    },
                    locale: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                awsAccountId: {},
                                event: {
                                    shape: "S26"
                                },
                                eventDescription: {
                                    shape: "S28"
                                },
                                eventMetadata: {
                                    shape: "S2a"
                                }
                            }
                        }
                    },
                    failedSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                awsAccountId: {},
                                eventArn: {},
                                errorName: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DescribeEventTypes: {
            input: {
                type: "structure",
                members: {
                    filter: {
                        type: "structure",
                        members: {
                            eventTypeCodes: {
                                type: "list",
                                member: {}
                            },
                            services: {
                                shape: "S1n"
                            },
                            eventTypeCategories: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    locale: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eventTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                service: {},
                                code: {},
                                category: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    filter: {
                        shape: "S1k"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    locale: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    events: {
                        type: "list",
                        member: {
                            shape: "S26"
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        DescribeEventsForOrganization: {
            input: {
                type: "structure",
                members: {
                    filter: {
                        type: "structure",
                        members: {
                            eventTypeCodes: {
                                shape: "S1l"
                            },
                            awsAccountIds: {
                                type: "list",
                                member: {}
                            },
                            services: {
                                shape: "S1n"
                            },
                            regions: {
                                shape: "S1p"
                            },
                            startTime: {
                                shape: "Sh"
                            },
                            endTime: {
                                shape: "Sh"
                            },
                            lastUpdatedTime: {
                                shape: "Sh"
                            },
                            entityArns: {
                                shape: "Sc"
                            },
                            entityValues: {
                                shape: "Se"
                            },
                            eventTypeCategories: {
                                shape: "S1t"
                            },
                            eventStatusCodes: {
                                shape: "S1v"
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    locale: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                service: {},
                                eventTypeCode: {},
                                eventTypeCategory: {},
                                eventScopeCode: {},
                                region: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                endTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedTime: {
                                    type: "timestamp"
                                },
                                statusCode: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            idempotent: true
        },
        DescribeHealthServiceStatusForOrganization: {
            output: {
                type: "structure",
                members: {
                    healthServiceAccessStatusForOrganization: {}
                }
            },
            idempotent: true
        },
        DisableHealthServiceAccessForOrganization: {
            idempotent: true
        },
        EnableHealthServiceAccessForOrganization: {
            idempotent: true
        }
    },
    shapes: {
        Sb: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "list",
            member: {}
        },
        Se: {
            type: "list",
            member: {}
        },
        Sg: {
            type: "list",
            member: {
                shape: "Sh"
            }
        },
        Sh: {
            type: "structure",
            members: {
                from: {
                    type: "timestamp"
                },
                to: {
                    type: "timestamp"
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                shape: "Sk"
            }
        },
        Sk: {
            type: "map",
            key: {},
            value: {}
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    entityArn: {},
                    eventArn: {},
                    entityValue: {},
                    entityUrl: {},
                    awsAccountId: {},
                    lastUpdatedTime: {
                        type: "timestamp"
                    },
                    statusCode: {},
                    tags: {
                        shape: "Sk"
                    }
                }
            }
        },
        Sw: {
            type: "structure",
            required: [ "eventArn" ],
            members: {
                eventArn: {},
                awsAccountId: {}
            }
        },
        S1a: {
            type: "map",
            key: {},
            value: {
                type: "integer"
            }
        },
        S1k: {
            type: "structure",
            members: {
                eventArns: {
                    shape: "Sb"
                },
                eventTypeCodes: {
                    shape: "S1l"
                },
                services: {
                    shape: "S1n"
                },
                regions: {
                    shape: "S1p"
                },
                availabilityZones: {
                    type: "list",
                    member: {}
                },
                startTimes: {
                    shape: "Sg"
                },
                endTimes: {
                    shape: "Sg"
                },
                lastUpdatedTimes: {
                    shape: "Sg"
                },
                entityArns: {
                    shape: "Sc"
                },
                entityValues: {
                    shape: "Se"
                },
                eventTypeCategories: {
                    shape: "S1t"
                },
                tags: {
                    shape: "Sj"
                },
                eventStatusCodes: {
                    shape: "S1v"
                }
            }
        },
        S1l: {
            type: "list",
            member: {}
        },
        S1n: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "list",
            member: {}
        },
        S1v: {
            type: "list",
            member: {}
        },
        S26: {
            type: "structure",
            members: {
                arn: {},
                service: {},
                eventTypeCode: {},
                eventTypeCategory: {},
                region: {},
                availabilityZone: {},
                startTime: {
                    type: "timestamp"
                },
                endTime: {
                    type: "timestamp"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                statusCode: {},
                eventScopeCode: {}
            }
        },
        S28: {
            type: "structure",
            members: {
                latestDescription: {}
            }
        },
        S2a: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        DescribeAffectedAccountsForOrganization: {
            input_token: "nextToken",
            limit_key: "maxResults",
            non_aggregate_keys: [ "eventScopeCode" ],
            output_token: "nextToken",
            result_key: "affectedAccounts"
        },
        DescribeAffectedEntities: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "entities"
        },
        DescribeAffectedEntitiesForOrganization: {
            input_token: "nextToken",
            limit_key: "maxResults",
            non_aggregate_keys: [ "failedSet" ],
            output_token: "nextToken",
            result_key: "entities"
        },
        DescribeEntityAggregates: {
            result_key: "entityAggregates"
        },
        DescribeEventAggregates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "eventAggregates"
        },
        DescribeEventTypes: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "eventTypes"
        },
        DescribeEvents: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "events"
        },
        DescribeEventsForOrganization: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "events"
        }
    }
};

AWS.apiLoader.services["iam"] = {};

AWS.IAM = AWS.Service.defineService("iam", [ "2010-05-08" ]);

AWS.apiLoader.services["iam"]["2010-05-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2010-05-08",
        endpointPrefix: "iam",
        globalEndpoint: "iam.amazonaws.com",
        protocol: "query",
        serviceAbbreviation: "IAM",
        serviceFullName: "AWS Identity and Access Management",
        serviceId: "IAM",
        signatureVersion: "v4",
        uid: "iam-2010-05-08",
        xmlNamespace: "https://iam.amazonaws.com/doc/2010-05-08/"
    },
    operations: {
        AddClientIDToOpenIDConnectProvider: {
            input: {
                type: "structure",
                required: [ "OpenIDConnectProviderArn", "ClientID" ],
                members: {
                    OpenIDConnectProviderArn: {},
                    ClientID: {}
                }
            }
        },
        AddRoleToInstanceProfile: {
            input: {
                type: "structure",
                required: [ "InstanceProfileName", "RoleName" ],
                members: {
                    InstanceProfileName: {},
                    RoleName: {}
                }
            }
        },
        AddUserToGroup: {
            input: {
                type: "structure",
                required: [ "GroupName", "UserName" ],
                members: {
                    GroupName: {},
                    UserName: {}
                }
            }
        },
        AttachGroupPolicy: {
            input: {
                type: "structure",
                required: [ "GroupName", "PolicyArn" ],
                members: {
                    GroupName: {},
                    PolicyArn: {}
                }
            }
        },
        AttachRolePolicy: {
            input: {
                type: "structure",
                required: [ "RoleName", "PolicyArn" ],
                members: {
                    RoleName: {},
                    PolicyArn: {}
                }
            }
        },
        AttachUserPolicy: {
            input: {
                type: "structure",
                required: [ "UserName", "PolicyArn" ],
                members: {
                    UserName: {},
                    PolicyArn: {}
                }
            }
        },
        ChangePassword: {
            input: {
                type: "structure",
                required: [ "OldPassword", "NewPassword" ],
                members: {
                    OldPassword: {
                        shape: "Sf"
                    },
                    NewPassword: {
                        shape: "Sf"
                    }
                }
            }
        },
        CreateAccessKey: {
            input: {
                type: "structure",
                members: {
                    UserName: {}
                }
            },
            output: {
                resultWrapper: "CreateAccessKeyResult",
                type: "structure",
                required: [ "AccessKey" ],
                members: {
                    AccessKey: {
                        type: "structure",
                        required: [ "UserName", "AccessKeyId", "Status", "SecretAccessKey" ],
                        members: {
                            UserName: {},
                            AccessKeyId: {},
                            Status: {},
                            SecretAccessKey: {
                                type: "string",
                                sensitive: true
                            },
                            CreateDate: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        CreateAccountAlias: {
            input: {
                type: "structure",
                required: [ "AccountAlias" ],
                members: {
                    AccountAlias: {}
                }
            }
        },
        CreateGroup: {
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    Path: {},
                    GroupName: {}
                }
            },
            output: {
                resultWrapper: "CreateGroupResult",
                type: "structure",
                required: [ "Group" ],
                members: {
                    Group: {
                        shape: "Ss"
                    }
                }
            }
        },
        CreateInstanceProfile: {
            input: {
                type: "structure",
                required: [ "InstanceProfileName" ],
                members: {
                    InstanceProfileName: {},
                    Path: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "CreateInstanceProfileResult",
                type: "structure",
                required: [ "InstanceProfile" ],
                members: {
                    InstanceProfile: {
                        shape: "S10"
                    }
                }
            }
        },
        CreateLoginProfile: {
            input: {
                type: "structure",
                required: [ "UserName", "Password" ],
                members: {
                    UserName: {},
                    Password: {
                        shape: "Sf"
                    },
                    PasswordResetRequired: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateLoginProfileResult",
                type: "structure",
                required: [ "LoginProfile" ],
                members: {
                    LoginProfile: {
                        shape: "S1d"
                    }
                }
            }
        },
        CreateOpenIDConnectProvider: {
            input: {
                type: "structure",
                required: [ "Url", "ThumbprintList" ],
                members: {
                    Url: {},
                    ClientIDList: {
                        shape: "S1g"
                    },
                    ThumbprintList: {
                        shape: "S1h"
                    },
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "CreateOpenIDConnectProviderResult",
                type: "structure",
                members: {
                    OpenIDConnectProviderArn: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        CreatePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyName", "PolicyDocument" ],
                members: {
                    PolicyName: {},
                    Path: {},
                    PolicyDocument: {},
                    Description: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "CreatePolicyResult",
                type: "structure",
                members: {
                    Policy: {
                        shape: "S1p"
                    }
                }
            }
        },
        CreatePolicyVersion: {
            input: {
                type: "structure",
                required: [ "PolicyArn", "PolicyDocument" ],
                members: {
                    PolicyArn: {},
                    PolicyDocument: {},
                    SetAsDefault: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreatePolicyVersionResult",
                type: "structure",
                members: {
                    PolicyVersion: {
                        shape: "S1u"
                    }
                }
            }
        },
        CreateRole: {
            input: {
                type: "structure",
                required: [ "RoleName", "AssumeRolePolicyDocument" ],
                members: {
                    Path: {},
                    RoleName: {},
                    AssumeRolePolicyDocument: {},
                    Description: {},
                    MaxSessionDuration: {
                        type: "integer"
                    },
                    PermissionsBoundary: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "CreateRoleResult",
                type: "structure",
                required: [ "Role" ],
                members: {
                    Role: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateSAMLProvider: {
            input: {
                type: "structure",
                required: [ "SAMLMetadataDocument", "Name" ],
                members: {
                    SAMLMetadataDocument: {},
                    Name: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "CreateSAMLProviderResult",
                type: "structure",
                members: {
                    SAMLProviderArn: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        CreateServiceLinkedRole: {
            input: {
                type: "structure",
                required: [ "AWSServiceName" ],
                members: {
                    AWSServiceName: {},
                    Description: {},
                    CustomSuffix: {}
                }
            },
            output: {
                resultWrapper: "CreateServiceLinkedRoleResult",
                type: "structure",
                members: {
                    Role: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateServiceSpecificCredential: {
            input: {
                type: "structure",
                required: [ "UserName", "ServiceName" ],
                members: {
                    UserName: {},
                    ServiceName: {}
                }
            },
            output: {
                resultWrapper: "CreateServiceSpecificCredentialResult",
                type: "structure",
                members: {
                    ServiceSpecificCredential: {
                        shape: "S27"
                    }
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    Path: {},
                    UserName: {},
                    PermissionsBoundary: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "CreateUserResult",
                type: "structure",
                members: {
                    User: {
                        shape: "S2d"
                    }
                }
            }
        },
        CreateVirtualMFADevice: {
            input: {
                type: "structure",
                required: [ "VirtualMFADeviceName" ],
                members: {
                    Path: {},
                    VirtualMFADeviceName: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "CreateVirtualMFADeviceResult",
                type: "structure",
                required: [ "VirtualMFADevice" ],
                members: {
                    VirtualMFADevice: {
                        shape: "S2h"
                    }
                }
            }
        },
        DeactivateMFADevice: {
            input: {
                type: "structure",
                required: [ "UserName", "SerialNumber" ],
                members: {
                    UserName: {},
                    SerialNumber: {}
                }
            }
        },
        DeleteAccessKey: {
            input: {
                type: "structure",
                required: [ "AccessKeyId" ],
                members: {
                    UserName: {},
                    AccessKeyId: {}
                }
            }
        },
        DeleteAccountAlias: {
            input: {
                type: "structure",
                required: [ "AccountAlias" ],
                members: {
                    AccountAlias: {}
                }
            }
        },
        DeleteAccountPasswordPolicy: {},
        DeleteGroup: {
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    GroupName: {}
                }
            }
        },
        DeleteGroupPolicy: {
            input: {
                type: "structure",
                required: [ "GroupName", "PolicyName" ],
                members: {
                    GroupName: {},
                    PolicyName: {}
                }
            }
        },
        DeleteInstanceProfile: {
            input: {
                type: "structure",
                required: [ "InstanceProfileName" ],
                members: {
                    InstanceProfileName: {}
                }
            }
        },
        DeleteLoginProfile: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {}
                }
            }
        },
        DeleteOpenIDConnectProvider: {
            input: {
                type: "structure",
                required: [ "OpenIDConnectProviderArn" ],
                members: {
                    OpenIDConnectProviderArn: {}
                }
            }
        },
        DeletePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyArn" ],
                members: {
                    PolicyArn: {}
                }
            }
        },
        DeletePolicyVersion: {
            input: {
                type: "structure",
                required: [ "PolicyArn", "VersionId" ],
                members: {
                    PolicyArn: {},
                    VersionId: {}
                }
            }
        },
        DeleteRole: {
            input: {
                type: "structure",
                required: [ "RoleName" ],
                members: {
                    RoleName: {}
                }
            }
        },
        DeleteRolePermissionsBoundary: {
            input: {
                type: "structure",
                required: [ "RoleName" ],
                members: {
                    RoleName: {}
                }
            }
        },
        DeleteRolePolicy: {
            input: {
                type: "structure",
                required: [ "RoleName", "PolicyName" ],
                members: {
                    RoleName: {},
                    PolicyName: {}
                }
            }
        },
        DeleteSAMLProvider: {
            input: {
                type: "structure",
                required: [ "SAMLProviderArn" ],
                members: {
                    SAMLProviderArn: {}
                }
            }
        },
        DeleteSSHPublicKey: {
            input: {
                type: "structure",
                required: [ "UserName", "SSHPublicKeyId" ],
                members: {
                    UserName: {},
                    SSHPublicKeyId: {}
                }
            }
        },
        DeleteServerCertificate: {
            input: {
                type: "structure",
                required: [ "ServerCertificateName" ],
                members: {
                    ServerCertificateName: {}
                }
            }
        },
        DeleteServiceLinkedRole: {
            input: {
                type: "structure",
                required: [ "RoleName" ],
                members: {
                    RoleName: {}
                }
            },
            output: {
                resultWrapper: "DeleteServiceLinkedRoleResult",
                type: "structure",
                required: [ "DeletionTaskId" ],
                members: {
                    DeletionTaskId: {}
                }
            }
        },
        DeleteServiceSpecificCredential: {
            input: {
                type: "structure",
                required: [ "ServiceSpecificCredentialId" ],
                members: {
                    UserName: {},
                    ServiceSpecificCredentialId: {}
                }
            }
        },
        DeleteSigningCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateId" ],
                members: {
                    UserName: {},
                    CertificateId: {}
                }
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {}
                }
            }
        },
        DeleteUserPermissionsBoundary: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {}
                }
            }
        },
        DeleteUserPolicy: {
            input: {
                type: "structure",
                required: [ "UserName", "PolicyName" ],
                members: {
                    UserName: {},
                    PolicyName: {}
                }
            }
        },
        DeleteVirtualMFADevice: {
            input: {
                type: "structure",
                required: [ "SerialNumber" ],
                members: {
                    SerialNumber: {}
                }
            }
        },
        DetachGroupPolicy: {
            input: {
                type: "structure",
                required: [ "GroupName", "PolicyArn" ],
                members: {
                    GroupName: {},
                    PolicyArn: {}
                }
            }
        },
        DetachRolePolicy: {
            input: {
                type: "structure",
                required: [ "RoleName", "PolicyArn" ],
                members: {
                    RoleName: {},
                    PolicyArn: {}
                }
            }
        },
        DetachUserPolicy: {
            input: {
                type: "structure",
                required: [ "UserName", "PolicyArn" ],
                members: {
                    UserName: {},
                    PolicyArn: {}
                }
            }
        },
        EnableMFADevice: {
            input: {
                type: "structure",
                required: [ "UserName", "SerialNumber", "AuthenticationCode1", "AuthenticationCode2" ],
                members: {
                    UserName: {},
                    SerialNumber: {},
                    AuthenticationCode1: {},
                    AuthenticationCode2: {}
                }
            }
        },
        GenerateCredentialReport: {
            output: {
                resultWrapper: "GenerateCredentialReportResult",
                type: "structure",
                members: {
                    State: {},
                    Description: {}
                }
            }
        },
        GenerateOrganizationsAccessReport: {
            input: {
                type: "structure",
                required: [ "EntityPath" ],
                members: {
                    EntityPath: {},
                    OrganizationsPolicyId: {}
                }
            },
            output: {
                resultWrapper: "GenerateOrganizationsAccessReportResult",
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        GenerateServiceLastAccessedDetails: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Granularity: {}
                }
            },
            output: {
                resultWrapper: "GenerateServiceLastAccessedDetailsResult",
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        GetAccessKeyLastUsed: {
            input: {
                type: "structure",
                required: [ "AccessKeyId" ],
                members: {
                    AccessKeyId: {}
                }
            },
            output: {
                resultWrapper: "GetAccessKeyLastUsedResult",
                type: "structure",
                members: {
                    UserName: {},
                    AccessKeyLastUsed: {
                        type: "structure",
                        required: [ "LastUsedDate", "ServiceName", "Region" ],
                        members: {
                            LastUsedDate: {
                                type: "timestamp"
                            },
                            ServiceName: {},
                            Region: {}
                        }
                    }
                }
            }
        },
        GetAccountAuthorizationDetails: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "list",
                        member: {}
                    },
                    MaxItems: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "GetAccountAuthorizationDetailsResult",
                type: "structure",
                members: {
                    UserDetailList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Path: {},
                                UserName: {},
                                UserId: {},
                                Arn: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                UserPolicyList: {
                                    shape: "S43"
                                },
                                GroupList: {
                                    type: "list",
                                    member: {}
                                },
                                AttachedManagedPolicies: {
                                    shape: "S46"
                                },
                                PermissionsBoundary: {
                                    shape: "S16"
                                },
                                Tags: {
                                    shape: "Sv"
                                }
                            }
                        }
                    },
                    GroupDetailList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Path: {},
                                GroupName: {},
                                GroupId: {},
                                Arn: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                GroupPolicyList: {
                                    shape: "S43"
                                },
                                AttachedManagedPolicies: {
                                    shape: "S46"
                                }
                            }
                        }
                    },
                    RoleDetailList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Path: {},
                                RoleName: {},
                                RoleId: {},
                                Arn: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                AssumeRolePolicyDocument: {},
                                InstanceProfileList: {
                                    shape: "S4c"
                                },
                                RolePolicyList: {
                                    shape: "S43"
                                },
                                AttachedManagedPolicies: {
                                    shape: "S46"
                                },
                                PermissionsBoundary: {
                                    shape: "S16"
                                },
                                Tags: {
                                    shape: "Sv"
                                },
                                RoleLastUsed: {
                                    shape: "S18"
                                }
                            }
                        }
                    },
                    Policies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyName: {},
                                PolicyId: {},
                                Arn: {},
                                Path: {},
                                DefaultVersionId: {},
                                AttachmentCount: {
                                    type: "integer"
                                },
                                PermissionsBoundaryUsageCount: {
                                    type: "integer"
                                },
                                IsAttachable: {
                                    type: "boolean"
                                },
                                Description: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                UpdateDate: {
                                    type: "timestamp"
                                },
                                PolicyVersionList: {
                                    shape: "S4f"
                                }
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        GetAccountPasswordPolicy: {
            output: {
                resultWrapper: "GetAccountPasswordPolicyResult",
                type: "structure",
                required: [ "PasswordPolicy" ],
                members: {
                    PasswordPolicy: {
                        type: "structure",
                        members: {
                            MinimumPasswordLength: {
                                type: "integer"
                            },
                            RequireSymbols: {
                                type: "boolean"
                            },
                            RequireNumbers: {
                                type: "boolean"
                            },
                            RequireUppercaseCharacters: {
                                type: "boolean"
                            },
                            RequireLowercaseCharacters: {
                                type: "boolean"
                            },
                            AllowUsersToChangePassword: {
                                type: "boolean"
                            },
                            ExpirePasswords: {
                                type: "boolean"
                            },
                            MaxPasswordAge: {
                                type: "integer"
                            },
                            PasswordReusePrevention: {
                                type: "integer"
                            },
                            HardExpiry: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        GetAccountSummary: {
            output: {
                resultWrapper: "GetAccountSummaryResult",
                type: "structure",
                members: {
                    SummaryMap: {
                        type: "map",
                        key: {},
                        value: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        GetContextKeysForCustomPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyInputList" ],
                members: {
                    PolicyInputList: {
                        shape: "S4s"
                    }
                }
            },
            output: {
                shape: "S4t",
                resultWrapper: "GetContextKeysForCustomPolicyResult"
            }
        },
        GetContextKeysForPrincipalPolicy: {
            input: {
                type: "structure",
                required: [ "PolicySourceArn" ],
                members: {
                    PolicySourceArn: {},
                    PolicyInputList: {
                        shape: "S4s"
                    }
                }
            },
            output: {
                shape: "S4t",
                resultWrapper: "GetContextKeysForPrincipalPolicyResult"
            }
        },
        GetCredentialReport: {
            output: {
                resultWrapper: "GetCredentialReportResult",
                type: "structure",
                members: {
                    Content: {
                        type: "blob"
                    },
                    ReportFormat: {},
                    GeneratedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetGroup: {
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    GroupName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "GetGroupResult",
                type: "structure",
                required: [ "Group", "Users" ],
                members: {
                    Group: {
                        shape: "Ss"
                    },
                    Users: {
                        shape: "S52"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        GetGroupPolicy: {
            input: {
                type: "structure",
                required: [ "GroupName", "PolicyName" ],
                members: {
                    GroupName: {},
                    PolicyName: {}
                }
            },
            output: {
                resultWrapper: "GetGroupPolicyResult",
                type: "structure",
                required: [ "GroupName", "PolicyName", "PolicyDocument" ],
                members: {
                    GroupName: {},
                    PolicyName: {},
                    PolicyDocument: {}
                }
            }
        },
        GetInstanceProfile: {
            input: {
                type: "structure",
                required: [ "InstanceProfileName" ],
                members: {
                    InstanceProfileName: {}
                }
            },
            output: {
                resultWrapper: "GetInstanceProfileResult",
                type: "structure",
                required: [ "InstanceProfile" ],
                members: {
                    InstanceProfile: {
                        shape: "S10"
                    }
                }
            }
        },
        GetLoginProfile: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {}
                }
            },
            output: {
                resultWrapper: "GetLoginProfileResult",
                type: "structure",
                required: [ "LoginProfile" ],
                members: {
                    LoginProfile: {
                        shape: "S1d"
                    }
                }
            }
        },
        GetMFADevice: {
            input: {
                type: "structure",
                required: [ "SerialNumber" ],
                members: {
                    SerialNumber: {},
                    UserName: {}
                }
            },
            output: {
                resultWrapper: "GetMFADeviceResult",
                type: "structure",
                required: [ "SerialNumber" ],
                members: {
                    UserName: {},
                    SerialNumber: {},
                    EnableDate: {
                        type: "timestamp"
                    },
                    Certifications: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        GetOpenIDConnectProvider: {
            input: {
                type: "structure",
                required: [ "OpenIDConnectProviderArn" ],
                members: {
                    OpenIDConnectProviderArn: {}
                }
            },
            output: {
                resultWrapper: "GetOpenIDConnectProviderResult",
                type: "structure",
                members: {
                    Url: {},
                    ClientIDList: {
                        shape: "S1g"
                    },
                    ThumbprintList: {
                        shape: "S1h"
                    },
                    CreateDate: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        GetOrganizationsAccessReport: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxItems: {
                        type: "integer"
                    },
                    Marker: {},
                    SortKey: {}
                }
            },
            output: {
                resultWrapper: "GetOrganizationsAccessReportResult",
                type: "structure",
                required: [ "JobStatus", "JobCreationDate" ],
                members: {
                    JobStatus: {},
                    JobCreationDate: {
                        type: "timestamp"
                    },
                    JobCompletionDate: {
                        type: "timestamp"
                    },
                    NumberOfServicesAccessible: {
                        type: "integer"
                    },
                    NumberOfServicesNotAccessed: {
                        type: "integer"
                    },
                    AccessDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ServiceName", "ServiceNamespace" ],
                            members: {
                                ServiceName: {},
                                ServiceNamespace: {},
                                Region: {},
                                EntityPath: {},
                                LastAuthenticatedTime: {
                                    type: "timestamp"
                                },
                                TotalAuthenticatedEntities: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {},
                    ErrorDetails: {
                        shape: "S5p"
                    }
                }
            }
        },
        GetPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyArn" ],
                members: {
                    PolicyArn: {}
                }
            },
            output: {
                resultWrapper: "GetPolicyResult",
                type: "structure",
                members: {
                    Policy: {
                        shape: "S1p"
                    }
                }
            }
        },
        GetPolicyVersion: {
            input: {
                type: "structure",
                required: [ "PolicyArn", "VersionId" ],
                members: {
                    PolicyArn: {},
                    VersionId: {}
                }
            },
            output: {
                resultWrapper: "GetPolicyVersionResult",
                type: "structure",
                members: {
                    PolicyVersion: {
                        shape: "S1u"
                    }
                }
            }
        },
        GetRole: {
            input: {
                type: "structure",
                required: [ "RoleName" ],
                members: {
                    RoleName: {}
                }
            },
            output: {
                resultWrapper: "GetRoleResult",
                type: "structure",
                required: [ "Role" ],
                members: {
                    Role: {
                        shape: "S12"
                    }
                }
            }
        },
        GetRolePolicy: {
            input: {
                type: "structure",
                required: [ "RoleName", "PolicyName" ],
                members: {
                    RoleName: {},
                    PolicyName: {}
                }
            },
            output: {
                resultWrapper: "GetRolePolicyResult",
                type: "structure",
                required: [ "RoleName", "PolicyName", "PolicyDocument" ],
                members: {
                    RoleName: {},
                    PolicyName: {},
                    PolicyDocument: {}
                }
            }
        },
        GetSAMLProvider: {
            input: {
                type: "structure",
                required: [ "SAMLProviderArn" ],
                members: {
                    SAMLProviderArn: {}
                }
            },
            output: {
                resultWrapper: "GetSAMLProviderResult",
                type: "structure",
                members: {
                    SAMLMetadataDocument: {},
                    CreateDate: {
                        type: "timestamp"
                    },
                    ValidUntil: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        GetSSHPublicKey: {
            input: {
                type: "structure",
                required: [ "UserName", "SSHPublicKeyId", "Encoding" ],
                members: {
                    UserName: {},
                    SSHPublicKeyId: {},
                    Encoding: {}
                }
            },
            output: {
                resultWrapper: "GetSSHPublicKeyResult",
                type: "structure",
                members: {
                    SSHPublicKey: {
                        shape: "S63"
                    }
                }
            }
        },
        GetServerCertificate: {
            input: {
                type: "structure",
                required: [ "ServerCertificateName" ],
                members: {
                    ServerCertificateName: {}
                }
            },
            output: {
                resultWrapper: "GetServerCertificateResult",
                type: "structure",
                required: [ "ServerCertificate" ],
                members: {
                    ServerCertificate: {
                        type: "structure",
                        required: [ "ServerCertificateMetadata", "CertificateBody" ],
                        members: {
                            ServerCertificateMetadata: {
                                shape: "S69"
                            },
                            CertificateBody: {},
                            CertificateChain: {},
                            Tags: {
                                shape: "Sv"
                            }
                        }
                    }
                }
            }
        },
        GetServiceLastAccessedDetails: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxItems: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "GetServiceLastAccessedDetailsResult",
                type: "structure",
                required: [ "JobStatus", "JobCreationDate", "ServicesLastAccessed", "JobCompletionDate" ],
                members: {
                    JobStatus: {},
                    JobType: {},
                    JobCreationDate: {
                        type: "timestamp"
                    },
                    ServicesLastAccessed: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ServiceName", "ServiceNamespace" ],
                            members: {
                                ServiceName: {},
                                LastAuthenticated: {
                                    type: "timestamp"
                                },
                                ServiceNamespace: {},
                                LastAuthenticatedEntity: {},
                                LastAuthenticatedRegion: {},
                                TotalAuthenticatedEntities: {
                                    type: "integer"
                                },
                                TrackedActionsLastAccessed: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ActionName: {},
                                            LastAccessedEntity: {},
                                            LastAccessedTime: {
                                                type: "timestamp"
                                            },
                                            LastAccessedRegion: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    JobCompletionDate: {
                        type: "timestamp"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {},
                    Error: {
                        shape: "S5p"
                    }
                }
            }
        },
        GetServiceLastAccessedDetailsWithEntities: {
            input: {
                type: "structure",
                required: [ "JobId", "ServiceNamespace" ],
                members: {
                    JobId: {},
                    ServiceNamespace: {},
                    MaxItems: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "GetServiceLastAccessedDetailsWithEntitiesResult",
                type: "structure",
                required: [ "JobStatus", "JobCreationDate", "JobCompletionDate", "EntityDetailsList" ],
                members: {
                    JobStatus: {},
                    JobCreationDate: {
                        type: "timestamp"
                    },
                    JobCompletionDate: {
                        type: "timestamp"
                    },
                    EntityDetailsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EntityInfo" ],
                            members: {
                                EntityInfo: {
                                    type: "structure",
                                    required: [ "Arn", "Name", "Type", "Id" ],
                                    members: {
                                        Arn: {},
                                        Name: {},
                                        Type: {},
                                        Id: {},
                                        Path: {}
                                    }
                                },
                                LastAuthenticated: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {},
                    Error: {
                        shape: "S5p"
                    }
                }
            }
        },
        GetServiceLinkedRoleDeletionStatus: {
            input: {
                type: "structure",
                required: [ "DeletionTaskId" ],
                members: {
                    DeletionTaskId: {}
                }
            },
            output: {
                resultWrapper: "GetServiceLinkedRoleDeletionStatusResult",
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {},
                    Reason: {
                        type: "structure",
                        members: {
                            Reason: {},
                            RoleUsageList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Region: {},
                                        Resources: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetUser: {
            input: {
                type: "structure",
                members: {
                    UserName: {}
                }
            },
            output: {
                resultWrapper: "GetUserResult",
                type: "structure",
                required: [ "User" ],
                members: {
                    User: {
                        shape: "S2d"
                    }
                }
            }
        },
        GetUserPolicy: {
            input: {
                type: "structure",
                required: [ "UserName", "PolicyName" ],
                members: {
                    UserName: {},
                    PolicyName: {}
                }
            },
            output: {
                resultWrapper: "GetUserPolicyResult",
                type: "structure",
                required: [ "UserName", "PolicyName", "PolicyDocument" ],
                members: {
                    UserName: {},
                    PolicyName: {},
                    PolicyDocument: {}
                }
            }
        },
        ListAccessKeys: {
            input: {
                type: "structure",
                members: {
                    UserName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListAccessKeysResult",
                type: "structure",
                required: [ "AccessKeyMetadata" ],
                members: {
                    AccessKeyMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UserName: {},
                                AccessKeyId: {},
                                Status: {},
                                CreateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListAccountAliases: {
            input: {
                type: "structure",
                members: {
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListAccountAliasesResult",
                type: "structure",
                required: [ "AccountAliases" ],
                members: {
                    AccountAliases: {
                        type: "list",
                        member: {}
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListAttachedGroupPolicies: {
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    GroupName: {},
                    PathPrefix: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListAttachedGroupPoliciesResult",
                type: "structure",
                members: {
                    AttachedPolicies: {
                        shape: "S46"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListAttachedRolePolicies: {
            input: {
                type: "structure",
                required: [ "RoleName" ],
                members: {
                    RoleName: {},
                    PathPrefix: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListAttachedRolePoliciesResult",
                type: "structure",
                members: {
                    AttachedPolicies: {
                        shape: "S46"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListAttachedUserPolicies: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {},
                    PathPrefix: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListAttachedUserPoliciesResult",
                type: "structure",
                members: {
                    AttachedPolicies: {
                        shape: "S46"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListEntitiesForPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyArn" ],
                members: {
                    PolicyArn: {},
                    EntityFilter: {},
                    PathPrefix: {},
                    PolicyUsageFilter: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListEntitiesForPolicyResult",
                type: "structure",
                members: {
                    PolicyGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupName: {},
                                GroupId: {}
                            }
                        }
                    },
                    PolicyUsers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UserName: {},
                                UserId: {}
                            }
                        }
                    },
                    PolicyRoles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RoleName: {},
                                RoleId: {}
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListGroupPolicies: {
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    GroupName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListGroupPoliciesResult",
                type: "structure",
                required: [ "PolicyNames" ],
                members: {
                    PolicyNames: {
                        shape: "S7p"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListGroups: {
            input: {
                type: "structure",
                members: {
                    PathPrefix: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListGroupsResult",
                type: "structure",
                required: [ "Groups" ],
                members: {
                    Groups: {
                        shape: "S7t"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListGroupsForUser: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListGroupsForUserResult",
                type: "structure",
                required: [ "Groups" ],
                members: {
                    Groups: {
                        shape: "S7t"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListInstanceProfileTags: {
            input: {
                type: "structure",
                required: [ "InstanceProfileName" ],
                members: {
                    InstanceProfileName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListInstanceProfileTagsResult",
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sv"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListInstanceProfiles: {
            input: {
                type: "structure",
                members: {
                    PathPrefix: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListInstanceProfilesResult",
                type: "structure",
                required: [ "InstanceProfiles" ],
                members: {
                    InstanceProfiles: {
                        shape: "S4c"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListInstanceProfilesForRole: {
            input: {
                type: "structure",
                required: [ "RoleName" ],
                members: {
                    RoleName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListInstanceProfilesForRoleResult",
                type: "structure",
                required: [ "InstanceProfiles" ],
                members: {
                    InstanceProfiles: {
                        shape: "S4c"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListMFADeviceTags: {
            input: {
                type: "structure",
                required: [ "SerialNumber" ],
                members: {
                    SerialNumber: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListMFADeviceTagsResult",
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sv"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListMFADevices: {
            input: {
                type: "structure",
                members: {
                    UserName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListMFADevicesResult",
                type: "structure",
                required: [ "MFADevices" ],
                members: {
                    MFADevices: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "UserName", "SerialNumber", "EnableDate" ],
                            members: {
                                UserName: {},
                                SerialNumber: {},
                                EnableDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListOpenIDConnectProviderTags: {
            input: {
                type: "structure",
                required: [ "OpenIDConnectProviderArn" ],
                members: {
                    OpenIDConnectProviderArn: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListOpenIDConnectProviderTagsResult",
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sv"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListOpenIDConnectProviders: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                resultWrapper: "ListOpenIDConnectProvidersResult",
                type: "structure",
                members: {
                    OpenIDConnectProviderList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        ListPolicies: {
            input: {
                type: "structure",
                members: {
                    Scope: {},
                    OnlyAttached: {
                        type: "boolean"
                    },
                    PathPrefix: {},
                    PolicyUsageFilter: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListPoliciesResult",
                type: "structure",
                members: {
                    Policies: {
                        type: "list",
                        member: {
                            shape: "S1p"
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListPoliciesGrantingServiceAccess: {
            input: {
                type: "structure",
                required: [ "Arn", "ServiceNamespaces" ],
                members: {
                    Marker: {},
                    Arn: {},
                    ServiceNamespaces: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "ListPoliciesGrantingServiceAccessResult",
                type: "structure",
                required: [ "PoliciesGrantingServiceAccess" ],
                members: {
                    PoliciesGrantingServiceAccess: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServiceNamespace: {},
                                Policies: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "PolicyName", "PolicyType" ],
                                        members: {
                                            PolicyName: {},
                                            PolicyType: {},
                                            PolicyArn: {},
                                            EntityType: {},
                                            EntityName: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListPolicyTags: {
            input: {
                type: "structure",
                required: [ "PolicyArn" ],
                members: {
                    PolicyArn: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListPolicyTagsResult",
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sv"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListPolicyVersions: {
            input: {
                type: "structure",
                required: [ "PolicyArn" ],
                members: {
                    PolicyArn: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListPolicyVersionsResult",
                type: "structure",
                members: {
                    Versions: {
                        shape: "S4f"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListRolePolicies: {
            input: {
                type: "structure",
                required: [ "RoleName" ],
                members: {
                    RoleName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListRolePoliciesResult",
                type: "structure",
                required: [ "PolicyNames" ],
                members: {
                    PolicyNames: {
                        shape: "S7p"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListRoleTags: {
            input: {
                type: "structure",
                required: [ "RoleName" ],
                members: {
                    RoleName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListRoleTagsResult",
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sv"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListRoles: {
            input: {
                type: "structure",
                members: {
                    PathPrefix: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListRolesResult",
                type: "structure",
                required: [ "Roles" ],
                members: {
                    Roles: {
                        shape: "S11"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListSAMLProviderTags: {
            input: {
                type: "structure",
                required: [ "SAMLProviderArn" ],
                members: {
                    SAMLProviderArn: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListSAMLProviderTagsResult",
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sv"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListSAMLProviders: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                resultWrapper: "ListSAMLProvidersResult",
                type: "structure",
                members: {
                    SAMLProviderList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                ValidUntil: {
                                    type: "timestamp"
                                },
                                CreateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListSSHPublicKeys: {
            input: {
                type: "structure",
                members: {
                    UserName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListSSHPublicKeysResult",
                type: "structure",
                members: {
                    SSHPublicKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "UserName", "SSHPublicKeyId", "Status", "UploadDate" ],
                            members: {
                                UserName: {},
                                SSHPublicKeyId: {},
                                Status: {},
                                UploadDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListServerCertificateTags: {
            input: {
                type: "structure",
                required: [ "ServerCertificateName" ],
                members: {
                    ServerCertificateName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListServerCertificateTagsResult",
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sv"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListServerCertificates: {
            input: {
                type: "structure",
                members: {
                    PathPrefix: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListServerCertificatesResult",
                type: "structure",
                required: [ "ServerCertificateMetadataList" ],
                members: {
                    ServerCertificateMetadataList: {
                        type: "list",
                        member: {
                            shape: "S69"
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListServiceSpecificCredentials: {
            input: {
                type: "structure",
                members: {
                    UserName: {},
                    ServiceName: {}
                }
            },
            output: {
                resultWrapper: "ListServiceSpecificCredentialsResult",
                type: "structure",
                members: {
                    ServiceSpecificCredentials: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "UserName", "Status", "ServiceUserName", "CreateDate", "ServiceSpecificCredentialId", "ServiceName" ],
                            members: {
                                UserName: {},
                                Status: {},
                                ServiceUserName: {},
                                CreateDate: {
                                    type: "timestamp"
                                },
                                ServiceSpecificCredentialId: {},
                                ServiceName: {}
                            }
                        }
                    }
                }
            }
        },
        ListSigningCertificates: {
            input: {
                type: "structure",
                members: {
                    UserName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListSigningCertificatesResult",
                type: "structure",
                required: [ "Certificates" ],
                members: {
                    Certificates: {
                        type: "list",
                        member: {
                            shape: "S9n"
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListUserPolicies: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListUserPoliciesResult",
                type: "structure",
                required: [ "PolicyNames" ],
                members: {
                    PolicyNames: {
                        shape: "S7p"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListUserTags: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListUserTagsResult",
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sv"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                members: {
                    PathPrefix: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListUsersResult",
                type: "structure",
                required: [ "Users" ],
                members: {
                    Users: {
                        shape: "S52"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        ListVirtualMFADevices: {
            input: {
                type: "structure",
                members: {
                    AssignmentStatus: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListVirtualMFADevicesResult",
                type: "structure",
                required: [ "VirtualMFADevices" ],
                members: {
                    VirtualMFADevices: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {}
                }
            }
        },
        PutGroupPolicy: {
            input: {
                type: "structure",
                required: [ "GroupName", "PolicyName", "PolicyDocument" ],
                members: {
                    GroupName: {},
                    PolicyName: {},
                    PolicyDocument: {}
                }
            }
        },
        PutRolePermissionsBoundary: {
            input: {
                type: "structure",
                required: [ "RoleName", "PermissionsBoundary" ],
                members: {
                    RoleName: {},
                    PermissionsBoundary: {}
                }
            }
        },
        PutRolePolicy: {
            input: {
                type: "structure",
                required: [ "RoleName", "PolicyName", "PolicyDocument" ],
                members: {
                    RoleName: {},
                    PolicyName: {},
                    PolicyDocument: {}
                }
            }
        },
        PutUserPermissionsBoundary: {
            input: {
                type: "structure",
                required: [ "UserName", "PermissionsBoundary" ],
                members: {
                    UserName: {},
                    PermissionsBoundary: {}
                }
            }
        },
        PutUserPolicy: {
            input: {
                type: "structure",
                required: [ "UserName", "PolicyName", "PolicyDocument" ],
                members: {
                    UserName: {},
                    PolicyName: {},
                    PolicyDocument: {}
                }
            }
        },
        RemoveClientIDFromOpenIDConnectProvider: {
            input: {
                type: "structure",
                required: [ "OpenIDConnectProviderArn", "ClientID" ],
                members: {
                    OpenIDConnectProviderArn: {},
                    ClientID: {}
                }
            }
        },
        RemoveRoleFromInstanceProfile: {
            input: {
                type: "structure",
                required: [ "InstanceProfileName", "RoleName" ],
                members: {
                    InstanceProfileName: {},
                    RoleName: {}
                }
            }
        },
        RemoveUserFromGroup: {
            input: {
                type: "structure",
                required: [ "GroupName", "UserName" ],
                members: {
                    GroupName: {},
                    UserName: {}
                }
            }
        },
        ResetServiceSpecificCredential: {
            input: {
                type: "structure",
                required: [ "ServiceSpecificCredentialId" ],
                members: {
                    UserName: {},
                    ServiceSpecificCredentialId: {}
                }
            },
            output: {
                resultWrapper: "ResetServiceSpecificCredentialResult",
                type: "structure",
                members: {
                    ServiceSpecificCredential: {
                        shape: "S27"
                    }
                }
            }
        },
        ResyncMFADevice: {
            input: {
                type: "structure",
                required: [ "UserName", "SerialNumber", "AuthenticationCode1", "AuthenticationCode2" ],
                members: {
                    UserName: {},
                    SerialNumber: {},
                    AuthenticationCode1: {},
                    AuthenticationCode2: {}
                }
            }
        },
        SetDefaultPolicyVersion: {
            input: {
                type: "structure",
                required: [ "PolicyArn", "VersionId" ],
                members: {
                    PolicyArn: {},
                    VersionId: {}
                }
            }
        },
        SetSecurityTokenServicePreferences: {
            input: {
                type: "structure",
                required: [ "GlobalEndpointTokenVersion" ],
                members: {
                    GlobalEndpointTokenVersion: {}
                }
            }
        },
        SimulateCustomPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyInputList", "ActionNames" ],
                members: {
                    PolicyInputList: {
                        shape: "S4s"
                    },
                    PermissionsBoundaryPolicyInputList: {
                        shape: "S4s"
                    },
                    ActionNames: {
                        shape: "Sad"
                    },
                    ResourceArns: {
                        shape: "Saf"
                    },
                    ResourcePolicy: {},
                    ResourceOwner: {},
                    CallerArn: {},
                    ContextEntries: {
                        shape: "Sah"
                    },
                    ResourceHandlingOption: {},
                    MaxItems: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                shape: "San",
                resultWrapper: "SimulateCustomPolicyResult"
            }
        },
        SimulatePrincipalPolicy: {
            input: {
                type: "structure",
                required: [ "PolicySourceArn", "ActionNames" ],
                members: {
                    PolicySourceArn: {},
                    PolicyInputList: {
                        shape: "S4s"
                    },
                    PermissionsBoundaryPolicyInputList: {
                        shape: "S4s"
                    },
                    ActionNames: {
                        shape: "Sad"
                    },
                    ResourceArns: {
                        shape: "Saf"
                    },
                    ResourcePolicy: {},
                    ResourceOwner: {},
                    CallerArn: {},
                    ContextEntries: {
                        shape: "Sah"
                    },
                    ResourceHandlingOption: {},
                    MaxItems: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                shape: "San",
                resultWrapper: "SimulatePrincipalPolicyResult"
            }
        },
        TagInstanceProfile: {
            input: {
                type: "structure",
                required: [ "InstanceProfileName", "Tags" ],
                members: {
                    InstanceProfileName: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        TagMFADevice: {
            input: {
                type: "structure",
                required: [ "SerialNumber", "Tags" ],
                members: {
                    SerialNumber: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        TagOpenIDConnectProvider: {
            input: {
                type: "structure",
                required: [ "OpenIDConnectProviderArn", "Tags" ],
                members: {
                    OpenIDConnectProviderArn: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        TagPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyArn", "Tags" ],
                members: {
                    PolicyArn: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        TagRole: {
            input: {
                type: "structure",
                required: [ "RoleName", "Tags" ],
                members: {
                    RoleName: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        TagSAMLProvider: {
            input: {
                type: "structure",
                required: [ "SAMLProviderArn", "Tags" ],
                members: {
                    SAMLProviderArn: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        TagServerCertificate: {
            input: {
                type: "structure",
                required: [ "ServerCertificateName", "Tags" ],
                members: {
                    ServerCertificateName: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        TagUser: {
            input: {
                type: "structure",
                required: [ "UserName", "Tags" ],
                members: {
                    UserName: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        UntagInstanceProfile: {
            input: {
                type: "structure",
                required: [ "InstanceProfileName", "TagKeys" ],
                members: {
                    InstanceProfileName: {},
                    TagKeys: {
                        shape: "Sbe"
                    }
                }
            }
        },
        UntagMFADevice: {
            input: {
                type: "structure",
                required: [ "SerialNumber", "TagKeys" ],
                members: {
                    SerialNumber: {},
                    TagKeys: {
                        shape: "Sbe"
                    }
                }
            }
        },
        UntagOpenIDConnectProvider: {
            input: {
                type: "structure",
                required: [ "OpenIDConnectProviderArn", "TagKeys" ],
                members: {
                    OpenIDConnectProviderArn: {},
                    TagKeys: {
                        shape: "Sbe"
                    }
                }
            }
        },
        UntagPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyArn", "TagKeys" ],
                members: {
                    PolicyArn: {},
                    TagKeys: {
                        shape: "Sbe"
                    }
                }
            }
        },
        UntagRole: {
            input: {
                type: "structure",
                required: [ "RoleName", "TagKeys" ],
                members: {
                    RoleName: {},
                    TagKeys: {
                        shape: "Sbe"
                    }
                }
            }
        },
        UntagSAMLProvider: {
            input: {
                type: "structure",
                required: [ "SAMLProviderArn", "TagKeys" ],
                members: {
                    SAMLProviderArn: {},
                    TagKeys: {
                        shape: "Sbe"
                    }
                }
            }
        },
        UntagServerCertificate: {
            input: {
                type: "structure",
                required: [ "ServerCertificateName", "TagKeys" ],
                members: {
                    ServerCertificateName: {},
                    TagKeys: {
                        shape: "Sbe"
                    }
                }
            }
        },
        UntagUser: {
            input: {
                type: "structure",
                required: [ "UserName", "TagKeys" ],
                members: {
                    UserName: {},
                    TagKeys: {
                        shape: "Sbe"
                    }
                }
            }
        },
        UpdateAccessKey: {
            input: {
                type: "structure",
                required: [ "AccessKeyId", "Status" ],
                members: {
                    UserName: {},
                    AccessKeyId: {},
                    Status: {}
                }
            }
        },
        UpdateAccountPasswordPolicy: {
            input: {
                type: "structure",
                members: {
                    MinimumPasswordLength: {
                        type: "integer"
                    },
                    RequireSymbols: {
                        type: "boolean"
                    },
                    RequireNumbers: {
                        type: "boolean"
                    },
                    RequireUppercaseCharacters: {
                        type: "boolean"
                    },
                    RequireLowercaseCharacters: {
                        type: "boolean"
                    },
                    AllowUsersToChangePassword: {
                        type: "boolean"
                    },
                    MaxPasswordAge: {
                        type: "integer"
                    },
                    PasswordReusePrevention: {
                        type: "integer"
                    },
                    HardExpiry: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateAssumeRolePolicy: {
            input: {
                type: "structure",
                required: [ "RoleName", "PolicyDocument" ],
                members: {
                    RoleName: {},
                    PolicyDocument: {}
                }
            }
        },
        UpdateGroup: {
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    GroupName: {},
                    NewPath: {},
                    NewGroupName: {}
                }
            }
        },
        UpdateLoginProfile: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {},
                    Password: {
                        shape: "Sf"
                    },
                    PasswordResetRequired: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateOpenIDConnectProviderThumbprint: {
            input: {
                type: "structure",
                required: [ "OpenIDConnectProviderArn", "ThumbprintList" ],
                members: {
                    OpenIDConnectProviderArn: {},
                    ThumbprintList: {
                        shape: "S1h"
                    }
                }
            }
        },
        UpdateRole: {
            input: {
                type: "structure",
                required: [ "RoleName" ],
                members: {
                    RoleName: {},
                    Description: {},
                    MaxSessionDuration: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateRoleResult",
                type: "structure",
                members: {}
            }
        },
        UpdateRoleDescription: {
            input: {
                type: "structure",
                required: [ "RoleName", "Description" ],
                members: {
                    RoleName: {},
                    Description: {}
                }
            },
            output: {
                resultWrapper: "UpdateRoleDescriptionResult",
                type: "structure",
                members: {
                    Role: {
                        shape: "S12"
                    }
                }
            }
        },
        UpdateSAMLProvider: {
            input: {
                type: "structure",
                required: [ "SAMLMetadataDocument", "SAMLProviderArn" ],
                members: {
                    SAMLMetadataDocument: {},
                    SAMLProviderArn: {}
                }
            },
            output: {
                resultWrapper: "UpdateSAMLProviderResult",
                type: "structure",
                members: {
                    SAMLProviderArn: {}
                }
            }
        },
        UpdateSSHPublicKey: {
            input: {
                type: "structure",
                required: [ "UserName", "SSHPublicKeyId", "Status" ],
                members: {
                    UserName: {},
                    SSHPublicKeyId: {},
                    Status: {}
                }
            }
        },
        UpdateServerCertificate: {
            input: {
                type: "structure",
                required: [ "ServerCertificateName" ],
                members: {
                    ServerCertificateName: {},
                    NewPath: {},
                    NewServerCertificateName: {}
                }
            }
        },
        UpdateServiceSpecificCredential: {
            input: {
                type: "structure",
                required: [ "ServiceSpecificCredentialId", "Status" ],
                members: {
                    UserName: {},
                    ServiceSpecificCredentialId: {},
                    Status: {}
                }
            }
        },
        UpdateSigningCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateId", "Status" ],
                members: {
                    UserName: {},
                    CertificateId: {},
                    Status: {}
                }
            }
        },
        UpdateUser: {
            input: {
                type: "structure",
                required: [ "UserName" ],
                members: {
                    UserName: {},
                    NewPath: {},
                    NewUserName: {}
                }
            }
        },
        UploadSSHPublicKey: {
            input: {
                type: "structure",
                required: [ "UserName", "SSHPublicKeyBody" ],
                members: {
                    UserName: {},
                    SSHPublicKeyBody: {}
                }
            },
            output: {
                resultWrapper: "UploadSSHPublicKeyResult",
                type: "structure",
                members: {
                    SSHPublicKey: {
                        shape: "S63"
                    }
                }
            }
        },
        UploadServerCertificate: {
            input: {
                type: "structure",
                required: [ "ServerCertificateName", "CertificateBody", "PrivateKey" ],
                members: {
                    Path: {},
                    ServerCertificateName: {},
                    CertificateBody: {},
                    PrivateKey: {
                        type: "string",
                        sensitive: true
                    },
                    CertificateChain: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "UploadServerCertificateResult",
                type: "structure",
                members: {
                    ServerCertificateMetadata: {
                        shape: "S69"
                    },
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        UploadSigningCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateBody" ],
                members: {
                    UserName: {},
                    CertificateBody: {}
                }
            },
            output: {
                resultWrapper: "UploadSigningCertificateResult",
                type: "structure",
                required: [ "Certificate" ],
                members: {
                    Certificate: {
                        shape: "S9n"
                    }
                }
            }
        }
    },
    shapes: {
        Sf: {
            type: "string",
            sensitive: true
        },
        Ss: {
            type: "structure",
            required: [ "Path", "GroupName", "GroupId", "Arn", "CreateDate" ],
            members: {
                Path: {},
                GroupName: {},
                GroupId: {},
                Arn: {},
                CreateDate: {
                    type: "timestamp"
                }
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S10: {
            type: "structure",
            required: [ "Path", "InstanceProfileName", "InstanceProfileId", "Arn", "CreateDate", "Roles" ],
            members: {
                Path: {},
                InstanceProfileName: {},
                InstanceProfileId: {},
                Arn: {},
                CreateDate: {
                    type: "timestamp"
                },
                Roles: {
                    shape: "S11"
                },
                Tags: {
                    shape: "Sv"
                }
            }
        },
        S11: {
            type: "list",
            member: {
                shape: "S12"
            }
        },
        S12: {
            type: "structure",
            required: [ "Path", "RoleName", "RoleId", "Arn", "CreateDate" ],
            members: {
                Path: {},
                RoleName: {},
                RoleId: {},
                Arn: {},
                CreateDate: {
                    type: "timestamp"
                },
                AssumeRolePolicyDocument: {},
                Description: {},
                MaxSessionDuration: {
                    type: "integer"
                },
                PermissionsBoundary: {
                    shape: "S16"
                },
                Tags: {
                    shape: "Sv"
                },
                RoleLastUsed: {
                    shape: "S18"
                }
            }
        },
        S16: {
            type: "structure",
            members: {
                PermissionsBoundaryType: {},
                PermissionsBoundaryArn: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                LastUsedDate: {
                    type: "timestamp"
                },
                Region: {}
            }
        },
        S1d: {
            type: "structure",
            required: [ "UserName", "CreateDate" ],
            members: {
                UserName: {},
                CreateDate: {
                    type: "timestamp"
                },
                PasswordResetRequired: {
                    type: "boolean"
                }
            }
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "structure",
            members: {
                PolicyName: {},
                PolicyId: {},
                Arn: {},
                Path: {},
                DefaultVersionId: {},
                AttachmentCount: {
                    type: "integer"
                },
                PermissionsBoundaryUsageCount: {
                    type: "integer"
                },
                IsAttachable: {
                    type: "boolean"
                },
                Description: {},
                CreateDate: {
                    type: "timestamp"
                },
                UpdateDate: {
                    type: "timestamp"
                },
                Tags: {
                    shape: "Sv"
                }
            }
        },
        S1u: {
            type: "structure",
            members: {
                Document: {},
                VersionId: {},
                IsDefaultVersion: {
                    type: "boolean"
                },
                CreateDate: {
                    type: "timestamp"
                }
            }
        },
        S27: {
            type: "structure",
            required: [ "CreateDate", "ServiceName", "ServiceUserName", "ServicePassword", "ServiceSpecificCredentialId", "UserName", "Status" ],
            members: {
                CreateDate: {
                    type: "timestamp"
                },
                ServiceName: {},
                ServiceUserName: {},
                ServicePassword: {
                    type: "string",
                    sensitive: true
                },
                ServiceSpecificCredentialId: {},
                UserName: {},
                Status: {}
            }
        },
        S2d: {
            type: "structure",
            required: [ "Path", "UserName", "UserId", "Arn", "CreateDate" ],
            members: {
                Path: {},
                UserName: {},
                UserId: {},
                Arn: {},
                CreateDate: {
                    type: "timestamp"
                },
                PasswordLastUsed: {
                    type: "timestamp"
                },
                PermissionsBoundary: {
                    shape: "S16"
                },
                Tags: {
                    shape: "Sv"
                }
            }
        },
        S2h: {
            type: "structure",
            required: [ "SerialNumber" ],
            members: {
                SerialNumber: {},
                Base32StringSeed: {
                    shape: "S2j"
                },
                QRCodePNG: {
                    shape: "S2j"
                },
                User: {
                    shape: "S2d"
                },
                EnableDate: {
                    type: "timestamp"
                },
                Tags: {
                    shape: "Sv"
                }
            }
        },
        S2j: {
            type: "blob",
            sensitive: true
        },
        S43: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PolicyName: {},
                    PolicyDocument: {}
                }
            }
        },
        S46: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PolicyName: {},
                    PolicyArn: {}
                }
            }
        },
        S4c: {
            type: "list",
            member: {
                shape: "S10"
            }
        },
        S4f: {
            type: "list",
            member: {
                shape: "S1u"
            }
        },
        S4s: {
            type: "list",
            member: {}
        },
        S4t: {
            type: "structure",
            members: {
                ContextKeyNames: {
                    shape: "S4u"
                }
            }
        },
        S4u: {
            type: "list",
            member: {}
        },
        S52: {
            type: "list",
            member: {
                shape: "S2d"
            }
        },
        S5p: {
            type: "structure",
            required: [ "Message", "Code" ],
            members: {
                Message: {},
                Code: {}
            }
        },
        S63: {
            type: "structure",
            required: [ "UserName", "SSHPublicKeyId", "Fingerprint", "SSHPublicKeyBody", "Status" ],
            members: {
                UserName: {},
                SSHPublicKeyId: {},
                Fingerprint: {},
                SSHPublicKeyBody: {},
                Status: {},
                UploadDate: {
                    type: "timestamp"
                }
            }
        },
        S69: {
            type: "structure",
            required: [ "Path", "ServerCertificateName", "ServerCertificateId", "Arn" ],
            members: {
                Path: {},
                ServerCertificateName: {},
                ServerCertificateId: {},
                Arn: {},
                UploadDate: {
                    type: "timestamp"
                },
                Expiration: {
                    type: "timestamp"
                }
            }
        },
        S7p: {
            type: "list",
            member: {}
        },
        S7t: {
            type: "list",
            member: {
                shape: "Ss"
            }
        },
        S9n: {
            type: "structure",
            required: [ "UserName", "CertificateId", "CertificateBody", "Status" ],
            members: {
                UserName: {},
                CertificateId: {},
                CertificateBody: {},
                Status: {},
                UploadDate: {
                    type: "timestamp"
                }
            }
        },
        Sad: {
            type: "list",
            member: {}
        },
        Saf: {
            type: "list",
            member: {}
        },
        Sah: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ContextKeyName: {},
                    ContextKeyValues: {
                        type: "list",
                        member: {}
                    },
                    ContextKeyType: {}
                }
            }
        },
        San: {
            type: "structure",
            members: {
                EvaluationResults: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "EvalActionName", "EvalDecision" ],
                        members: {
                            EvalActionName: {},
                            EvalResourceName: {},
                            EvalDecision: {},
                            MatchedStatements: {
                                shape: "Sar"
                            },
                            MissingContextValues: {
                                shape: "S4u"
                            },
                            OrganizationsDecisionDetail: {
                                type: "structure",
                                members: {
                                    AllowedByOrganizations: {
                                        type: "boolean"
                                    }
                                }
                            },
                            PermissionsBoundaryDecisionDetail: {
                                shape: "Saz"
                            },
                            EvalDecisionDetails: {
                                shape: "Sb0"
                            },
                            ResourceSpecificResults: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "EvalResourceName", "EvalResourceDecision" ],
                                    members: {
                                        EvalResourceName: {},
                                        EvalResourceDecision: {},
                                        MatchedStatements: {
                                            shape: "Sar"
                                        },
                                        MissingContextValues: {
                                            shape: "S4u"
                                        },
                                        EvalDecisionDetails: {
                                            shape: "Sb0"
                                        },
                                        PermissionsBoundaryDecisionDetail: {
                                            shape: "Saz"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                IsTruncated: {
                    type: "boolean"
                },
                Marker: {}
            }
        },
        Sar: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SourcePolicyId: {},
                    SourcePolicyType: {},
                    StartPosition: {
                        shape: "Sav"
                    },
                    EndPosition: {
                        shape: "Sav"
                    }
                }
            }
        },
        Sav: {
            type: "structure",
            members: {
                Line: {
                    type: "integer"
                },
                Column: {
                    type: "integer"
                }
            }
        },
        Saz: {
            type: "structure",
            members: {
                AllowedByPermissionsBoundary: {
                    type: "boolean"
                }
            }
        },
        Sb0: {
            type: "map",
            key: {},
            value: {}
        },
        Sbe: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetAccountAuthorizationDetails: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: [ "UserDetailList", "GroupDetailList", "RoleDetailList", "Policies" ]
        },
        GetGroup: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Users"
        },
        ListAccessKeys: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "AccessKeyMetadata"
        },
        ListAccountAliases: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "AccountAliases"
        },
        ListAttachedGroupPolicies: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "AttachedPolicies"
        },
        ListAttachedRolePolicies: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "AttachedPolicies"
        },
        ListAttachedUserPolicies: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "AttachedPolicies"
        },
        ListEntitiesForPolicy: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: [ "PolicyGroups", "PolicyUsers", "PolicyRoles" ]
        },
        ListGroupPolicies: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "PolicyNames"
        },
        ListGroups: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Groups"
        },
        ListGroupsForUser: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Groups"
        },
        ListInstanceProfileTags: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Tags"
        },
        ListInstanceProfiles: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "InstanceProfiles"
        },
        ListInstanceProfilesForRole: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "InstanceProfiles"
        },
        ListMFADeviceTags: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Tags"
        },
        ListMFADevices: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "MFADevices"
        },
        ListOpenIDConnectProviderTags: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Tags"
        },
        ListPolicies: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Policies"
        },
        ListPolicyTags: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Tags"
        },
        ListPolicyVersions: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Versions"
        },
        ListRolePolicies: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "PolicyNames"
        },
        ListRoleTags: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Tags"
        },
        ListRoles: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Roles"
        },
        ListSAMLProviderTags: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Tags"
        },
        ListSAMLProviders: {
            result_key: "SAMLProviderList"
        },
        ListSSHPublicKeys: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "SSHPublicKeys"
        },
        ListServerCertificateTags: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Tags"
        },
        ListServerCertificates: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "ServerCertificateMetadataList"
        },
        ListSigningCertificates: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Certificates"
        },
        ListUserPolicies: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "PolicyNames"
        },
        ListUserTags: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Tags"
        },
        ListUsers: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "Users"
        },
        ListVirtualMFADevices: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "VirtualMFADevices"
        },
        SimulateCustomPolicy: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "EvaluationResults"
        },
        SimulatePrincipalPolicy: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "Marker",
            result_key: "EvaluationResults"
        }
    },
    waiters: {
        InstanceProfileExists: {
            delay: 1,
            operation: "GetInstanceProfile",
            maxAttempts: 40,
            acceptors: [ {
                expected: 200,
                matcher: "status",
                state: "success"
            }, {
                state: "retry",
                matcher: "status",
                expected: 404
            } ]
        },
        UserExists: {
            delay: 1,
            operation: "GetUser",
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 200
            }, {
                state: "retry",
                matcher: "error",
                expected: "NoSuchEntity"
            } ]
        },
        RoleExists: {
            delay: 1,
            operation: "GetRole",
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 200
            }, {
                state: "retry",
                matcher: "error",
                expected: "NoSuchEntity"
            } ]
        },
        PolicyExists: {
            delay: 1,
            operation: "GetPolicy",
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 200
            }, {
                state: "retry",
                matcher: "error",
                expected: "NoSuchEntity"
            } ]
        }
    }
};

AWS.apiLoader.services["importexport"] = {};

AWS.ImportExport = AWS.Service.defineService("importexport", [ "2010-06-01" ]);

AWS.apiLoader.services["importexport"]["2010-06-01"] = {
    version: "2.0",
    metadata: {
        uid: "importexport-2010-06-01",
        apiVersion: "2010-06-01",
        endpointPrefix: "importexport",
        globalEndpoint: "importexport.amazonaws.com",
        serviceFullName: "AWS Import/Export",
        serviceId: "ImportExport",
        signatureVersion: "v2",
        xmlNamespace: "http://importexport.amazonaws.com/doc/2010-06-01/",
        protocol: "query"
    },
    operations: {
        CancelJob: {
            http: {
                requestUri: "/?Operation=CancelJob"
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    APIVersion: {}
                }
            },
            output: {
                resultWrapper: "CancelJobResult",
                type: "structure",
                members: {
                    Success: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateJob: {
            http: {
                requestUri: "/?Operation=CreateJob"
            },
            input: {
                type: "structure",
                required: [ "JobType", "Manifest", "ValidateOnly" ],
                members: {
                    JobType: {},
                    Manifest: {},
                    ManifestAddendum: {},
                    ValidateOnly: {
                        type: "boolean"
                    },
                    APIVersion: {}
                }
            },
            output: {
                resultWrapper: "CreateJobResult",
                type: "structure",
                members: {
                    JobId: {},
                    JobType: {},
                    Signature: {},
                    SignatureFileContents: {},
                    WarningMessage: {},
                    ArtifactList: {
                        shape: "Sf"
                    }
                }
            }
        },
        GetShippingLabel: {
            http: {
                requestUri: "/?Operation=GetShippingLabel"
            },
            input: {
                type: "structure",
                required: [ "jobIds" ],
                members: {
                    jobIds: {
                        type: "list",
                        member: {}
                    },
                    name: {},
                    company: {},
                    phoneNumber: {},
                    country: {},
                    stateOrProvince: {},
                    city: {},
                    postalCode: {},
                    street1: {},
                    street2: {},
                    street3: {},
                    APIVersion: {}
                }
            },
            output: {
                resultWrapper: "GetShippingLabelResult",
                type: "structure",
                members: {
                    ShippingLabelURL: {},
                    Warning: {}
                }
            }
        },
        GetStatus: {
            http: {
                requestUri: "/?Operation=GetStatus"
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    APIVersion: {}
                }
            },
            output: {
                resultWrapper: "GetStatusResult",
                type: "structure",
                members: {
                    JobId: {},
                    JobType: {},
                    LocationCode: {},
                    LocationMessage: {},
                    ProgressCode: {},
                    ProgressMessage: {},
                    Carrier: {},
                    TrackingNumber: {},
                    LogBucket: {},
                    LogKey: {},
                    ErrorCount: {
                        type: "integer"
                    },
                    Signature: {},
                    SignatureFileContents: {},
                    CurrentManifest: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    ArtifactList: {
                        shape: "Sf"
                    }
                }
            }
        },
        ListJobs: {
            http: {
                requestUri: "/?Operation=ListJobs"
            },
            input: {
                type: "structure",
                members: {
                    MaxJobs: {
                        type: "integer"
                    },
                    Marker: {},
                    APIVersion: {}
                }
            },
            output: {
                resultWrapper: "ListJobsResult",
                type: "structure",
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                IsCanceled: {
                                    type: "boolean"
                                },
                                JobType: {}
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateJob: {
            http: {
                requestUri: "/?Operation=UpdateJob"
            },
            input: {
                type: "structure",
                required: [ "JobId", "Manifest", "JobType", "ValidateOnly" ],
                members: {
                    JobId: {},
                    Manifest: {},
                    JobType: {},
                    ValidateOnly: {
                        type: "boolean"
                    },
                    APIVersion: {}
                }
            },
            output: {
                resultWrapper: "UpdateJobResult",
                type: "structure",
                members: {
                    Success: {
                        type: "boolean"
                    },
                    WarningMessage: {},
                    ArtifactList: {
                        shape: "Sf"
                    }
                }
            }
        }
    },
    shapes: {
        Sf: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Description: {},
                    URL: {}
                }
            }
        }
    },
    examples: {},
    paginators: {
        ListJobs: {
            input_token: "Marker",
            output_token: "Jobs[-1].JobId",
            more_results: "IsTruncated",
            limit_key: "MaxJobs",
            result_key: "Jobs"
        }
    }
};

AWS.apiLoader.services["inspector"] = {};

AWS.Inspector = AWS.Service.defineService("inspector", [ "2016-02-16" ]);

AWS.apiLoader.services["inspector"]["2016-02-16"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-02-16",
        endpointPrefix: "inspector",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Inspector",
        serviceId: "Inspector",
        signatureVersion: "v4",
        targetPrefix: "InspectorService",
        uid: "inspector-2016-02-16"
    },
    operations: {
        AddAttributesToFindings: {
            input: {
                type: "structure",
                required: [ "findingArns", "attributes" ],
                members: {
                    findingArns: {
                        shape: "S2"
                    },
                    attributes: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "failedItems" ],
                members: {
                    failedItems: {
                        shape: "S9"
                    }
                }
            }
        },
        CreateAssessmentTarget: {
            input: {
                type: "structure",
                required: [ "assessmentTargetName" ],
                members: {
                    assessmentTargetName: {},
                    resourceGroupArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentTargetArn" ],
                members: {
                    assessmentTargetArn: {}
                }
            }
        },
        CreateAssessmentTemplate: {
            input: {
                type: "structure",
                required: [ "assessmentTargetArn", "assessmentTemplateName", "durationInSeconds", "rulesPackageArns" ],
                members: {
                    assessmentTargetArn: {},
                    assessmentTemplateName: {},
                    durationInSeconds: {
                        type: "integer"
                    },
                    rulesPackageArns: {
                        shape: "Sj"
                    },
                    userAttributesForFindings: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentTemplateArn" ],
                members: {
                    assessmentTemplateArn: {}
                }
            }
        },
        CreateExclusionsPreview: {
            input: {
                type: "structure",
                required: [ "assessmentTemplateArn" ],
                members: {
                    assessmentTemplateArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "previewToken" ],
                members: {
                    previewToken: {}
                }
            }
        },
        CreateResourceGroup: {
            input: {
                type: "structure",
                required: [ "resourceGroupTags" ],
                members: {
                    resourceGroupTags: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourceGroupArn" ],
                members: {
                    resourceGroupArn: {}
                }
            }
        },
        DeleteAssessmentRun: {
            input: {
                type: "structure",
                required: [ "assessmentRunArn" ],
                members: {
                    assessmentRunArn: {}
                }
            }
        },
        DeleteAssessmentTarget: {
            input: {
                type: "structure",
                required: [ "assessmentTargetArn" ],
                members: {
                    assessmentTargetArn: {}
                }
            }
        },
        DeleteAssessmentTemplate: {
            input: {
                type: "structure",
                required: [ "assessmentTemplateArn" ],
                members: {
                    assessmentTemplateArn: {}
                }
            }
        },
        DescribeAssessmentRuns: {
            input: {
                type: "structure",
                required: [ "assessmentRunArns" ],
                members: {
                    assessmentRunArns: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentRuns", "failedItems" ],
                members: {
                    assessmentRuns: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "name", "assessmentTemplateArn", "state", "durationInSeconds", "rulesPackageArns", "userAttributesForFindings", "createdAt", "stateChangedAt", "dataCollected", "stateChanges", "notifications", "findingCounts" ],
                            members: {
                                arn: {},
                                name: {},
                                assessmentTemplateArn: {},
                                state: {},
                                durationInSeconds: {
                                    type: "integer"
                                },
                                rulesPackageArns: {
                                    type: "list",
                                    member: {}
                                },
                                userAttributesForFindings: {
                                    shape: "S4"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                startedAt: {
                                    type: "timestamp"
                                },
                                completedAt: {
                                    type: "timestamp"
                                },
                                stateChangedAt: {
                                    type: "timestamp"
                                },
                                dataCollected: {
                                    type: "boolean"
                                },
                                stateChanges: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "stateChangedAt", "state" ],
                                        members: {
                                            stateChangedAt: {
                                                type: "timestamp"
                                            },
                                            state: {}
                                        }
                                    }
                                },
                                notifications: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "date", "event", "error" ],
                                        members: {
                                            date: {
                                                type: "timestamp"
                                            },
                                            event: {},
                                            message: {},
                                            error: {
                                                type: "boolean"
                                            },
                                            snsTopicArn: {},
                                            snsPublishStatusCode: {}
                                        }
                                    }
                                },
                                findingCounts: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    failedItems: {
                        shape: "S9"
                    }
                }
            }
        },
        DescribeAssessmentTargets: {
            input: {
                type: "structure",
                required: [ "assessmentTargetArns" ],
                members: {
                    assessmentTargetArns: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentTargets", "failedItems" ],
                members: {
                    assessmentTargets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "name", "createdAt", "updatedAt" ],
                            members: {
                                arn: {},
                                name: {},
                                resourceGroupArn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    failedItems: {
                        shape: "S9"
                    }
                }
            }
        },
        DescribeAssessmentTemplates: {
            input: {
                type: "structure",
                required: [ "assessmentTemplateArns" ],
                members: {
                    assessmentTemplateArns: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentTemplates", "failedItems" ],
                members: {
                    assessmentTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "name", "assessmentTargetArn", "durationInSeconds", "rulesPackageArns", "userAttributesForFindings", "assessmentRunCount", "createdAt" ],
                            members: {
                                arn: {},
                                name: {},
                                assessmentTargetArn: {},
                                durationInSeconds: {
                                    type: "integer"
                                },
                                rulesPackageArns: {
                                    shape: "Sj"
                                },
                                userAttributesForFindings: {
                                    shape: "S4"
                                },
                                lastAssessmentRunArn: {},
                                assessmentRunCount: {
                                    type: "integer"
                                },
                                createdAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    failedItems: {
                        shape: "S9"
                    }
                }
            }
        },
        DescribeCrossAccountAccessRole: {
            output: {
                type: "structure",
                required: [ "roleArn", "valid", "registeredAt" ],
                members: {
                    roleArn: {},
                    valid: {
                        type: "boolean"
                    },
                    registeredAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeExclusions: {
            input: {
                type: "structure",
                required: [ "exclusionArns" ],
                members: {
                    exclusionArns: {
                        type: "list",
                        member: {}
                    },
                    locale: {}
                }
            },
            output: {
                type: "structure",
                required: [ "exclusions", "failedItems" ],
                members: {
                    exclusions: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "arn", "title", "description", "recommendation", "scopes" ],
                            members: {
                                arn: {},
                                title: {},
                                description: {},
                                recommendation: {},
                                scopes: {
                                    shape: "S1x"
                                },
                                attributes: {
                                    shape: "S21"
                                }
                            }
                        }
                    },
                    failedItems: {
                        shape: "S9"
                    }
                }
            }
        },
        DescribeFindings: {
            input: {
                type: "structure",
                required: [ "findingArns" ],
                members: {
                    findingArns: {
                        shape: "Sy"
                    },
                    locale: {}
                }
            },
            output: {
                type: "structure",
                required: [ "findings", "failedItems" ],
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "attributes", "userAttributes", "createdAt", "updatedAt" ],
                            members: {
                                arn: {},
                                schemaVersion: {
                                    type: "integer"
                                },
                                service: {},
                                serviceAttributes: {
                                    type: "structure",
                                    required: [ "schemaVersion" ],
                                    members: {
                                        schemaVersion: {
                                            type: "integer"
                                        },
                                        assessmentRunArn: {},
                                        rulesPackageArn: {}
                                    }
                                },
                                assetType: {},
                                assetAttributes: {
                                    type: "structure",
                                    required: [ "schemaVersion" ],
                                    members: {
                                        schemaVersion: {
                                            type: "integer"
                                        },
                                        agentId: {},
                                        autoScalingGroup: {},
                                        amiId: {},
                                        hostname: {},
                                        ipv4Addresses: {
                                            type: "list",
                                            member: {}
                                        },
                                        tags: {
                                            type: "list",
                                            member: {
                                                shape: "S2i"
                                            }
                                        },
                                        networkInterfaces: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    networkInterfaceId: {},
                                                    subnetId: {},
                                                    vpcId: {},
                                                    privateDnsName: {},
                                                    privateIpAddress: {},
                                                    privateIpAddresses: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                privateDnsName: {},
                                                                privateIpAddress: {}
                                                            }
                                                        }
                                                    },
                                                    publicDnsName: {},
                                                    publicIp: {},
                                                    ipv6Addresses: {
                                                        type: "list",
                                                        member: {}
                                                    },
                                                    securityGroups: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                groupName: {},
                                                                groupId: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                id: {},
                                title: {},
                                description: {},
                                recommendation: {},
                                severity: {},
                                numericSeverity: {
                                    type: "double"
                                },
                                confidence: {
                                    type: "integer"
                                },
                                indicatorOfCompromise: {
                                    type: "boolean"
                                },
                                attributes: {
                                    shape: "S21"
                                },
                                userAttributes: {
                                    shape: "S4"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    failedItems: {
                        shape: "S9"
                    }
                }
            }
        },
        DescribeResourceGroups: {
            input: {
                type: "structure",
                required: [ "resourceGroupArns" ],
                members: {
                    resourceGroupArns: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourceGroups", "failedItems" ],
                members: {
                    resourceGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "tags", "createdAt" ],
                            members: {
                                arn: {},
                                tags: {
                                    shape: "Sp"
                                },
                                createdAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    failedItems: {
                        shape: "S9"
                    }
                }
            }
        },
        DescribeRulesPackages: {
            input: {
                type: "structure",
                required: [ "rulesPackageArns" ],
                members: {
                    rulesPackageArns: {
                        shape: "Sy"
                    },
                    locale: {}
                }
            },
            output: {
                type: "structure",
                required: [ "rulesPackages", "failedItems" ],
                members: {
                    rulesPackages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "name", "version", "provider" ],
                            members: {
                                arn: {},
                                name: {},
                                version: {},
                                provider: {},
                                description: {}
                            }
                        }
                    },
                    failedItems: {
                        shape: "S9"
                    }
                }
            }
        },
        GetAssessmentReport: {
            input: {
                type: "structure",
                required: [ "assessmentRunArn", "reportFileFormat", "reportType" ],
                members: {
                    assessmentRunArn: {},
                    reportFileFormat: {},
                    reportType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {},
                    url: {}
                }
            }
        },
        GetExclusionsPreview: {
            input: {
                type: "structure",
                required: [ "assessmentTemplateArn", "previewToken" ],
                members: {
                    assessmentTemplateArn: {},
                    previewToken: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    locale: {}
                }
            },
            output: {
                type: "structure",
                required: [ "previewStatus" ],
                members: {
                    previewStatus: {},
                    exclusionPreviews: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "title", "description", "recommendation", "scopes" ],
                            members: {
                                title: {},
                                description: {},
                                recommendation: {},
                                scopes: {
                                    shape: "S1x"
                                },
                                attributes: {
                                    shape: "S21"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetTelemetryMetadata: {
            input: {
                type: "structure",
                required: [ "assessmentRunArn" ],
                members: {
                    assessmentRunArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "telemetryMetadata" ],
                members: {
                    telemetryMetadata: {
                        shape: "S3j"
                    }
                }
            }
        },
        ListAssessmentRunAgents: {
            input: {
                type: "structure",
                required: [ "assessmentRunArn" ],
                members: {
                    assessmentRunArn: {},
                    filter: {
                        type: "structure",
                        required: [ "agentHealths", "agentHealthCodes" ],
                        members: {
                            agentHealths: {
                                type: "list",
                                member: {}
                            },
                            agentHealthCodes: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentRunAgents" ],
                members: {
                    assessmentRunAgents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "agentId", "assessmentRunArn", "agentHealth", "agentHealthCode", "telemetryMetadata" ],
                            members: {
                                agentId: {},
                                assessmentRunArn: {},
                                agentHealth: {},
                                agentHealthCode: {},
                                agentHealthDetails: {},
                                autoScalingGroup: {},
                                telemetryMetadata: {
                                    shape: "S3j"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessmentRuns: {
            input: {
                type: "structure",
                members: {
                    assessmentTemplateArns: {
                        shape: "S3x"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            namePattern: {},
                            states: {
                                type: "list",
                                member: {}
                            },
                            durationRange: {
                                shape: "S41"
                            },
                            rulesPackageArns: {
                                shape: "S42"
                            },
                            startTimeRange: {
                                shape: "S43"
                            },
                            completionTimeRange: {
                                shape: "S43"
                            },
                            stateChangeTimeRange: {
                                shape: "S43"
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentRunArns" ],
                members: {
                    assessmentRunArns: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessmentTargets: {
            input: {
                type: "structure",
                members: {
                    filter: {
                        type: "structure",
                        members: {
                            assessmentTargetNamePattern: {}
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentTargetArns" ],
                members: {
                    assessmentTargetArns: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        ListAssessmentTemplates: {
            input: {
                type: "structure",
                members: {
                    assessmentTargetArns: {
                        shape: "S3x"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            namePattern: {},
                            durationRange: {
                                shape: "S41"
                            },
                            rulesPackageArns: {
                                shape: "S42"
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentTemplateArns" ],
                members: {
                    assessmentTemplateArns: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        ListEventSubscriptions: {
            input: {
                type: "structure",
                members: {
                    resourceArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "subscriptions" ],
                members: {
                    subscriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "resourceArn", "topicArn", "eventSubscriptions" ],
                            members: {
                                resourceArn: {},
                                topicArn: {},
                                eventSubscriptions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "event", "subscribedAt" ],
                                        members: {
                                            event: {},
                                            subscribedAt: {
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExclusions: {
            input: {
                type: "structure",
                required: [ "assessmentRunArn" ],
                members: {
                    assessmentRunArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "exclusionArns" ],
                members: {
                    exclusionArns: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        ListFindings: {
            input: {
                type: "structure",
                members: {
                    assessmentRunArns: {
                        shape: "S3x"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            agentIds: {
                                type: "list",
                                member: {}
                            },
                            autoScalingGroups: {
                                type: "list",
                                member: {}
                            },
                            ruleNames: {
                                type: "list",
                                member: {}
                            },
                            severities: {
                                type: "list",
                                member: {}
                            },
                            rulesPackageArns: {
                                shape: "S42"
                            },
                            attributes: {
                                shape: "S21"
                            },
                            userAttributes: {
                                shape: "S21"
                            },
                            creationTimeRange: {
                                shape: "S43"
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "findingArns" ],
                members: {
                    findingArns: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        ListRulesPackages: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "rulesPackageArns" ],
                members: {
                    rulesPackageArns: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "S4x"
                    }
                }
            }
        },
        PreviewAgents: {
            input: {
                type: "structure",
                required: [ "previewAgentsArn" ],
                members: {
                    previewAgentsArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "agentPreviews" ],
                members: {
                    agentPreviews: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "agentId" ],
                            members: {
                                hostname: {},
                                agentId: {},
                                autoScalingGroup: {},
                                agentHealth: {},
                                agentVersion: {},
                                operatingSystem: {},
                                kernelVersion: {},
                                ipv4Address: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        RegisterCrossAccountAccessRole: {
            input: {
                type: "structure",
                required: [ "roleArn" ],
                members: {
                    roleArn: {}
                }
            }
        },
        RemoveAttributesFromFindings: {
            input: {
                type: "structure",
                required: [ "findingArns", "attributeKeys" ],
                members: {
                    findingArns: {
                        shape: "S2"
                    },
                    attributeKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "failedItems" ],
                members: {
                    failedItems: {
                        shape: "S9"
                    }
                }
            }
        },
        SetTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S4x"
                    }
                }
            }
        },
        StartAssessmentRun: {
            input: {
                type: "structure",
                required: [ "assessmentTemplateArn" ],
                members: {
                    assessmentTemplateArn: {},
                    assessmentRunName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentRunArn" ],
                members: {
                    assessmentRunArn: {}
                }
            }
        },
        StopAssessmentRun: {
            input: {
                type: "structure",
                required: [ "assessmentRunArn" ],
                members: {
                    assessmentRunArn: {},
                    stopAction: {}
                }
            }
        },
        SubscribeToEvent: {
            input: {
                type: "structure",
                required: [ "resourceArn", "event", "topicArn" ],
                members: {
                    resourceArn: {},
                    event: {},
                    topicArn: {}
                }
            }
        },
        UnsubscribeFromEvent: {
            input: {
                type: "structure",
                required: [ "resourceArn", "event", "topicArn" ],
                members: {
                    resourceArn: {},
                    event: {},
                    topicArn: {}
                }
            }
        },
        UpdateAssessmentTarget: {
            input: {
                type: "structure",
                required: [ "assessmentTargetArn", "assessmentTargetName" ],
                members: {
                    assessmentTargetArn: {},
                    assessmentTargetName: {},
                    resourceGroupArn: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        S4: {
            type: "list",
            member: {
                shape: "S5"
            }
        },
        S5: {
            type: "structure",
            required: [ "key" ],
            members: {
                key: {},
                value: {}
            }
        },
        S9: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "failureCode", "retryable" ],
                members: {
                    failureCode: {},
                    retryable: {
                        type: "boolean"
                    }
                }
            }
        },
        Sj: {
            type: "list",
            member: {}
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sy: {
            type: "list",
            member: {}
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S21: {
            type: "list",
            member: {
                shape: "S5"
            }
        },
        S2i: {
            type: "structure",
            required: [ "key" ],
            members: {
                key: {},
                value: {}
            }
        },
        S3j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "messageType", "count" ],
                members: {
                    messageType: {},
                    count: {
                        type: "long"
                    },
                    dataSize: {
                        type: "long"
                    }
                }
            }
        },
        S3x: {
            type: "list",
            member: {}
        },
        S41: {
            type: "structure",
            members: {
                minSeconds: {
                    type: "integer"
                },
                maxSeconds: {
                    type: "integer"
                }
            }
        },
        S42: {
            type: "list",
            member: {}
        },
        S43: {
            type: "structure",
            members: {
                beginDate: {
                    type: "timestamp"
                },
                endDate: {
                    type: "timestamp"
                }
            }
        },
        S45: {
            type: "list",
            member: {}
        },
        S4x: {
            type: "list",
            member: {
                shape: "S2i"
            }
        }
    },
    paginators: {
        GetExclusionsPreview: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentRunAgents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentTargets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAssessmentTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListEventSubscriptions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListExclusions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListRulesPackages: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        PreviewAgents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["iot"] = {};

AWS.Iot = AWS.Service.defineService("iot", [ "2015-05-28" ]);

AWS.apiLoader.services["iot"]["2015-05-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-05-28",
        endpointPrefix: "iot",
        protocol: "rest-json",
        serviceFullName: "AWS IoT",
        serviceId: "IoT",
        signatureVersion: "v4",
        signingName: "iot",
        uid: "iot-2015-05-28"
    },
    operations: {
        AcceptCertificateTransfer: {
            http: {
                method: "PATCH",
                requestUri: "/accept-certificate-transfer/{certificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "certificateId"
                    },
                    setAsActive: {
                        location: "querystring",
                        locationName: "setAsActive",
                        type: "boolean"
                    }
                }
            }
        },
        AddThingToBillingGroup: {
            http: {
                method: "PUT",
                requestUri: "/billing-groups/addThingToBillingGroup"
            },
            input: {
                type: "structure",
                members: {
                    billingGroupName: {},
                    billingGroupArn: {},
                    thingName: {},
                    thingArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AddThingToThingGroup: {
            http: {
                method: "PUT",
                requestUri: "/thing-groups/addThingToThingGroup"
            },
            input: {
                type: "structure",
                members: {
                    thingGroupName: {},
                    thingGroupArn: {},
                    thingName: {},
                    thingArn: {},
                    overrideDynamicGroups: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateTargetsWithJob: {
            http: {
                requestUri: "/jobs/{jobId}/targets"
            },
            input: {
                type: "structure",
                required: [ "targets", "jobId" ],
                members: {
                    targets: {
                        shape: "Sg"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    comment: {},
                    namespaceId: {
                        location: "querystring",
                        locationName: "namespaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobArn: {},
                    jobId: {},
                    description: {}
                }
            }
        },
        AttachPolicy: {
            http: {
                method: "PUT",
                requestUri: "/target-policies/{policyName}"
            },
            input: {
                type: "structure",
                required: [ "policyName", "target" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    target: {}
                }
            }
        },
        AttachPrincipalPolicy: {
            http: {
                method: "PUT",
                requestUri: "/principal-policies/{policyName}"
            },
            input: {
                type: "structure",
                required: [ "policyName", "principal" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    principal: {
                        location: "header",
                        locationName: "x-amzn-iot-principal"
                    }
                }
            },
            deprecated: true
        },
        AttachSecurityProfile: {
            http: {
                method: "PUT",
                requestUri: "/security-profiles/{securityProfileName}/targets"
            },
            input: {
                type: "structure",
                required: [ "securityProfileName", "securityProfileTargetArn" ],
                members: {
                    securityProfileName: {
                        location: "uri",
                        locationName: "securityProfileName"
                    },
                    securityProfileTargetArn: {
                        location: "querystring",
                        locationName: "securityProfileTargetArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AttachThingPrincipal: {
            http: {
                method: "PUT",
                requestUri: "/things/{thingName}/principals"
            },
            input: {
                type: "structure",
                required: [ "thingName", "principal" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    principal: {
                        location: "header",
                        locationName: "x-amzn-principal"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelAuditMitigationActionsTask: {
            http: {
                method: "PUT",
                requestUri: "/audit/mitigationactions/tasks/{taskId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelAuditTask: {
            http: {
                method: "PUT",
                requestUri: "/audit/tasks/{taskId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelCertificateTransfer: {
            http: {
                method: "PATCH",
                requestUri: "/cancel-certificate-transfer/{certificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "certificateId"
                    }
                }
            }
        },
        CancelDetectMitigationActionsTask: {
            http: {
                method: "PUT",
                requestUri: "/detect/mitigationactions/tasks/{taskId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelJob: {
            http: {
                method: "PUT",
                requestUri: "/jobs/{jobId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    reasonCode: {},
                    comment: {},
                    force: {
                        location: "querystring",
                        locationName: "force",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobArn: {},
                    jobId: {},
                    description: {}
                }
            }
        },
        CancelJobExecution: {
            http: {
                method: "PUT",
                requestUri: "/things/{thingName}/jobs/{jobId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "jobId", "thingName" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    force: {
                        location: "querystring",
                        locationName: "force",
                        type: "boolean"
                    },
                    expectedVersion: {
                        type: "long"
                    },
                    statusDetails: {
                        shape: "S1e"
                    }
                }
            }
        },
        ClearDefaultAuthorizer: {
            http: {
                method: "DELETE",
                requestUri: "/default-authorizer"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ConfirmTopicRuleDestination: {
            http: {
                method: "GET",
                requestUri: "/confirmdestination/{confirmationToken+}"
            },
            input: {
                type: "structure",
                required: [ "confirmationToken" ],
                members: {
                    confirmationToken: {
                        location: "uri",
                        locationName: "confirmationToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAuditSuppression: {
            http: {
                requestUri: "/audit/suppressions/create"
            },
            input: {
                type: "structure",
                required: [ "checkName", "resourceIdentifier", "clientRequestToken" ],
                members: {
                    checkName: {},
                    resourceIdentifier: {
                        shape: "S1o"
                    },
                    expirationDate: {
                        type: "timestamp"
                    },
                    suppressIndefinitely: {
                        type: "boolean"
                    },
                    description: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAuthorizer: {
            http: {
                requestUri: "/authorizer/{authorizerName}"
            },
            input: {
                type: "structure",
                required: [ "authorizerName", "authorizerFunctionArn" ],
                members: {
                    authorizerName: {
                        location: "uri",
                        locationName: "authorizerName"
                    },
                    authorizerFunctionArn: {},
                    tokenKeyName: {},
                    tokenSigningPublicKeys: {
                        shape: "S2a"
                    },
                    status: {},
                    tags: {
                        shape: "S2e"
                    },
                    signingDisabled: {
                        type: "boolean"
                    },
                    enableCachingForHttp: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    authorizerName: {},
                    authorizerArn: {}
                }
            }
        },
        CreateBillingGroup: {
            http: {
                requestUri: "/billing-groups/{billingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "billingGroupName" ],
                members: {
                    billingGroupName: {
                        location: "uri",
                        locationName: "billingGroupName"
                    },
                    billingGroupProperties: {
                        shape: "S2n"
                    },
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    billingGroupName: {},
                    billingGroupArn: {},
                    billingGroupId: {}
                }
            }
        },
        CreateCertificateFromCsr: {
            http: {
                requestUri: "/certificates"
            },
            input: {
                type: "structure",
                required: [ "certificateSigningRequest" ],
                members: {
                    certificateSigningRequest: {},
                    setAsActive: {
                        location: "querystring",
                        locationName: "setAsActive",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateArn: {},
                    certificateId: {},
                    certificatePem: {}
                }
            }
        },
        CreateCertificateProvider: {
            http: {
                requestUri: "/certificate-providers/{certificateProviderName}"
            },
            input: {
                type: "structure",
                required: [ "certificateProviderName", "lambdaFunctionArn", "accountDefaultForOperations" ],
                members: {
                    certificateProviderName: {
                        location: "uri",
                        locationName: "certificateProviderName"
                    },
                    lambdaFunctionArn: {},
                    accountDefaultForOperations: {
                        shape: "S2y"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateProviderName: {},
                    certificateProviderArn: {}
                }
            }
        },
        CreateCustomMetric: {
            http: {
                requestUri: "/custom-metric/{metricName}"
            },
            input: {
                type: "structure",
                required: [ "metricName", "metricType", "clientRequestToken" ],
                members: {
                    metricName: {
                        location: "uri",
                        locationName: "metricName"
                    },
                    displayName: {},
                    metricType: {},
                    tags: {
                        shape: "S2e"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricArn: {}
                }
            }
        },
        CreateDimension: {
            http: {
                requestUri: "/dimensions/{name}"
            },
            input: {
                type: "structure",
                required: [ "name", "type", "stringValues", "clientRequestToken" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    type: {},
                    stringValues: {
                        shape: "S3c"
                    },
                    tags: {
                        shape: "S2e"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {}
                }
            }
        },
        CreateDomainConfiguration: {
            http: {
                requestUri: "/domainConfigurations/{domainConfigurationName}"
            },
            input: {
                type: "structure",
                required: [ "domainConfigurationName" ],
                members: {
                    domainConfigurationName: {
                        location: "uri",
                        locationName: "domainConfigurationName"
                    },
                    domainName: {},
                    serverCertificateArns: {
                        type: "list",
                        member: {}
                    },
                    validationCertificateArn: {},
                    authorizerConfig: {
                        shape: "S3l"
                    },
                    serviceType: {},
                    tags: {
                        shape: "S2e"
                    },
                    tlsConfig: {
                        shape: "S3o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domainConfigurationName: {},
                    domainConfigurationArn: {}
                }
            }
        },
        CreateDynamicThingGroup: {
            http: {
                requestUri: "/dynamic-thing-groups/{thingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "thingGroupName", "queryString" ],
                members: {
                    thingGroupName: {
                        location: "uri",
                        locationName: "thingGroupName"
                    },
                    thingGroupProperties: {
                        shape: "S3t"
                    },
                    indexName: {},
                    queryString: {},
                    queryVersion: {},
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    thingGroupName: {},
                    thingGroupArn: {},
                    thingGroupId: {},
                    indexName: {},
                    queryString: {},
                    queryVersion: {}
                }
            }
        },
        CreateFleetMetric: {
            http: {
                method: "PUT",
                requestUri: "/fleet-metric/{metricName}"
            },
            input: {
                type: "structure",
                required: [ "metricName", "queryString", "aggregationType", "period", "aggregationField" ],
                members: {
                    metricName: {
                        location: "uri",
                        locationName: "metricName"
                    },
                    queryString: {},
                    aggregationType: {
                        shape: "S47"
                    },
                    period: {
                        type: "integer"
                    },
                    aggregationField: {},
                    description: {},
                    queryVersion: {},
                    indexName: {},
                    unit: {},
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricArn: {}
                }
            }
        },
        CreateJob: {
            http: {
                method: "PUT",
                requestUri: "/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId", "targets" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    targets: {
                        shape: "Sg"
                    },
                    documentSource: {},
                    document: {},
                    description: {},
                    presignedUrlConfig: {
                        shape: "S4k"
                    },
                    targetSelection: {},
                    jobExecutionsRolloutConfig: {
                        shape: "S4n"
                    },
                    abortConfig: {
                        shape: "S4u"
                    },
                    timeoutConfig: {
                        shape: "S51"
                    },
                    tags: {
                        shape: "S2e"
                    },
                    namespaceId: {},
                    jobTemplateArn: {},
                    jobExecutionsRetryConfig: {
                        shape: "S54"
                    },
                    documentParameters: {
                        shape: "S59"
                    },
                    schedulingConfig: {
                        shape: "S5c"
                    },
                    destinationPackageVersions: {
                        shape: "S5j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobArn: {},
                    jobId: {},
                    description: {}
                }
            }
        },
        CreateJobTemplate: {
            http: {
                method: "PUT",
                requestUri: "/job-templates/{jobTemplateId}"
            },
            input: {
                type: "structure",
                required: [ "jobTemplateId", "description" ],
                members: {
                    jobTemplateId: {
                        location: "uri",
                        locationName: "jobTemplateId"
                    },
                    jobArn: {},
                    documentSource: {},
                    document: {},
                    description: {},
                    presignedUrlConfig: {
                        shape: "S4k"
                    },
                    jobExecutionsRolloutConfig: {
                        shape: "S4n"
                    },
                    abortConfig: {
                        shape: "S4u"
                    },
                    timeoutConfig: {
                        shape: "S51"
                    },
                    tags: {
                        shape: "S2e"
                    },
                    jobExecutionsRetryConfig: {
                        shape: "S54"
                    },
                    maintenanceWindows: {
                        shape: "S5f"
                    },
                    destinationPackageVersions: {
                        shape: "S5j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobTemplateArn: {},
                    jobTemplateId: {}
                }
            }
        },
        CreateKeysAndCertificate: {
            http: {
                requestUri: "/keys-and-certificate"
            },
            input: {
                type: "structure",
                members: {
                    setAsActive: {
                        location: "querystring",
                        locationName: "setAsActive",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateArn: {},
                    certificateId: {},
                    certificatePem: {},
                    keyPair: {
                        shape: "S5r"
                    }
                }
            }
        },
        CreateMitigationAction: {
            http: {
                requestUri: "/mitigationactions/actions/{actionName}"
            },
            input: {
                type: "structure",
                required: [ "actionName", "roleArn", "actionParams" ],
                members: {
                    actionName: {
                        location: "uri",
                        locationName: "actionName"
                    },
                    roleArn: {},
                    actionParams: {
                        shape: "S5w"
                    },
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    actionArn: {},
                    actionId: {}
                }
            }
        },
        CreateOTAUpdate: {
            http: {
                requestUri: "/otaUpdates/{otaUpdateId}"
            },
            input: {
                type: "structure",
                required: [ "otaUpdateId", "targets", "files", "roleArn" ],
                members: {
                    otaUpdateId: {
                        location: "uri",
                        locationName: "otaUpdateId"
                    },
                    description: {},
                    targets: {
                        shape: "S6g"
                    },
                    protocols: {
                        shape: "S6i"
                    },
                    targetSelection: {},
                    awsJobExecutionsRolloutConfig: {
                        shape: "S6k"
                    },
                    awsJobPresignedUrlConfig: {
                        shape: "S6r"
                    },
                    awsJobAbortConfig: {
                        type: "structure",
                        required: [ "abortCriteriaList" ],
                        members: {
                            abortCriteriaList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "failureType", "action", "thresholdPercentage", "minNumberOfExecutedThings" ],
                                    members: {
                                        failureType: {},
                                        action: {},
                                        thresholdPercentage: {
                                            type: "double"
                                        },
                                        minNumberOfExecutedThings: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    awsJobTimeoutConfig: {
                        type: "structure",
                        members: {
                            inProgressTimeoutInMinutes: {
                                type: "long"
                            }
                        }
                    },
                    files: {
                        shape: "S72"
                    },
                    roleArn: {},
                    additionalParameters: {
                        shape: "S80"
                    },
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    otaUpdateId: {},
                    awsIotJobId: {},
                    otaUpdateArn: {},
                    awsIotJobArn: {},
                    otaUpdateStatus: {}
                }
            }
        },
        CreatePackage: {
            http: {
                method: "PUT",
                requestUri: "/packages/{packageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "packageName" ],
                members: {
                    packageName: {
                        location: "uri",
                        locationName: "packageName"
                    },
                    description: {
                        shape: "S88"
                    },
                    tags: {
                        shape: "S89"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    packageName: {},
                    packageArn: {},
                    description: {
                        shape: "S88"
                    }
                }
            },
            idempotent: true
        },
        CreatePackageVersion: {
            http: {
                method: "PUT",
                requestUri: "/packages/{packageName}/versions/{versionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "packageName", "versionName" ],
                members: {
                    packageName: {
                        location: "uri",
                        locationName: "packageName"
                    },
                    versionName: {
                        location: "uri",
                        locationName: "versionName"
                    },
                    description: {
                        shape: "S88"
                    },
                    attributes: {
                        shape: "S8e"
                    },
                    tags: {
                        shape: "S89"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    packageVersionArn: {},
                    packageName: {},
                    versionName: {},
                    description: {
                        shape: "S88"
                    },
                    attributes: {
                        shape: "S8e"
                    },
                    status: {},
                    errorReason: {}
                }
            },
            idempotent: true
        },
        CreatePolicy: {
            http: {
                requestUri: "/policies/{policyName}"
            },
            input: {
                type: "structure",
                required: [ "policyName", "policyDocument" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    policyDocument: {},
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policyName: {},
                    policyArn: {},
                    policyDocument: {},
                    policyVersionId: {}
                }
            }
        },
        CreatePolicyVersion: {
            http: {
                requestUri: "/policies/{policyName}/version"
            },
            input: {
                type: "structure",
                required: [ "policyName", "policyDocument" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    policyDocument: {},
                    setAsDefault: {
                        location: "querystring",
                        locationName: "setAsDefault",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policyArn: {},
                    policyDocument: {},
                    policyVersionId: {},
                    isDefaultVersion: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateProvisioningClaim: {
            http: {
                requestUri: "/provisioning-templates/{templateName}/provisioning-claim"
            },
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    templateName: {
                        location: "uri",
                        locationName: "templateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateId: {},
                    certificatePem: {},
                    keyPair: {
                        shape: "S5r"
                    },
                    expiration: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateProvisioningTemplate: {
            http: {
                requestUri: "/provisioning-templates"
            },
            input: {
                type: "structure",
                required: [ "templateName", "templateBody", "provisioningRoleArn" ],
                members: {
                    templateName: {},
                    description: {},
                    templateBody: {},
                    enabled: {
                        type: "boolean"
                    },
                    provisioningRoleArn: {},
                    preProvisioningHook: {
                        shape: "S90"
                    },
                    tags: {
                        shape: "S2e"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    templateArn: {},
                    templateName: {},
                    defaultVersionId: {
                        type: "integer"
                    }
                }
            }
        },
        CreateProvisioningTemplateVersion: {
            http: {
                requestUri: "/provisioning-templates/{templateName}/versions"
            },
            input: {
                type: "structure",
                required: [ "templateName", "templateBody" ],
                members: {
                    templateName: {
                        location: "uri",
                        locationName: "templateName"
                    },
                    templateBody: {},
                    setAsDefault: {
                        location: "querystring",
                        locationName: "setAsDefault",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    templateArn: {},
                    templateName: {},
                    versionId: {
                        type: "integer"
                    },
                    isDefaultVersion: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateRoleAlias: {
            http: {
                requestUri: "/role-aliases/{roleAlias}"
            },
            input: {
                type: "structure",
                required: [ "roleAlias", "roleArn" ],
                members: {
                    roleAlias: {
                        location: "uri",
                        locationName: "roleAlias"
                    },
                    roleArn: {},
                    credentialDurationSeconds: {
                        type: "integer"
                    },
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    roleAlias: {},
                    roleAliasArn: {}
                }
            }
        },
        CreateScheduledAudit: {
            http: {
                requestUri: "/audit/scheduledaudits/{scheduledAuditName}"
            },
            input: {
                type: "structure",
                required: [ "frequency", "targetCheckNames", "scheduledAuditName" ],
                members: {
                    frequency: {},
                    dayOfMonth: {},
                    dayOfWeek: {},
                    targetCheckNames: {
                        shape: "S9g"
                    },
                    scheduledAuditName: {
                        location: "uri",
                        locationName: "scheduledAuditName"
                    },
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    scheduledAuditArn: {}
                }
            }
        },
        CreateSecurityProfile: {
            http: {
                requestUri: "/security-profiles/{securityProfileName}"
            },
            input: {
                type: "structure",
                required: [ "securityProfileName" ],
                members: {
                    securityProfileName: {
                        location: "uri",
                        locationName: "securityProfileName"
                    },
                    securityProfileDescription: {},
                    behaviors: {
                        shape: "S9m"
                    },
                    alertTargets: {
                        shape: "Sad"
                    },
                    additionalMetricsToRetain: {
                        shape: "Sah",
                        deprecated: true,
                        deprecatedMessage: "Use additionalMetricsToRetainV2."
                    },
                    additionalMetricsToRetainV2: {
                        shape: "Sai"
                    },
                    tags: {
                        shape: "S2e"
                    },
                    metricsExportConfig: {
                        shape: "Sak"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    securityProfileName: {},
                    securityProfileArn: {}
                }
            }
        },
        CreateStream: {
            http: {
                requestUri: "/streams/{streamId}"
            },
            input: {
                type: "structure",
                required: [ "streamId", "files", "roleArn" ],
                members: {
                    streamId: {
                        location: "uri",
                        locationName: "streamId"
                    },
                    description: {},
                    files: {
                        shape: "Saq"
                    },
                    roleArn: {},
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamId: {},
                    streamArn: {},
                    description: {},
                    streamVersion: {
                        type: "integer"
                    }
                }
            }
        },
        CreateThing: {
            http: {
                requestUri: "/things/{thingName}"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    thingTypeName: {},
                    attributePayload: {
                        shape: "S3v"
                    },
                    billingGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    thingName: {},
                    thingArn: {},
                    thingId: {}
                }
            }
        },
        CreateThingGroup: {
            http: {
                requestUri: "/thing-groups/{thingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "thingGroupName" ],
                members: {
                    thingGroupName: {
                        location: "uri",
                        locationName: "thingGroupName"
                    },
                    parentGroupName: {},
                    thingGroupProperties: {
                        shape: "S3t"
                    },
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    thingGroupName: {},
                    thingGroupArn: {},
                    thingGroupId: {}
                }
            }
        },
        CreateThingType: {
            http: {
                requestUri: "/thing-types/{thingTypeName}"
            },
            input: {
                type: "structure",
                required: [ "thingTypeName" ],
                members: {
                    thingTypeName: {
                        location: "uri",
                        locationName: "thingTypeName"
                    },
                    thingTypeProperties: {
                        shape: "Sb2"
                    },
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    thingTypeName: {},
                    thingTypeArn: {},
                    thingTypeId: {}
                }
            }
        },
        CreateTopicRule: {
            http: {
                requestUri: "/rules/{ruleName}"
            },
            input: {
                type: "structure",
                required: [ "ruleName", "topicRulePayload" ],
                members: {
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    },
                    topicRulePayload: {
                        shape: "Sba"
                    },
                    tags: {
                        location: "header",
                        locationName: "x-amz-tagging"
                    }
                },
                payload: "topicRulePayload"
            }
        },
        CreateTopicRuleDestination: {
            http: {
                requestUri: "/destinations"
            },
            input: {
                type: "structure",
                required: [ "destinationConfiguration" ],
                members: {
                    destinationConfiguration: {
                        type: "structure",
                        members: {
                            httpUrlConfiguration: {
                                type: "structure",
                                required: [ "confirmationUrl" ],
                                members: {
                                    confirmationUrl: {}
                                }
                            },
                            vpcConfiguration: {
                                type: "structure",
                                required: [ "subnetIds", "vpcId", "roleArn" ],
                                members: {
                                    subnetIds: {
                                        shape: "Ser"
                                    },
                                    securityGroups: {
                                        shape: "Set"
                                    },
                                    vpcId: {},
                                    roleArn: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    topicRuleDestination: {
                        shape: "Sex"
                    }
                }
            }
        },
        DeleteAccountAuditConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/audit/configuration"
            },
            input: {
                type: "structure",
                members: {
                    deleteScheduledAudits: {
                        location: "querystring",
                        locationName: "deleteScheduledAudits",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAuditSuppression: {
            http: {
                requestUri: "/audit/suppressions/delete"
            },
            input: {
                type: "structure",
                required: [ "checkName", "resourceIdentifier" ],
                members: {
                    checkName: {},
                    resourceIdentifier: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAuthorizer: {
            http: {
                method: "DELETE",
                requestUri: "/authorizer/{authorizerName}"
            },
            input: {
                type: "structure",
                required: [ "authorizerName" ],
                members: {
                    authorizerName: {
                        location: "uri",
                        locationName: "authorizerName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteBillingGroup: {
            http: {
                method: "DELETE",
                requestUri: "/billing-groups/{billingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "billingGroupName" ],
                members: {
                    billingGroupName: {
                        location: "uri",
                        locationName: "billingGroupName"
                    },
                    expectedVersion: {
                        location: "querystring",
                        locationName: "expectedVersion",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCACertificate: {
            http: {
                method: "DELETE",
                requestUri: "/cacertificate/{caCertificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "caCertificateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCertificate: {
            http: {
                method: "DELETE",
                requestUri: "/certificates/{certificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "certificateId"
                    },
                    forceDelete: {
                        location: "querystring",
                        locationName: "forceDelete",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteCertificateProvider: {
            http: {
                method: "DELETE",
                requestUri: "/certificate-providers/{certificateProviderName}"
            },
            input: {
                type: "structure",
                required: [ "certificateProviderName" ],
                members: {
                    certificateProviderName: {
                        location: "uri",
                        locationName: "certificateProviderName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCustomMetric: {
            http: {
                method: "DELETE",
                requestUri: "/custom-metric/{metricName}"
            },
            input: {
                type: "structure",
                required: [ "metricName" ],
                members: {
                    metricName: {
                        location: "uri",
                        locationName: "metricName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDimension: {
            http: {
                method: "DELETE",
                requestUri: "/dimensions/{name}"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDomainConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/domainConfigurations/{domainConfigurationName}"
            },
            input: {
                type: "structure",
                required: [ "domainConfigurationName" ],
                members: {
                    domainConfigurationName: {
                        location: "uri",
                        locationName: "domainConfigurationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDynamicThingGroup: {
            http: {
                method: "DELETE",
                requestUri: "/dynamic-thing-groups/{thingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "thingGroupName" ],
                members: {
                    thingGroupName: {
                        location: "uri",
                        locationName: "thingGroupName"
                    },
                    expectedVersion: {
                        location: "querystring",
                        locationName: "expectedVersion",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFleetMetric: {
            http: {
                method: "DELETE",
                requestUri: "/fleet-metric/{metricName}"
            },
            input: {
                type: "structure",
                required: [ "metricName" ],
                members: {
                    metricName: {
                        location: "uri",
                        locationName: "metricName"
                    },
                    expectedVersion: {
                        location: "querystring",
                        locationName: "expectedVersion",
                        type: "long"
                    }
                }
            }
        },
        DeleteJob: {
            http: {
                method: "DELETE",
                requestUri: "/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    force: {
                        location: "querystring",
                        locationName: "force",
                        type: "boolean"
                    },
                    namespaceId: {
                        location: "querystring",
                        locationName: "namespaceId"
                    }
                }
            }
        },
        DeleteJobExecution: {
            http: {
                method: "DELETE",
                requestUri: "/things/{thingName}/jobs/{jobId}/executionNumber/{executionNumber}"
            },
            input: {
                type: "structure",
                required: [ "jobId", "thingName", "executionNumber" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    executionNumber: {
                        location: "uri",
                        locationName: "executionNumber",
                        type: "long"
                    },
                    force: {
                        location: "querystring",
                        locationName: "force",
                        type: "boolean"
                    },
                    namespaceId: {
                        location: "querystring",
                        locationName: "namespaceId"
                    }
                }
            }
        },
        DeleteJobTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/job-templates/{jobTemplateId}"
            },
            input: {
                type: "structure",
                required: [ "jobTemplateId" ],
                members: {
                    jobTemplateId: {
                        location: "uri",
                        locationName: "jobTemplateId"
                    }
                }
            }
        },
        DeleteMitigationAction: {
            http: {
                method: "DELETE",
                requestUri: "/mitigationactions/actions/{actionName}"
            },
            input: {
                type: "structure",
                required: [ "actionName" ],
                members: {
                    actionName: {
                        location: "uri",
                        locationName: "actionName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteOTAUpdate: {
            http: {
                method: "DELETE",
                requestUri: "/otaUpdates/{otaUpdateId}"
            },
            input: {
                type: "structure",
                required: [ "otaUpdateId" ],
                members: {
                    otaUpdateId: {
                        location: "uri",
                        locationName: "otaUpdateId"
                    },
                    deleteStream: {
                        location: "querystring",
                        locationName: "deleteStream",
                        type: "boolean"
                    },
                    forceDeleteAWSJob: {
                        location: "querystring",
                        locationName: "forceDeleteAWSJob",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePackage: {
            http: {
                method: "DELETE",
                requestUri: "/packages/{packageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "packageName" ],
                members: {
                    packageName: {
                        location: "uri",
                        locationName: "packageName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePackageVersion: {
            http: {
                method: "DELETE",
                requestUri: "/packages/{packageName}/versions/{versionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "packageName", "versionName" ],
                members: {
                    packageName: {
                        location: "uri",
                        locationName: "packageName"
                    },
                    versionName: {
                        location: "uri",
                        locationName: "versionName"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/policies/{policyName}"
            },
            input: {
                type: "structure",
                required: [ "policyName" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    }
                }
            }
        },
        DeletePolicyVersion: {
            http: {
                method: "DELETE",
                requestUri: "/policies/{policyName}/version/{policyVersionId}"
            },
            input: {
                type: "structure",
                required: [ "policyName", "policyVersionId" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    policyVersionId: {
                        location: "uri",
                        locationName: "policyVersionId"
                    }
                }
            }
        },
        DeleteProvisioningTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/provisioning-templates/{templateName}"
            },
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    templateName: {
                        location: "uri",
                        locationName: "templateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProvisioningTemplateVersion: {
            http: {
                method: "DELETE",
                requestUri: "/provisioning-templates/{templateName}/versions/{versionId}"
            },
            input: {
                type: "structure",
                required: [ "templateName", "versionId" ],
                members: {
                    templateName: {
                        location: "uri",
                        locationName: "templateName"
                    },
                    versionId: {
                        location: "uri",
                        locationName: "versionId",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRegistrationCode: {
            http: {
                method: "DELETE",
                requestUri: "/registrationcode"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRoleAlias: {
            http: {
                method: "DELETE",
                requestUri: "/role-aliases/{roleAlias}"
            },
            input: {
                type: "structure",
                required: [ "roleAlias" ],
                members: {
                    roleAlias: {
                        location: "uri",
                        locationName: "roleAlias"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteScheduledAudit: {
            http: {
                method: "DELETE",
                requestUri: "/audit/scheduledaudits/{scheduledAuditName}"
            },
            input: {
                type: "structure",
                required: [ "scheduledAuditName" ],
                members: {
                    scheduledAuditName: {
                        location: "uri",
                        locationName: "scheduledAuditName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSecurityProfile: {
            http: {
                method: "DELETE",
                requestUri: "/security-profiles/{securityProfileName}"
            },
            input: {
                type: "structure",
                required: [ "securityProfileName" ],
                members: {
                    securityProfileName: {
                        location: "uri",
                        locationName: "securityProfileName"
                    },
                    expectedVersion: {
                        location: "querystring",
                        locationName: "expectedVersion",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStream: {
            http: {
                method: "DELETE",
                requestUri: "/streams/{streamId}"
            },
            input: {
                type: "structure",
                required: [ "streamId" ],
                members: {
                    streamId: {
                        location: "uri",
                        locationName: "streamId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteThing: {
            http: {
                method: "DELETE",
                requestUri: "/things/{thingName}"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    expectedVersion: {
                        location: "querystring",
                        locationName: "expectedVersion",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteThingGroup: {
            http: {
                method: "DELETE",
                requestUri: "/thing-groups/{thingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "thingGroupName" ],
                members: {
                    thingGroupName: {
                        location: "uri",
                        locationName: "thingGroupName"
                    },
                    expectedVersion: {
                        location: "querystring",
                        locationName: "expectedVersion",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteThingType: {
            http: {
                method: "DELETE",
                requestUri: "/thing-types/{thingTypeName}"
            },
            input: {
                type: "structure",
                required: [ "thingTypeName" ],
                members: {
                    thingTypeName: {
                        location: "uri",
                        locationName: "thingTypeName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTopicRule: {
            http: {
                method: "DELETE",
                requestUri: "/rules/{ruleName}"
            },
            input: {
                type: "structure",
                required: [ "ruleName" ],
                members: {
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    }
                }
            }
        },
        DeleteTopicRuleDestination: {
            http: {
                method: "DELETE",
                requestUri: "/destinations/{arn+}"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteV2LoggingLevel: {
            http: {
                method: "DELETE",
                requestUri: "/v2LoggingLevel"
            },
            input: {
                type: "structure",
                required: [ "targetType", "targetName" ],
                members: {
                    targetType: {
                        location: "querystring",
                        locationName: "targetType"
                    },
                    targetName: {
                        location: "querystring",
                        locationName: "targetName"
                    }
                }
            }
        },
        DeprecateThingType: {
            http: {
                requestUri: "/thing-types/{thingTypeName}/deprecate"
            },
            input: {
                type: "structure",
                required: [ "thingTypeName" ],
                members: {
                    thingTypeName: {
                        location: "uri",
                        locationName: "thingTypeName"
                    },
                    undoDeprecate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAccountAuditConfiguration: {
            http: {
                method: "GET",
                requestUri: "/audit/configuration"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    roleArn: {},
                    auditNotificationTargetConfigurations: {
                        shape: "Sh3"
                    },
                    auditCheckConfigurations: {
                        shape: "Sh6"
                    }
                }
            }
        },
        DescribeAuditFinding: {
            http: {
                method: "GET",
                requestUri: "/audit/findings/{findingId}"
            },
            input: {
                type: "structure",
                required: [ "findingId" ],
                members: {
                    findingId: {
                        location: "uri",
                        locationName: "findingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    finding: {
                        shape: "Shb"
                    }
                }
            }
        },
        DescribeAuditMitigationActionsTask: {
            http: {
                method: "GET",
                requestUri: "/audit/mitigationactions/tasks/{taskId}"
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskStatus: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    taskStatistics: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                totalFindingsCount: {
                                    type: "long"
                                },
                                failedFindingsCount: {
                                    type: "long"
                                },
                                succeededFindingsCount: {
                                    type: "long"
                                },
                                skippedFindingsCount: {
                                    type: "long"
                                },
                                canceledFindingsCount: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    target: {
                        shape: "Shv"
                    },
                    auditCheckToActionsMapping: {
                        shape: "Shz"
                    },
                    actionsDefinition: {
                        shape: "Si1"
                    }
                }
            }
        },
        DescribeAuditSuppression: {
            http: {
                requestUri: "/audit/suppressions/describe"
            },
            input: {
                type: "structure",
                required: [ "checkName", "resourceIdentifier" ],
                members: {
                    checkName: {},
                    resourceIdentifier: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    checkName: {},
                    resourceIdentifier: {
                        shape: "S1o"
                    },
                    expirationDate: {
                        type: "timestamp"
                    },
                    suppressIndefinitely: {
                        type: "boolean"
                    },
                    description: {}
                }
            }
        },
        DescribeAuditTask: {
            http: {
                method: "GET",
                requestUri: "/audit/tasks/{taskId}"
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskStatus: {},
                    taskType: {},
                    taskStartTime: {
                        type: "timestamp"
                    },
                    taskStatistics: {
                        type: "structure",
                        members: {
                            totalChecks: {
                                type: "integer"
                            },
                            inProgressChecks: {
                                type: "integer"
                            },
                            waitingForDataCollectionChecks: {
                                type: "integer"
                            },
                            compliantChecks: {
                                type: "integer"
                            },
                            nonCompliantChecks: {
                                type: "integer"
                            },
                            failedChecks: {
                                type: "integer"
                            },
                            canceledChecks: {
                                type: "integer"
                            }
                        }
                    },
                    scheduledAuditName: {},
                    auditDetails: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                checkRunStatus: {},
                                checkCompliant: {
                                    type: "boolean"
                                },
                                totalResourcesCount: {
                                    type: "long"
                                },
                                nonCompliantResourcesCount: {
                                    type: "long"
                                },
                                suppressedNonCompliantResourcesCount: {
                                    type: "long"
                                },
                                errorCode: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeAuthorizer: {
            http: {
                method: "GET",
                requestUri: "/authorizer/{authorizerName}"
            },
            input: {
                type: "structure",
                required: [ "authorizerName" ],
                members: {
                    authorizerName: {
                        location: "uri",
                        locationName: "authorizerName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    authorizerDescription: {
                        shape: "Sis"
                    }
                }
            }
        },
        DescribeBillingGroup: {
            http: {
                method: "GET",
                requestUri: "/billing-groups/{billingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "billingGroupName" ],
                members: {
                    billingGroupName: {
                        location: "uri",
                        locationName: "billingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    billingGroupName: {},
                    billingGroupId: {},
                    billingGroupArn: {},
                    version: {
                        type: "long"
                    },
                    billingGroupProperties: {
                        shape: "S2n"
                    },
                    billingGroupMetadata: {
                        type: "structure",
                        members: {
                            creationDate: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeCACertificate: {
            http: {
                method: "GET",
                requestUri: "/cacertificate/{caCertificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "caCertificateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateDescription: {
                        type: "structure",
                        members: {
                            certificateArn: {},
                            certificateId: {},
                            status: {},
                            certificatePem: {},
                            ownedBy: {},
                            creationDate: {
                                type: "timestamp"
                            },
                            autoRegistrationStatus: {},
                            lastModifiedDate: {
                                type: "timestamp"
                            },
                            customerVersion: {
                                type: "integer"
                            },
                            generationId: {},
                            validity: {
                                shape: "Sj5"
                            },
                            certificateMode: {}
                        }
                    },
                    registrationConfig: {
                        shape: "Sj7"
                    }
                }
            }
        },
        DescribeCertificate: {
            http: {
                method: "GET",
                requestUri: "/certificates/{certificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "certificateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateDescription: {
                        type: "structure",
                        members: {
                            certificateArn: {},
                            certificateId: {},
                            caCertificateId: {},
                            status: {},
                            certificatePem: {},
                            ownedBy: {},
                            previousOwnedBy: {},
                            creationDate: {
                                type: "timestamp"
                            },
                            lastModifiedDate: {
                                type: "timestamp"
                            },
                            customerVersion: {
                                type: "integer"
                            },
                            transferData: {
                                type: "structure",
                                members: {
                                    transferMessage: {},
                                    rejectReason: {},
                                    transferDate: {
                                        type: "timestamp"
                                    },
                                    acceptDate: {
                                        type: "timestamp"
                                    },
                                    rejectDate: {
                                        type: "timestamp"
                                    }
                                }
                            },
                            generationId: {},
                            validity: {
                                shape: "Sj5"
                            },
                            certificateMode: {}
                        }
                    }
                }
            }
        },
        DescribeCertificateProvider: {
            http: {
                method: "GET",
                requestUri: "/certificate-providers/{certificateProviderName}"
            },
            input: {
                type: "structure",
                required: [ "certificateProviderName" ],
                members: {
                    certificateProviderName: {
                        location: "uri",
                        locationName: "certificateProviderName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateProviderName: {},
                    certificateProviderArn: {},
                    lambdaFunctionArn: {},
                    accountDefaultForOperations: {
                        shape: "S2y"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeCustomMetric: {
            http: {
                method: "GET",
                requestUri: "/custom-metric/{metricName}"
            },
            input: {
                type: "structure",
                required: [ "metricName" ],
                members: {
                    metricName: {
                        location: "uri",
                        locationName: "metricName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricArn: {},
                    metricType: {},
                    displayName: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeDefaultAuthorizer: {
            http: {
                method: "GET",
                requestUri: "/default-authorizer"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    authorizerDescription: {
                        shape: "Sis"
                    }
                }
            }
        },
        DescribeDetectMitigationActionsTask: {
            http: {
                method: "GET",
                requestUri: "/detect/mitigationactions/tasks/{taskId}"
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskSummary: {
                        shape: "Sjm"
                    }
                }
            }
        },
        DescribeDimension: {
            http: {
                method: "GET",
                requestUri: "/dimensions/{name}"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {},
                    type: {},
                    stringValues: {
                        shape: "S3c"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeDomainConfiguration: {
            http: {
                method: "GET",
                requestUri: "/domainConfigurations/{domainConfigurationName}"
            },
            input: {
                type: "structure",
                required: [ "domainConfigurationName" ],
                members: {
                    domainConfigurationName: {
                        location: "uri",
                        locationName: "domainConfigurationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domainConfigurationName: {},
                    domainConfigurationArn: {},
                    domainName: {},
                    serverCertificates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                serverCertificateArn: {},
                                serverCertificateStatus: {},
                                serverCertificateStatusDetail: {}
                            }
                        }
                    },
                    authorizerConfig: {
                        shape: "S3l"
                    },
                    domainConfigurationStatus: {},
                    serviceType: {},
                    domainType: {},
                    lastStatusChangeDate: {
                        type: "timestamp"
                    },
                    tlsConfig: {
                        shape: "S3o"
                    }
                }
            }
        },
        DescribeEndpoint: {
            http: {
                method: "GET",
                requestUri: "/endpoint"
            },
            input: {
                type: "structure",
                members: {
                    endpointType: {
                        location: "querystring",
                        locationName: "endpointType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    endpointAddress: {}
                }
            }
        },
        DescribeEventConfigurations: {
            http: {
                method: "GET",
                requestUri: "/event-configurations"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    eventConfigurations: {
                        shape: "Skc"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeFleetMetric: {
            http: {
                method: "GET",
                requestUri: "/fleet-metric/{metricName}"
            },
            input: {
                type: "structure",
                required: [ "metricName" ],
                members: {
                    metricName: {
                        location: "uri",
                        locationName: "metricName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    queryString: {},
                    aggregationType: {
                        shape: "S47"
                    },
                    period: {
                        type: "integer"
                    },
                    aggregationField: {},
                    description: {},
                    queryVersion: {},
                    indexName: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    },
                    unit: {},
                    version: {
                        type: "long"
                    },
                    metricArn: {}
                }
            }
        },
        DescribeIndex: {
            http: {
                method: "GET",
                requestUri: "/indices/{indexName}"
            },
            input: {
                type: "structure",
                required: [ "indexName" ],
                members: {
                    indexName: {
                        location: "uri",
                        locationName: "indexName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    indexName: {},
                    indexStatus: {},
                    schema: {}
                }
            }
        },
        DescribeJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    documentSource: {},
                    job: {
                        type: "structure",
                        members: {
                            jobArn: {},
                            jobId: {},
                            targetSelection: {},
                            status: {},
                            forceCanceled: {
                                type: "boolean"
                            },
                            reasonCode: {},
                            comment: {},
                            targets: {
                                shape: "Sg"
                            },
                            description: {},
                            presignedUrlConfig: {
                                shape: "S4k"
                            },
                            jobExecutionsRolloutConfig: {
                                shape: "S4n"
                            },
                            abortConfig: {
                                shape: "S4u"
                            },
                            createdAt: {
                                type: "timestamp"
                            },
                            lastUpdatedAt: {
                                type: "timestamp"
                            },
                            completedAt: {
                                type: "timestamp"
                            },
                            jobProcessDetails: {
                                type: "structure",
                                members: {
                                    processingTargets: {
                                        type: "list",
                                        member: {}
                                    },
                                    numberOfCanceledThings: {
                                        type: "integer"
                                    },
                                    numberOfSucceededThings: {
                                        type: "integer"
                                    },
                                    numberOfFailedThings: {
                                        type: "integer"
                                    },
                                    numberOfRejectedThings: {
                                        type: "integer"
                                    },
                                    numberOfQueuedThings: {
                                        type: "integer"
                                    },
                                    numberOfInProgressThings: {
                                        type: "integer"
                                    },
                                    numberOfRemovedThings: {
                                        type: "integer"
                                    },
                                    numberOfTimedOutThings: {
                                        type: "integer"
                                    }
                                }
                            },
                            timeoutConfig: {
                                shape: "S51"
                            },
                            namespaceId: {},
                            jobTemplateArn: {},
                            jobExecutionsRetryConfig: {
                                shape: "S54"
                            },
                            documentParameters: {
                                shape: "S59"
                            },
                            isConcurrent: {
                                type: "boolean"
                            },
                            schedulingConfig: {
                                shape: "S5c"
                            },
                            scheduledJobRollouts: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        startTime: {}
                                    }
                                }
                            },
                            destinationPackageVersions: {
                                shape: "S5j"
                            }
                        }
                    }
                }
            }
        },
        DescribeJobExecution: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId", "thingName" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    executionNumber: {
                        location: "querystring",
                        locationName: "executionNumber",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    execution: {
                        type: "structure",
                        members: {
                            jobId: {},
                            status: {},
                            forceCanceled: {
                                type: "boolean"
                            },
                            statusDetails: {
                                type: "structure",
                                members: {
                                    detailsMap: {
                                        shape: "S1e"
                                    }
                                }
                            },
                            thingArn: {},
                            queuedAt: {
                                type: "timestamp"
                            },
                            startedAt: {
                                type: "timestamp"
                            },
                            lastUpdatedAt: {
                                type: "timestamp"
                            },
                            executionNumber: {
                                type: "long"
                            },
                            versionNumber: {
                                type: "long"
                            },
                            approximateSecondsBeforeTimedOut: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        DescribeJobTemplate: {
            http: {
                method: "GET",
                requestUri: "/job-templates/{jobTemplateId}"
            },
            input: {
                type: "structure",
                required: [ "jobTemplateId" ],
                members: {
                    jobTemplateId: {
                        location: "uri",
                        locationName: "jobTemplateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobTemplateArn: {},
                    jobTemplateId: {},
                    description: {},
                    documentSource: {},
                    document: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    presignedUrlConfig: {
                        shape: "S4k"
                    },
                    jobExecutionsRolloutConfig: {
                        shape: "S4n"
                    },
                    abortConfig: {
                        shape: "S4u"
                    },
                    timeoutConfig: {
                        shape: "S51"
                    },
                    jobExecutionsRetryConfig: {
                        shape: "S54"
                    },
                    maintenanceWindows: {
                        shape: "S5f"
                    },
                    destinationPackageVersions: {
                        shape: "S5j"
                    }
                }
            }
        },
        DescribeManagedJobTemplate: {
            http: {
                method: "GET",
                requestUri: "/managed-job-templates/{templateName}"
            },
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    templateName: {
                        location: "uri",
                        locationName: "templateName"
                    },
                    templateVersion: {
                        location: "querystring",
                        locationName: "templateVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    templateName: {},
                    templateArn: {},
                    description: {},
                    templateVersion: {},
                    environments: {
                        shape: "Sli"
                    },
                    documentParameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                key: {},
                                description: {},
                                regex: {},
                                example: {},
                                optional: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    document: {}
                }
            }
        },
        DescribeMitigationAction: {
            http: {
                method: "GET",
                requestUri: "/mitigationactions/actions/{actionName}"
            },
            input: {
                type: "structure",
                required: [ "actionName" ],
                members: {
                    actionName: {
                        location: "uri",
                        locationName: "actionName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    actionName: {},
                    actionType: {},
                    actionArn: {},
                    actionId: {},
                    roleArn: {},
                    actionParams: {
                        shape: "S5w"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeProvisioningTemplate: {
            http: {
                method: "GET",
                requestUri: "/provisioning-templates/{templateName}"
            },
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    templateName: {
                        location: "uri",
                        locationName: "templateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    templateArn: {},
                    templateName: {},
                    description: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    },
                    defaultVersionId: {
                        type: "integer"
                    },
                    templateBody: {},
                    enabled: {
                        type: "boolean"
                    },
                    provisioningRoleArn: {},
                    preProvisioningHook: {
                        shape: "S90"
                    },
                    type: {}
                }
            }
        },
        DescribeProvisioningTemplateVersion: {
            http: {
                method: "GET",
                requestUri: "/provisioning-templates/{templateName}/versions/{versionId}"
            },
            input: {
                type: "structure",
                required: [ "templateName", "versionId" ],
                members: {
                    templateName: {
                        location: "uri",
                        locationName: "templateName"
                    },
                    versionId: {
                        location: "uri",
                        locationName: "versionId",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    versionId: {
                        type: "integer"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    templateBody: {},
                    isDefaultVersion: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeRoleAlias: {
            http: {
                method: "GET",
                requestUri: "/role-aliases/{roleAlias}"
            },
            input: {
                type: "structure",
                required: [ "roleAlias" ],
                members: {
                    roleAlias: {
                        location: "uri",
                        locationName: "roleAlias"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    roleAliasDescription: {
                        type: "structure",
                        members: {
                            roleAlias: {},
                            roleAliasArn: {},
                            roleArn: {},
                            owner: {},
                            credentialDurationSeconds: {
                                type: "integer"
                            },
                            creationDate: {
                                type: "timestamp"
                            },
                            lastModifiedDate: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeScheduledAudit: {
            http: {
                method: "GET",
                requestUri: "/audit/scheduledaudits/{scheduledAuditName}"
            },
            input: {
                type: "structure",
                required: [ "scheduledAuditName" ],
                members: {
                    scheduledAuditName: {
                        location: "uri",
                        locationName: "scheduledAuditName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    frequency: {},
                    dayOfMonth: {},
                    dayOfWeek: {},
                    targetCheckNames: {
                        shape: "S9g"
                    },
                    scheduledAuditName: {},
                    scheduledAuditArn: {}
                }
            }
        },
        DescribeSecurityProfile: {
            http: {
                method: "GET",
                requestUri: "/security-profiles/{securityProfileName}"
            },
            input: {
                type: "structure",
                required: [ "securityProfileName" ],
                members: {
                    securityProfileName: {
                        location: "uri",
                        locationName: "securityProfileName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    securityProfileName: {},
                    securityProfileArn: {},
                    securityProfileDescription: {},
                    behaviors: {
                        shape: "S9m"
                    },
                    alertTargets: {
                        shape: "Sad"
                    },
                    additionalMetricsToRetain: {
                        shape: "Sah",
                        deprecated: true,
                        deprecatedMessage: "Use additionalMetricsToRetainV2."
                    },
                    additionalMetricsToRetainV2: {
                        shape: "Sai"
                    },
                    version: {
                        type: "long"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    },
                    metricsExportConfig: {
                        shape: "Sak"
                    }
                }
            }
        },
        DescribeStream: {
            http: {
                method: "GET",
                requestUri: "/streams/{streamId}"
            },
            input: {
                type: "structure",
                required: [ "streamId" ],
                members: {
                    streamId: {
                        location: "uri",
                        locationName: "streamId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streamInfo: {
                        type: "structure",
                        members: {
                            streamId: {},
                            streamArn: {},
                            streamVersion: {
                                type: "integer"
                            },
                            description: {},
                            files: {
                                shape: "Saq"
                            },
                            createdAt: {
                                type: "timestamp"
                            },
                            lastUpdatedAt: {
                                type: "timestamp"
                            },
                            roleArn: {}
                        }
                    }
                }
            }
        },
        DescribeThing: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    defaultClientId: {},
                    thingName: {},
                    thingId: {},
                    thingArn: {},
                    thingTypeName: {},
                    attributes: {
                        shape: "S3w"
                    },
                    version: {
                        type: "long"
                    },
                    billingGroupName: {}
                }
            }
        },
        DescribeThingGroup: {
            http: {
                method: "GET",
                requestUri: "/thing-groups/{thingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "thingGroupName" ],
                members: {
                    thingGroupName: {
                        location: "uri",
                        locationName: "thingGroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    thingGroupName: {},
                    thingGroupId: {},
                    thingGroupArn: {},
                    version: {
                        type: "long"
                    },
                    thingGroupProperties: {
                        shape: "S3t"
                    },
                    thingGroupMetadata: {
                        type: "structure",
                        members: {
                            parentGroupName: {},
                            rootToParentThingGroups: {
                                shape: "Smb"
                            },
                            creationDate: {
                                type: "timestamp"
                            }
                        }
                    },
                    indexName: {},
                    queryString: {},
                    queryVersion: {},
                    status: {}
                }
            }
        },
        DescribeThingRegistrationTask: {
            http: {
                method: "GET",
                requestUri: "/thing-registration-tasks/{taskId}"
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    },
                    templateBody: {},
                    inputFileBucket: {},
                    inputFileKey: {},
                    roleArn: {},
                    status: {},
                    message: {},
                    successCount: {
                        type: "integer"
                    },
                    failureCount: {
                        type: "integer"
                    },
                    percentageProgress: {
                        type: "integer"
                    }
                }
            }
        },
        DescribeThingType: {
            http: {
                method: "GET",
                requestUri: "/thing-types/{thingTypeName}"
            },
            input: {
                type: "structure",
                required: [ "thingTypeName" ],
                members: {
                    thingTypeName: {
                        location: "uri",
                        locationName: "thingTypeName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    thingTypeName: {},
                    thingTypeId: {},
                    thingTypeArn: {},
                    thingTypeProperties: {
                        shape: "Sb2"
                    },
                    thingTypeMetadata: {
                        shape: "Smo"
                    }
                }
            }
        },
        DetachPolicy: {
            http: {
                requestUri: "/target-policies/{policyName}"
            },
            input: {
                type: "structure",
                required: [ "policyName", "target" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    target: {}
                }
            }
        },
        DetachPrincipalPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/principal-policies/{policyName}"
            },
            input: {
                type: "structure",
                required: [ "policyName", "principal" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    principal: {
                        location: "header",
                        locationName: "x-amzn-iot-principal"
                    }
                }
            },
            deprecated: true
        },
        DetachSecurityProfile: {
            http: {
                method: "DELETE",
                requestUri: "/security-profiles/{securityProfileName}/targets"
            },
            input: {
                type: "structure",
                required: [ "securityProfileName", "securityProfileTargetArn" ],
                members: {
                    securityProfileName: {
                        location: "uri",
                        locationName: "securityProfileName"
                    },
                    securityProfileTargetArn: {
                        location: "querystring",
                        locationName: "securityProfileTargetArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DetachThingPrincipal: {
            http: {
                method: "DELETE",
                requestUri: "/things/{thingName}/principals"
            },
            input: {
                type: "structure",
                required: [ "thingName", "principal" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    principal: {
                        location: "header",
                        locationName: "x-amzn-principal"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableTopicRule: {
            http: {
                requestUri: "/rules/{ruleName}/disable"
            },
            input: {
                type: "structure",
                required: [ "ruleName" ],
                members: {
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    }
                }
            }
        },
        EnableTopicRule: {
            http: {
                requestUri: "/rules/{ruleName}/enable"
            },
            input: {
                type: "structure",
                required: [ "ruleName" ],
                members: {
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    }
                }
            }
        },
        GetBehaviorModelTrainingSummaries: {
            http: {
                method: "GET",
                requestUri: "/behavior-model-training/summaries"
            },
            input: {
                type: "structure",
                members: {
                    securityProfileName: {
                        location: "querystring",
                        locationName: "securityProfileName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                securityProfileName: {},
                                behaviorName: {},
                                trainingDataCollectionStartDate: {
                                    type: "timestamp"
                                },
                                modelStatus: {},
                                datapointsCollectionPercentage: {
                                    type: "double"
                                },
                                lastModelRefreshDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBucketsAggregation: {
            http: {
                requestUri: "/indices/buckets"
            },
            input: {
                type: "structure",
                required: [ "queryString", "aggregationField", "bucketsAggregationType" ],
                members: {
                    indexName: {},
                    queryString: {},
                    aggregationField: {},
                    queryVersion: {},
                    bucketsAggregationType: {
                        type: "structure",
                        members: {
                            termsAggregation: {
                                type: "structure",
                                members: {
                                    maxBuckets: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    totalCount: {
                        type: "integer"
                    },
                    buckets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                keyValue: {},
                                count: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetCardinality: {
            http: {
                requestUri: "/indices/cardinality"
            },
            input: {
                type: "structure",
                required: [ "queryString" ],
                members: {
                    indexName: {},
                    queryString: {},
                    aggregationField: {},
                    queryVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    cardinality: {
                        type: "integer"
                    }
                }
            }
        },
        GetEffectivePolicies: {
            http: {
                requestUri: "/effective-policies"
            },
            input: {
                type: "structure",
                members: {
                    principal: {},
                    cognitoIdentityPoolId: {},
                    thingName: {
                        location: "querystring",
                        locationName: "thingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    effectivePolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                policyName: {},
                                policyArn: {},
                                policyDocument: {}
                            }
                        }
                    }
                }
            }
        },
        GetIndexingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/indexing/config"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    thingIndexingConfiguration: {
                        shape: "Snn"
                    },
                    thingGroupIndexingConfiguration: {
                        shape: "So3"
                    }
                }
            }
        },
        GetJobDocument: {
            http: {
                method: "GET",
                requestUri: "/jobs/{jobId}/job-document"
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    document: {}
                }
            }
        },
        GetLoggingOptions: {
            http: {
                method: "GET",
                requestUri: "/loggingOptions"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    roleArn: {},
                    logLevel: {}
                }
            }
        },
        GetOTAUpdate: {
            http: {
                method: "GET",
                requestUri: "/otaUpdates/{otaUpdateId}"
            },
            input: {
                type: "structure",
                required: [ "otaUpdateId" ],
                members: {
                    otaUpdateId: {
                        location: "uri",
                        locationName: "otaUpdateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    otaUpdateInfo: {
                        type: "structure",
                        members: {
                            otaUpdateId: {},
                            otaUpdateArn: {},
                            creationDate: {
                                type: "timestamp"
                            },
                            lastModifiedDate: {
                                type: "timestamp"
                            },
                            description: {},
                            targets: {
                                shape: "S6g"
                            },
                            protocols: {
                                shape: "S6i"
                            },
                            awsJobExecutionsRolloutConfig: {
                                shape: "S6k"
                            },
                            awsJobPresignedUrlConfig: {
                                shape: "S6r"
                            },
                            targetSelection: {},
                            otaUpdateFiles: {
                                shape: "S72"
                            },
                            otaUpdateStatus: {},
                            awsIotJobId: {},
                            awsIotJobArn: {},
                            errorInfo: {
                                type: "structure",
                                members: {
                                    code: {},
                                    message: {}
                                }
                            },
                            additionalParameters: {
                                shape: "S80"
                            }
                        }
                    }
                }
            }
        },
        GetPackage: {
            http: {
                method: "GET",
                requestUri: "/packages/{packageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "packageName" ],
                members: {
                    packageName: {
                        location: "uri",
                        locationName: "packageName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    packageName: {},
                    packageArn: {},
                    description: {
                        shape: "S88"
                    },
                    defaultVersionName: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetPackageConfiguration: {
            http: {
                method: "GET",
                requestUri: "/package-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    versionUpdateByJobsConfig: {
                        shape: "Soj"
                    }
                }
            }
        },
        GetPackageVersion: {
            http: {
                method: "GET",
                requestUri: "/packages/{packageName}/versions/{versionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "packageName", "versionName" ],
                members: {
                    packageName: {
                        location: "uri",
                        locationName: "packageName"
                    },
                    versionName: {
                        location: "uri",
                        locationName: "versionName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    packageVersionArn: {},
                    packageName: {},
                    versionName: {},
                    description: {
                        shape: "S88"
                    },
                    attributes: {
                        shape: "S8e"
                    },
                    status: {},
                    errorReason: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetPercentiles: {
            http: {
                requestUri: "/indices/percentiles"
            },
            input: {
                type: "structure",
                required: [ "queryString" ],
                members: {
                    indexName: {},
                    queryString: {},
                    aggregationField: {},
                    queryVersion: {},
                    percents: {
                        type: "list",
                        member: {
                            type: "double"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    percentiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                percent: {
                                    type: "double"
                                },
                                value: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetPolicy: {
            http: {
                method: "GET",
                requestUri: "/policies/{policyName}"
            },
            input: {
                type: "structure",
                required: [ "policyName" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policyName: {},
                    policyArn: {},
                    policyDocument: {},
                    defaultVersionId: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    },
                    generationId: {}
                }
            }
        },
        GetPolicyVersion: {
            http: {
                method: "GET",
                requestUri: "/policies/{policyName}/version/{policyVersionId}"
            },
            input: {
                type: "structure",
                required: [ "policyName", "policyVersionId" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    policyVersionId: {
                        location: "uri",
                        locationName: "policyVersionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policyArn: {},
                    policyName: {},
                    policyDocument: {},
                    policyVersionId: {},
                    isDefaultVersion: {
                        type: "boolean"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    },
                    generationId: {}
                }
            }
        },
        GetRegistrationCode: {
            http: {
                method: "GET",
                requestUri: "/registrationcode"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    registrationCode: {}
                }
            }
        },
        GetStatistics: {
            http: {
                requestUri: "/indices/statistics"
            },
            input: {
                type: "structure",
                required: [ "queryString" ],
                members: {
                    indexName: {},
                    queryString: {},
                    aggregationField: {},
                    queryVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    statistics: {
                        type: "structure",
                        members: {
                            count: {
                                type: "integer"
                            },
                            average: {
                                type: "double"
                            },
                            sum: {
                                type: "double"
                            },
                            minimum: {
                                type: "double"
                            },
                            maximum: {
                                type: "double"
                            },
                            sumOfSquares: {
                                type: "double"
                            },
                            variance: {
                                type: "double"
                            },
                            stdDeviation: {
                                type: "double"
                            }
                        }
                    }
                }
            }
        },
        GetTopicRule: {
            http: {
                method: "GET",
                requestUri: "/rules/{ruleName}"
            },
            input: {
                type: "structure",
                required: [ "ruleName" ],
                members: {
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ruleArn: {},
                    rule: {
                        type: "structure",
                        members: {
                            ruleName: {},
                            sql: {},
                            description: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            actions: {
                                shape: "Sbd"
                            },
                            ruleDisabled: {
                                type: "boolean"
                            },
                            awsIotSqlVersion: {},
                            errorAction: {
                                shape: "Sbe"
                            }
                        }
                    }
                }
            }
        },
        GetTopicRuleDestination: {
            http: {
                method: "GET",
                requestUri: "/destinations/{arn+}"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    topicRuleDestination: {
                        shape: "Sex"
                    }
                }
            }
        },
        GetV2LoggingOptions: {
            http: {
                method: "GET",
                requestUri: "/v2LoggingOptions"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    roleArn: {},
                    defaultLogLevel: {},
                    disableAllLogs: {
                        type: "boolean"
                    }
                }
            }
        },
        ListActiveViolations: {
            http: {
                method: "GET",
                requestUri: "/active-violations"
            },
            input: {
                type: "structure",
                members: {
                    thingName: {
                        location: "querystring",
                        locationName: "thingName"
                    },
                    securityProfileName: {
                        location: "querystring",
                        locationName: "securityProfileName"
                    },
                    behaviorCriteriaType: {
                        location: "querystring",
                        locationName: "behaviorCriteriaType"
                    },
                    listSuppressedAlerts: {
                        location: "querystring",
                        locationName: "listSuppressedAlerts",
                        type: "boolean"
                    },
                    verificationState: {
                        location: "querystring",
                        locationName: "verificationState"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    activeViolations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                violationId: {},
                                thingName: {},
                                securityProfileName: {},
                                behavior: {
                                    shape: "S9n"
                                },
                                lastViolationValue: {
                                    shape: "S9u"
                                },
                                violationEventAdditionalInfo: {
                                    shape: "Spt"
                                },
                                verificationState: {},
                                verificationStateDescription: {},
                                lastViolationTime: {
                                    type: "timestamp"
                                },
                                violationStartTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAttachedPolicies: {
            http: {
                requestUri: "/attached-policies/{target}"
            },
            input: {
                type: "structure",
                required: [ "target" ],
                members: {
                    target: {
                        location: "uri",
                        locationName: "target"
                    },
                    recursive: {
                        location: "querystring",
                        locationName: "recursive",
                        type: "boolean"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policies: {
                        shape: "Sq0"
                    },
                    nextMarker: {}
                }
            }
        },
        ListAuditFindings: {
            http: {
                requestUri: "/audit/findings"
            },
            input: {
                type: "structure",
                members: {
                    taskId: {},
                    checkName: {},
                    resourceIdentifier: {
                        shape: "S1o"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    listSuppressedFindings: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findings: {
                        type: "list",
                        member: {
                            shape: "Shb"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAuditMitigationActionsExecutions: {
            http: {
                method: "GET",
                requestUri: "/audit/mitigationactions/executions"
            },
            input: {
                type: "structure",
                required: [ "taskId", "findingId" ],
                members: {
                    taskId: {
                        location: "querystring",
                        locationName: "taskId"
                    },
                    actionStatus: {
                        location: "querystring",
                        locationName: "actionStatus"
                    },
                    findingId: {
                        location: "querystring",
                        locationName: "findingId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    actionsExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                taskId: {},
                                findingId: {},
                                actionName: {},
                                actionId: {},
                                status: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                endTime: {
                                    type: "timestamp"
                                },
                                errorCode: {},
                                message: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAuditMitigationActionsTasks: {
            http: {
                method: "GET",
                requestUri: "/audit/mitigationactions/tasks"
            },
            input: {
                type: "structure",
                required: [ "startTime", "endTime" ],
                members: {
                    auditTaskId: {
                        location: "querystring",
                        locationName: "auditTaskId"
                    },
                    findingId: {
                        location: "querystring",
                        locationName: "findingId"
                    },
                    taskStatus: {
                        location: "querystring",
                        locationName: "taskStatus"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    startTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    endTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                taskId: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                taskStatus: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAuditSuppressions: {
            http: {
                requestUri: "/audit/suppressions/list"
            },
            input: {
                type: "structure",
                members: {
                    checkName: {},
                    resourceIdentifier: {
                        shape: "S1o"
                    },
                    ascendingOrder: {
                        type: "boolean"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    suppressions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "checkName", "resourceIdentifier" ],
                            members: {
                                checkName: {},
                                resourceIdentifier: {
                                    shape: "S1o"
                                },
                                expirationDate: {
                                    type: "timestamp"
                                },
                                suppressIndefinitely: {
                                    type: "boolean"
                                },
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAuditTasks: {
            http: {
                method: "GET",
                requestUri: "/audit/tasks"
            },
            input: {
                type: "structure",
                required: [ "startTime", "endTime" ],
                members: {
                    startTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    endTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    },
                    taskType: {
                        location: "querystring",
                        locationName: "taskType"
                    },
                    taskStatus: {
                        location: "querystring",
                        locationName: "taskStatus"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                taskId: {},
                                taskStatus: {},
                                taskType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAuthorizers: {
            http: {
                method: "GET",
                requestUri: "/authorizers/"
            },
            input: {
                type: "structure",
                members: {
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    authorizers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                authorizerName: {},
                                authorizerArn: {}
                            }
                        }
                    },
                    nextMarker: {}
                }
            }
        },
        ListBillingGroups: {
            http: {
                method: "GET",
                requestUri: "/billing-groups"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    namePrefixFilter: {
                        location: "querystring",
                        locationName: "namePrefixFilter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    billingGroups: {
                        type: "list",
                        member: {
                            shape: "Smc"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCACertificates: {
            http: {
                method: "GET",
                requestUri: "/cacertificates"
            },
            input: {
                type: "structure",
                members: {
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    },
                    templateName: {
                        location: "querystring",
                        locationName: "templateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                certificateArn: {},
                                certificateId: {},
                                status: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextMarker: {}
                }
            }
        },
        ListCertificateProviders: {
            http: {
                method: "GET",
                requestUri: "/certificate-providers/"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateProviders: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                certificateProviderName: {},
                                certificateProviderArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCertificates: {
            http: {
                method: "GET",
                requestUri: "/certificates"
            },
            input: {
                type: "structure",
                members: {
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificates: {
                        shape: "Sr6"
                    },
                    nextMarker: {}
                }
            }
        },
        ListCertificatesByCA: {
            http: {
                method: "GET",
                requestUri: "/certificates-by-ca/{caCertificateId}"
            },
            input: {
                type: "structure",
                required: [ "caCertificateId" ],
                members: {
                    caCertificateId: {
                        location: "uri",
                        locationName: "caCertificateId"
                    },
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificates: {
                        shape: "Sr6"
                    },
                    nextMarker: {}
                }
            }
        },
        ListCustomMetrics: {
            http: {
                method: "GET",
                requestUri: "/custom-metrics"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricNames: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListDetectMitigationActionsExecutions: {
            http: {
                method: "GET",
                requestUri: "/detect/mitigationactions/executions"
            },
            input: {
                type: "structure",
                members: {
                    taskId: {
                        location: "querystring",
                        locationName: "taskId"
                    },
                    violationId: {
                        location: "querystring",
                        locationName: "violationId"
                    },
                    thingName: {
                        location: "querystring",
                        locationName: "thingName"
                    },
                    startTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    endTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    actionsExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                taskId: {},
                                violationId: {},
                                actionName: {},
                                thingName: {},
                                executionStartDate: {
                                    type: "timestamp"
                                },
                                executionEndDate: {
                                    type: "timestamp"
                                },
                                status: {},
                                errorCode: {},
                                message: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDetectMitigationActionsTasks: {
            http: {
                method: "GET",
                requestUri: "/detect/mitigationactions/tasks"
            },
            input: {
                type: "structure",
                required: [ "startTime", "endTime" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    startTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    endTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tasks: {
                        type: "list",
                        member: {
                            shape: "Sjm"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDimensions: {
            http: {
                method: "GET",
                requestUri: "/dimensions"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dimensionNames: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListDomainConfigurations: {
            http: {
                method: "GET",
                requestUri: "/domainConfigurations"
            },
            input: {
                type: "structure",
                members: {
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    serviceType: {
                        location: "querystring",
                        locationName: "serviceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domainConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                domainConfigurationName: {},
                                domainConfigurationArn: {},
                                serviceType: {}
                            }
                        }
                    },
                    nextMarker: {}
                }
            }
        },
        ListFleetMetrics: {
            http: {
                method: "GET",
                requestUri: "/fleet-metrics"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fleetMetrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                metricName: {},
                                metricArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIndices: {
            http: {
                method: "GET",
                requestUri: "/indices"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    indexNames: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListJobExecutionsForJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{jobId}/things"
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    executionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingArn: {},
                                jobExecutionSummary: {
                                    shape: "Ss6"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListJobExecutionsForThing: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}/jobs"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    namespaceId: {
                        location: "querystring",
                        locationName: "namespaceId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    jobId: {
                        location: "querystring",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    executionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobId: {},
                                jobExecutionSummary: {
                                    shape: "Ss6"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListJobTemplates: {
            http: {
                method: "GET",
                requestUri: "/job-templates"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobTemplateArn: {},
                                jobTemplateId: {},
                                description: {},
                                createdAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/jobs"
            },
            input: {
                type: "structure",
                members: {
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    targetSelection: {
                        location: "querystring",
                        locationName: "targetSelection"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    thingGroupName: {
                        location: "querystring",
                        locationName: "thingGroupName"
                    },
                    thingGroupId: {
                        location: "querystring",
                        locationName: "thingGroupId"
                    },
                    namespaceId: {
                        location: "querystring",
                        locationName: "namespaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobArn: {},
                                jobId: {},
                                thingGroupId: {},
                                targetSelection: {},
                                status: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                completedAt: {
                                    type: "timestamp"
                                },
                                isConcurrent: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListManagedJobTemplates: {
            http: {
                method: "GET",
                requestUri: "/managed-job-templates"
            },
            input: {
                type: "structure",
                members: {
                    templateName: {
                        location: "querystring",
                        locationName: "templateName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    managedJobTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                templateArn: {},
                                templateName: {},
                                description: {},
                                environments: {
                                    shape: "Sli"
                                },
                                templateVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMetricValues: {
            http: {
                method: "GET",
                requestUri: "/metric-values"
            },
            input: {
                type: "structure",
                required: [ "thingName", "metricName", "startTime", "endTime" ],
                members: {
                    thingName: {
                        location: "querystring",
                        locationName: "thingName"
                    },
                    metricName: {
                        location: "querystring",
                        locationName: "metricName"
                    },
                    dimensionName: {
                        location: "querystring",
                        locationName: "dimensionName"
                    },
                    dimensionValueOperator: {
                        location: "querystring",
                        locationName: "dimensionValueOperator"
                    },
                    startTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    endTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricDatumList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                timestamp: {
                                    type: "timestamp"
                                },
                                value: {
                                    shape: "S9u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMitigationActions: {
            http: {
                method: "GET",
                requestUri: "/mitigationactions/actions"
            },
            input: {
                type: "structure",
                members: {
                    actionType: {
                        location: "querystring",
                        locationName: "actionType"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    actionIdentifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                actionName: {},
                                actionArn: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListOTAUpdates: {
            http: {
                method: "GET",
                requestUri: "/otaUpdates"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    otaUpdateStatus: {
                        location: "querystring",
                        locationName: "otaUpdateStatus"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    otaUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                otaUpdateId: {},
                                otaUpdateArn: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListOutgoingCertificates: {
            http: {
                method: "GET",
                requestUri: "/certificates-out-going"
            },
            input: {
                type: "structure",
                members: {
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    outgoingCertificates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                certificateArn: {},
                                certificateId: {},
                                transferredTo: {},
                                transferDate: {
                                    type: "timestamp"
                                },
                                transferMessage: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextMarker: {}
                }
            }
        },
        ListPackageVersions: {
            http: {
                method: "GET",
                requestUri: "/packages/{packageName}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "packageName" ],
                members: {
                    packageName: {
                        location: "uri",
                        locationName: "packageName"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    packageVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                packageName: {},
                                versionName: {},
                                status: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastModifiedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPackages: {
            http: {
                method: "GET",
                requestUri: "/packages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    packageSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                packageName: {},
                                defaultVersionName: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastModifiedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPolicies: {
            http: {
                method: "GET",
                requestUri: "/policies"
            },
            input: {
                type: "structure",
                members: {
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policies: {
                        shape: "Sq0"
                    },
                    nextMarker: {}
                }
            }
        },
        ListPolicyPrincipals: {
            http: {
                method: "GET",
                requestUri: "/policy-principals"
            },
            input: {
                type: "structure",
                required: [ "policyName" ],
                members: {
                    policyName: {
                        location: "header",
                        locationName: "x-amzn-iot-policy"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    principals: {
                        shape: "Sth"
                    },
                    nextMarker: {}
                }
            },
            deprecated: true
        },
        ListPolicyVersions: {
            http: {
                method: "GET",
                requestUri: "/policies/{policyName}/version"
            },
            input: {
                type: "structure",
                required: [ "policyName" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policyVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                versionId: {},
                                isDefaultVersion: {
                                    type: "boolean"
                                },
                                createDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPrincipalPolicies: {
            http: {
                method: "GET",
                requestUri: "/principal-policies"
            },
            input: {
                type: "structure",
                required: [ "principal" ],
                members: {
                    principal: {
                        location: "header",
                        locationName: "x-amzn-iot-principal"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policies: {
                        shape: "Sq0"
                    },
                    nextMarker: {}
                }
            },
            deprecated: true
        },
        ListPrincipalThings: {
            http: {
                method: "GET",
                requestUri: "/principals/things"
            },
            input: {
                type: "structure",
                required: [ "principal" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    principal: {
                        location: "header",
                        locationName: "x-amzn-principal"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    things: {
                        shape: "Str"
                    },
                    nextToken: {}
                }
            }
        },
        ListProvisioningTemplateVersions: {
            http: {
                method: "GET",
                requestUri: "/provisioning-templates/{templateName}/versions"
            },
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    templateName: {
                        location: "uri",
                        locationName: "templateName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    versions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                versionId: {
                                    type: "integer"
                                },
                                creationDate: {
                                    type: "timestamp"
                                },
                                isDefaultVersion: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProvisioningTemplates: {
            http: {
                method: "GET",
                requestUri: "/provisioning-templates"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    templates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                templateArn: {},
                                templateName: {},
                                description: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                lastModifiedDate: {
                                    type: "timestamp"
                                },
                                enabled: {
                                    type: "boolean"
                                },
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRelatedResourcesForAuditFinding: {
            http: {
                method: "GET",
                requestUri: "/audit/relatedResources"
            },
            input: {
                type: "structure",
                required: [ "findingId" ],
                members: {
                    findingId: {
                        location: "querystring",
                        locationName: "findingId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    relatedResources: {
                        shape: "Shg"
                    },
                    nextToken: {}
                }
            }
        },
        ListRoleAliases: {
            http: {
                method: "GET",
                requestUri: "/role-aliases"
            },
            input: {
                type: "structure",
                members: {
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    roleAliases: {
                        type: "list",
                        member: {}
                    },
                    nextMarker: {}
                }
            }
        },
        ListScheduledAudits: {
            http: {
                method: "GET",
                requestUri: "/audit/scheduledaudits"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    scheduledAudits: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                scheduledAuditName: {},
                                scheduledAuditArn: {},
                                frequency: {},
                                dayOfMonth: {},
                                dayOfWeek: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSecurityProfiles: {
            http: {
                method: "GET",
                requestUri: "/security-profiles"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    dimensionName: {
                        location: "querystring",
                        locationName: "dimensionName"
                    },
                    metricName: {
                        location: "querystring",
                        locationName: "metricName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    securityProfileIdentifiers: {
                        type: "list",
                        member: {
                            shape: "Suc"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSecurityProfilesForTarget: {
            http: {
                method: "GET",
                requestUri: "/security-profiles-for-target"
            },
            input: {
                type: "structure",
                required: [ "securityProfileTargetArn" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    recursive: {
                        location: "querystring",
                        locationName: "recursive",
                        type: "boolean"
                    },
                    securityProfileTargetArn: {
                        location: "querystring",
                        locationName: "securityProfileTargetArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    securityProfileTargetMappings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                securityProfileIdentifier: {
                                    shape: "Suc"
                                },
                                target: {
                                    shape: "Suh"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStreams: {
            http: {
                method: "GET",
                requestUri: "/streams"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ascendingOrder: {
                        location: "querystring",
                        locationName: "isAscendingOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    streams: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                streamId: {},
                                streamArn: {},
                                streamVersion: {
                                    type: "integer"
                                },
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S2e"
                    },
                    nextToken: {}
                }
            }
        },
        ListTargetsForPolicy: {
            http: {
                requestUri: "/policy-targets/{policyName}"
            },
            input: {
                type: "structure",
                required: [ "policyName" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targets: {
                        type: "list",
                        member: {}
                    },
                    nextMarker: {}
                }
            }
        },
        ListTargetsForSecurityProfile: {
            http: {
                method: "GET",
                requestUri: "/security-profiles/{securityProfileName}/targets"
            },
            input: {
                type: "structure",
                required: [ "securityProfileName" ],
                members: {
                    securityProfileName: {
                        location: "uri",
                        locationName: "securityProfileName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    securityProfileTargets: {
                        type: "list",
                        member: {
                            shape: "Suh"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListThingGroups: {
            http: {
                method: "GET",
                requestUri: "/thing-groups"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    parentGroup: {
                        location: "querystring",
                        locationName: "parentGroup"
                    },
                    namePrefixFilter: {
                        location: "querystring",
                        locationName: "namePrefixFilter"
                    },
                    recursive: {
                        location: "querystring",
                        locationName: "recursive",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    thingGroups: {
                        shape: "Smb"
                    },
                    nextToken: {}
                }
            }
        },
        ListThingGroupsForThing: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}/thing-groups"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    thingGroups: {
                        shape: "Smb"
                    },
                    nextToken: {}
                }
            }
        },
        ListThingPrincipals: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}/principals"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    principals: {
                        shape: "Sth"
                    },
                    nextToken: {}
                }
            }
        },
        ListThingRegistrationTaskReports: {
            http: {
                method: "GET",
                requestUri: "/thing-registration-tasks/{taskId}/reports"
            },
            input: {
                type: "structure",
                required: [ "taskId", "reportType" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    },
                    reportType: {
                        location: "querystring",
                        locationName: "reportType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceLinks: {
                        type: "list",
                        member: {}
                    },
                    reportType: {},
                    nextToken: {}
                }
            }
        },
        ListThingRegistrationTasks: {
            http: {
                method: "GET",
                requestUri: "/thing-registration-tasks"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskIds: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListThingTypes: {
            http: {
                method: "GET",
                requestUri: "/thing-types"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    thingTypeName: {
                        location: "querystring",
                        locationName: "thingTypeName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    thingTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingTypeName: {},
                                thingTypeArn: {},
                                thingTypeProperties: {
                                    shape: "Sb2"
                                },
                                thingTypeMetadata: {
                                    shape: "Smo"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListThings: {
            http: {
                method: "GET",
                requestUri: "/things"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    attributeName: {
                        location: "querystring",
                        locationName: "attributeName"
                    },
                    attributeValue: {
                        location: "querystring",
                        locationName: "attributeValue"
                    },
                    thingTypeName: {
                        location: "querystring",
                        locationName: "thingTypeName"
                    },
                    usePrefixAttributeValue: {
                        location: "querystring",
                        locationName: "usePrefixAttributeValue",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    things: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingName: {},
                                thingTypeName: {},
                                thingArn: {},
                                attributes: {
                                    shape: "S3w"
                                },
                                version: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListThingsInBillingGroup: {
            http: {
                method: "GET",
                requestUri: "/billing-groups/{billingGroupName}/things"
            },
            input: {
                type: "structure",
                required: [ "billingGroupName" ],
                members: {
                    billingGroupName: {
                        location: "uri",
                        locationName: "billingGroupName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    things: {
                        shape: "Str"
                    },
                    nextToken: {}
                }
            }
        },
        ListThingsInThingGroup: {
            http: {
                method: "GET",
                requestUri: "/thing-groups/{thingGroupName}/things"
            },
            input: {
                type: "structure",
                required: [ "thingGroupName" ],
                members: {
                    thingGroupName: {
                        location: "uri",
                        locationName: "thingGroupName"
                    },
                    recursive: {
                        location: "querystring",
                        locationName: "recursive",
                        type: "boolean"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    things: {
                        shape: "Str"
                    },
                    nextToken: {}
                }
            }
        },
        ListTopicRuleDestinations: {
            http: {
                method: "GET",
                requestUri: "/destinations"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    destinationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                status: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                statusReason: {},
                                httpUrlSummary: {
                                    type: "structure",
                                    members: {
                                        confirmationUrl: {}
                                    }
                                },
                                vpcDestinationSummary: {
                                    type: "structure",
                                    members: {
                                        subnetIds: {
                                            shape: "Ser"
                                        },
                                        securityGroups: {
                                            shape: "Set"
                                        },
                                        vpcId: {},
                                        roleArn: {}
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTopicRules: {
            http: {
                method: "GET",
                requestUri: "/rules"
            },
            input: {
                type: "structure",
                members: {
                    topic: {
                        location: "querystring",
                        locationName: "topic"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ruleDisabled: {
                        location: "querystring",
                        locationName: "ruleDisabled",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ruleArn: {},
                                ruleName: {},
                                topicPattern: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                ruleDisabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListV2LoggingLevels: {
            http: {
                method: "GET",
                requestUri: "/v2LoggingLevel"
            },
            input: {
                type: "structure",
                members: {
                    targetType: {
                        location: "querystring",
                        locationName: "targetType"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    logTargetConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                logTarget: {
                                    shape: "Sw5"
                                },
                                logLevel: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListViolationEvents: {
            http: {
                method: "GET",
                requestUri: "/violation-events"
            },
            input: {
                type: "structure",
                required: [ "startTime", "endTime" ],
                members: {
                    startTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    endTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    },
                    thingName: {
                        location: "querystring",
                        locationName: "thingName"
                    },
                    securityProfileName: {
                        location: "querystring",
                        locationName: "securityProfileName"
                    },
                    behaviorCriteriaType: {
                        location: "querystring",
                        locationName: "behaviorCriteriaType"
                    },
                    listSuppressedAlerts: {
                        location: "querystring",
                        locationName: "listSuppressedAlerts",
                        type: "boolean"
                    },
                    verificationState: {
                        location: "querystring",
                        locationName: "verificationState"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    violationEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                violationId: {},
                                thingName: {},
                                securityProfileName: {},
                                behavior: {
                                    shape: "S9n"
                                },
                                metricValue: {
                                    shape: "S9u"
                                },
                                violationEventAdditionalInfo: {
                                    shape: "Spt"
                                },
                                violationEventType: {},
                                verificationState: {},
                                verificationStateDescription: {},
                                violationEventTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutVerificationStateOnViolation: {
            http: {
                requestUri: "/violations/verification-state/{violationId}"
            },
            input: {
                type: "structure",
                required: [ "violationId", "verificationState" ],
                members: {
                    violationId: {
                        location: "uri",
                        locationName: "violationId"
                    },
                    verificationState: {},
                    verificationStateDescription: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RegisterCACertificate: {
            http: {
                requestUri: "/cacertificate"
            },
            input: {
                type: "structure",
                required: [ "caCertificate" ],
                members: {
                    caCertificate: {},
                    verificationCertificate: {},
                    setAsActive: {
                        location: "querystring",
                        locationName: "setAsActive",
                        type: "boolean"
                    },
                    allowAutoRegistration: {
                        location: "querystring",
                        locationName: "allowAutoRegistration",
                        type: "boolean"
                    },
                    registrationConfig: {
                        shape: "Sj7"
                    },
                    tags: {
                        shape: "S2e"
                    },
                    certificateMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateArn: {},
                    certificateId: {}
                }
            }
        },
        RegisterCertificate: {
            http: {
                requestUri: "/certificate/register"
            },
            input: {
                type: "structure",
                required: [ "certificatePem" ],
                members: {
                    certificatePem: {},
                    caCertificatePem: {},
                    setAsActive: {
                        deprecated: true,
                        location: "querystring",
                        locationName: "setAsActive",
                        type: "boolean"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateArn: {},
                    certificateId: {}
                }
            }
        },
        RegisterCertificateWithoutCA: {
            http: {
                requestUri: "/certificate/register-no-ca"
            },
            input: {
                type: "structure",
                required: [ "certificatePem" ],
                members: {
                    certificatePem: {},
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateArn: {},
                    certificateId: {}
                }
            }
        },
        RegisterThing: {
            http: {
                requestUri: "/things"
            },
            input: {
                type: "structure",
                required: [ "templateBody" ],
                members: {
                    templateBody: {},
                    parameters: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificatePem: {},
                    resourceArns: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        RejectCertificateTransfer: {
            http: {
                method: "PATCH",
                requestUri: "/reject-certificate-transfer/{certificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "certificateId"
                    },
                    rejectReason: {}
                }
            }
        },
        RemoveThingFromBillingGroup: {
            http: {
                method: "PUT",
                requestUri: "/billing-groups/removeThingFromBillingGroup"
            },
            input: {
                type: "structure",
                members: {
                    billingGroupName: {},
                    billingGroupArn: {},
                    thingName: {},
                    thingArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveThingFromThingGroup: {
            http: {
                method: "PUT",
                requestUri: "/thing-groups/removeThingFromThingGroup"
            },
            input: {
                type: "structure",
                members: {
                    thingGroupName: {},
                    thingGroupArn: {},
                    thingName: {},
                    thingArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ReplaceTopicRule: {
            http: {
                method: "PATCH",
                requestUri: "/rules/{ruleName}"
            },
            input: {
                type: "structure",
                required: [ "ruleName", "topicRulePayload" ],
                members: {
                    ruleName: {
                        location: "uri",
                        locationName: "ruleName"
                    },
                    topicRulePayload: {
                        shape: "Sba"
                    }
                },
                payload: "topicRulePayload"
            }
        },
        SearchIndex: {
            http: {
                requestUri: "/indices/search"
            },
            input: {
                type: "structure",
                required: [ "queryString" ],
                members: {
                    indexName: {},
                    queryString: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    queryVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    things: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingName: {},
                                thingId: {},
                                thingTypeName: {},
                                thingGroupNames: {
                                    shape: "Sx1"
                                },
                                attributes: {
                                    shape: "S3w"
                                },
                                shadow: {},
                                deviceDefender: {},
                                connectivity: {
                                    type: "structure",
                                    members: {
                                        connected: {
                                            type: "boolean"
                                        },
                                        timestamp: {
                                            type: "long"
                                        },
                                        disconnectReason: {}
                                    }
                                }
                            }
                        }
                    },
                    thingGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                thingGroupName: {},
                                thingGroupId: {},
                                thingGroupDescription: {},
                                attributes: {
                                    shape: "S3w"
                                },
                                parentGroupNames: {
                                    shape: "Sx1"
                                }
                            }
                        }
                    }
                }
            }
        },
        SetDefaultAuthorizer: {
            http: {
                requestUri: "/default-authorizer"
            },
            input: {
                type: "structure",
                required: [ "authorizerName" ],
                members: {
                    authorizerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    authorizerName: {},
                    authorizerArn: {}
                }
            }
        },
        SetDefaultPolicyVersion: {
            http: {
                method: "PATCH",
                requestUri: "/policies/{policyName}/version/{policyVersionId}"
            },
            input: {
                type: "structure",
                required: [ "policyName", "policyVersionId" ],
                members: {
                    policyName: {
                        location: "uri",
                        locationName: "policyName"
                    },
                    policyVersionId: {
                        location: "uri",
                        locationName: "policyVersionId"
                    }
                }
            }
        },
        SetLoggingOptions: {
            http: {
                requestUri: "/loggingOptions"
            },
            input: {
                type: "structure",
                required: [ "loggingOptionsPayload" ],
                members: {
                    loggingOptionsPayload: {
                        type: "structure",
                        required: [ "roleArn" ],
                        members: {
                            roleArn: {},
                            logLevel: {}
                        }
                    }
                },
                payload: "loggingOptionsPayload"
            }
        },
        SetV2LoggingLevel: {
            http: {
                requestUri: "/v2LoggingLevel"
            },
            input: {
                type: "structure",
                required: [ "logTarget", "logLevel" ],
                members: {
                    logTarget: {
                        shape: "Sw5"
                    },
                    logLevel: {}
                }
            }
        },
        SetV2LoggingOptions: {
            http: {
                requestUri: "/v2LoggingOptions"
            },
            input: {
                type: "structure",
                members: {
                    roleArn: {},
                    defaultLogLevel: {},
                    disableAllLogs: {
                        type: "boolean"
                    }
                }
            }
        },
        StartAuditMitigationActionsTask: {
            http: {
                requestUri: "/audit/mitigationactions/tasks/{taskId}"
            },
            input: {
                type: "structure",
                required: [ "taskId", "target", "auditCheckToActionsMapping", "clientRequestToken" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    },
                    target: {
                        shape: "Shv"
                    },
                    auditCheckToActionsMapping: {
                        shape: "Shz"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {}
                }
            }
        },
        StartDetectMitigationActionsTask: {
            http: {
                method: "PUT",
                requestUri: "/detect/mitigationactions/tasks/{taskId}"
            },
            input: {
                type: "structure",
                required: [ "taskId", "target", "actions", "clientRequestToken" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    },
                    target: {
                        shape: "Sjo"
                    },
                    actions: {
                        type: "list",
                        member: {}
                    },
                    violationEventOccurrenceRange: {
                        shape: "Sjr"
                    },
                    includeOnlyActiveViolations: {
                        type: "boolean"
                    },
                    includeSuppressedAlerts: {
                        type: "boolean"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {}
                }
            }
        },
        StartOnDemandAuditTask: {
            http: {
                requestUri: "/audit/tasks"
            },
            input: {
                type: "structure",
                required: [ "targetCheckNames" ],
                members: {
                    targetCheckNames: {
                        shape: "S9g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {}
                }
            }
        },
        StartThingRegistrationTask: {
            http: {
                requestUri: "/thing-registration-tasks"
            },
            input: {
                type: "structure",
                required: [ "templateBody", "inputFileBucket", "inputFileKey", "roleArn" ],
                members: {
                    templateBody: {},
                    inputFileBucket: {},
                    inputFileKey: {},
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {}
                }
            }
        },
        StopThingRegistrationTask: {
            http: {
                method: "PUT",
                requestUri: "/thing-registration-tasks/{taskId}/cancel"
            },
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestAuthorization: {
            http: {
                requestUri: "/test-authorization"
            },
            input: {
                type: "structure",
                required: [ "authInfos" ],
                members: {
                    principal: {},
                    cognitoIdentityPoolId: {},
                    authInfos: {
                        type: "list",
                        member: {
                            shape: "Sxu"
                        }
                    },
                    clientId: {
                        location: "querystring",
                        locationName: "clientId"
                    },
                    policyNamesToAdd: {
                        shape: "Sxy"
                    },
                    policyNamesToSkip: {
                        shape: "Sxy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    authResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                authInfo: {
                                    shape: "Sxu"
                                },
                                allowed: {
                                    type: "structure",
                                    members: {
                                        policies: {
                                            shape: "Sq0"
                                        }
                                    }
                                },
                                denied: {
                                    type: "structure",
                                    members: {
                                        implicitDeny: {
                                            type: "structure",
                                            members: {
                                                policies: {
                                                    shape: "Sq0"
                                                }
                                            }
                                        },
                                        explicitDeny: {
                                            type: "structure",
                                            members: {
                                                policies: {
                                                    shape: "Sq0"
                                                }
                                            }
                                        }
                                    }
                                },
                                authDecision: {},
                                missingContextValues: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        TestInvokeAuthorizer: {
            http: {
                requestUri: "/authorizer/{authorizerName}/test"
            },
            input: {
                type: "structure",
                required: [ "authorizerName" ],
                members: {
                    authorizerName: {
                        location: "uri",
                        locationName: "authorizerName"
                    },
                    token: {},
                    tokenSignature: {},
                    httpContext: {
                        type: "structure",
                        members: {
                            headers: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            queryString: {}
                        }
                    },
                    mqttContext: {
                        type: "structure",
                        members: {
                            username: {},
                            password: {
                                type: "blob"
                            },
                            clientId: {}
                        }
                    },
                    tlsContext: {
                        type: "structure",
                        members: {
                            serverName: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    isAuthenticated: {
                        type: "boolean"
                    },
                    principalId: {},
                    policyDocuments: {
                        type: "list",
                        member: {}
                    },
                    refreshAfterInSeconds: {
                        type: "integer"
                    },
                    disconnectAfterInSeconds: {
                        type: "integer"
                    }
                }
            }
        },
        TransferCertificate: {
            http: {
                method: "PATCH",
                requestUri: "/transfer-certificate/{certificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId", "targetAwsAccount" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "certificateId"
                    },
                    targetAwsAccount: {
                        location: "querystring",
                        locationName: "targetAwsAccount"
                    },
                    transferMessage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    transferredCertificateArn: {}
                }
            }
        },
        UntagResource: {
            http: {
                requestUri: "/untag"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAccountAuditConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/audit/configuration"
            },
            input: {
                type: "structure",
                members: {
                    roleArn: {},
                    auditNotificationTargetConfigurations: {
                        shape: "Sh3"
                    },
                    auditCheckConfigurations: {
                        shape: "Sh6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAuditSuppression: {
            http: {
                method: "PATCH",
                requestUri: "/audit/suppressions/update"
            },
            input: {
                type: "structure",
                required: [ "checkName", "resourceIdentifier" ],
                members: {
                    checkName: {},
                    resourceIdentifier: {
                        shape: "S1o"
                    },
                    expirationDate: {
                        type: "timestamp"
                    },
                    suppressIndefinitely: {
                        type: "boolean"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAuthorizer: {
            http: {
                method: "PUT",
                requestUri: "/authorizer/{authorizerName}"
            },
            input: {
                type: "structure",
                required: [ "authorizerName" ],
                members: {
                    authorizerName: {
                        location: "uri",
                        locationName: "authorizerName"
                    },
                    authorizerFunctionArn: {},
                    tokenKeyName: {},
                    tokenSigningPublicKeys: {
                        shape: "S2a"
                    },
                    status: {},
                    enableCachingForHttp: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    authorizerName: {},
                    authorizerArn: {}
                }
            }
        },
        UpdateBillingGroup: {
            http: {
                method: "PATCH",
                requestUri: "/billing-groups/{billingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "billingGroupName", "billingGroupProperties" ],
                members: {
                    billingGroupName: {
                        location: "uri",
                        locationName: "billingGroupName"
                    },
                    billingGroupProperties: {
                        shape: "S2n"
                    },
                    expectedVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    version: {
                        type: "long"
                    }
                }
            }
        },
        UpdateCACertificate: {
            http: {
                method: "PUT",
                requestUri: "/cacertificate/{caCertificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "caCertificateId"
                    },
                    newStatus: {
                        location: "querystring",
                        locationName: "newStatus"
                    },
                    newAutoRegistrationStatus: {
                        location: "querystring",
                        locationName: "newAutoRegistrationStatus"
                    },
                    registrationConfig: {
                        shape: "Sj7"
                    },
                    removeAutoRegistration: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateCertificate: {
            http: {
                method: "PUT",
                requestUri: "/certificates/{certificateId}"
            },
            input: {
                type: "structure",
                required: [ "certificateId", "newStatus" ],
                members: {
                    certificateId: {
                        location: "uri",
                        locationName: "certificateId"
                    },
                    newStatus: {
                        location: "querystring",
                        locationName: "newStatus"
                    }
                }
            }
        },
        UpdateCertificateProvider: {
            http: {
                method: "PUT",
                requestUri: "/certificate-providers/{certificateProviderName}"
            },
            input: {
                type: "structure",
                required: [ "certificateProviderName" ],
                members: {
                    certificateProviderName: {
                        location: "uri",
                        locationName: "certificateProviderName"
                    },
                    lambdaFunctionArn: {},
                    accountDefaultForOperations: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateProviderName: {},
                    certificateProviderArn: {}
                }
            }
        },
        UpdateCustomMetric: {
            http: {
                method: "PATCH",
                requestUri: "/custom-metric/{metricName}"
            },
            input: {
                type: "structure",
                required: [ "metricName", "displayName" ],
                members: {
                    metricName: {
                        location: "uri",
                        locationName: "metricName"
                    },
                    displayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricArn: {},
                    metricType: {},
                    displayName: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateDimension: {
            http: {
                method: "PATCH",
                requestUri: "/dimensions/{name}"
            },
            input: {
                type: "structure",
                required: [ "name", "stringValues" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    stringValues: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {},
                    type: {},
                    stringValues: {
                        shape: "S3c"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateDomainConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/domainConfigurations/{domainConfigurationName}"
            },
            input: {
                type: "structure",
                required: [ "domainConfigurationName" ],
                members: {
                    domainConfigurationName: {
                        location: "uri",
                        locationName: "domainConfigurationName"
                    },
                    authorizerConfig: {
                        shape: "S3l"
                    },
                    domainConfigurationStatus: {},
                    removeAuthorizerConfig: {
                        type: "boolean"
                    },
                    tlsConfig: {
                        shape: "S3o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domainConfigurationName: {},
                    domainConfigurationArn: {}
                }
            }
        },
        UpdateDynamicThingGroup: {
            http: {
                method: "PATCH",
                requestUri: "/dynamic-thing-groups/{thingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "thingGroupName", "thingGroupProperties" ],
                members: {
                    thingGroupName: {
                        location: "uri",
                        locationName: "thingGroupName"
                    },
                    thingGroupProperties: {
                        shape: "S3t"
                    },
                    expectedVersion: {
                        type: "long"
                    },
                    indexName: {},
                    queryString: {},
                    queryVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    version: {
                        type: "long"
                    }
                }
            }
        },
        UpdateEventConfigurations: {
            http: {
                method: "PATCH",
                requestUri: "/event-configurations"
            },
            input: {
                type: "structure",
                members: {
                    eventConfigurations: {
                        shape: "Skc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFleetMetric: {
            http: {
                method: "PATCH",
                requestUri: "/fleet-metric/{metricName}"
            },
            input: {
                type: "structure",
                required: [ "metricName", "indexName" ],
                members: {
                    metricName: {
                        location: "uri",
                        locationName: "metricName"
                    },
                    queryString: {},
                    aggregationType: {
                        shape: "S47"
                    },
                    period: {
                        type: "integer"
                    },
                    aggregationField: {},
                    description: {},
                    queryVersion: {},
                    indexName: {},
                    unit: {},
                    expectedVersion: {
                        type: "long"
                    }
                }
            }
        },
        UpdateIndexingConfiguration: {
            http: {
                requestUri: "/indexing/config"
            },
            input: {
                type: "structure",
                members: {
                    thingIndexingConfiguration: {
                        shape: "Snn"
                    },
                    thingGroupIndexingConfiguration: {
                        shape: "So3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateJob: {
            http: {
                method: "PATCH",
                requestUri: "/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    description: {},
                    presignedUrlConfig: {
                        shape: "S4k"
                    },
                    jobExecutionsRolloutConfig: {
                        shape: "S4n"
                    },
                    abortConfig: {
                        shape: "S4u"
                    },
                    timeoutConfig: {
                        shape: "S51"
                    },
                    namespaceId: {
                        location: "querystring",
                        locationName: "namespaceId"
                    },
                    jobExecutionsRetryConfig: {
                        shape: "S54"
                    }
                }
            }
        },
        UpdateMitigationAction: {
            http: {
                method: "PATCH",
                requestUri: "/mitigationactions/actions/{actionName}"
            },
            input: {
                type: "structure",
                required: [ "actionName" ],
                members: {
                    actionName: {
                        location: "uri",
                        locationName: "actionName"
                    },
                    roleArn: {},
                    actionParams: {
                        shape: "S5w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    actionArn: {},
                    actionId: {}
                }
            }
        },
        UpdatePackage: {
            http: {
                method: "PATCH",
                requestUri: "/packages/{packageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "packageName" ],
                members: {
                    packageName: {
                        location: "uri",
                        locationName: "packageName"
                    },
                    description: {
                        shape: "S88"
                    },
                    defaultVersionName: {},
                    unsetDefaultVersion: {
                        type: "boolean"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdatePackageConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/package-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    versionUpdateByJobsConfig: {
                        shape: "Soj"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdatePackageVersion: {
            http: {
                method: "PATCH",
                requestUri: "/packages/{packageName}/versions/{versionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "packageName", "versionName" ],
                members: {
                    packageName: {
                        location: "uri",
                        locationName: "packageName"
                    },
                    versionName: {
                        location: "uri",
                        locationName: "versionName"
                    },
                    description: {
                        shape: "S88"
                    },
                    attributes: {
                        shape: "S8e"
                    },
                    action: {},
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateProvisioningTemplate: {
            http: {
                method: "PATCH",
                requestUri: "/provisioning-templates/{templateName}"
            },
            input: {
                type: "structure",
                required: [ "templateName" ],
                members: {
                    templateName: {
                        location: "uri",
                        locationName: "templateName"
                    },
                    description: {},
                    enabled: {
                        type: "boolean"
                    },
                    defaultVersionId: {
                        type: "integer"
                    },
                    provisioningRoleArn: {},
                    preProvisioningHook: {
                        shape: "S90"
                    },
                    removePreProvisioningHook: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRoleAlias: {
            http: {
                method: "PUT",
                requestUri: "/role-aliases/{roleAlias}"
            },
            input: {
                type: "structure",
                required: [ "roleAlias" ],
                members: {
                    roleAlias: {
                        location: "uri",
                        locationName: "roleAlias"
                    },
                    roleArn: {},
                    credentialDurationSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    roleAlias: {},
                    roleAliasArn: {}
                }
            }
        },
        UpdateScheduledAudit: {
            http: {
                method: "PATCH",
                requestUri: "/audit/scheduledaudits/{scheduledAuditName}"
            },
            input: {
                type: "structure",
                required: [ "scheduledAuditName" ],
                members: {
                    frequency: {},
                    dayOfMonth: {},
                    dayOfWeek: {},
                    targetCheckNames: {
                        shape: "S9g"
                    },
                    scheduledAuditName: {
                        location: "uri",
                        locationName: "scheduledAuditName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    scheduledAuditArn: {}
                }
            }
        },
        UpdateSecurityProfile: {
            http: {
                method: "PATCH",
                requestUri: "/security-profiles/{securityProfileName}"
            },
            input: {
                type: "structure",
                required: [ "securityProfileName" ],
                members: {
                    securityProfileName: {
                        location: "uri",
                        locationName: "securityProfileName"
                    },
                    securityProfileDescription: {},
                    behaviors: {
                        shape: "S9m"
                    },
                    alertTargets: {
                        shape: "Sad"
                    },
                    additionalMetricsToRetain: {
                        shape: "Sah",
                        deprecated: true,
                        deprecatedMessage: "Use additionalMetricsToRetainV2."
                    },
                    additionalMetricsToRetainV2: {
                        shape: "Sai"
                    },
                    deleteBehaviors: {
                        type: "boolean"
                    },
                    deleteAlertTargets: {
                        type: "boolean"
                    },
                    deleteAdditionalMetricsToRetain: {
                        type: "boolean"
                    },
                    expectedVersion: {
                        location: "querystring",
                        locationName: "expectedVersion",
                        type: "long"
                    },
                    metricsExportConfig: {
                        shape: "Sak"
                    },
                    deleteMetricsExportConfig: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    securityProfileName: {},
                    securityProfileArn: {},
                    securityProfileDescription: {},
                    behaviors: {
                        shape: "S9m"
                    },
                    alertTargets: {
                        shape: "Sad"
                    },
                    additionalMetricsToRetain: {
                        shape: "Sah",
                        deprecated: true,
                        deprecatedMessage: "Use additionalMetricsToRetainV2."
                    },
                    additionalMetricsToRetainV2: {
                        shape: "Sai"
                    },
                    version: {
                        type: "long"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    lastModifiedDate: {
                        type: "timestamp"
                    },
                    metricsExportConfig: {
                        shape: "Sak"
                    }
                }
            }
        },
        UpdateStream: {
            http: {
                method: "PUT",
                requestUri: "/streams/{streamId}"
            },
            input: {
                type: "structure",
                required: [ "streamId" ],
                members: {
                    streamId: {
                        location: "uri",
                        locationName: "streamId"
                    },
                    description: {},
                    files: {
                        shape: "Saq"
                    },
                    roleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    streamId: {},
                    streamArn: {},
                    description: {},
                    streamVersion: {
                        type: "integer"
                    }
                }
            }
        },
        UpdateThing: {
            http: {
                method: "PATCH",
                requestUri: "/things/{thingName}"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    thingTypeName: {},
                    attributePayload: {
                        shape: "S3v"
                    },
                    expectedVersion: {
                        type: "long"
                    },
                    removeThingType: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateThingGroup: {
            http: {
                method: "PATCH",
                requestUri: "/thing-groups/{thingGroupName}"
            },
            input: {
                type: "structure",
                required: [ "thingGroupName", "thingGroupProperties" ],
                members: {
                    thingGroupName: {
                        location: "uri",
                        locationName: "thingGroupName"
                    },
                    thingGroupProperties: {
                        shape: "S3t"
                    },
                    expectedVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    version: {
                        type: "long"
                    }
                }
            }
        },
        UpdateThingGroupsForThing: {
            http: {
                method: "PUT",
                requestUri: "/thing-groups/updateThingGroupsForThing"
            },
            input: {
                type: "structure",
                members: {
                    thingName: {},
                    thingGroupsToAdd: {
                        shape: "S10k"
                    },
                    thingGroupsToRemove: {
                        shape: "S10k"
                    },
                    overrideDynamicGroups: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTopicRuleDestination: {
            http: {
                method: "PATCH",
                requestUri: "/destinations"
            },
            input: {
                type: "structure",
                required: [ "arn", "status" ],
                members: {
                    arn: {},
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ValidateSecurityProfileBehaviors: {
            http: {
                requestUri: "/security-profile-behaviors/validate"
            },
            input: {
                type: "structure",
                required: [ "behaviors" ],
                members: {
                    behaviors: {
                        shape: "S9m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    valid: {
                        type: "boolean"
                    },
                    validationErrors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        Sg: {
            type: "list",
            member: {}
        },
        S1e: {
            type: "map",
            key: {},
            value: {}
        },
        S1o: {
            type: "structure",
            members: {
                deviceCertificateId: {},
                caCertificateId: {},
                cognitoIdentityPoolId: {},
                clientId: {},
                policyVersionIdentifier: {
                    type: "structure",
                    members: {
                        policyName: {},
                        policyVersionId: {}
                    }
                },
                account: {},
                iamRoleArn: {},
                roleAliasArn: {},
                issuerCertificateIdentifier: {
                    type: "structure",
                    members: {
                        issuerCertificateSubject: {},
                        issuerId: {},
                        issuerCertificateSerialNumber: {}
                    }
                },
                deviceCertificateArn: {}
            }
        },
        S2a: {
            type: "map",
            key: {},
            value: {}
        },
        S2e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S2n: {
            type: "structure",
            members: {
                billingGroupDescription: {}
            }
        },
        S2y: {
            type: "list",
            member: {}
        },
        S3c: {
            type: "list",
            member: {}
        },
        S3l: {
            type: "structure",
            members: {
                defaultAuthorizerName: {},
                allowAuthorizerOverride: {
                    type: "boolean"
                }
            }
        },
        S3o: {
            type: "structure",
            members: {
                securityPolicy: {}
            }
        },
        S3t: {
            type: "structure",
            members: {
                thingGroupDescription: {},
                attributePayload: {
                    shape: "S3v"
                }
            }
        },
        S3v: {
            type: "structure",
            members: {
                attributes: {
                    shape: "S3w"
                },
                merge: {
                    type: "boolean"
                }
            }
        },
        S3w: {
            type: "map",
            key: {},
            value: {}
        },
        S47: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                values: {
                    type: "list",
                    member: {}
                }
            }
        },
        S4k: {
            type: "structure",
            members: {
                roleArn: {},
                expiresInSec: {
                    type: "long"
                }
            }
        },
        S4n: {
            type: "structure",
            members: {
                maximumPerMinute: {
                    type: "integer"
                },
                exponentialRate: {
                    type: "structure",
                    required: [ "baseRatePerMinute", "incrementFactor", "rateIncreaseCriteria" ],
                    members: {
                        baseRatePerMinute: {
                            type: "integer"
                        },
                        incrementFactor: {
                            type: "double"
                        },
                        rateIncreaseCriteria: {
                            type: "structure",
                            members: {
                                numberOfNotifiedThings: {
                                    type: "integer"
                                },
                                numberOfSucceededThings: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        S4u: {
            type: "structure",
            required: [ "criteriaList" ],
            members: {
                criteriaList: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "failureType", "action", "thresholdPercentage", "minNumberOfExecutedThings" ],
                        members: {
                            failureType: {},
                            action: {},
                            thresholdPercentage: {
                                type: "double"
                            },
                            minNumberOfExecutedThings: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                inProgressTimeoutInMinutes: {
                    type: "long"
                }
            }
        },
        S54: {
            type: "structure",
            required: [ "criteriaList" ],
            members: {
                criteriaList: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "failureType", "numberOfRetries" ],
                        members: {
                            failureType: {},
                            numberOfRetries: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S59: {
            type: "map",
            key: {},
            value: {}
        },
        S5c: {
            type: "structure",
            members: {
                startTime: {},
                endTime: {},
                endBehavior: {},
                maintenanceWindows: {
                    shape: "S5f"
                }
            }
        },
        S5f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "startTime", "durationInMinutes" ],
                members: {
                    startTime: {},
                    durationInMinutes: {
                        type: "integer"
                    }
                }
            }
        },
        S5j: {
            type: "list",
            member: {}
        },
        S5r: {
            type: "structure",
            members: {
                PublicKey: {},
                PrivateKey: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S5w: {
            type: "structure",
            members: {
                updateDeviceCertificateParams: {
                    type: "structure",
                    required: [ "action" ],
                    members: {
                        action: {}
                    }
                },
                updateCACertificateParams: {
                    type: "structure",
                    required: [ "action" ],
                    members: {
                        action: {}
                    }
                },
                addThingsToThingGroupParams: {
                    type: "structure",
                    required: [ "thingGroupNames" ],
                    members: {
                        thingGroupNames: {
                            type: "list",
                            member: {}
                        },
                        overrideDynamicGroups: {
                            type: "boolean"
                        }
                    }
                },
                replaceDefaultPolicyVersionParams: {
                    type: "structure",
                    required: [ "templateName" ],
                    members: {
                        templateName: {}
                    }
                },
                enableIoTLoggingParams: {
                    type: "structure",
                    required: [ "roleArnForLogging", "logLevel" ],
                    members: {
                        roleArnForLogging: {},
                        logLevel: {}
                    }
                },
                publishFindingToSnsParams: {
                    type: "structure",
                    required: [ "topicArn" ],
                    members: {
                        topicArn: {}
                    }
                }
            }
        },
        S6g: {
            type: "list",
            member: {}
        },
        S6i: {
            type: "list",
            member: {}
        },
        S6k: {
            type: "structure",
            members: {
                maximumPerMinute: {
                    type: "integer"
                },
                exponentialRate: {
                    type: "structure",
                    required: [ "baseRatePerMinute", "incrementFactor", "rateIncreaseCriteria" ],
                    members: {
                        baseRatePerMinute: {
                            type: "integer"
                        },
                        incrementFactor: {
                            type: "double"
                        },
                        rateIncreaseCriteria: {
                            type: "structure",
                            members: {
                                numberOfNotifiedThings: {
                                    type: "integer"
                                },
                                numberOfSucceededThings: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        S6r: {
            type: "structure",
            members: {
                expiresInSec: {
                    type: "long"
                }
            }
        },
        S72: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    fileName: {},
                    fileType: {
                        type: "integer"
                    },
                    fileVersion: {},
                    fileLocation: {
                        type: "structure",
                        members: {
                            stream: {
                                type: "structure",
                                members: {
                                    streamId: {},
                                    fileId: {
                                        type: "integer"
                                    }
                                }
                            },
                            s3Location: {
                                shape: "S7b"
                            }
                        }
                    },
                    codeSigning: {
                        type: "structure",
                        members: {
                            awsSignerJobId: {},
                            startSigningJobParameter: {
                                type: "structure",
                                members: {
                                    signingProfileParameter: {
                                        type: "structure",
                                        members: {
                                            certificateArn: {},
                                            platform: {},
                                            certificatePathOnDevice: {}
                                        }
                                    },
                                    signingProfileName: {},
                                    destination: {
                                        type: "structure",
                                        members: {
                                            s3Destination: {
                                                type: "structure",
                                                members: {
                                                    bucket: {},
                                                    prefix: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            customCodeSigning: {
                                type: "structure",
                                members: {
                                    signature: {
                                        type: "structure",
                                        members: {
                                            inlineDocument: {
                                                type: "blob"
                                            }
                                        }
                                    },
                                    certificateChain: {
                                        type: "structure",
                                        members: {
                                            certificateName: {},
                                            inlineDocument: {}
                                        }
                                    },
                                    hashAlgorithm: {},
                                    signatureAlgorithm: {}
                                }
                            }
                        }
                    },
                    attributes: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S7b: {
            type: "structure",
            members: {
                bucket: {},
                key: {},
                version: {}
            }
        },
        S80: {
            type: "map",
            key: {},
            value: {}
        },
        S88: {
            type: "string",
            sensitive: true
        },
        S89: {
            type: "map",
            key: {},
            value: {}
        },
        S8e: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S90: {
            type: "structure",
            required: [ "targetArn" ],
            members: {
                payloadVersion: {},
                targetArn: {}
            }
        },
        S9g: {
            type: "list",
            member: {}
        },
        S9m: {
            type: "list",
            member: {
                shape: "S9n"
            }
        },
        S9n: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                metric: {},
                metricDimension: {
                    shape: "S9q"
                },
                criteria: {
                    type: "structure",
                    members: {
                        comparisonOperator: {},
                        value: {
                            shape: "S9u"
                        },
                        durationSeconds: {
                            type: "integer"
                        },
                        consecutiveDatapointsToAlarm: {
                            type: "integer"
                        },
                        consecutiveDatapointsToClear: {
                            type: "integer"
                        },
                        statisticalThreshold: {
                            type: "structure",
                            members: {
                                statistic: {}
                            }
                        },
                        mlDetectionConfig: {
                            type: "structure",
                            required: [ "confidenceLevel" ],
                            members: {
                                confidenceLevel: {}
                            }
                        }
                    }
                },
                suppressAlerts: {
                    type: "boolean"
                },
                exportMetric: {
                    type: "boolean"
                }
            }
        },
        S9q: {
            type: "structure",
            required: [ "dimensionName" ],
            members: {
                dimensionName: {},
                operator: {}
            }
        },
        S9u: {
            type: "structure",
            members: {
                count: {
                    type: "long"
                },
                cidrs: {
                    type: "list",
                    member: {}
                },
                ports: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                },
                number: {
                    type: "double"
                },
                numbers: {
                    type: "list",
                    member: {
                        type: "double"
                    }
                },
                strings: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sad: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "alertTargetArn", "roleArn" ],
                members: {
                    alertTargetArn: {},
                    roleArn: {}
                }
            }
        },
        Sah: {
            type: "list",
            member: {}
        },
        Sai: {
            type: "list",
            member: {
                type: "structure",
                required: [ "metric" ],
                members: {
                    metric: {},
                    metricDimension: {
                        shape: "S9q"
                    },
                    exportMetric: {
                        type: "boolean"
                    }
                }
            }
        },
        Sak: {
            type: "structure",
            required: [ "mqttTopic", "roleArn" ],
            members: {
                mqttTopic: {},
                roleArn: {}
            }
        },
        Saq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    fileId: {
                        type: "integer"
                    },
                    s3Location: {
                        shape: "S7b"
                    }
                }
            }
        },
        Sb2: {
            type: "structure",
            members: {
                thingTypeDescription: {},
                searchableAttributes: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sba: {
            type: "structure",
            required: [ "sql", "actions" ],
            members: {
                sql: {},
                description: {},
                actions: {
                    shape: "Sbd"
                },
                ruleDisabled: {
                    type: "boolean"
                },
                awsIotSqlVersion: {},
                errorAction: {
                    shape: "Sbe"
                }
            }
        },
        Sbd: {
            type: "list",
            member: {
                shape: "Sbe"
            }
        },
        Sbe: {
            type: "structure",
            members: {
                dynamoDB: {
                    type: "structure",
                    required: [ "tableName", "roleArn", "hashKeyField", "hashKeyValue" ],
                    members: {
                        tableName: {},
                        roleArn: {},
                        operation: {},
                        hashKeyField: {},
                        hashKeyValue: {},
                        hashKeyType: {},
                        rangeKeyField: {},
                        rangeKeyValue: {},
                        rangeKeyType: {},
                        payloadField: {}
                    }
                },
                dynamoDBv2: {
                    type: "structure",
                    required: [ "roleArn", "putItem" ],
                    members: {
                        roleArn: {},
                        putItem: {
                            type: "structure",
                            required: [ "tableName" ],
                            members: {
                                tableName: {}
                            }
                        }
                    }
                },
                lambda: {
                    type: "structure",
                    required: [ "functionArn" ],
                    members: {
                        functionArn: {}
                    }
                },
                sns: {
                    type: "structure",
                    required: [ "targetArn", "roleArn" ],
                    members: {
                        targetArn: {},
                        roleArn: {},
                        messageFormat: {}
                    }
                },
                sqs: {
                    type: "structure",
                    required: [ "roleArn", "queueUrl" ],
                    members: {
                        roleArn: {},
                        queueUrl: {},
                        useBase64: {
                            type: "boolean"
                        }
                    }
                },
                kinesis: {
                    type: "structure",
                    required: [ "roleArn", "streamName" ],
                    members: {
                        roleArn: {},
                        streamName: {},
                        partitionKey: {}
                    }
                },
                republish: {
                    type: "structure",
                    required: [ "roleArn", "topic" ],
                    members: {
                        roleArn: {},
                        topic: {},
                        qos: {
                            type: "integer"
                        },
                        headers: {
                            type: "structure",
                            members: {
                                payloadFormatIndicator: {},
                                contentType: {},
                                responseTopic: {},
                                correlationData: {},
                                messageExpiry: {},
                                userProperties: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "key", "value" ],
                                        members: {
                                            key: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                s3: {
                    type: "structure",
                    required: [ "roleArn", "bucketName", "key" ],
                    members: {
                        roleArn: {},
                        bucketName: {},
                        key: {},
                        cannedAcl: {}
                    }
                },
                firehose: {
                    type: "structure",
                    required: [ "roleArn", "deliveryStreamName" ],
                    members: {
                        roleArn: {},
                        deliveryStreamName: {},
                        separator: {},
                        batchMode: {
                            type: "boolean"
                        }
                    }
                },
                cloudwatchMetric: {
                    type: "structure",
                    required: [ "roleArn", "metricNamespace", "metricName", "metricValue", "metricUnit" ],
                    members: {
                        roleArn: {},
                        metricNamespace: {},
                        metricName: {},
                        metricValue: {},
                        metricUnit: {},
                        metricTimestamp: {}
                    }
                },
                cloudwatchAlarm: {
                    type: "structure",
                    required: [ "roleArn", "alarmName", "stateReason", "stateValue" ],
                    members: {
                        roleArn: {},
                        alarmName: {},
                        stateReason: {},
                        stateValue: {}
                    }
                },
                cloudwatchLogs: {
                    type: "structure",
                    required: [ "roleArn", "logGroupName" ],
                    members: {
                        roleArn: {},
                        logGroupName: {},
                        batchMode: {
                            type: "boolean"
                        }
                    }
                },
                elasticsearch: {
                    type: "structure",
                    required: [ "roleArn", "endpoint", "index", "type", "id" ],
                    members: {
                        roleArn: {},
                        endpoint: {},
                        index: {},
                        type: {},
                        id: {}
                    }
                },
                salesforce: {
                    type: "structure",
                    required: [ "token", "url" ],
                    members: {
                        token: {},
                        url: {}
                    }
                },
                iotAnalytics: {
                    type: "structure",
                    members: {
                        channelArn: {},
                        channelName: {},
                        batchMode: {
                            type: "boolean"
                        },
                        roleArn: {}
                    }
                },
                iotEvents: {
                    type: "structure",
                    required: [ "inputName", "roleArn" ],
                    members: {
                        inputName: {},
                        messageId: {},
                        batchMode: {
                            type: "boolean"
                        },
                        roleArn: {}
                    }
                },
                iotSiteWise: {
                    type: "structure",
                    required: [ "putAssetPropertyValueEntries", "roleArn" ],
                    members: {
                        putAssetPropertyValueEntries: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "propertyValues" ],
                                members: {
                                    entryId: {},
                                    assetId: {},
                                    propertyId: {},
                                    propertyAlias: {},
                                    propertyValues: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "value", "timestamp" ],
                                            members: {
                                                value: {
                                                    type: "structure",
                                                    members: {
                                                        stringValue: {},
                                                        integerValue: {},
                                                        doubleValue: {},
                                                        booleanValue: {}
                                                    }
                                                },
                                                timestamp: {
                                                    type: "structure",
                                                    required: [ "timeInSeconds" ],
                                                    members: {
                                                        timeInSeconds: {},
                                                        offsetInNanos: {}
                                                    }
                                                },
                                                quality: {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        roleArn: {}
                    }
                },
                stepFunctions: {
                    type: "structure",
                    required: [ "stateMachineName", "roleArn" ],
                    members: {
                        executionNamePrefix: {},
                        stateMachineName: {},
                        roleArn: {}
                    }
                },
                timestream: {
                    type: "structure",
                    required: [ "roleArn", "databaseName", "tableName", "dimensions" ],
                    members: {
                        roleArn: {},
                        databaseName: {},
                        tableName: {},
                        dimensions: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "name", "value" ],
                                members: {
                                    name: {},
                                    value: {}
                                }
                            }
                        },
                        timestamp: {
                            type: "structure",
                            required: [ "value", "unit" ],
                            members: {
                                value: {},
                                unit: {}
                            }
                        }
                    }
                },
                http: {
                    type: "structure",
                    required: [ "url" ],
                    members: {
                        url: {},
                        confirmationUrl: {},
                        headers: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "key", "value" ],
                                members: {
                                    key: {},
                                    value: {}
                                }
                            }
                        },
                        auth: {
                            type: "structure",
                            members: {
                                sigv4: {
                                    type: "structure",
                                    required: [ "signingRegion", "serviceName", "roleArn" ],
                                    members: {
                                        signingRegion: {},
                                        serviceName: {},
                                        roleArn: {}
                                    }
                                }
                            }
                        }
                    }
                },
                kafka: {
                    type: "structure",
                    required: [ "destinationArn", "topic", "clientProperties" ],
                    members: {
                        destinationArn: {},
                        topic: {},
                        key: {},
                        partition: {},
                        clientProperties: {
                            type: "map",
                            key: {},
                            value: {}
                        },
                        headers: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "key", "value" ],
                                members: {
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                },
                openSearch: {
                    type: "structure",
                    required: [ "roleArn", "endpoint", "index", "type", "id" ],
                    members: {
                        roleArn: {},
                        endpoint: {},
                        index: {},
                        type: {},
                        id: {}
                    }
                },
                location: {
                    type: "structure",
                    required: [ "roleArn", "trackerName", "deviceId", "latitude", "longitude" ],
                    members: {
                        roleArn: {},
                        trackerName: {},
                        deviceId: {},
                        timestamp: {
                            type: "structure",
                            required: [ "value" ],
                            members: {
                                value: {},
                                unit: {}
                            }
                        },
                        latitude: {},
                        longitude: {}
                    }
                }
            }
        },
        Ser: {
            type: "list",
            member: {}
        },
        Set: {
            type: "list",
            member: {}
        },
        Sex: {
            type: "structure",
            members: {
                arn: {},
                status: {},
                createdAt: {
                    type: "timestamp"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                statusReason: {},
                httpUrlProperties: {
                    type: "structure",
                    members: {
                        confirmationUrl: {}
                    }
                },
                vpcProperties: {
                    type: "structure",
                    members: {
                        subnetIds: {
                            shape: "Ser"
                        },
                        securityGroups: {
                            shape: "Set"
                        },
                        vpcId: {},
                        roleArn: {}
                    }
                }
            }
        },
        Sh3: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    targetArn: {},
                    roleArn: {},
                    enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        Sh6: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        Shb: {
            type: "structure",
            members: {
                findingId: {},
                taskId: {},
                checkName: {},
                taskStartTime: {
                    type: "timestamp"
                },
                findingTime: {
                    type: "timestamp"
                },
                severity: {},
                nonCompliantResource: {
                    type: "structure",
                    members: {
                        resourceType: {},
                        resourceIdentifier: {
                            shape: "S1o"
                        },
                        additionalInfo: {
                            shape: "Shf"
                        }
                    }
                },
                relatedResources: {
                    shape: "Shg"
                },
                reasonForNonCompliance: {},
                reasonForNonComplianceCode: {},
                isSuppressed: {
                    type: "boolean"
                }
            }
        },
        Shf: {
            type: "map",
            key: {},
            value: {}
        },
        Shg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    resourceType: {},
                    resourceIdentifier: {
                        shape: "S1o"
                    },
                    additionalInfo: {
                        shape: "Shf"
                    }
                }
            }
        },
        Shv: {
            type: "structure",
            members: {
                auditTaskId: {},
                findingIds: {
                    type: "list",
                    member: {}
                },
                auditCheckToReasonCodeFilter: {
                    type: "map",
                    key: {},
                    value: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Shz: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        Si1: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    id: {},
                    roleArn: {},
                    actionParams: {
                        shape: "S5w"
                    }
                }
            }
        },
        Sis: {
            type: "structure",
            members: {
                authorizerName: {},
                authorizerArn: {},
                authorizerFunctionArn: {},
                tokenKeyName: {},
                tokenSigningPublicKeys: {
                    shape: "S2a"
                },
                status: {},
                creationDate: {
                    type: "timestamp"
                },
                lastModifiedDate: {
                    type: "timestamp"
                },
                signingDisabled: {
                    type: "boolean"
                },
                enableCachingForHttp: {
                    type: "boolean"
                }
            }
        },
        Sj5: {
            type: "structure",
            members: {
                notBefore: {
                    type: "timestamp"
                },
                notAfter: {
                    type: "timestamp"
                }
            }
        },
        Sj7: {
            type: "structure",
            members: {
                templateBody: {},
                roleArn: {},
                templateName: {}
            }
        },
        Sjm: {
            type: "structure",
            members: {
                taskId: {},
                taskStatus: {},
                taskStartTime: {
                    type: "timestamp"
                },
                taskEndTime: {
                    type: "timestamp"
                },
                target: {
                    shape: "Sjo"
                },
                violationEventOccurrenceRange: {
                    shape: "Sjr"
                },
                onlyActiveViolationsIncluded: {
                    type: "boolean"
                },
                suppressedAlertsIncluded: {
                    type: "boolean"
                },
                actionsDefinition: {
                    shape: "Si1"
                },
                taskStatistics: {
                    type: "structure",
                    members: {
                        actionsExecuted: {
                            type: "long"
                        },
                        actionsSkipped: {
                            type: "long"
                        },
                        actionsFailed: {
                            type: "long"
                        }
                    }
                }
            }
        },
        Sjo: {
            type: "structure",
            members: {
                violationIds: {
                    type: "list",
                    member: {}
                },
                securityProfileName: {},
                behaviorName: {}
            }
        },
        Sjr: {
            type: "structure",
            required: [ "startTime", "endTime" ],
            members: {
                startTime: {
                    type: "timestamp"
                },
                endTime: {
                    type: "timestamp"
                }
            }
        },
        Skc: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        Sli: {
            type: "list",
            member: {}
        },
        Smb: {
            type: "list",
            member: {
                shape: "Smc"
            }
        },
        Smc: {
            type: "structure",
            members: {
                groupName: {},
                groupArn: {}
            }
        },
        Smo: {
            type: "structure",
            members: {
                deprecated: {
                    type: "boolean"
                },
                deprecationDate: {
                    type: "timestamp"
                },
                creationDate: {
                    type: "timestamp"
                }
            }
        },
        Snn: {
            type: "structure",
            required: [ "thingIndexingMode" ],
            members: {
                thingIndexingMode: {},
                thingConnectivityIndexingMode: {},
                deviceDefenderIndexingMode: {},
                namedShadowIndexingMode: {},
                managedFields: {
                    shape: "Sns"
                },
                customFields: {
                    shape: "Sns"
                },
                filter: {
                    type: "structure",
                    members: {
                        namedShadowNames: {
                            type: "list",
                            member: {}
                        },
                        geoLocations: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    name: {},
                                    order: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        Sns: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    type: {}
                }
            }
        },
        So3: {
            type: "structure",
            required: [ "thingGroupIndexingMode" ],
            members: {
                thingGroupIndexingMode: {},
                managedFields: {
                    shape: "Sns"
                },
                customFields: {
                    shape: "Sns"
                }
            }
        },
        Soj: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                },
                roleArn: {}
            }
        },
        Spt: {
            type: "structure",
            members: {
                confidenceLevel: {}
            }
        },
        Sq0: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    policyName: {},
                    policyArn: {}
                }
            }
        },
        Sr6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    certificateArn: {},
                    certificateId: {},
                    status: {},
                    certificateMode: {},
                    creationDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        Ss6: {
            type: "structure",
            members: {
                status: {},
                queuedAt: {
                    type: "timestamp"
                },
                startedAt: {
                    type: "timestamp"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                executionNumber: {
                    type: "long"
                },
                retryAttempt: {
                    type: "integer"
                }
            }
        },
        Sth: {
            type: "list",
            member: {}
        },
        Str: {
            type: "list",
            member: {}
        },
        Suc: {
            type: "structure",
            required: [ "name", "arn" ],
            members: {
                name: {},
                arn: {}
            }
        },
        Suh: {
            type: "structure",
            required: [ "arn" ],
            members: {
                arn: {}
            }
        },
        Sw5: {
            type: "structure",
            required: [ "targetType" ],
            members: {
                targetType: {},
                targetName: {}
            }
        },
        Sx1: {
            type: "list",
            member: {}
        },
        Sxu: {
            type: "structure",
            required: [ "resources" ],
            members: {
                actionType: {},
                resources: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sxy: {
            type: "list",
            member: {}
        },
        S10k: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetBehaviorModelTrainingSummaries: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "summaries"
        },
        ListActiveViolations: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "activeViolations"
        },
        ListAttachedPolicies: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "policies"
        },
        ListAuditFindings: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "findings"
        },
        ListAuditMitigationActionsExecutions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "actionsExecutions"
        },
        ListAuditMitigationActionsTasks: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "tasks"
        },
        ListAuditSuppressions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "suppressions"
        },
        ListAuditTasks: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "tasks"
        },
        ListAuthorizers: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "authorizers"
        },
        ListBillingGroups: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "billingGroups"
        },
        ListCACertificates: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "certificates"
        },
        ListCertificates: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "certificates"
        },
        ListCertificatesByCA: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "certificates"
        },
        ListCustomMetrics: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "metricNames"
        },
        ListDetectMitigationActionsExecutions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "actionsExecutions"
        },
        ListDetectMitigationActionsTasks: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "tasks"
        },
        ListDimensions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "dimensionNames"
        },
        ListDomainConfigurations: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "domainConfigurations"
        },
        ListFleetMetrics: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "fleetMetrics"
        },
        ListIndices: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "indexNames"
        },
        ListJobExecutionsForJob: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "executionSummaries"
        },
        ListJobExecutionsForThing: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "executionSummaries"
        },
        ListJobTemplates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "jobTemplates"
        },
        ListJobs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "jobs"
        },
        ListManagedJobTemplates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "managedJobTemplates"
        },
        ListMetricValues: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "metricDatumList"
        },
        ListMitigationActions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "actionIdentifiers"
        },
        ListOTAUpdates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "otaUpdates"
        },
        ListOutgoingCertificates: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "outgoingCertificates"
        },
        ListPackageVersions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "packageVersionSummaries"
        },
        ListPackages: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "packageSummaries"
        },
        ListPolicies: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "policies"
        },
        ListPolicyPrincipals: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "principals"
        },
        ListPrincipalPolicies: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "policies"
        },
        ListPrincipalThings: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "things"
        },
        ListProvisioningTemplateVersions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "versions"
        },
        ListProvisioningTemplates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "templates"
        },
        ListRelatedResourcesForAuditFinding: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "relatedResources"
        },
        ListRoleAliases: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "roleAliases"
        },
        ListScheduledAudits: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "scheduledAudits"
        },
        ListSecurityProfiles: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "securityProfileIdentifiers"
        },
        ListSecurityProfilesForTarget: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "securityProfileTargetMappings"
        },
        ListStreams: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "streams"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "tags"
        },
        ListTargetsForPolicy: {
            input_token: "marker",
            limit_key: "pageSize",
            output_token: "nextMarker",
            result_key: "targets"
        },
        ListTargetsForSecurityProfile: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "securityProfileTargets"
        },
        ListThingGroups: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "thingGroups"
        },
        ListThingGroupsForThing: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "thingGroups"
        },
        ListThingPrincipals: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "principals"
        },
        ListThingRegistrationTaskReports: {
            input_token: "nextToken",
            limit_key: "maxResults",
            non_aggregate_keys: [ "reportType" ],
            output_token: "nextToken",
            result_key: "resourceLinks"
        },
        ListThingRegistrationTasks: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "taskIds"
        },
        ListThingTypes: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "thingTypes"
        },
        ListThings: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "things"
        },
        ListThingsInBillingGroup: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "things"
        },
        ListThingsInThingGroup: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "things"
        },
        ListTopicRuleDestinations: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "destinationSummaries"
        },
        ListTopicRules: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "rules"
        },
        ListV2LoggingLevels: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "logTargetConfigurations"
        },
        ListViolationEvents: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "violationEvents"
        }
    }
};

AWS.apiLoader.services["iotdata"] = {};

AWS.IotData = AWS.Service.defineService("iotdata", [ "2015-05-28" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    105: [ function(require, module, exports) {
        var AWS = require("../core");
        var blobPayloadOutputOps = [ "deleteThingShadow", "getThingShadow", "updateThingShadow" ];
        AWS.util.update(AWS.IotData.prototype, {
            validateService: function validateService() {
                if (!this.config.endpoint || this.config.endpoint.indexOf("{") >= 0) {
                    var msg = "AWS.IotData requires an explicit " + "`endpoint' configuration option.";
                    throw AWS.util.error(new Error(), {
                        name: "InvalidEndpoint",
                        message: msg
                    });
                }
            },
            setupRequestListeners: function setupRequestListeners(request) {
                request.addListener("validateResponse", this.validateResponseBody);
                if (blobPayloadOutputOps.indexOf(request.operation) > -1) {
                    request.addListener("extractData", AWS.util.convertPayloadToString);
                }
            },
            validateResponseBody: function validateResponseBody(resp) {
                var body = resp.httpResponse.body.toString() || "{}";
                var bodyCheck = body.trim();
                if (!bodyCheck || bodyCheck.charAt(0) !== "{") {
                    resp.httpResponse.body = "";
                }
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 105 ]);

AWS.apiLoader.services["iotdata"]["2015-05-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-05-28",
        endpointPrefix: "data-ats.iot",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Data Plane",
        serviceId: "IoT Data Plane",
        signatureVersion: "v4",
        signingName: "iotdata",
        uid: "iot-data-2015-05-28"
    },
    operations: {
        DeleteThingShadow: {
            http: {
                method: "DELETE",
                requestUri: "/things/{thingName}/shadow"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    shadowName: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "payload" ],
                members: {
                    payload: {
                        type: "blob"
                    }
                },
                payload: "payload"
            }
        },
        GetRetainedMessage: {
            http: {
                method: "GET",
                requestUri: "/retainedMessage/{topic}"
            },
            input: {
                type: "structure",
                required: [ "topic" ],
                members: {
                    topic: {
                        location: "uri",
                        locationName: "topic"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    topic: {},
                    payload: {
                        type: "blob"
                    },
                    qos: {
                        type: "integer"
                    },
                    lastModifiedTime: {
                        type: "long"
                    },
                    userProperties: {
                        type: "blob"
                    }
                }
            }
        },
        GetThingShadow: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}/shadow"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    shadowName: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    payload: {
                        type: "blob"
                    }
                },
                payload: "payload"
            }
        },
        ListNamedShadowsForThing: {
            http: {
                method: "GET",
                requestUri: "/api/things/shadow/ListNamedShadowsForThing/{thingName}"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    pageSize: {
                        location: "querystring",
                        locationName: "pageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    results: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    timestamp: {
                        type: "long"
                    }
                }
            }
        },
        ListRetainedMessages: {
            http: {
                method: "GET",
                requestUri: "/retainedMessage"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    retainedTopics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                topic: {},
                                payloadSize: {
                                    type: "long"
                                },
                                qos: {
                                    type: "integer"
                                },
                                lastModifiedTime: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        Publish: {
            http: {
                requestUri: "/topics/{topic}"
            },
            input: {
                type: "structure",
                required: [ "topic" ],
                members: {
                    topic: {
                        location: "uri",
                        locationName: "topic"
                    },
                    qos: {
                        location: "querystring",
                        locationName: "qos",
                        type: "integer"
                    },
                    retain: {
                        location: "querystring",
                        locationName: "retain",
                        type: "boolean"
                    },
                    payload: {
                        type: "blob"
                    },
                    userProperties: {
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-mqtt5-user-properties"
                    },
                    payloadFormatIndicator: {
                        location: "header",
                        locationName: "x-amz-mqtt5-payload-format-indicator"
                    },
                    contentType: {
                        location: "querystring",
                        locationName: "contentType"
                    },
                    responseTopic: {
                        location: "querystring",
                        locationName: "responseTopic"
                    },
                    correlationData: {
                        location: "header",
                        locationName: "x-amz-mqtt5-correlation-data"
                    },
                    messageExpiry: {
                        location: "querystring",
                        locationName: "messageExpiry",
                        type: "long"
                    }
                },
                payload: "payload"
            }
        },
        UpdateThingShadow: {
            http: {
                requestUri: "/things/{thingName}/shadow"
            },
            input: {
                type: "structure",
                required: [ "thingName", "payload" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    shadowName: {
                        location: "querystring",
                        locationName: "name"
                    },
                    payload: {
                        type: "blob"
                    }
                },
                payload: "payload"
            },
            output: {
                type: "structure",
                members: {
                    payload: {
                        type: "blob"
                    }
                },
                payload: "payload"
            }
        }
    },
    shapes: {},
    paginators: {
        ListRetainedMessages: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "retainedTopics"
        }
    }
};

AWS.apiLoader.services["kinesis"] = {};

AWS.Kinesis = AWS.Service.defineService("kinesis", [ "2013-12-02" ]);

AWS.apiLoader.services["kinesis"]["2013-12-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2013-12-02",
        endpointPrefix: "kinesis",
        jsonVersion: "1.1",
        protocol: "json",
        protocolSettings: {
            h2: "eventstream"
        },
        serviceAbbreviation: "Kinesis",
        serviceFullName: "Amazon Kinesis",
        serviceId: "Kinesis",
        signatureVersion: "v4",
        targetPrefix: "Kinesis_20131202",
        uid: "kinesis-2013-12-02"
    },
    operations: {
        AddTagsToStream: {
            input: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    StreamName: {},
                    Tags: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        CreateStream: {
            input: {
                type: "structure",
                required: [ "StreamName" ],
                members: {
                    StreamName: {},
                    ShardCount: {
                        type: "integer"
                    },
                    StreamModeDetails: {
                        shape: "S9"
                    }
                }
            }
        },
        DecreaseStreamRetentionPeriod: {
            input: {
                type: "structure",
                required: [ "RetentionPeriodHours" ],
                members: {
                    StreamName: {},
                    RetentionPeriodHours: {
                        type: "integer"
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        contextParam: {
                            name: "ResourceARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        DeleteStream: {
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    EnforceConsumerDeletion: {
                        type: "boolean"
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        DeregisterStreamConsumer: {
            input: {
                type: "structure",
                members: {
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    },
                    ConsumerName: {},
                    ConsumerARN: {
                        contextParam: {
                            name: "ConsumerARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        DescribeLimits: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "ShardLimit", "OpenShardCount", "OnDemandStreamCount", "OnDemandStreamCountLimit" ],
                members: {
                    ShardLimit: {
                        type: "integer"
                    },
                    OpenShardCount: {
                        type: "integer"
                    },
                    OnDemandStreamCount: {
                        type: "integer"
                    },
                    OnDemandStreamCountLimit: {
                        type: "integer"
                    }
                }
            }
        },
        DescribeStream: {
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    Limit: {
                        type: "integer"
                    },
                    ExclusiveStartShardId: {},
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StreamDescription" ],
                members: {
                    StreamDescription: {
                        type: "structure",
                        required: [ "StreamName", "StreamARN", "StreamStatus", "Shards", "HasMoreShards", "RetentionPeriodHours", "StreamCreationTimestamp", "EnhancedMonitoring" ],
                        members: {
                            StreamName: {},
                            StreamARN: {},
                            StreamStatus: {},
                            StreamModeDetails: {
                                shape: "S9"
                            },
                            Shards: {
                                shape: "Sv"
                            },
                            HasMoreShards: {
                                type: "boolean"
                            },
                            RetentionPeriodHours: {
                                type: "integer"
                            },
                            StreamCreationTimestamp: {
                                type: "timestamp"
                            },
                            EnhancedMonitoring: {
                                shape: "S12"
                            },
                            EncryptionType: {},
                            KeyId: {}
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        DescribeStreamConsumer: {
            input: {
                type: "structure",
                members: {
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    },
                    ConsumerName: {},
                    ConsumerARN: {
                        contextParam: {
                            name: "ConsumerARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ConsumerDescription" ],
                members: {
                    ConsumerDescription: {
                        type: "structure",
                        required: [ "ConsumerName", "ConsumerARN", "ConsumerStatus", "ConsumerCreationTimestamp", "StreamARN" ],
                        members: {
                            ConsumerName: {},
                            ConsumerARN: {},
                            ConsumerStatus: {},
                            ConsumerCreationTimestamp: {
                                type: "timestamp"
                            },
                            StreamARN: {}
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        DescribeStreamSummary: {
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StreamDescriptionSummary" ],
                members: {
                    StreamDescriptionSummary: {
                        type: "structure",
                        required: [ "StreamName", "StreamARN", "StreamStatus", "RetentionPeriodHours", "StreamCreationTimestamp", "EnhancedMonitoring", "OpenShardCount" ],
                        members: {
                            StreamName: {},
                            StreamARN: {},
                            StreamStatus: {},
                            StreamModeDetails: {
                                shape: "S9"
                            },
                            RetentionPeriodHours: {
                                type: "integer"
                            },
                            StreamCreationTimestamp: {
                                type: "timestamp"
                            },
                            EnhancedMonitoring: {
                                shape: "S12"
                            },
                            EncryptionType: {},
                            KeyId: {},
                            OpenShardCount: {
                                type: "integer"
                            },
                            ConsumerCount: {
                                type: "integer"
                            }
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        DisableEnhancedMonitoring: {
            input: {
                type: "structure",
                required: [ "ShardLevelMetrics" ],
                members: {
                    StreamName: {},
                    ShardLevelMetrics: {
                        shape: "S14"
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                shape: "S1h"
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        EnableEnhancedMonitoring: {
            input: {
                type: "structure",
                required: [ "ShardLevelMetrics" ],
                members: {
                    StreamName: {},
                    ShardLevelMetrics: {
                        shape: "S14"
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                shape: "S1h"
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        GetRecords: {
            input: {
                type: "structure",
                required: [ "ShardIterator" ],
                members: {
                    ShardIterator: {},
                    Limit: {
                        type: "integer"
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Records" ],
                members: {
                    Records: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SequenceNumber", "Data", "PartitionKey" ],
                            members: {
                                SequenceNumber: {},
                                ApproximateArrivalTimestamp: {
                                    type: "timestamp"
                                },
                                Data: {
                                    type: "blob"
                                },
                                PartitionKey: {},
                                EncryptionType: {}
                            }
                        }
                    },
                    NextShardIterator: {},
                    MillisBehindLatest: {
                        type: "long"
                    },
                    ChildShards: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ShardId", "ParentShards", "HashKeyRange" ],
                            members: {
                                ShardId: {},
                                ParentShards: {
                                    type: "list",
                                    member: {}
                                },
                                HashKeyRange: {
                                    shape: "Sx"
                                }
                            }
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "data"
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        contextParam: {
                            name: "ResourceARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Policy" ],
                members: {
                    Policy: {}
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        GetShardIterator: {
            input: {
                type: "structure",
                required: [ "ShardId", "ShardIteratorType" ],
                members: {
                    StreamName: {},
                    ShardId: {},
                    ShardIteratorType: {},
                    StartingSequenceNumber: {},
                    Timestamp: {
                        type: "timestamp"
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ShardIterator: {}
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "data"
                }
            }
        },
        IncreaseStreamRetentionPeriod: {
            input: {
                type: "structure",
                required: [ "RetentionPeriodHours" ],
                members: {
                    StreamName: {},
                    RetentionPeriodHours: {
                        type: "integer"
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        ListShards: {
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    NextToken: {},
                    ExclusiveStartShardId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StreamCreationTimestamp: {
                        type: "timestamp"
                    },
                    ShardFilter: {
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Type: {},
                            ShardId: {},
                            Timestamp: {
                                type: "timestamp"
                            }
                        }
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Shards: {
                        shape: "Sv"
                    },
                    NextToken: {}
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        ListStreamConsumers: {
            input: {
                type: "structure",
                required: [ "StreamARN" ],
                members: {
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StreamCreationTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Consumers: {
                        type: "list",
                        member: {
                            shape: "S2c"
                        }
                    },
                    NextToken: {}
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        ListStreams: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    ExclusiveStartStreamName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "StreamNames", "HasMoreStreams" ],
                members: {
                    StreamNames: {
                        type: "list",
                        member: {}
                    },
                    HasMoreStreams: {
                        type: "boolean"
                    },
                    NextToken: {},
                    StreamSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StreamName", "StreamARN", "StreamStatus" ],
                            members: {
                                StreamName: {},
                                StreamARN: {},
                                StreamStatus: {},
                                StreamModeDetails: {
                                    shape: "S9"
                                },
                                StreamCreationTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForStream: {
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    ExclusiveStartTagKey: {},
                    Limit: {
                        type: "integer"
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Tags", "HasMoreTags" ],
                members: {
                    Tags: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key" ],
                            members: {
                                Key: {},
                                Value: {}
                            }
                        }
                    },
                    HasMoreTags: {
                        type: "boolean"
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        MergeShards: {
            input: {
                type: "structure",
                required: [ "ShardToMerge", "AdjacentShardToMerge" ],
                members: {
                    StreamName: {},
                    ShardToMerge: {},
                    AdjacentShardToMerge: {},
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        PutRecord: {
            input: {
                type: "structure",
                required: [ "Data", "PartitionKey" ],
                members: {
                    StreamName: {},
                    Data: {
                        type: "blob"
                    },
                    PartitionKey: {},
                    ExplicitHashKey: {},
                    SequenceNumberForOrdering: {},
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ShardId", "SequenceNumber" ],
                members: {
                    ShardId: {},
                    SequenceNumber: {},
                    EncryptionType: {}
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "data"
                }
            }
        },
        PutRecords: {
            input: {
                type: "structure",
                required: [ "Records" ],
                members: {
                    Records: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Data", "PartitionKey" ],
                            members: {
                                Data: {
                                    type: "blob"
                                },
                                ExplicitHashKey: {},
                                PartitionKey: {}
                            }
                        }
                    },
                    StreamName: {},
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Records" ],
                members: {
                    FailedRecordCount: {
                        type: "integer"
                    },
                    Records: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SequenceNumber: {},
                                ShardId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    EncryptionType: {}
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "data"
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Policy" ],
                members: {
                    ResourceARN: {
                        contextParam: {
                            name: "ResourceARN"
                        }
                    },
                    Policy: {}
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        RegisterStreamConsumer: {
            input: {
                type: "structure",
                required: [ "StreamARN", "ConsumerName" ],
                members: {
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    },
                    ConsumerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Consumer" ],
                members: {
                    Consumer: {
                        shape: "S2c"
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        RemoveTagsFromStream: {
            input: {
                type: "structure",
                required: [ "TagKeys" ],
                members: {
                    StreamName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    },
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        SplitShard: {
            input: {
                type: "structure",
                required: [ "ShardToSplit", "NewStartingHashKey" ],
                members: {
                    StreamName: {},
                    ShardToSplit: {},
                    NewStartingHashKey: {},
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        StartStreamEncryption: {
            input: {
                type: "structure",
                required: [ "EncryptionType", "KeyId" ],
                members: {
                    StreamName: {},
                    EncryptionType: {},
                    KeyId: {},
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        StopStreamEncryption: {
            input: {
                type: "structure",
                required: [ "EncryptionType", "KeyId" ],
                members: {
                    StreamName: {},
                    EncryptionType: {},
                    KeyId: {},
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        UpdateShardCount: {
            input: {
                type: "structure",
                required: [ "TargetShardCount", "ScalingType" ],
                members: {
                    StreamName: {},
                    TargetShardCount: {
                        type: "integer"
                    },
                    ScalingType: {},
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamName: {},
                    CurrentShardCount: {
                        type: "integer"
                    },
                    TargetShardCount: {
                        type: "integer"
                    },
                    StreamARN: {}
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        },
        UpdateStreamMode: {
            input: {
                type: "structure",
                required: [ "StreamARN", "StreamModeDetails" ],
                members: {
                    StreamARN: {
                        contextParam: {
                            name: "StreamARN"
                        }
                    },
                    StreamModeDetails: {
                        shape: "S9"
                    }
                }
            },
            staticContextParams: {
                OperationType: {
                    value: "control"
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "structure",
            required: [ "StreamMode" ],
            members: {
                StreamMode: {}
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ShardId", "HashKeyRange", "SequenceNumberRange" ],
                members: {
                    ShardId: {},
                    ParentShardId: {},
                    AdjacentParentShardId: {},
                    HashKeyRange: {
                        shape: "Sx"
                    },
                    SequenceNumberRange: {
                        type: "structure",
                        required: [ "StartingSequenceNumber" ],
                        members: {
                            StartingSequenceNumber: {},
                            EndingSequenceNumber: {}
                        }
                    }
                }
            }
        },
        Sx: {
            type: "structure",
            required: [ "StartingHashKey", "EndingHashKey" ],
            members: {
                StartingHashKey: {},
                EndingHashKey: {}
            }
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ShardLevelMetrics: {
                        shape: "S14"
                    }
                }
            }
        },
        S14: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "structure",
            members: {
                StreamName: {},
                CurrentShardLevelMetrics: {
                    shape: "S14"
                },
                DesiredShardLevelMetrics: {
                    shape: "S14"
                },
                StreamARN: {}
            }
        },
        S2c: {
            type: "structure",
            required: [ "ConsumerName", "ConsumerARN", "ConsumerStatus", "ConsumerCreationTimestamp" ],
            members: {
                ConsumerName: {},
                ConsumerARN: {},
                ConsumerStatus: {},
                ConsumerCreationTimestamp: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        DescribeStream: {
            input_token: "ExclusiveStartShardId",
            limit_key: "Limit",
            more_results: "StreamDescription.HasMoreShards",
            output_token: "StreamDescription.Shards[-1].ShardId",
            result_key: "StreamDescription.Shards"
        },
        ListStreamConsumers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListStreams: {
            input_token: "NextToken",
            limit_key: "Limit",
            more_results: "HasMoreStreams",
            output_token: "NextToken",
            result_key: [ "StreamNames", "StreamSummaries" ]
        }
    },
    waiters: {
        StreamExists: {
            delay: 10,
            operation: "DescribeStream",
            maxAttempts: 18,
            acceptors: [ {
                expected: "ACTIVE",
                matcher: "path",
                state: "success",
                argument: "StreamDescription.StreamStatus"
            } ]
        },
        StreamNotExists: {
            delay: 10,
            operation: "DescribeStream",
            maxAttempts: 18,
            acceptors: [ {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            } ]
        }
    }
};

AWS.apiLoader.services["kinesisanalytics"] = {};

AWS.KinesisAnalytics = AWS.Service.defineService("kinesisanalytics", [ "2015-08-14" ]);

AWS.apiLoader.services["kinesisanalytics"]["2015-08-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-08-14",
        endpointPrefix: "kinesisanalytics",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Kinesis Analytics",
        serviceFullName: "Amazon Kinesis Analytics",
        serviceId: "Kinesis Analytics",
        signatureVersion: "v4",
        targetPrefix: "KinesisAnalytics_20150814",
        uid: "kinesisanalytics-2015-08-14"
    },
    operations: {
        AddApplicationCloudWatchLoggingOption: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "CloudWatchLoggingOption" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOption: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AddApplicationInput: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "Input" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    Input: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AddApplicationInputProcessingConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "InputId", "InputProcessingConfiguration" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    InputId: {},
                    InputProcessingConfiguration: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AddApplicationOutput: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "Output" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    Output: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AddApplicationReferenceDataSource: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "ReferenceDataSource" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    ReferenceDataSource: {
                        type: "structure",
                        required: [ "TableName", "ReferenceSchema" ],
                        members: {
                            TableName: {},
                            S3ReferenceDataSource: {
                                type: "structure",
                                required: [ "BucketARN", "FileKey", "ReferenceRoleARN" ],
                                members: {
                                    BucketARN: {},
                                    FileKey: {},
                                    ReferenceRoleARN: {}
                                }
                            },
                            ReferenceSchema: {
                                shape: "Si"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    ApplicationDescription: {},
                    Inputs: {
                        type: "list",
                        member: {
                            shape: "S9"
                        }
                    },
                    Outputs: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    CloudWatchLoggingOptions: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    ApplicationCode: {},
                    Tags: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationSummary" ],
                members: {
                    ApplicationSummary: {
                        shape: "S1q"
                    }
                }
            }
        },
        DeleteApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CreateTimestamp" ],
                members: {
                    ApplicationName: {},
                    CreateTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplicationCloudWatchLoggingOption: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "CloudWatchLoggingOptionId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOptionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplicationInputProcessingConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "InputId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    InputId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplicationOutput: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "OutputId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    OutputId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplicationReferenceDataSource: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "ReferenceId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    ReferenceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationDetail" ],
                members: {
                    ApplicationDetail: {
                        type: "structure",
                        required: [ "ApplicationName", "ApplicationARN", "ApplicationStatus", "ApplicationVersionId" ],
                        members: {
                            ApplicationName: {},
                            ApplicationDescription: {},
                            ApplicationARN: {},
                            ApplicationStatus: {},
                            CreateTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdateTimestamp: {
                                type: "timestamp"
                            },
                            InputDescriptions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        InputId: {},
                                        NamePrefix: {},
                                        InAppStreamNames: {
                                            type: "list",
                                            member: {}
                                        },
                                        InputProcessingConfigurationDescription: {
                                            type: "structure",
                                            members: {
                                                InputLambdaProcessorDescription: {
                                                    type: "structure",
                                                    members: {
                                                        ResourceARN: {},
                                                        RoleARN: {}
                                                    }
                                                }
                                            }
                                        },
                                        KinesisStreamsInputDescription: {
                                            type: "structure",
                                            members: {
                                                ResourceARN: {},
                                                RoleARN: {}
                                            }
                                        },
                                        KinesisFirehoseInputDescription: {
                                            type: "structure",
                                            members: {
                                                ResourceARN: {},
                                                RoleARN: {}
                                            }
                                        },
                                        InputSchema: {
                                            shape: "Si"
                                        },
                                        InputParallelism: {
                                            shape: "Sg"
                                        },
                                        InputStartingPositionConfiguration: {
                                            shape: "S2d"
                                        }
                                    }
                                }
                            },
                            OutputDescriptions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        OutputId: {},
                                        Name: {},
                                        KinesisStreamsOutputDescription: {
                                            type: "structure",
                                            members: {
                                                ResourceARN: {},
                                                RoleARN: {}
                                            }
                                        },
                                        KinesisFirehoseOutputDescription: {
                                            type: "structure",
                                            members: {
                                                ResourceARN: {},
                                                RoleARN: {}
                                            }
                                        },
                                        LambdaOutputDescription: {
                                            type: "structure",
                                            members: {
                                                ResourceARN: {},
                                                RoleARN: {}
                                            }
                                        },
                                        DestinationSchema: {
                                            shape: "S16"
                                        }
                                    }
                                }
                            },
                            ReferenceDataSourceDescriptions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "ReferenceId", "TableName", "S3ReferenceDataSourceDescription" ],
                                    members: {
                                        ReferenceId: {},
                                        TableName: {},
                                        S3ReferenceDataSourceDescription: {
                                            type: "structure",
                                            required: [ "BucketARN", "FileKey", "ReferenceRoleARN" ],
                                            members: {
                                                BucketARN: {},
                                                FileKey: {},
                                                ReferenceRoleARN: {}
                                            }
                                        },
                                        ReferenceSchema: {
                                            shape: "Si"
                                        }
                                    }
                                }
                            },
                            CloudWatchLoggingOptionDescriptions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "LogStreamARN", "RoleARN" ],
                                    members: {
                                        CloudWatchLoggingOptionId: {},
                                        LogStreamARN: {},
                                        RoleARN: {}
                                    }
                                }
                            },
                            ApplicationCode: {},
                            ApplicationVersionId: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        DiscoverInputSchema: {
            input: {
                type: "structure",
                members: {
                    ResourceARN: {},
                    RoleARN: {},
                    InputStartingPositionConfiguration: {
                        shape: "S2d"
                    },
                    S3Configuration: {
                        type: "structure",
                        required: [ "RoleARN", "BucketARN", "FileKey" ],
                        members: {
                            RoleARN: {},
                            BucketARN: {},
                            FileKey: {}
                        }
                    },
                    InputProcessingConfiguration: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InputSchema: {
                        shape: "Si"
                    },
                    ParsedInputRecords: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {}
                        }
                    },
                    ProcessedInputRecords: {
                        type: "list",
                        member: {}
                    },
                    RawInputRecords: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListApplications: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    ExclusiveStartApplicationName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationSummaries", "HasMoreApplications" ],
                members: {
                    ApplicationSummaries: {
                        type: "list",
                        member: {
                            shape: "S1q"
                        }
                    },
                    HasMoreApplications: {
                        type: "boolean"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1l"
                    }
                }
            }
        },
        StartApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "InputConfigurations" ],
                members: {
                    ApplicationName: {},
                    InputConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "InputStartingPositionConfiguration" ],
                            members: {
                                Id: {},
                                InputStartingPositionConfiguration: {
                                    shape: "S2d"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S1l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "ApplicationUpdate" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    ApplicationUpdate: {
                        type: "structure",
                        members: {
                            InputUpdates: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "InputId" ],
                                    members: {
                                        InputId: {},
                                        NamePrefixUpdate: {},
                                        InputProcessingConfigurationUpdate: {
                                            type: "structure",
                                            required: [ "InputLambdaProcessorUpdate" ],
                                            members: {
                                                InputLambdaProcessorUpdate: {
                                                    type: "structure",
                                                    members: {
                                                        ResourceARNUpdate: {},
                                                        RoleARNUpdate: {}
                                                    }
                                                }
                                            }
                                        },
                                        KinesisStreamsInputUpdate: {
                                            type: "structure",
                                            members: {
                                                ResourceARNUpdate: {},
                                                RoleARNUpdate: {}
                                            }
                                        },
                                        KinesisFirehoseInputUpdate: {
                                            type: "structure",
                                            members: {
                                                ResourceARNUpdate: {},
                                                RoleARNUpdate: {}
                                            }
                                        },
                                        InputSchemaUpdate: {
                                            type: "structure",
                                            members: {
                                                RecordFormatUpdate: {
                                                    shape: "Sj"
                                                },
                                                RecordEncodingUpdate: {},
                                                RecordColumnUpdates: {
                                                    shape: "Ss"
                                                }
                                            }
                                        },
                                        InputParallelismUpdate: {
                                            type: "structure",
                                            members: {
                                                CountUpdate: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            ApplicationCodeUpdate: {},
                            OutputUpdates: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "OutputId" ],
                                    members: {
                                        OutputId: {},
                                        NameUpdate: {},
                                        KinesisStreamsOutputUpdate: {
                                            type: "structure",
                                            members: {
                                                ResourceARNUpdate: {},
                                                RoleARNUpdate: {}
                                            }
                                        },
                                        KinesisFirehoseOutputUpdate: {
                                            type: "structure",
                                            members: {
                                                ResourceARNUpdate: {},
                                                RoleARNUpdate: {}
                                            }
                                        },
                                        LambdaOutputUpdate: {
                                            type: "structure",
                                            members: {
                                                ResourceARNUpdate: {},
                                                RoleARNUpdate: {}
                                            }
                                        },
                                        DestinationSchemaUpdate: {
                                            shape: "S16"
                                        }
                                    }
                                }
                            },
                            ReferenceDataSourceUpdates: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "ReferenceId" ],
                                    members: {
                                        ReferenceId: {},
                                        TableNameUpdate: {},
                                        S3ReferenceDataSourceUpdate: {
                                            type: "structure",
                                            members: {
                                                BucketARNUpdate: {},
                                                FileKeyUpdate: {},
                                                ReferenceRoleARNUpdate: {}
                                            }
                                        },
                                        ReferenceSchemaUpdate: {
                                            shape: "Si"
                                        }
                                    }
                                }
                            },
                            CloudWatchLoggingOptionUpdates: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "CloudWatchLoggingOptionId" ],
                                    members: {
                                        CloudWatchLoggingOptionId: {},
                                        LogStreamARNUpdate: {},
                                        RoleARNUpdate: {}
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "LogStreamARN", "RoleARN" ],
            members: {
                LogStreamARN: {},
                RoleARN: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "NamePrefix", "InputSchema" ],
            members: {
                NamePrefix: {},
                InputProcessingConfiguration: {
                    shape: "Sb"
                },
                KinesisStreamsInput: {
                    type: "structure",
                    required: [ "ResourceARN", "RoleARN" ],
                    members: {
                        ResourceARN: {},
                        RoleARN: {}
                    }
                },
                KinesisFirehoseInput: {
                    type: "structure",
                    required: [ "ResourceARN", "RoleARN" ],
                    members: {
                        ResourceARN: {},
                        RoleARN: {}
                    }
                },
                InputParallelism: {
                    shape: "Sg"
                },
                InputSchema: {
                    shape: "Si"
                }
            }
        },
        Sb: {
            type: "structure",
            required: [ "InputLambdaProcessor" ],
            members: {
                InputLambdaProcessor: {
                    type: "structure",
                    required: [ "ResourceARN", "RoleARN" ],
                    members: {
                        ResourceARN: {},
                        RoleARN: {}
                    }
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                Count: {
                    type: "integer"
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "RecordFormat", "RecordColumns" ],
            members: {
                RecordFormat: {
                    shape: "Sj"
                },
                RecordEncoding: {},
                RecordColumns: {
                    shape: "Ss"
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "RecordFormatType" ],
            members: {
                RecordFormatType: {},
                MappingParameters: {
                    type: "structure",
                    members: {
                        JSONMappingParameters: {
                            type: "structure",
                            required: [ "RecordRowPath" ],
                            members: {
                                RecordRowPath: {}
                            }
                        },
                        CSVMappingParameters: {
                            type: "structure",
                            required: [ "RecordRowDelimiter", "RecordColumnDelimiter" ],
                            members: {
                                RecordRowDelimiter: {},
                                RecordColumnDelimiter: {}
                            }
                        }
                    }
                }
            }
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "SqlType" ],
                members: {
                    Name: {},
                    Mapping: {},
                    SqlType: {}
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "Name", "DestinationSchema" ],
            members: {
                Name: {},
                KinesisStreamsOutput: {
                    type: "structure",
                    required: [ "ResourceARN", "RoleARN" ],
                    members: {
                        ResourceARN: {},
                        RoleARN: {}
                    }
                },
                KinesisFirehoseOutput: {
                    type: "structure",
                    required: [ "ResourceARN", "RoleARN" ],
                    members: {
                        ResourceARN: {},
                        RoleARN: {}
                    }
                },
                LambdaOutput: {
                    type: "structure",
                    required: [ "ResourceARN", "RoleARN" ],
                    members: {
                        ResourceARN: {},
                        RoleARN: {}
                    }
                },
                DestinationSchema: {
                    shape: "S16"
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "RecordFormatType" ],
            members: {
                RecordFormatType: {}
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1q: {
            type: "structure",
            required: [ "ApplicationName", "ApplicationARN", "ApplicationStatus" ],
            members: {
                ApplicationName: {},
                ApplicationARN: {},
                ApplicationStatus: {}
            }
        },
        S2d: {
            type: "structure",
            members: {
                InputStartingPosition: {}
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["kms"] = {};

AWS.KMS = AWS.Service.defineService("kms", [ "2014-11-01" ]);

AWS.apiLoader.services["kms"]["2014-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-11-01",
        endpointPrefix: "kms",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "KMS",
        serviceFullName: "AWS Key Management Service",
        serviceId: "KMS",
        signatureVersion: "v4",
        targetPrefix: "TrentService",
        uid: "kms-2014-11-01"
    },
    operations: {
        CancelKeyDeletion: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyId: {}
                }
            }
        },
        ConnectCustomKeyStore: {
            input: {
                type: "structure",
                required: [ "CustomKeyStoreId" ],
                members: {
                    CustomKeyStoreId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAlias: {
            input: {
                type: "structure",
                required: [ "AliasName", "TargetKeyId" ],
                members: {
                    AliasName: {},
                    TargetKeyId: {}
                }
            }
        },
        CreateCustomKeyStore: {
            input: {
                type: "structure",
                required: [ "CustomKeyStoreName" ],
                members: {
                    CustomKeyStoreName: {},
                    CloudHsmClusterId: {},
                    TrustAnchorCertificate: {},
                    KeyStorePassword: {
                        shape: "Sd"
                    },
                    CustomKeyStoreType: {},
                    XksProxyUriEndpoint: {},
                    XksProxyUriPath: {},
                    XksProxyVpcEndpointServiceName: {},
                    XksProxyAuthenticationCredential: {
                        shape: "Si"
                    },
                    XksProxyConnectivity: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomKeyStoreId: {}
                }
            }
        },
        CreateGrant: {
            input: {
                type: "structure",
                required: [ "KeyId", "GranteePrincipal", "Operations" ],
                members: {
                    KeyId: {},
                    GranteePrincipal: {},
                    RetiringPrincipal: {},
                    Operations: {
                        shape: "Sp"
                    },
                    Constraints: {
                        shape: "Sr"
                    },
                    GrantTokens: {
                        shape: "Sv"
                    },
                    Name: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantToken: {},
                    GrantId: {}
                }
            }
        },
        CreateKey: {
            input: {
                type: "structure",
                members: {
                    Policy: {},
                    Description: {},
                    KeyUsage: {},
                    CustomerMasterKeySpec: {
                        shape: "S15",
                        deprecated: true,
                        deprecatedMessage: "This parameter has been deprecated. Instead, use the KeySpec parameter."
                    },
                    KeySpec: {},
                    Origin: {},
                    CustomKeyStoreId: {},
                    BypassPolicyLockoutSafetyCheck: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S19"
                    },
                    MultiRegion: {
                        type: "boolean"
                    },
                    XksKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyMetadata: {
                        shape: "S1f"
                    }
                }
            }
        },
        Decrypt: {
            input: {
                type: "structure",
                required: [ "CiphertextBlob" ],
                members: {
                    CiphertextBlob: {
                        type: "blob"
                    },
                    EncryptionContext: {
                        shape: "Ss"
                    },
                    GrantTokens: {
                        shape: "Sv"
                    },
                    KeyId: {},
                    EncryptionAlgorithm: {},
                    Recipient: {
                        shape: "S21"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyId: {},
                    Plaintext: {
                        shape: "S25"
                    },
                    EncryptionAlgorithm: {},
                    CiphertextForRecipient: {
                        type: "blob"
                    }
                }
            }
        },
        DeleteAlias: {
            input: {
                type: "structure",
                required: [ "AliasName" ],
                members: {
                    AliasName: {}
                }
            }
        },
        DeleteCustomKeyStore: {
            input: {
                type: "structure",
                required: [ "CustomKeyStoreId" ],
                members: {
                    CustomKeyStoreId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteImportedKeyMaterial: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {}
                }
            }
        },
        DescribeCustomKeyStores: {
            input: {
                type: "structure",
                members: {
                    CustomKeyStoreId: {},
                    CustomKeyStoreName: {},
                    Limit: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomKeyStores: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CustomKeyStoreId: {},
                                CustomKeyStoreName: {},
                                CloudHsmClusterId: {},
                                TrustAnchorCertificate: {},
                                ConnectionState: {},
                                ConnectionErrorCode: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                CustomKeyStoreType: {},
                                XksProxyConfiguration: {
                                    type: "structure",
                                    members: {
                                        Connectivity: {},
                                        AccessKeyId: {
                                            shape: "Sj"
                                        },
                                        UriEndpoint: {},
                                        UriPath: {},
                                        VpcEndpointServiceName: {}
                                    }
                                }
                            }
                        }
                    },
                    NextMarker: {},
                    Truncated: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeKey: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {},
                    GrantTokens: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyMetadata: {
                        shape: "S1f"
                    }
                }
            }
        },
        DisableKey: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {}
                }
            }
        },
        DisableKeyRotation: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {}
                }
            }
        },
        DisconnectCustomKeyStore: {
            input: {
                type: "structure",
                required: [ "CustomKeyStoreId" ],
                members: {
                    CustomKeyStoreId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableKey: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {}
                }
            }
        },
        EnableKeyRotation: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {}
                }
            }
        },
        Encrypt: {
            input: {
                type: "structure",
                required: [ "KeyId", "Plaintext" ],
                members: {
                    KeyId: {},
                    Plaintext: {
                        shape: "S25"
                    },
                    EncryptionContext: {
                        shape: "Ss"
                    },
                    GrantTokens: {
                        shape: "Sv"
                    },
                    EncryptionAlgorithm: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CiphertextBlob: {
                        type: "blob"
                    },
                    KeyId: {},
                    EncryptionAlgorithm: {}
                }
            }
        },
        GenerateDataKey: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {},
                    EncryptionContext: {
                        shape: "Ss"
                    },
                    NumberOfBytes: {
                        type: "integer"
                    },
                    KeySpec: {},
                    GrantTokens: {
                        shape: "Sv"
                    },
                    Recipient: {
                        shape: "S21"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CiphertextBlob: {
                        type: "blob"
                    },
                    Plaintext: {
                        shape: "S25"
                    },
                    KeyId: {},
                    CiphertextForRecipient: {
                        type: "blob"
                    }
                }
            }
        },
        GenerateDataKeyPair: {
            input: {
                type: "structure",
                required: [ "KeyId", "KeyPairSpec" ],
                members: {
                    EncryptionContext: {
                        shape: "Ss"
                    },
                    KeyId: {},
                    KeyPairSpec: {},
                    GrantTokens: {
                        shape: "Sv"
                    },
                    Recipient: {
                        shape: "S21"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PrivateKeyCiphertextBlob: {
                        type: "blob"
                    },
                    PrivateKeyPlaintext: {
                        shape: "S25"
                    },
                    PublicKey: {
                        type: "blob"
                    },
                    KeyId: {},
                    KeyPairSpec: {},
                    CiphertextForRecipient: {
                        type: "blob"
                    }
                }
            }
        },
        GenerateDataKeyPairWithoutPlaintext: {
            input: {
                type: "structure",
                required: [ "KeyId", "KeyPairSpec" ],
                members: {
                    EncryptionContext: {
                        shape: "Ss"
                    },
                    KeyId: {},
                    KeyPairSpec: {},
                    GrantTokens: {
                        shape: "Sv"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PrivateKeyCiphertextBlob: {
                        type: "blob"
                    },
                    PublicKey: {
                        type: "blob"
                    },
                    KeyId: {},
                    KeyPairSpec: {}
                }
            }
        },
        GenerateDataKeyWithoutPlaintext: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {},
                    EncryptionContext: {
                        shape: "Ss"
                    },
                    KeySpec: {},
                    NumberOfBytes: {
                        type: "integer"
                    },
                    GrantTokens: {
                        shape: "Sv"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CiphertextBlob: {
                        type: "blob"
                    },
                    KeyId: {}
                }
            }
        },
        GenerateMac: {
            input: {
                type: "structure",
                required: [ "Message", "KeyId", "MacAlgorithm" ],
                members: {
                    Message: {
                        shape: "S25"
                    },
                    KeyId: {},
                    MacAlgorithm: {},
                    GrantTokens: {
                        shape: "Sv"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Mac: {
                        type: "blob"
                    },
                    MacAlgorithm: {},
                    KeyId: {}
                }
            }
        },
        GenerateRandom: {
            input: {
                type: "structure",
                members: {
                    NumberOfBytes: {
                        type: "integer"
                    },
                    CustomKeyStoreId: {},
                    Recipient: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Plaintext: {
                        shape: "S25"
                    },
                    CiphertextForRecipient: {
                        type: "blob"
                    }
                }
            }
        },
        GetKeyPolicy: {
            input: {
                type: "structure",
                required: [ "KeyId", "PolicyName" ],
                members: {
                    KeyId: {},
                    PolicyName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetKeyRotationStatus: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyRotationEnabled: {
                        type: "boolean"
                    }
                }
            }
        },
        GetParametersForImport: {
            input: {
                type: "structure",
                required: [ "KeyId", "WrappingAlgorithm", "WrappingKeySpec" ],
                members: {
                    KeyId: {},
                    WrappingAlgorithm: {},
                    WrappingKeySpec: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyId: {},
                    ImportToken: {
                        type: "blob"
                    },
                    PublicKey: {
                        shape: "S25"
                    },
                    ParametersValidTo: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetPublicKey: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {},
                    GrantTokens: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyId: {},
                    PublicKey: {
                        type: "blob"
                    },
                    CustomerMasterKeySpec: {
                        shape: "S15",
                        deprecated: true,
                        deprecatedMessage: "This field has been deprecated. Instead, use the KeySpec field."
                    },
                    KeySpec: {},
                    KeyUsage: {},
                    EncryptionAlgorithms: {
                        shape: "S1m"
                    },
                    SigningAlgorithms: {
                        shape: "S1o"
                    }
                }
            }
        },
        ImportKeyMaterial: {
            input: {
                type: "structure",
                required: [ "KeyId", "ImportToken", "EncryptedKeyMaterial" ],
                members: {
                    KeyId: {},
                    ImportToken: {
                        type: "blob"
                    },
                    EncryptedKeyMaterial: {
                        type: "blob"
                    },
                    ValidTo: {
                        type: "timestamp"
                    },
                    ExpirationModel: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListAliases: {
            input: {
                type: "structure",
                members: {
                    KeyId: {},
                    Limit: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AliasName: {},
                                AliasArn: {},
                                TargetKeyId: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                LastUpdatedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextMarker: {},
                    Truncated: {
                        type: "boolean"
                    }
                }
            }
        },
        ListGrants: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    Limit: {
                        type: "integer"
                    },
                    Marker: {},
                    KeyId: {},
                    GrantId: {},
                    GranteePrincipal: {}
                }
            },
            output: {
                shape: "S3r"
            }
        },
        ListKeyPolicies: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {},
                    Limit: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyNames: {
                        type: "list",
                        member: {}
                    },
                    NextMarker: {},
                    Truncated: {
                        type: "boolean"
                    }
                }
            }
        },
        ListKeys: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Keys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                KeyId: {},
                                KeyArn: {}
                            }
                        }
                    },
                    NextMarker: {},
                    Truncated: {
                        type: "boolean"
                    }
                }
            }
        },
        ListResourceTags: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {},
                    Limit: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S19"
                    },
                    NextMarker: {},
                    Truncated: {
                        type: "boolean"
                    }
                }
            }
        },
        ListRetirableGrants: {
            input: {
                type: "structure",
                required: [ "RetiringPrincipal" ],
                members: {
                    Limit: {
                        type: "integer"
                    },
                    Marker: {},
                    RetiringPrincipal: {}
                }
            },
            output: {
                shape: "S3r"
            }
        },
        PutKeyPolicy: {
            input: {
                type: "structure",
                required: [ "KeyId", "PolicyName", "Policy" ],
                members: {
                    KeyId: {},
                    PolicyName: {},
                    Policy: {},
                    BypassPolicyLockoutSafetyCheck: {
                        type: "boolean"
                    }
                }
            }
        },
        ReEncrypt: {
            input: {
                type: "structure",
                required: [ "CiphertextBlob", "DestinationKeyId" ],
                members: {
                    CiphertextBlob: {
                        type: "blob"
                    },
                    SourceEncryptionContext: {
                        shape: "Ss"
                    },
                    SourceKeyId: {},
                    DestinationKeyId: {},
                    DestinationEncryptionContext: {
                        shape: "Ss"
                    },
                    SourceEncryptionAlgorithm: {},
                    DestinationEncryptionAlgorithm: {},
                    GrantTokens: {
                        shape: "Sv"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CiphertextBlob: {
                        type: "blob"
                    },
                    SourceKeyId: {},
                    KeyId: {},
                    SourceEncryptionAlgorithm: {},
                    DestinationEncryptionAlgorithm: {}
                }
            }
        },
        ReplicateKey: {
            input: {
                type: "structure",
                required: [ "KeyId", "ReplicaRegion" ],
                members: {
                    KeyId: {},
                    ReplicaRegion: {},
                    Policy: {},
                    BypassPolicyLockoutSafetyCheck: {
                        type: "boolean"
                    },
                    Description: {},
                    Tags: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicaKeyMetadata: {
                        shape: "S1f"
                    },
                    ReplicaPolicy: {},
                    ReplicaTags: {
                        shape: "S19"
                    }
                }
            }
        },
        RetireGrant: {
            input: {
                type: "structure",
                members: {
                    GrantToken: {},
                    KeyId: {},
                    GrantId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            }
        },
        RevokeGrant: {
            input: {
                type: "structure",
                required: [ "KeyId", "GrantId" ],
                members: {
                    KeyId: {},
                    GrantId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            }
        },
        ScheduleKeyDeletion: {
            input: {
                type: "structure",
                required: [ "KeyId" ],
                members: {
                    KeyId: {},
                    PendingWindowInDays: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyId: {},
                    DeletionDate: {
                        type: "timestamp"
                    },
                    KeyState: {},
                    PendingWindowInDays: {
                        type: "integer"
                    }
                }
            }
        },
        Sign: {
            input: {
                type: "structure",
                required: [ "KeyId", "Message", "SigningAlgorithm" ],
                members: {
                    KeyId: {},
                    Message: {
                        shape: "S25"
                    },
                    MessageType: {},
                    GrantTokens: {
                        shape: "Sv"
                    },
                    SigningAlgorithm: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyId: {},
                    Signature: {
                        type: "blob"
                    },
                    SigningAlgorithm: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "KeyId", "Tags" ],
                members: {
                    KeyId: {},
                    Tags: {
                        shape: "S19"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "KeyId", "TagKeys" ],
                members: {
                    KeyId: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateAlias: {
            input: {
                type: "structure",
                required: [ "AliasName", "TargetKeyId" ],
                members: {
                    AliasName: {},
                    TargetKeyId: {}
                }
            }
        },
        UpdateCustomKeyStore: {
            input: {
                type: "structure",
                required: [ "CustomKeyStoreId" ],
                members: {
                    CustomKeyStoreId: {},
                    NewCustomKeyStoreName: {},
                    KeyStorePassword: {
                        shape: "Sd"
                    },
                    CloudHsmClusterId: {},
                    XksProxyUriEndpoint: {},
                    XksProxyUriPath: {},
                    XksProxyVpcEndpointServiceName: {},
                    XksProxyAuthenticationCredential: {
                        shape: "Si"
                    },
                    XksProxyConnectivity: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateKeyDescription: {
            input: {
                type: "structure",
                required: [ "KeyId", "Description" ],
                members: {
                    KeyId: {},
                    Description: {}
                }
            }
        },
        UpdatePrimaryRegion: {
            input: {
                type: "structure",
                required: [ "KeyId", "PrimaryRegion" ],
                members: {
                    KeyId: {},
                    PrimaryRegion: {}
                }
            }
        },
        Verify: {
            input: {
                type: "structure",
                required: [ "KeyId", "Message", "Signature", "SigningAlgorithm" ],
                members: {
                    KeyId: {},
                    Message: {
                        shape: "S25"
                    },
                    MessageType: {},
                    Signature: {
                        type: "blob"
                    },
                    SigningAlgorithm: {},
                    GrantTokens: {
                        shape: "Sv"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyId: {},
                    SignatureValid: {
                        type: "boolean"
                    },
                    SigningAlgorithm: {}
                }
            }
        },
        VerifyMac: {
            input: {
                type: "structure",
                required: [ "Message", "KeyId", "MacAlgorithm", "Mac" ],
                members: {
                    Message: {
                        shape: "S25"
                    },
                    KeyId: {},
                    MacAlgorithm: {},
                    Mac: {
                        type: "blob"
                    },
                    GrantTokens: {
                        shape: "Sv"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyId: {},
                    MacValid: {
                        type: "boolean"
                    },
                    MacAlgorithm: {}
                }
            }
        }
    },
    shapes: {
        Sd: {
            type: "string",
            sensitive: true
        },
        Si: {
            type: "structure",
            required: [ "AccessKeyId", "RawSecretAccessKey" ],
            members: {
                AccessKeyId: {
                    shape: "Sj"
                },
                RawSecretAccessKey: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sj: {
            type: "string",
            sensitive: true
        },
        Sp: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "structure",
            members: {
                EncryptionContextSubset: {
                    shape: "Ss"
                },
                EncryptionContextEquals: {
                    shape: "Ss"
                }
            }
        },
        Ss: {
            type: "map",
            key: {},
            value: {}
        },
        Sv: {
            type: "list",
            member: {}
        },
        S15: {
            type: "string",
            deprecated: true,
            deprecatedMessage: "This enum has been deprecated. Instead, use the KeySpec enum."
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "TagKey", "TagValue" ],
                members: {
                    TagKey: {},
                    TagValue: {}
                }
            }
        },
        S1f: {
            type: "structure",
            required: [ "KeyId" ],
            members: {
                AWSAccountId: {},
                KeyId: {},
                Arn: {},
                CreationDate: {
                    type: "timestamp"
                },
                Enabled: {
                    type: "boolean"
                },
                Description: {},
                KeyUsage: {},
                KeyState: {},
                DeletionDate: {
                    type: "timestamp"
                },
                ValidTo: {
                    type: "timestamp"
                },
                Origin: {},
                CustomKeyStoreId: {},
                CloudHsmClusterId: {},
                ExpirationModel: {},
                KeyManager: {},
                CustomerMasterKeySpec: {
                    shape: "S15",
                    deprecated: true,
                    deprecatedMessage: "This field has been deprecated. Instead, use the KeySpec field."
                },
                KeySpec: {},
                EncryptionAlgorithms: {
                    shape: "S1m"
                },
                SigningAlgorithms: {
                    shape: "S1o"
                },
                MultiRegion: {
                    type: "boolean"
                },
                MultiRegionConfiguration: {
                    type: "structure",
                    members: {
                        MultiRegionKeyType: {},
                        PrimaryKey: {
                            shape: "S1s"
                        },
                        ReplicaKeys: {
                            type: "list",
                            member: {
                                shape: "S1s"
                            }
                        }
                    }
                },
                PendingDeletionWindowInDays: {
                    type: "integer"
                },
                MacAlgorithms: {
                    type: "list",
                    member: {}
                },
                XksKeyConfiguration: {
                    type: "structure",
                    members: {
                        Id: {}
                    }
                }
            }
        },
        S1m: {
            type: "list",
            member: {}
        },
        S1o: {
            type: "list",
            member: {}
        },
        S1s: {
            type: "structure",
            members: {
                Arn: {},
                Region: {}
            }
        },
        S21: {
            type: "structure",
            members: {
                KeyEncryptionAlgorithm: {},
                AttestationDocument: {
                    type: "blob"
                }
            }
        },
        S25: {
            type: "blob",
            sensitive: true
        },
        S3r: {
            type: "structure",
            members: {
                Grants: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            KeyId: {},
                            GrantId: {},
                            Name: {},
                            CreationDate: {
                                type: "timestamp"
                            },
                            GranteePrincipal: {},
                            RetiringPrincipal: {},
                            IssuingAccount: {},
                            Operations: {
                                shape: "Sp"
                            },
                            Constraints: {
                                shape: "Sr"
                            }
                        }
                    }
                },
                NextMarker: {},
                Truncated: {
                    type: "boolean"
                }
            }
        }
    },
    paginators: {
        DescribeCustomKeyStores: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "NextMarker",
            result_key: "CustomKeyStores"
        },
        ListAliases: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "NextMarker",
            result_key: "Aliases"
        },
        ListGrants: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "NextMarker",
            result_key: "Grants"
        },
        ListKeyPolicies: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "NextMarker",
            result_key: "PolicyNames"
        },
        ListKeys: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "NextMarker",
            result_key: "Keys"
        },
        ListResourceTags: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "NextMarker",
            result_key: "Tags"
        },
        ListRetirableGrants: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "NextMarker",
            result_key: "Grants"
        }
    }
};

AWS.apiLoader.services["lambda"] = {};

AWS.Lambda = AWS.Service.defineService("lambda", [ "2014-11-11", "2015-03-31" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    106: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.Lambda.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                if (request.operation === "invoke") {
                    request.addListener("extractData", AWS.util.convertPayloadToString);
                }
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 106 ]);

AWS.apiLoader.services["lambda"]["2015-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-03-31",
        endpointPrefix: "lambda",
        protocol: "rest-json",
        serviceFullName: "AWS Lambda",
        serviceId: "Lambda",
        signatureVersion: "v4",
        uid: "lambda-2015-03-31"
    },
    operations: {
        AddLayerVersionPermission: {
            http: {
                requestUri: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "LayerName", "VersionNumber", "StatementId", "Action", "Principal" ],
                members: {
                    LayerName: {
                        location: "uri",
                        locationName: "LayerName"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "long"
                    },
                    StatementId: {},
                    Action: {},
                    Principal: {},
                    OrganizationId: {},
                    RevisionId: {
                        location: "querystring",
                        locationName: "RevisionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Statement: {},
                    RevisionId: {}
                }
            }
        },
        AddPermission: {
            http: {
                requestUri: "/2015-03-31/functions/{FunctionName}/policy",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "StatementId", "Action", "Principal" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    StatementId: {},
                    Action: {},
                    Principal: {},
                    SourceArn: {},
                    SourceAccount: {},
                    EventSourceToken: {},
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    },
                    RevisionId: {},
                    PrincipalOrgID: {},
                    FunctionUrlAuthType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Statement: {}
                }
            }
        },
        CreateAlias: {
            http: {
                requestUri: "/2015-03-31/functions/{FunctionName}/aliases",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "Name", "FunctionVersion" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Name: {},
                    FunctionVersion: {},
                    Description: {},
                    RoutingConfig: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                shape: "St"
            }
        },
        CreateCodeSigningConfig: {
            http: {
                requestUri: "/2020-04-22/code-signing-configs/",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AllowedPublishers" ],
                members: {
                    Description: {},
                    AllowedPublishers: {
                        shape: "Sw"
                    },
                    CodeSigningPolicies: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CodeSigningConfig" ],
                members: {
                    CodeSigningConfig: {
                        shape: "S11"
                    }
                }
            }
        },
        CreateEventSourceMapping: {
            http: {
                requestUri: "/2015-03-31/event-source-mappings/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    EventSourceArn: {},
                    FunctionName: {},
                    Enabled: {
                        type: "boolean"
                    },
                    BatchSize: {
                        type: "integer"
                    },
                    FilterCriteria: {
                        shape: "S18"
                    },
                    MaximumBatchingWindowInSeconds: {
                        type: "integer"
                    },
                    ParallelizationFactor: {
                        type: "integer"
                    },
                    StartingPosition: {},
                    StartingPositionTimestamp: {
                        type: "timestamp"
                    },
                    DestinationConfig: {
                        shape: "S1g"
                    },
                    MaximumRecordAgeInSeconds: {
                        type: "integer"
                    },
                    BisectBatchOnFunctionError: {
                        type: "boolean"
                    },
                    MaximumRetryAttempts: {
                        type: "integer"
                    },
                    TumblingWindowInSeconds: {
                        type: "integer"
                    },
                    Topics: {
                        shape: "S1o"
                    },
                    Queues: {
                        shape: "S1q"
                    },
                    SourceAccessConfigurations: {
                        shape: "S1s"
                    },
                    SelfManagedEventSource: {
                        shape: "S1w"
                    },
                    FunctionResponseTypes: {
                        shape: "S21"
                    },
                    AmazonManagedKafkaEventSourceConfig: {
                        shape: "S23"
                    },
                    SelfManagedKafkaEventSourceConfig: {
                        shape: "S24"
                    },
                    ScalingConfig: {
                        shape: "S25"
                    },
                    DocumentDBEventSourceConfig: {
                        shape: "S27"
                    }
                }
            },
            output: {
                shape: "S2b"
            }
        },
        CreateFunction: {
            http: {
                requestUri: "/2015-03-31/functions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "Role", "Code" ],
                members: {
                    FunctionName: {},
                    Runtime: {},
                    Role: {},
                    Handler: {},
                    Code: {
                        type: "structure",
                        members: {
                            ZipFile: {
                                shape: "S2h"
                            },
                            S3Bucket: {},
                            S3Key: {},
                            S3ObjectVersion: {},
                            ImageUri: {}
                        }
                    },
                    Description: {},
                    Timeout: {
                        type: "integer"
                    },
                    MemorySize: {
                        type: "integer"
                    },
                    Publish: {
                        type: "boolean"
                    },
                    VpcConfig: {
                        shape: "S2o"
                    },
                    PackageType: {},
                    DeadLetterConfig: {
                        shape: "S2v"
                    },
                    Environment: {
                        shape: "S2x"
                    },
                    KMSKeyArn: {},
                    TracingConfig: {
                        shape: "S32"
                    },
                    Tags: {
                        shape: "S34"
                    },
                    Layers: {
                        shape: "S37"
                    },
                    FileSystemConfigs: {
                        shape: "S39"
                    },
                    ImageConfig: {
                        shape: "S3d"
                    },
                    CodeSigningConfigArn: {},
                    Architectures: {
                        shape: "S3g"
                    },
                    EphemeralStorage: {
                        shape: "S3i"
                    },
                    SnapStart: {
                        shape: "S3k"
                    },
                    LoggingConfig: {
                        shape: "S3m"
                    }
                }
            },
            output: {
                shape: "S3r"
            }
        },
        CreateFunctionUrlConfig: {
            http: {
                requestUri: "/2021-10-31/functions/{FunctionName}/url",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "AuthType" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    },
                    AuthType: {},
                    Cors: {
                        shape: "S4i"
                    },
                    InvokeMode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FunctionUrl", "FunctionArn", "AuthType", "CreationTime" ],
                members: {
                    FunctionUrl: {},
                    FunctionArn: {},
                    AuthType: {},
                    Cors: {
                        shape: "S4i"
                    },
                    CreationTime: {},
                    InvokeMode: {}
                }
            }
        },
        DeleteAlias: {
            http: {
                method: "DELETE",
                requestUri: "/2015-03-31/functions/{FunctionName}/aliases/{Name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "Name" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            }
        },
        DeleteCodeSigningConfig: {
            http: {
                method: "DELETE",
                requestUri: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "CodeSigningConfigArn" ],
                members: {
                    CodeSigningConfigArn: {
                        location: "uri",
                        locationName: "CodeSigningConfigArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEventSourceMapping: {
            http: {
                method: "DELETE",
                requestUri: "/2015-03-31/event-source-mappings/{UUID}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "UUID" ],
                members: {
                    UUID: {
                        location: "uri",
                        locationName: "UUID"
                    }
                }
            },
            output: {
                shape: "S2b"
            }
        },
        DeleteFunction: {
            http: {
                method: "DELETE",
                requestUri: "/2015-03-31/functions/{FunctionName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            }
        },
        DeleteFunctionCodeSigningConfig: {
            http: {
                method: "DELETE",
                requestUri: "/2020-06-30/functions/{FunctionName}/code-signing-config",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    }
                }
            }
        },
        DeleteFunctionConcurrency: {
            http: {
                method: "DELETE",
                requestUri: "/2017-10-31/functions/{FunctionName}/concurrency",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    }
                }
            }
        },
        DeleteFunctionEventInvokeConfig: {
            http: {
                method: "DELETE",
                requestUri: "/2019-09-25/functions/{FunctionName}/event-invoke-config",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            }
        },
        DeleteFunctionUrlConfig: {
            http: {
                method: "DELETE",
                requestUri: "/2021-10-31/functions/{FunctionName}/url",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            }
        },
        DeleteLayerVersion: {
            http: {
                method: "DELETE",
                requestUri: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "LayerName", "VersionNumber" ],
                members: {
                    LayerName: {
                        location: "uri",
                        locationName: "LayerName"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "long"
                    }
                }
            }
        },
        DeleteProvisionedConcurrencyConfig: {
            http: {
                method: "DELETE",
                requestUri: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "Qualifier" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            }
        },
        GetAccountSettings: {
            http: {
                method: "GET",
                requestUri: "/2016-08-19/account-settings/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AccountLimit: {
                        type: "structure",
                        members: {
                            TotalCodeSize: {
                                type: "long"
                            },
                            CodeSizeUnzipped: {
                                type: "long"
                            },
                            CodeSizeZipped: {
                                type: "long"
                            },
                            ConcurrentExecutions: {
                                type: "integer"
                            },
                            UnreservedConcurrentExecutions: {
                                type: "integer"
                            }
                        }
                    },
                    AccountUsage: {
                        type: "structure",
                        members: {
                            TotalCodeSize: {
                                type: "long"
                            },
                            FunctionCount: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        GetAlias: {
            http: {
                method: "GET",
                requestUri: "/2015-03-31/functions/{FunctionName}/aliases/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "Name" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                shape: "St"
            }
        },
        GetCodeSigningConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CodeSigningConfigArn" ],
                members: {
                    CodeSigningConfigArn: {
                        location: "uri",
                        locationName: "CodeSigningConfigArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CodeSigningConfig" ],
                members: {
                    CodeSigningConfig: {
                        shape: "S11"
                    }
                }
            }
        },
        GetEventSourceMapping: {
            http: {
                method: "GET",
                requestUri: "/2015-03-31/event-source-mappings/{UUID}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "UUID" ],
                members: {
                    UUID: {
                        location: "uri",
                        locationName: "UUID"
                    }
                }
            },
            output: {
                shape: "S2b"
            }
        },
        GetFunction: {
            http: {
                method: "GET",
                requestUri: "/2015-03-31/functions/{FunctionName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Configuration: {
                        shape: "S3r"
                    },
                    Code: {
                        type: "structure",
                        members: {
                            RepositoryType: {},
                            Location: {},
                            ImageUri: {},
                            ResolvedImageUri: {}
                        }
                    },
                    Tags: {
                        shape: "S34"
                    },
                    Concurrency: {
                        shape: "S5i"
                    }
                }
            }
        },
        GetFunctionCodeSigningConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-06-30/functions/{FunctionName}/code-signing-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CodeSigningConfigArn", "FunctionName" ],
                members: {
                    CodeSigningConfigArn: {},
                    FunctionName: {}
                }
            }
        },
        GetFunctionConcurrency: {
            http: {
                method: "GET",
                requestUri: "/2019-09-30/functions/{FunctionName}/concurrency",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedConcurrentExecutions: {
                        type: "integer"
                    }
                }
            }
        },
        GetFunctionConfiguration: {
            http: {
                method: "GET",
                requestUri: "/2015-03-31/functions/{FunctionName}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            },
            output: {
                shape: "S3r"
            }
        },
        GetFunctionEventInvokeConfig: {
            http: {
                method: "GET",
                requestUri: "/2019-09-25/functions/{FunctionName}/event-invoke-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            },
            output: {
                shape: "S5q"
            }
        },
        GetFunctionUrlConfig: {
            http: {
                method: "GET",
                requestUri: "/2021-10-31/functions/{FunctionName}/url",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FunctionUrl", "FunctionArn", "AuthType", "CreationTime", "LastModifiedTime" ],
                members: {
                    FunctionUrl: {},
                    FunctionArn: {},
                    AuthType: {},
                    Cors: {
                        shape: "S4i"
                    },
                    CreationTime: {},
                    LastModifiedTime: {},
                    InvokeMode: {}
                }
            }
        },
        GetLayerVersion: {
            http: {
                method: "GET",
                requestUri: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "LayerName", "VersionNumber" ],
                members: {
                    LayerName: {
                        location: "uri",
                        locationName: "LayerName"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "long"
                    }
                }
            },
            output: {
                shape: "S5w"
            }
        },
        GetLayerVersionByArn: {
            http: {
                method: "GET",
                requestUri: "/2018-10-31/layers?find=LayerVersion",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "querystring",
                        locationName: "Arn"
                    }
                }
            },
            output: {
                shape: "S5w"
            }
        },
        GetLayerVersionPolicy: {
            http: {
                method: "GET",
                requestUri: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "LayerName", "VersionNumber" ],
                members: {
                    LayerName: {
                        location: "uri",
                        locationName: "LayerName"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {},
                    RevisionId: {}
                }
            }
        },
        GetPolicy: {
            http: {
                method: "GET",
                requestUri: "/2015-03-31/functions/{FunctionName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {},
                    RevisionId: {}
                }
            }
        },
        GetProvisionedConcurrencyConfig: {
            http: {
                method: "GET",
                requestUri: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "Qualifier" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestedProvisionedConcurrentExecutions: {
                        type: "integer"
                    },
                    AvailableProvisionedConcurrentExecutions: {
                        type: "integer"
                    },
                    AllocatedProvisionedConcurrentExecutions: {
                        type: "integer"
                    },
                    Status: {},
                    StatusReason: {},
                    LastModified: {}
                }
            }
        },
        GetRuntimeManagementConfig: {
            http: {
                method: "GET",
                requestUri: "/2021-07-20/functions/{FunctionName}/runtime-management-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateRuntimeOn: {},
                    RuntimeVersionArn: {},
                    FunctionArn: {}
                }
            }
        },
        Invoke: {
            http: {
                requestUri: "/2015-03-31/functions/{FunctionName}/invocations"
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    InvocationType: {
                        location: "header",
                        locationName: "X-Amz-Invocation-Type"
                    },
                    LogType: {
                        location: "header",
                        locationName: "X-Amz-Log-Type"
                    },
                    ClientContext: {
                        location: "header",
                        locationName: "X-Amz-Client-Context"
                    },
                    Payload: {
                        shape: "S2h"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    }
                },
                payload: "Payload"
            },
            output: {
                type: "structure",
                members: {
                    StatusCode: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FunctionError: {
                        location: "header",
                        locationName: "X-Amz-Function-Error"
                    },
                    LogResult: {
                        location: "header",
                        locationName: "X-Amz-Log-Result"
                    },
                    Payload: {
                        shape: "S2h"
                    },
                    ExecutedVersion: {
                        location: "header",
                        locationName: "X-Amz-Executed-Version"
                    }
                },
                payload: "Payload"
            }
        },
        InvokeAsync: {
            http: {
                requestUri: "/2014-11-13/functions/{FunctionName}/invoke-async/",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "InvokeArgs" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    InvokeArgs: {
                        type: "blob",
                        streaming: true
                    }
                },
                deprecated: true,
                payload: "InvokeArgs"
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                },
                deprecated: true
            },
            deprecated: true
        },
        InvokeWithResponseStream: {
            http: {
                requestUri: "/2021-11-15/functions/{FunctionName}/response-streaming-invocations"
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    InvocationType: {
                        location: "header",
                        locationName: "X-Amz-Invocation-Type"
                    },
                    LogType: {
                        location: "header",
                        locationName: "X-Amz-Log-Type"
                    },
                    ClientContext: {
                        location: "header",
                        locationName: "X-Amz-Client-Context"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    },
                    Payload: {
                        shape: "S2h"
                    }
                },
                payload: "Payload"
            },
            output: {
                type: "structure",
                members: {
                    StatusCode: {
                        location: "statusCode",
                        type: "integer"
                    },
                    ExecutedVersion: {
                        location: "header",
                        locationName: "X-Amz-Executed-Version"
                    },
                    EventStream: {
                        type: "structure",
                        members: {
                            PayloadChunk: {
                                type: "structure",
                                members: {
                                    Payload: {
                                        shape: "S2h",
                                        eventpayload: true
                                    }
                                },
                                event: true
                            },
                            InvokeComplete: {
                                type: "structure",
                                members: {
                                    ErrorCode: {},
                                    ErrorDetails: {},
                                    LogResult: {}
                                },
                                event: true
                            }
                        },
                        eventstream: true
                    },
                    ResponseStreamContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "EventStream"
            }
        },
        ListAliases: {
            http: {
                method: "GET",
                requestUri: "/2015-03-31/functions/{FunctionName}/aliases",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    FunctionVersion: {
                        location: "querystring",
                        locationName: "FunctionVersion"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Aliases: {
                        type: "list",
                        member: {
                            shape: "St"
                        }
                    }
                }
            }
        },
        ListCodeSigningConfigs: {
            http: {
                method: "GET",
                requestUri: "/2020-04-22/code-signing-configs/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    CodeSigningConfigs: {
                        type: "list",
                        member: {
                            shape: "S11"
                        }
                    }
                }
            }
        },
        ListEventSourceMappings: {
            http: {
                method: "GET",
                requestUri: "/2015-03-31/event-source-mappings/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    EventSourceArn: {
                        location: "querystring",
                        locationName: "EventSourceArn"
                    },
                    FunctionName: {
                        location: "querystring",
                        locationName: "FunctionName"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    EventSourceMappings: {
                        type: "list",
                        member: {
                            shape: "S2b"
                        }
                    }
                }
            }
        },
        ListFunctionEventInvokeConfigs: {
            http: {
                method: "GET",
                requestUri: "/2019-09-25/functions/{FunctionName}/event-invoke-config/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FunctionEventInvokeConfigs: {
                        type: "list",
                        member: {
                            shape: "S5q"
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListFunctionUrlConfigs: {
            http: {
                method: "GET",
                requestUri: "/2021-10-31/functions/{FunctionName}/urls",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FunctionUrlConfigs" ],
                members: {
                    FunctionUrlConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FunctionUrl", "FunctionArn", "CreationTime", "LastModifiedTime", "AuthType" ],
                            members: {
                                FunctionUrl: {},
                                FunctionArn: {},
                                CreationTime: {},
                                LastModifiedTime: {},
                                Cors: {
                                    shape: "S4i"
                                },
                                AuthType: {},
                                InvokeMode: {}
                            }
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListFunctions: {
            http: {
                method: "GET",
                requestUri: "/2015-03-31/functions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MasterRegion: {
                        location: "querystring",
                        locationName: "MasterRegion"
                    },
                    FunctionVersion: {
                        location: "querystring",
                        locationName: "FunctionVersion"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Functions: {
                        shape: "S7g"
                    }
                }
            }
        },
        ListFunctionsByCodeSigningConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}/functions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CodeSigningConfigArn" ],
                members: {
                    CodeSigningConfigArn: {
                        location: "uri",
                        locationName: "CodeSigningConfigArn"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    FunctionArns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListLayerVersions: {
            http: {
                method: "GET",
                requestUri: "/2018-10-31/layers/{LayerName}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "LayerName" ],
                members: {
                    CompatibleRuntime: {
                        location: "querystring",
                        locationName: "CompatibleRuntime"
                    },
                    LayerName: {
                        location: "uri",
                        locationName: "LayerName"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    },
                    CompatibleArchitecture: {
                        location: "querystring",
                        locationName: "CompatibleArchitecture"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    LayerVersions: {
                        type: "list",
                        member: {
                            shape: "S7o"
                        }
                    }
                }
            }
        },
        ListLayers: {
            http: {
                method: "GET",
                requestUri: "/2018-10-31/layers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CompatibleRuntime: {
                        location: "querystring",
                        locationName: "CompatibleRuntime"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    },
                    CompatibleArchitecture: {
                        location: "querystring",
                        locationName: "CompatibleArchitecture"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Layers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LayerName: {},
                                LayerArn: {},
                                LatestMatchingVersion: {
                                    shape: "S7o"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListProvisionedConcurrencyConfigs: {
            http: {
                method: "GET",
                requestUri: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency?List=ALL",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisionedConcurrencyConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FunctionArn: {},
                                RequestedProvisionedConcurrentExecutions: {
                                    type: "integer"
                                },
                                AvailableProvisionedConcurrentExecutions: {
                                    type: "integer"
                                },
                                AllocatedProvisionedConcurrentExecutions: {
                                    type: "integer"
                                },
                                Status: {},
                                StatusReason: {},
                                LastModified: {}
                            }
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListTags: {
            http: {
                method: "GET",
                requestUri: "/2017-03-31/tags/{ARN}"
            },
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    Resource: {
                        location: "uri",
                        locationName: "ARN"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S34"
                    }
                }
            }
        },
        ListVersionsByFunction: {
            http: {
                method: "GET",
                requestUri: "/2015-03-31/functions/{FunctionName}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Versions: {
                        shape: "S7g"
                    }
                }
            }
        },
        PublishLayerVersion: {
            http: {
                requestUri: "/2018-10-31/layers/{LayerName}/versions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "LayerName", "Content" ],
                members: {
                    LayerName: {
                        location: "uri",
                        locationName: "LayerName"
                    },
                    Description: {},
                    Content: {
                        type: "structure",
                        members: {
                            S3Bucket: {},
                            S3Key: {},
                            S3ObjectVersion: {},
                            ZipFile: {
                                shape: "S2h"
                            }
                        }
                    },
                    CompatibleRuntimes: {
                        shape: "S5z"
                    },
                    LicenseInfo: {},
                    CompatibleArchitectures: {
                        shape: "S61"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Content: {
                        shape: "S5x"
                    },
                    LayerArn: {},
                    LayerVersionArn: {},
                    Description: {},
                    CreatedDate: {},
                    Version: {
                        type: "long"
                    },
                    CompatibleRuntimes: {
                        shape: "S5z"
                    },
                    LicenseInfo: {},
                    CompatibleArchitectures: {
                        shape: "S61"
                    }
                }
            }
        },
        PublishVersion: {
            http: {
                requestUri: "/2015-03-31/functions/{FunctionName}/versions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    CodeSha256: {},
                    Description: {},
                    RevisionId: {}
                }
            },
            output: {
                shape: "S3r"
            }
        },
        PutFunctionCodeSigningConfig: {
            http: {
                method: "PUT",
                requestUri: "/2020-06-30/functions/{FunctionName}/code-signing-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CodeSigningConfigArn", "FunctionName" ],
                members: {
                    CodeSigningConfigArn: {},
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CodeSigningConfigArn", "FunctionName" ],
                members: {
                    CodeSigningConfigArn: {},
                    FunctionName: {}
                }
            }
        },
        PutFunctionConcurrency: {
            http: {
                method: "PUT",
                requestUri: "/2017-10-31/functions/{FunctionName}/concurrency",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "ReservedConcurrentExecutions" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    ReservedConcurrentExecutions: {
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S5i"
            }
        },
        PutFunctionEventInvokeConfig: {
            http: {
                method: "PUT",
                requestUri: "/2019-09-25/functions/{FunctionName}/event-invoke-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    },
                    MaximumRetryAttempts: {
                        type: "integer"
                    },
                    MaximumEventAgeInSeconds: {
                        type: "integer"
                    },
                    DestinationConfig: {
                        shape: "S1g"
                    }
                }
            },
            output: {
                shape: "S5q"
            }
        },
        PutProvisionedConcurrencyConfig: {
            http: {
                method: "PUT",
                requestUri: "/2019-09-30/functions/{FunctionName}/provisioned-concurrency",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "Qualifier", "ProvisionedConcurrentExecutions" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    },
                    ProvisionedConcurrentExecutions: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestedProvisionedConcurrentExecutions: {
                        type: "integer"
                    },
                    AvailableProvisionedConcurrentExecutions: {
                        type: "integer"
                    },
                    AllocatedProvisionedConcurrentExecutions: {
                        type: "integer"
                    },
                    Status: {},
                    StatusReason: {},
                    LastModified: {}
                }
            }
        },
        PutRuntimeManagementConfig: {
            http: {
                method: "PUT",
                requestUri: "/2021-07-20/functions/{FunctionName}/runtime-management-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "UpdateRuntimeOn" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    },
                    UpdateRuntimeOn: {},
                    RuntimeVersionArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "UpdateRuntimeOn", "FunctionArn" ],
                members: {
                    UpdateRuntimeOn: {},
                    FunctionArn: {},
                    RuntimeVersionArn: {}
                }
            }
        },
        RemoveLayerVersionPermission: {
            http: {
                method: "DELETE",
                requestUri: "/2018-10-31/layers/{LayerName}/versions/{VersionNumber}/policy/{StatementId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "LayerName", "VersionNumber", "StatementId" ],
                members: {
                    LayerName: {
                        location: "uri",
                        locationName: "LayerName"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "long"
                    },
                    StatementId: {
                        location: "uri",
                        locationName: "StatementId"
                    },
                    RevisionId: {
                        location: "querystring",
                        locationName: "RevisionId"
                    }
                }
            }
        },
        RemovePermission: {
            http: {
                method: "DELETE",
                requestUri: "/2015-03-31/functions/{FunctionName}/policy/{StatementId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "StatementId" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    StatementId: {
                        location: "uri",
                        locationName: "StatementId"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    },
                    RevisionId: {
                        location: "querystring",
                        locationName: "RevisionId"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/2017-03-31/tags/{ARN}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Resource", "Tags" ],
                members: {
                    Resource: {
                        location: "uri",
                        locationName: "ARN"
                    },
                    Tags: {
                        shape: "S34"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/2017-03-31/tags/{ARN}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Resource", "TagKeys" ],
                members: {
                    Resource: {
                        location: "uri",
                        locationName: "ARN"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateAlias: {
            http: {
                method: "PUT",
                requestUri: "/2015-03-31/functions/{FunctionName}/aliases/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName", "Name" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    FunctionVersion: {},
                    Description: {},
                    RoutingConfig: {
                        shape: "Sp"
                    },
                    RevisionId: {}
                }
            },
            output: {
                shape: "St"
            }
        },
        UpdateCodeSigningConfig: {
            http: {
                method: "PUT",
                requestUri: "/2020-04-22/code-signing-configs/{CodeSigningConfigArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "CodeSigningConfigArn" ],
                members: {
                    CodeSigningConfigArn: {
                        location: "uri",
                        locationName: "CodeSigningConfigArn"
                    },
                    Description: {},
                    AllowedPublishers: {
                        shape: "Sw"
                    },
                    CodeSigningPolicies: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CodeSigningConfig" ],
                members: {
                    CodeSigningConfig: {
                        shape: "S11"
                    }
                }
            }
        },
        UpdateEventSourceMapping: {
            http: {
                method: "PUT",
                requestUri: "/2015-03-31/event-source-mappings/{UUID}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "UUID" ],
                members: {
                    UUID: {
                        location: "uri",
                        locationName: "UUID"
                    },
                    FunctionName: {},
                    Enabled: {
                        type: "boolean"
                    },
                    BatchSize: {
                        type: "integer"
                    },
                    FilterCriteria: {
                        shape: "S18"
                    },
                    MaximumBatchingWindowInSeconds: {
                        type: "integer"
                    },
                    DestinationConfig: {
                        shape: "S1g"
                    },
                    MaximumRecordAgeInSeconds: {
                        type: "integer"
                    },
                    BisectBatchOnFunctionError: {
                        type: "boolean"
                    },
                    MaximumRetryAttempts: {
                        type: "integer"
                    },
                    ParallelizationFactor: {
                        type: "integer"
                    },
                    SourceAccessConfigurations: {
                        shape: "S1s"
                    },
                    TumblingWindowInSeconds: {
                        type: "integer"
                    },
                    FunctionResponseTypes: {
                        shape: "S21"
                    },
                    ScalingConfig: {
                        shape: "S25"
                    },
                    DocumentDBEventSourceConfig: {
                        shape: "S27"
                    }
                }
            },
            output: {
                shape: "S2b"
            }
        },
        UpdateFunctionCode: {
            http: {
                method: "PUT",
                requestUri: "/2015-03-31/functions/{FunctionName}/code",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    ZipFile: {
                        shape: "S2h"
                    },
                    S3Bucket: {},
                    S3Key: {},
                    S3ObjectVersion: {},
                    ImageUri: {},
                    Publish: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    RevisionId: {},
                    Architectures: {
                        shape: "S3g"
                    }
                }
            },
            output: {
                shape: "S3r"
            }
        },
        UpdateFunctionConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/2015-03-31/functions/{FunctionName}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Role: {},
                    Handler: {},
                    Description: {},
                    Timeout: {
                        type: "integer"
                    },
                    MemorySize: {
                        type: "integer"
                    },
                    VpcConfig: {
                        shape: "S2o"
                    },
                    Environment: {
                        shape: "S2x"
                    },
                    Runtime: {},
                    DeadLetterConfig: {
                        shape: "S2v"
                    },
                    KMSKeyArn: {},
                    TracingConfig: {
                        shape: "S32"
                    },
                    RevisionId: {},
                    Layers: {
                        shape: "S37"
                    },
                    FileSystemConfigs: {
                        shape: "S39"
                    },
                    ImageConfig: {
                        shape: "S3d"
                    },
                    EphemeralStorage: {
                        shape: "S3i"
                    },
                    SnapStart: {
                        shape: "S3k"
                    },
                    LoggingConfig: {
                        shape: "S3m"
                    }
                }
            },
            output: {
                shape: "S3r"
            }
        },
        UpdateFunctionEventInvokeConfig: {
            http: {
                requestUri: "/2019-09-25/functions/{FunctionName}/event-invoke-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    },
                    MaximumRetryAttempts: {
                        type: "integer"
                    },
                    MaximumEventAgeInSeconds: {
                        type: "integer"
                    },
                    DestinationConfig: {
                        shape: "S1g"
                    }
                }
            },
            output: {
                shape: "S5q"
            }
        },
        UpdateFunctionUrlConfig: {
            http: {
                method: "PUT",
                requestUri: "/2021-10-31/functions/{FunctionName}/url",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FunctionName" ],
                members: {
                    FunctionName: {
                        location: "uri",
                        locationName: "FunctionName"
                    },
                    Qualifier: {
                        location: "querystring",
                        locationName: "Qualifier"
                    },
                    AuthType: {},
                    Cors: {
                        shape: "S4i"
                    },
                    InvokeMode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FunctionUrl", "FunctionArn", "AuthType", "CreationTime", "LastModifiedTime" ],
                members: {
                    FunctionUrl: {},
                    FunctionArn: {},
                    AuthType: {},
                    Cors: {
                        shape: "S4i"
                    },
                    CreationTime: {},
                    LastModifiedTime: {},
                    InvokeMode: {}
                }
            }
        }
    },
    shapes: {
        Sp: {
            type: "structure",
            members: {
                AdditionalVersionWeights: {
                    type: "map",
                    key: {},
                    value: {
                        type: "double"
                    }
                }
            }
        },
        St: {
            type: "structure",
            members: {
                AliasArn: {},
                Name: {},
                FunctionVersion: {},
                Description: {},
                RoutingConfig: {
                    shape: "Sp"
                },
                RevisionId: {}
            }
        },
        Sw: {
            type: "structure",
            required: [ "SigningProfileVersionArns" ],
            members: {
                SigningProfileVersionArns: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                UntrustedArtifactOnDeployment: {}
            }
        },
        S11: {
            type: "structure",
            required: [ "CodeSigningConfigId", "CodeSigningConfigArn", "AllowedPublishers", "CodeSigningPolicies", "LastModified" ],
            members: {
                CodeSigningConfigId: {},
                CodeSigningConfigArn: {},
                Description: {},
                AllowedPublishers: {
                    shape: "Sw"
                },
                CodeSigningPolicies: {
                    shape: "Sy"
                },
                LastModified: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                Filters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Pattern: {}
                        }
                    }
                }
            }
        },
        S1g: {
            type: "structure",
            members: {
                OnSuccess: {
                    type: "structure",
                    members: {
                        Destination: {}
                    }
                },
                OnFailure: {
                    type: "structure",
                    members: {
                        Destination: {}
                    }
                }
            }
        },
        S1o: {
            type: "list",
            member: {}
        },
        S1q: {
            type: "list",
            member: {}
        },
        S1s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    URI: {}
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                Endpoints: {
                    type: "map",
                    key: {},
                    value: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S21: {
            type: "list",
            member: {}
        },
        S23: {
            type: "structure",
            members: {
                ConsumerGroupId: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                ConsumerGroupId: {}
            }
        },
        S25: {
            type: "structure",
            members: {
                MaximumConcurrency: {
                    type: "integer"
                }
            }
        },
        S27: {
            type: "structure",
            members: {
                DatabaseName: {},
                CollectionName: {},
                FullDocument: {}
            }
        },
        S2b: {
            type: "structure",
            members: {
                UUID: {},
                StartingPosition: {},
                StartingPositionTimestamp: {
                    type: "timestamp"
                },
                BatchSize: {
                    type: "integer"
                },
                MaximumBatchingWindowInSeconds: {
                    type: "integer"
                },
                ParallelizationFactor: {
                    type: "integer"
                },
                EventSourceArn: {},
                FilterCriteria: {
                    shape: "S18"
                },
                FunctionArn: {},
                LastModified: {
                    type: "timestamp"
                },
                LastProcessingResult: {},
                State: {},
                StateTransitionReason: {},
                DestinationConfig: {
                    shape: "S1g"
                },
                Topics: {
                    shape: "S1o"
                },
                Queues: {
                    shape: "S1q"
                },
                SourceAccessConfigurations: {
                    shape: "S1s"
                },
                SelfManagedEventSource: {
                    shape: "S1w"
                },
                MaximumRecordAgeInSeconds: {
                    type: "integer"
                },
                BisectBatchOnFunctionError: {
                    type: "boolean"
                },
                MaximumRetryAttempts: {
                    type: "integer"
                },
                TumblingWindowInSeconds: {
                    type: "integer"
                },
                FunctionResponseTypes: {
                    shape: "S21"
                },
                AmazonManagedKafkaEventSourceConfig: {
                    shape: "S23"
                },
                SelfManagedKafkaEventSourceConfig: {
                    shape: "S24"
                },
                ScalingConfig: {
                    shape: "S25"
                },
                DocumentDBEventSourceConfig: {
                    shape: "S27"
                }
            }
        },
        S2h: {
            type: "blob",
            sensitive: true
        },
        S2o: {
            type: "structure",
            members: {
                SubnetIds: {
                    shape: "S2p"
                },
                SecurityGroupIds: {
                    shape: "S2r"
                },
                Ipv6AllowedForDualStack: {
                    type: "boolean"
                }
            }
        },
        S2p: {
            type: "list",
            member: {}
        },
        S2r: {
            type: "list",
            member: {}
        },
        S2v: {
            type: "structure",
            members: {
                TargetArn: {}
            }
        },
        S2x: {
            type: "structure",
            members: {
                Variables: {
                    shape: "S2y"
                }
            }
        },
        S2y: {
            type: "map",
            key: {
                type: "string",
                sensitive: true
            },
            value: {
                type: "string",
                sensitive: true
            },
            sensitive: true
        },
        S32: {
            type: "structure",
            members: {
                Mode: {}
            }
        },
        S34: {
            type: "map",
            key: {},
            value: {}
        },
        S37: {
            type: "list",
            member: {}
        },
        S39: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Arn", "LocalMountPath" ],
                members: {
                    Arn: {},
                    LocalMountPath: {}
                }
            }
        },
        S3d: {
            type: "structure",
            members: {
                EntryPoint: {
                    shape: "S3e"
                },
                Command: {
                    shape: "S3e"
                },
                WorkingDirectory: {}
            }
        },
        S3e: {
            type: "list",
            member: {}
        },
        S3g: {
            type: "list",
            member: {}
        },
        S3i: {
            type: "structure",
            required: [ "Size" ],
            members: {
                Size: {
                    type: "integer"
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                ApplyOn: {}
            }
        },
        S3m: {
            type: "structure",
            members: {
                LogFormat: {},
                ApplicationLogLevel: {},
                SystemLogLevel: {},
                LogGroup: {}
            }
        },
        S3r: {
            type: "structure",
            members: {
                FunctionName: {},
                FunctionArn: {},
                Runtime: {},
                Role: {},
                Handler: {},
                CodeSize: {
                    type: "long"
                },
                Description: {},
                Timeout: {
                    type: "integer"
                },
                MemorySize: {
                    type: "integer"
                },
                LastModified: {},
                CodeSha256: {},
                Version: {},
                VpcConfig: {
                    type: "structure",
                    members: {
                        SubnetIds: {
                            shape: "S2p"
                        },
                        SecurityGroupIds: {
                            shape: "S2r"
                        },
                        VpcId: {},
                        Ipv6AllowedForDualStack: {
                            type: "boolean"
                        }
                    }
                },
                DeadLetterConfig: {
                    shape: "S2v"
                },
                Environment: {
                    type: "structure",
                    members: {
                        Variables: {
                            shape: "S2y"
                        },
                        Error: {
                            type: "structure",
                            members: {
                                ErrorCode: {},
                                Message: {
                                    shape: "S3z"
                                }
                            }
                        }
                    }
                },
                KMSKeyArn: {},
                TracingConfig: {
                    type: "structure",
                    members: {
                        Mode: {}
                    }
                },
                MasterArn: {},
                RevisionId: {},
                Layers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Arn: {},
                            CodeSize: {
                                type: "long"
                            },
                            SigningProfileVersionArn: {},
                            SigningJobArn: {}
                        }
                    }
                },
                State: {},
                StateReason: {},
                StateReasonCode: {},
                LastUpdateStatus: {},
                LastUpdateStatusReason: {},
                LastUpdateStatusReasonCode: {},
                FileSystemConfigs: {
                    shape: "S39"
                },
                PackageType: {},
                ImageConfigResponse: {
                    type: "structure",
                    members: {
                        ImageConfig: {
                            shape: "S3d"
                        },
                        Error: {
                            type: "structure",
                            members: {
                                ErrorCode: {},
                                Message: {
                                    shape: "S3z"
                                }
                            }
                        }
                    }
                },
                SigningProfileVersionArn: {},
                SigningJobArn: {},
                Architectures: {
                    shape: "S3g"
                },
                EphemeralStorage: {
                    shape: "S3i"
                },
                SnapStart: {
                    type: "structure",
                    members: {
                        ApplyOn: {},
                        OptimizationStatus: {}
                    }
                },
                RuntimeVersionConfig: {
                    type: "structure",
                    members: {
                        RuntimeVersionArn: {},
                        Error: {
                            type: "structure",
                            members: {
                                ErrorCode: {},
                                Message: {
                                    shape: "S3z"
                                }
                            }
                        }
                    }
                },
                LoggingConfig: {
                    shape: "S3m"
                }
            }
        },
        S3z: {
            type: "string",
            sensitive: true
        },
        S4i: {
            type: "structure",
            members: {
                AllowCredentials: {
                    type: "boolean"
                },
                AllowHeaders: {
                    shape: "S4k"
                },
                AllowMethods: {
                    type: "list",
                    member: {}
                },
                AllowOrigins: {
                    type: "list",
                    member: {}
                },
                ExposeHeaders: {
                    shape: "S4k"
                },
                MaxAge: {
                    type: "integer"
                }
            }
        },
        S4k: {
            type: "list",
            member: {}
        },
        S5i: {
            type: "structure",
            members: {
                ReservedConcurrentExecutions: {
                    type: "integer"
                }
            }
        },
        S5q: {
            type: "structure",
            members: {
                LastModified: {
                    type: "timestamp"
                },
                FunctionArn: {},
                MaximumRetryAttempts: {
                    type: "integer"
                },
                MaximumEventAgeInSeconds: {
                    type: "integer"
                },
                DestinationConfig: {
                    shape: "S1g"
                }
            }
        },
        S5w: {
            type: "structure",
            members: {
                Content: {
                    shape: "S5x"
                },
                LayerArn: {},
                LayerVersionArn: {},
                Description: {},
                CreatedDate: {},
                Version: {
                    type: "long"
                },
                CompatibleRuntimes: {
                    shape: "S5z"
                },
                LicenseInfo: {},
                CompatibleArchitectures: {
                    shape: "S61"
                }
            }
        },
        S5x: {
            type: "structure",
            members: {
                Location: {},
                CodeSha256: {},
                CodeSize: {
                    type: "long"
                },
                SigningProfileVersionArn: {},
                SigningJobArn: {}
            }
        },
        S5z: {
            type: "list",
            member: {}
        },
        S61: {
            type: "list",
            member: {}
        },
        S7g: {
            type: "list",
            member: {
                shape: "S3r"
            }
        },
        S7o: {
            type: "structure",
            members: {
                LayerVersionArn: {},
                Version: {
                    type: "long"
                },
                Description: {},
                CreatedDate: {},
                CompatibleRuntimes: {
                    shape: "S5z"
                },
                LicenseInfo: {},
                CompatibleArchitectures: {
                    shape: "S61"
                }
            }
        }
    },
    paginators: {
        ListAliases: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "Aliases"
        },
        ListCodeSigningConfigs: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "CodeSigningConfigs"
        },
        ListEventSourceMappings: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "EventSourceMappings"
        },
        ListFunctionEventInvokeConfigs: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "FunctionEventInvokeConfigs"
        },
        ListFunctionUrlConfigs: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "FunctionUrlConfigs"
        },
        ListFunctions: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "Functions"
        },
        ListFunctionsByCodeSigningConfig: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "FunctionArns"
        },
        ListLayerVersions: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "LayerVersions"
        },
        ListLayers: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "Layers"
        },
        ListProvisionedConcurrencyConfigs: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "ProvisionedConcurrencyConfigs"
        },
        ListVersionsByFunction: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextMarker",
            result_key: "Versions"
        }
    },
    waiters: {
        FunctionExists: {
            delay: 1,
            operation: "GetFunction",
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 200
            }, {
                state: "retry",
                matcher: "error",
                expected: "ResourceNotFoundException"
            } ]
        },
        FunctionActive: {
            delay: 5,
            maxAttempts: 60,
            operation: "GetFunctionConfiguration",
            description: "Waits for the function's State to be Active. This waiter uses GetFunctionConfiguration API. This should be used after new function creation.",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "Active"
            }, {
                state: "failure",
                matcher: "path",
                argument: "State",
                expected: "Failed"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "Pending"
            } ]
        },
        FunctionUpdated: {
            delay: 5,
            maxAttempts: 60,
            operation: "GetFunctionConfiguration",
            description: "Waits for the function's LastUpdateStatus to be Successful. This waiter uses GetFunctionConfiguration API. This should be used after function updates.",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "LastUpdateStatus",
                expected: "Successful"
            }, {
                state: "failure",
                matcher: "path",
                argument: "LastUpdateStatus",
                expected: "Failed"
            }, {
                state: "retry",
                matcher: "path",
                argument: "LastUpdateStatus",
                expected: "InProgress"
            } ]
        },
        FunctionActiveV2: {
            delay: 1,
            maxAttempts: 300,
            operation: "GetFunction",
            description: "Waits for the function's State to be Active. This waiter uses GetFunction API. This should be used after new function creation.",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Configuration.State",
                expected: "Active"
            }, {
                state: "failure",
                matcher: "path",
                argument: "Configuration.State",
                expected: "Failed"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Configuration.State",
                expected: "Pending"
            } ]
        },
        FunctionUpdatedV2: {
            delay: 1,
            maxAttempts: 300,
            operation: "GetFunction",
            description: "Waits for the function's LastUpdateStatus to be Successful. This waiter uses GetFunction API. This should be used after function updates.",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Configuration.LastUpdateStatus",
                expected: "Successful"
            }, {
                state: "failure",
                matcher: "path",
                argument: "Configuration.LastUpdateStatus",
                expected: "Failed"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Configuration.LastUpdateStatus",
                expected: "InProgress"
            } ]
        },
        PublishedVersionActive: {
            delay: 5,
            maxAttempts: 312,
            operation: "GetFunctionConfiguration",
            description: "Waits for the published version's State to be Active. This waiter uses GetFunctionConfiguration API. This should be used after new version is published.",
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "Active"
            }, {
                state: "failure",
                matcher: "path",
                argument: "State",
                expected: "Failed"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "Pending"
            } ]
        }
    }
};

AWS.apiLoader.services["lexruntime"] = {};

AWS.LexRuntime = AWS.Service.defineService("lexruntime", [ "2016-11-28" ]);

AWS.apiLoader.services["lexruntime"]["2016-11-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-11-28",
        endpointPrefix: "runtime.lex",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Lex Runtime Service",
        serviceId: "Lex Runtime Service",
        signatureVersion: "v4",
        signingName: "lex",
        uid: "runtime.lex-2016-11-28"
    },
    operations: {
        DeleteSession: {
            http: {
                method: "DELETE",
                requestUri: "/bot/{botName}/alias/{botAlias}/user/{userId}/session"
            },
            input: {
                type: "structure",
                required: [ "botName", "botAlias", "userId" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "botAlias"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botName: {},
                    botAlias: {},
                    userId: {},
                    sessionId: {}
                }
            }
        },
        GetSession: {
            http: {
                method: "GET",
                requestUri: "/bot/{botName}/alias/{botAlias}/user/{userId}/session/"
            },
            input: {
                type: "structure",
                required: [ "botName", "botAlias", "userId" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "botAlias"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    checkpointLabelFilter: {
                        location: "querystring",
                        locationName: "checkpointLabelFilter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recentIntentSummaryView: {
                        shape: "Sa"
                    },
                    sessionAttributes: {
                        shape: "Sd"
                    },
                    sessionId: {},
                    dialogAction: {
                        shape: "Sh"
                    },
                    activeContexts: {
                        shape: "Sk"
                    }
                }
            }
        },
        PostContent: {
            http: {
                requestUri: "/bot/{botName}/alias/{botAlias}/user/{userId}/content"
            },
            input: {
                type: "structure",
                required: [ "botName", "botAlias", "userId", "contentType", "inputStream" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "botAlias"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    sessionAttributes: {
                        shape: "St",
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-session-attributes"
                    },
                    requestAttributes: {
                        shape: "St",
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-request-attributes"
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    inputStream: {
                        shape: "Sw"
                    },
                    activeContexts: {
                        shape: "Sx",
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-active-contexts"
                    }
                },
                payload: "inputStream"
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    intentName: {
                        location: "header",
                        locationName: "x-amz-lex-intent-name"
                    },
                    nluIntentConfidence: {
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-nlu-intent-confidence"
                    },
                    alternativeIntents: {
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-alternative-intents"
                    },
                    slots: {
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-slots"
                    },
                    sessionAttributes: {
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-session-attributes"
                    },
                    sentimentResponse: {
                        location: "header",
                        locationName: "x-amz-lex-sentiment"
                    },
                    message: {
                        shape: "Si",
                        deprecated: true,
                        deprecatedMessage: "The message field is deprecated, use the encodedMessage field instead. The message field is available only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR and it-IT locales.",
                        location: "header",
                        locationName: "x-amz-lex-message"
                    },
                    encodedMessage: {
                        shape: "Sz",
                        location: "header",
                        locationName: "x-amz-lex-encoded-message"
                    },
                    messageFormat: {
                        location: "header",
                        locationName: "x-amz-lex-message-format"
                    },
                    dialogState: {
                        location: "header",
                        locationName: "x-amz-lex-dialog-state"
                    },
                    slotToElicit: {
                        location: "header",
                        locationName: "x-amz-lex-slot-to-elicit"
                    },
                    inputTranscript: {
                        deprecated: true,
                        deprecatedMessage: "The inputTranscript field is deprecated, use the encodedInputTranscript field instead. The inputTranscript field is available only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR and it-IT locales.",
                        location: "header",
                        locationName: "x-amz-lex-input-transcript"
                    },
                    encodedInputTranscript: {
                        location: "header",
                        locationName: "x-amz-lex-encoded-input-transcript",
                        type: "string",
                        sensitive: true
                    },
                    audioStream: {
                        shape: "Sw"
                    },
                    botVersion: {
                        location: "header",
                        locationName: "x-amz-lex-bot-version"
                    },
                    sessionId: {
                        location: "header",
                        locationName: "x-amz-lex-session-id"
                    },
                    activeContexts: {
                        shape: "Sx",
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-active-contexts"
                    }
                },
                payload: "audioStream"
            },
            authtype: "v4-unsigned-body"
        },
        PostText: {
            http: {
                requestUri: "/bot/{botName}/alias/{botAlias}/user/{userId}/text"
            },
            input: {
                type: "structure",
                required: [ "botName", "botAlias", "userId", "inputText" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "botAlias"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    sessionAttributes: {
                        shape: "Sd"
                    },
                    requestAttributes: {
                        shape: "Sd"
                    },
                    inputText: {
                        shape: "Si"
                    },
                    activeContexts: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intentName: {},
                    nluIntentConfidence: {
                        shape: "S15"
                    },
                    alternativeIntents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                intentName: {},
                                nluIntentConfidence: {
                                    shape: "S15"
                                },
                                slots: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    slots: {
                        shape: "Sd"
                    },
                    sessionAttributes: {
                        shape: "Sd"
                    },
                    message: {
                        shape: "Si"
                    },
                    sentimentResponse: {
                        type: "structure",
                        members: {
                            sentimentLabel: {},
                            sentimentScore: {}
                        }
                    },
                    messageFormat: {},
                    dialogState: {},
                    slotToElicit: {},
                    responseCard: {
                        type: "structure",
                        members: {
                            version: {},
                            contentType: {},
                            genericAttachments: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        title: {},
                                        subTitle: {},
                                        attachmentLinkUrl: {},
                                        imageUrl: {},
                                        buttons: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "text", "value" ],
                                                members: {
                                                    text: {},
                                                    value: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    sessionId: {},
                    botVersion: {},
                    activeContexts: {
                        shape: "Sk"
                    }
                }
            }
        },
        PutSession: {
            http: {
                requestUri: "/bot/{botName}/alias/{botAlias}/user/{userId}/session"
            },
            input: {
                type: "structure",
                required: [ "botName", "botAlias", "userId" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "botAlias"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    sessionAttributes: {
                        shape: "Sd"
                    },
                    dialogAction: {
                        shape: "Sh"
                    },
                    recentIntentSummaryView: {
                        shape: "Sa"
                    },
                    accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    activeContexts: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    intentName: {
                        location: "header",
                        locationName: "x-amz-lex-intent-name"
                    },
                    slots: {
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-slots"
                    },
                    sessionAttributes: {
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-session-attributes"
                    },
                    message: {
                        shape: "Si",
                        deprecated: true,
                        deprecatedMessage: "The message field is deprecated, use the encodedMessage field instead. The message field is available only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR and it-IT locales.",
                        location: "header",
                        locationName: "x-amz-lex-message"
                    },
                    encodedMessage: {
                        shape: "Sz",
                        location: "header",
                        locationName: "x-amz-lex-encoded-message"
                    },
                    messageFormat: {
                        location: "header",
                        locationName: "x-amz-lex-message-format"
                    },
                    dialogState: {
                        location: "header",
                        locationName: "x-amz-lex-dialog-state"
                    },
                    slotToElicit: {
                        location: "header",
                        locationName: "x-amz-lex-slot-to-elicit"
                    },
                    audioStream: {
                        shape: "Sw"
                    },
                    sessionId: {
                        location: "header",
                        locationName: "x-amz-lex-session-id"
                    },
                    activeContexts: {
                        shape: "Sx",
                        jsonvalue: true,
                        location: "header",
                        locationName: "x-amz-lex-active-contexts"
                    }
                },
                payload: "audioStream"
            }
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "dialogActionType" ],
                members: {
                    intentName: {},
                    checkpointLabel: {},
                    slots: {
                        shape: "Sd"
                    },
                    confirmationStatus: {},
                    dialogActionType: {},
                    fulfillmentState: {},
                    slotToElicit: {}
                }
            }
        },
        Sd: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sh: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                intentName: {},
                slots: {
                    shape: "Sd"
                },
                slotToElicit: {},
                fulfillmentState: {},
                message: {
                    shape: "Si"
                },
                messageFormat: {}
            }
        },
        Si: {
            type: "string",
            sensitive: true
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "timeToLive", "parameters" ],
                members: {
                    name: {},
                    timeToLive: {
                        type: "structure",
                        members: {
                            timeToLiveInSeconds: {
                                type: "integer"
                            },
                            turnsToLive: {
                                type: "integer"
                            }
                        }
                    },
                    parameters: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "Si"
                        }
                    }
                }
            },
            sensitive: true
        },
        St: {
            type: "string",
            sensitive: true
        },
        Sw: {
            type: "blob",
            streaming: true
        },
        Sx: {
            type: "string",
            sensitive: true
        },
        Sz: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "structure",
            members: {
                score: {
                    type: "double"
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["lightsail"] = {};

AWS.Lightsail = AWS.Service.defineService("lightsail", [ "2016-11-28" ]);

AWS.apiLoader.services["lightsail"]["2016-11-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-11-28",
        endpointPrefix: "lightsail",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Lightsail",
        serviceId: "Lightsail",
        signatureVersion: "v4",
        targetPrefix: "Lightsail_20161128",
        uid: "lightsail-2016-11-28"
    },
    operations: {
        AllocateStaticIp: {
            input: {
                type: "structure",
                required: [ "staticIpName" ],
                members: {
                    staticIpName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        AttachCertificateToDistribution: {
            input: {
                type: "structure",
                required: [ "distributionName", "certificateName" ],
                members: {
                    distributionName: {},
                    certificateName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        AttachDisk: {
            input: {
                type: "structure",
                required: [ "diskName", "instanceName", "diskPath" ],
                members: {
                    diskName: {},
                    instanceName: {},
                    diskPath: {},
                    autoMounting: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        AttachInstancesToLoadBalancer: {
            input: {
                type: "structure",
                required: [ "loadBalancerName", "instanceNames" ],
                members: {
                    loadBalancerName: {},
                    instanceNames: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        AttachLoadBalancerTlsCertificate: {
            input: {
                type: "structure",
                required: [ "loadBalancerName", "certificateName" ],
                members: {
                    loadBalancerName: {},
                    certificateName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        AttachStaticIp: {
            input: {
                type: "structure",
                required: [ "staticIpName", "instanceName" ],
                members: {
                    staticIpName: {},
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CloseInstancePublicPorts: {
            input: {
                type: "structure",
                required: [ "portInfo", "instanceName" ],
                members: {
                    portInfo: {
                        shape: "Sr"
                    },
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        CopySnapshot: {
            input: {
                type: "structure",
                required: [ "targetSnapshotName", "sourceRegion" ],
                members: {
                    sourceSnapshotName: {},
                    sourceResourceName: {},
                    restoreDate: {},
                    useLatestRestorableAutoSnapshot: {
                        type: "boolean"
                    },
                    targetSnapshotName: {},
                    sourceRegion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateBucket: {
            input: {
                type: "structure",
                required: [ "bucketName", "bundleId" ],
                members: {
                    bucketName: {},
                    bundleId: {},
                    tags: {
                        shape: "S10"
                    },
                    enableObjectVersioning: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bucket: {
                        shape: "S15"
                    },
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateBucketAccessKey: {
            input: {
                type: "structure",
                required: [ "bucketName" ],
                members: {
                    bucketName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessKey: {
                        shape: "S1g"
                    },
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateCertificate: {
            input: {
                type: "structure",
                required: [ "certificateName", "domainName" ],
                members: {
                    certificateName: {},
                    domainName: {},
                    subjectAlternativeNames: {
                        shape: "S1n"
                    },
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificate: {
                        shape: "S1p"
                    },
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateCloudFormationStack: {
            input: {
                type: "structure",
                required: [ "instances" ],
                members: {
                    instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sourceName", "instanceType", "portInfoSource", "availabilityZone" ],
                            members: {
                                sourceName: {},
                                instanceType: {},
                                portInfoSource: {},
                                userData: {},
                                availabilityZone: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateContactMethod: {
            input: {
                type: "structure",
                required: [ "protocol", "contactEndpoint" ],
                members: {
                    protocol: {},
                    contactEndpoint: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateContainerService: {
            input: {
                type: "structure",
                required: [ "serviceName", "power", "scale" ],
                members: {
                    serviceName: {},
                    power: {},
                    scale: {
                        type: "integer"
                    },
                    tags: {
                        shape: "S10"
                    },
                    publicDomainNames: {
                        shape: "S2l"
                    },
                    deployment: {
                        type: "structure",
                        members: {
                            containers: {
                                shape: "S2o"
                            },
                            publicEndpoint: {
                                shape: "S2u"
                            }
                        }
                    },
                    privateRegistryAccess: {
                        shape: "S2x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    containerService: {
                        shape: "S30"
                    }
                }
            }
        },
        CreateContainerServiceDeployment: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceName: {},
                    containers: {
                        shape: "S2o"
                    },
                    publicEndpoint: {
                        shape: "S2u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    containerService: {
                        shape: "S30"
                    }
                }
            }
        },
        CreateContainerServiceRegistryLogin: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    registryLogin: {
                        type: "structure",
                        members: {
                            username: {},
                            password: {},
                            expiresAt: {
                                type: "timestamp"
                            },
                            registry: {}
                        }
                    }
                }
            }
        },
        CreateDisk: {
            input: {
                type: "structure",
                required: [ "diskName", "availabilityZone", "sizeInGb" ],
                members: {
                    diskName: {},
                    availabilityZone: {},
                    sizeInGb: {
                        type: "integer"
                    },
                    tags: {
                        shape: "S10"
                    },
                    addOns: {
                        shape: "S3f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateDiskFromSnapshot: {
            input: {
                type: "structure",
                required: [ "diskName", "availabilityZone", "sizeInGb" ],
                members: {
                    diskName: {},
                    diskSnapshotName: {},
                    availabilityZone: {},
                    sizeInGb: {
                        type: "integer"
                    },
                    tags: {
                        shape: "S10"
                    },
                    addOns: {
                        shape: "S3f"
                    },
                    sourceDiskName: {},
                    restoreDate: {},
                    useLatestRestorableAutoSnapshot: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateDiskSnapshot: {
            input: {
                type: "structure",
                required: [ "diskSnapshotName" ],
                members: {
                    diskName: {},
                    diskSnapshotName: {},
                    instanceName: {},
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateDistribution: {
            input: {
                type: "structure",
                required: [ "distributionName", "origin", "defaultCacheBehavior", "bundleId" ],
                members: {
                    distributionName: {},
                    origin: {
                        shape: "S3r"
                    },
                    defaultCacheBehavior: {
                        shape: "S3t"
                    },
                    cacheBehaviorSettings: {
                        shape: "S3v"
                    },
                    cacheBehaviors: {
                        shape: "S43"
                    },
                    bundleId: {},
                    ipAddressType: {},
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    distribution: {
                        shape: "S47"
                    },
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateDomain: {
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {},
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateDomainEntry: {
            input: {
                type: "structure",
                required: [ "domainName", "domainEntry" ],
                members: {
                    domainName: {},
                    domainEntry: {
                        shape: "S4c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateGUISessionAccessDetails: {
            input: {
                type: "structure",
                required: [ "resourceName" ],
                members: {
                    resourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceName: {},
                    status: {},
                    percentageComplete: {
                        type: "integer"
                    },
                    failureReason: {},
                    sessions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                url: {
                                    type: "string",
                                    sensitive: true
                                },
                                isPrimary: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateInstanceSnapshot: {
            input: {
                type: "structure",
                required: [ "instanceSnapshotName", "instanceName" ],
                members: {
                    instanceSnapshotName: {},
                    instanceName: {},
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateInstances: {
            input: {
                type: "structure",
                required: [ "instanceNames", "availabilityZone", "blueprintId", "bundleId" ],
                members: {
                    instanceNames: {
                        shape: "Su"
                    },
                    availabilityZone: {},
                    customImageName: {
                        deprecated: true
                    },
                    blueprintId: {},
                    bundleId: {},
                    userData: {},
                    keyPairName: {},
                    tags: {
                        shape: "S10"
                    },
                    addOns: {
                        shape: "S3f"
                    },
                    ipAddressType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateInstancesFromSnapshot: {
            input: {
                type: "structure",
                required: [ "instanceNames", "availabilityZone", "bundleId" ],
                members: {
                    instanceNames: {
                        shape: "Su"
                    },
                    attachedDiskMapping: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    originalDiskPath: {},
                                    newDiskName: {}
                                }
                            }
                        }
                    },
                    availabilityZone: {},
                    instanceSnapshotName: {},
                    bundleId: {},
                    userData: {},
                    keyPairName: {},
                    tags: {
                        shape: "S10"
                    },
                    addOns: {
                        shape: "S3f"
                    },
                    ipAddressType: {},
                    sourceInstanceName: {},
                    restoreDate: {},
                    useLatestRestorableAutoSnapshot: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateKeyPair: {
            input: {
                type: "structure",
                required: [ "keyPairName" ],
                members: {
                    keyPairName: {},
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    keyPair: {
                        shape: "S4y"
                    },
                    publicKeyBase64: {},
                    privateKeyBase64: {},
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateLoadBalancer: {
            input: {
                type: "structure",
                required: [ "loadBalancerName", "instancePort" ],
                members: {
                    loadBalancerName: {},
                    instancePort: {
                        type: "integer"
                    },
                    healthCheckPath: {},
                    certificateName: {},
                    certificateDomainName: {},
                    certificateAlternativeNames: {
                        shape: "S51"
                    },
                    tags: {
                        shape: "S10"
                    },
                    ipAddressType: {},
                    tlsPolicyName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateLoadBalancerTlsCertificate: {
            input: {
                type: "structure",
                required: [ "loadBalancerName", "certificateName", "certificateDomainName" ],
                members: {
                    loadBalancerName: {},
                    certificateName: {},
                    certificateDomainName: {},
                    certificateAlternativeNames: {
                        shape: "S51"
                    },
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateRelationalDatabase: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName", "relationalDatabaseBlueprintId", "relationalDatabaseBundleId", "masterDatabaseName", "masterUsername" ],
                members: {
                    relationalDatabaseName: {},
                    availabilityZone: {},
                    relationalDatabaseBlueprintId: {},
                    relationalDatabaseBundleId: {},
                    masterDatabaseName: {},
                    masterUsername: {},
                    masterUserPassword: {
                        shape: "S56"
                    },
                    preferredBackupWindow: {},
                    preferredMaintenanceWindow: {},
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateRelationalDatabaseFromSnapshot: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {},
                    availabilityZone: {},
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    relationalDatabaseSnapshotName: {},
                    relationalDatabaseBundleId: {},
                    sourceRelationalDatabaseName: {},
                    restoreTime: {
                        type: "timestamp"
                    },
                    useLatestRestorableTime: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateRelationalDatabaseSnapshot: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName", "relationalDatabaseSnapshotName" ],
                members: {
                    relationalDatabaseName: {},
                    relationalDatabaseSnapshotName: {},
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteAlarm: {
            input: {
                type: "structure",
                required: [ "alarmName" ],
                members: {
                    alarmName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteAutoSnapshot: {
            input: {
                type: "structure",
                required: [ "resourceName", "date" ],
                members: {
                    resourceName: {},
                    date: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteBucket: {
            input: {
                type: "structure",
                required: [ "bucketName" ],
                members: {
                    bucketName: {},
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteBucketAccessKey: {
            input: {
                type: "structure",
                required: [ "bucketName", "accessKeyId" ],
                members: {
                    bucketName: {},
                    accessKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteCertificate: {
            input: {
                type: "structure",
                required: [ "certificateName" ],
                members: {
                    certificateName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteContactMethod: {
            input: {
                type: "structure",
                required: [ "protocol" ],
                members: {
                    protocol: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteContainerImage: {
            input: {
                type: "structure",
                required: [ "serviceName", "image" ],
                members: {
                    serviceName: {},
                    image: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContainerService: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDisk: {
            input: {
                type: "structure",
                required: [ "diskName" ],
                members: {
                    diskName: {},
                    forceDeleteAddOns: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteDiskSnapshot: {
            input: {
                type: "structure",
                required: [ "diskSnapshotName" ],
                members: {
                    diskSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteDistribution: {
            input: {
                type: "structure",
                members: {
                    distributionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteDomain: {
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteDomainEntry: {
            input: {
                type: "structure",
                required: [ "domainName", "domainEntry" ],
                members: {
                    domainName: {},
                    domainEntry: {
                        shape: "S4c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteInstance: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {},
                    forceDeleteAddOns: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteInstanceSnapshot: {
            input: {
                type: "structure",
                required: [ "instanceSnapshotName" ],
                members: {
                    instanceSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteKeyPair: {
            input: {
                type: "structure",
                required: [ "keyPairName" ],
                members: {
                    keyPairName: {},
                    expectedFingerprint: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteKnownHostKeys: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteLoadBalancer: {
            input: {
                type: "structure",
                required: [ "loadBalancerName" ],
                members: {
                    loadBalancerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteLoadBalancerTlsCertificate: {
            input: {
                type: "structure",
                required: [ "loadBalancerName", "certificateName" ],
                members: {
                    loadBalancerName: {},
                    certificateName: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteRelationalDatabase: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {},
                    skipFinalSnapshot: {
                        type: "boolean"
                    },
                    finalRelationalDatabaseSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteRelationalDatabaseSnapshot: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseSnapshotName" ],
                members: {
                    relationalDatabaseSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DetachCertificateFromDistribution: {
            input: {
                type: "structure",
                required: [ "distributionName" ],
                members: {
                    distributionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        DetachDisk: {
            input: {
                type: "structure",
                required: [ "diskName" ],
                members: {
                    diskName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DetachInstancesFromLoadBalancer: {
            input: {
                type: "structure",
                required: [ "loadBalancerName", "instanceNames" ],
                members: {
                    loadBalancerName: {},
                    instanceNames: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DetachStaticIp: {
            input: {
                type: "structure",
                required: [ "staticIpName" ],
                members: {
                    staticIpName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DisableAddOn: {
            input: {
                type: "structure",
                required: [ "addOnType", "resourceName" ],
                members: {
                    addOnType: {},
                    resourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        DownloadDefaultKeyPair: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    publicKeyBase64: {},
                    privateKeyBase64: {},
                    createdAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        EnableAddOn: {
            input: {
                type: "structure",
                required: [ "resourceName", "addOnRequest" ],
                members: {
                    resourceName: {},
                    addOnRequest: {
                        shape: "S3g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        ExportSnapshot: {
            input: {
                type: "structure",
                required: [ "sourceSnapshotName" ],
                members: {
                    sourceSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        GetActiveNames: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    activeNames: {
                        shape: "Su"
                    },
                    nextPageToken: {}
                }
            }
        },
        GetAlarms: {
            input: {
                type: "structure",
                members: {
                    alarmName: {},
                    pageToken: {},
                    monitoredResourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    alarms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                location: {
                                    shape: "S9"
                                },
                                resourceType: {},
                                supportCode: {},
                                monitoredResourceInfo: {
                                    type: "structure",
                                    members: {
                                        arn: {},
                                        name: {},
                                        resourceType: {}
                                    }
                                },
                                comparisonOperator: {},
                                evaluationPeriods: {
                                    type: "integer"
                                },
                                period: {
                                    type: "integer"
                                },
                                threshold: {
                                    type: "double"
                                },
                                datapointsToAlarm: {
                                    type: "integer"
                                },
                                treatMissingData: {},
                                statistic: {},
                                metricName: {},
                                state: {},
                                unit: {},
                                contactProtocols: {
                                    shape: "S7f"
                                },
                                notificationTriggers: {
                                    shape: "S7g"
                                },
                                notificationEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetAutoSnapshots: {
            input: {
                type: "structure",
                required: [ "resourceName" ],
                members: {
                    resourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceName: {},
                    resourceType: {},
                    autoSnapshots: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                date: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                status: {},
                                fromAttachedDisks: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            path: {},
                                            sizeInGb: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetBlueprints: {
            input: {
                type: "structure",
                members: {
                    includeInactive: {
                        type: "boolean"
                    },
                    pageToken: {},
                    appCategory: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    blueprints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                blueprintId: {},
                                name: {},
                                group: {},
                                type: {},
                                description: {},
                                isActive: {
                                    type: "boolean"
                                },
                                minPower: {
                                    type: "integer"
                                },
                                version: {},
                                versionCode: {},
                                productUrl: {},
                                licenseUrl: {},
                                platform: {},
                                appCategory: {}
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetBucketAccessKeys: {
            input: {
                type: "structure",
                required: [ "bucketName" ],
                members: {
                    bucketName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessKeys: {
                        type: "list",
                        member: {
                            shape: "S1g"
                        }
                    }
                }
            }
        },
        GetBucketBundles: {
            input: {
                type: "structure",
                members: {
                    includeInactive: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bundles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                bundleId: {},
                                name: {},
                                price: {
                                    type: "float"
                                },
                                storagePerMonthInGb: {
                                    type: "integer"
                                },
                                transferPerMonthInGb: {
                                    type: "integer"
                                },
                                isActive: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetBucketMetricData: {
            input: {
                type: "structure",
                required: [ "bucketName", "metricName", "startTime", "endTime", "period", "statistics", "unit" ],
                members: {
                    bucketName: {},
                    metricName: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    period: {
                        type: "integer"
                    },
                    statistics: {
                        shape: "S85"
                    },
                    unit: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricData: {
                        shape: "S87"
                    }
                }
            }
        },
        GetBuckets: {
            input: {
                type: "structure",
                members: {
                    bucketName: {},
                    pageToken: {},
                    includeConnectedResources: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    buckets: {
                        type: "list",
                        member: {
                            shape: "S15"
                        }
                    },
                    nextPageToken: {},
                    accountLevelBpaSync: {
                        type: "structure",
                        members: {
                            status: {},
                            lastSyncedAt: {
                                type: "timestamp"
                            },
                            message: {},
                            bpaImpactsLightsail: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        GetBundles: {
            input: {
                type: "structure",
                members: {
                    includeInactive: {
                        type: "boolean"
                    },
                    pageToken: {},
                    appCategory: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    bundles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                price: {
                                    type: "float"
                                },
                                cpuCount: {
                                    type: "integer"
                                },
                                diskSizeInGb: {
                                    type: "integer"
                                },
                                bundleId: {},
                                instanceType: {},
                                isActive: {
                                    type: "boolean"
                                },
                                name: {},
                                power: {
                                    type: "integer"
                                },
                                ramSizeInGb: {
                                    type: "float"
                                },
                                transferPerMonthInGb: {
                                    type: "integer"
                                },
                                supportedPlatforms: {
                                    type: "list",
                                    member: {}
                                },
                                supportedAppCategories: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetCertificates: {
            input: {
                type: "structure",
                members: {
                    certificateStatuses: {
                        type: "list",
                        member: {}
                    },
                    includeCertificateDetails: {
                        type: "boolean"
                    },
                    certificateName: {},
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    certificates: {
                        type: "list",
                        member: {
                            shape: "S1p"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetCloudFormationStackRecords: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    cloudFormationStackRecords: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                location: {
                                    shape: "S9"
                                },
                                resourceType: {},
                                state: {},
                                sourceInfo: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            resourceType: {},
                                            name: {},
                                            arn: {}
                                        }
                                    }
                                },
                                destinationInfo: {
                                    shape: "S8z"
                                }
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetContactMethods: {
            input: {
                type: "structure",
                members: {
                    protocols: {
                        shape: "S7f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contactMethods: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                contactEndpoint: {},
                                status: {},
                                protocol: {},
                                name: {},
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                location: {
                                    shape: "S9"
                                },
                                resourceType: {},
                                supportCode: {}
                            }
                        }
                    }
                }
            }
        },
        GetContainerAPIMetadata: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    metadata: {
                        type: "list",
                        member: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    }
                }
            }
        },
        GetContainerImages: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    containerImages: {
                        type: "list",
                        member: {
                            shape: "S9c"
                        }
                    }
                }
            }
        },
        GetContainerLog: {
            input: {
                type: "structure",
                required: [ "serviceName", "containerName" ],
                members: {
                    serviceName: {},
                    containerName: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    filterPattern: {},
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    logEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                message: {}
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetContainerServiceDeployments: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deployments: {
                        type: "list",
                        member: {
                            shape: "S34"
                        }
                    }
                }
            }
        },
        GetContainerServiceMetricData: {
            input: {
                type: "structure",
                required: [ "serviceName", "metricName", "startTime", "endTime", "period", "statistics" ],
                members: {
                    serviceName: {},
                    metricName: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    period: {
                        type: "integer"
                    },
                    statistics: {
                        shape: "S85"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricData: {
                        shape: "S87"
                    }
                }
            }
        },
        GetContainerServicePowers: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    powers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                powerId: {},
                                price: {
                                    type: "float"
                                },
                                cpuCount: {
                                    type: "float"
                                },
                                ramSizeInGb: {
                                    type: "float"
                                },
                                name: {},
                                isActive: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetContainerServices: {
            input: {
                type: "structure",
                members: {
                    serviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    containerServices: {
                        type: "list",
                        member: {
                            shape: "S30"
                        }
                    }
                }
            }
        },
        GetCostEstimate: {
            input: {
                type: "structure",
                required: [ "resourceName", "startTime", "endTime" ],
                members: {
                    resourceName: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourcesBudgetEstimate: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceName: {},
                                resourceType: {},
                                costEstimates: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            usageType: {},
                                            resultsByTime: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        usageCost: {
                                                            type: "double"
                                                        },
                                                        pricingUnit: {},
                                                        unit: {
                                                            type: "double"
                                                        },
                                                        currency: {},
                                                        timePeriod: {
                                                            type: "structure",
                                                            members: {
                                                                start: {
                                                                    type: "timestamp"
                                                                },
                                                                end: {
                                                                    type: "timestamp"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                startTime: {
                                    type: "timestamp"
                                },
                                endTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDisk: {
            input: {
                type: "structure",
                required: [ "diskName" ],
                members: {
                    diskName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    disk: {
                        shape: "Sa7"
                    }
                }
            }
        },
        GetDiskSnapshot: {
            input: {
                type: "structure",
                required: [ "diskSnapshotName" ],
                members: {
                    diskSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    diskSnapshot: {
                        shape: "Sae"
                    }
                }
            }
        },
        GetDiskSnapshots: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    diskSnapshots: {
                        type: "list",
                        member: {
                            shape: "Sae"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetDisks: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    disks: {
                        shape: "Sal"
                    },
                    nextPageToken: {}
                }
            }
        },
        GetDistributionBundles: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    bundles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                bundleId: {},
                                name: {},
                                price: {
                                    type: "float"
                                },
                                transferPerMonthInGb: {
                                    type: "integer"
                                },
                                isActive: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDistributionLatestCacheReset: {
            input: {
                type: "structure",
                members: {
                    distributionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    createTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetDistributionMetricData: {
            input: {
                type: "structure",
                required: [ "distributionName", "metricName", "startTime", "endTime", "period", "unit", "statistics" ],
                members: {
                    distributionName: {},
                    metricName: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    period: {
                        type: "integer"
                    },
                    unit: {},
                    statistics: {
                        shape: "S85"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricData: {
                        shape: "S87"
                    }
                }
            }
        },
        GetDistributions: {
            input: {
                type: "structure",
                members: {
                    distributionName: {},
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    distributions: {
                        type: "list",
                        member: {
                            shape: "S47"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetDomain: {
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domain: {
                        shape: "Sb0"
                    }
                }
            }
        },
        GetDomains: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domains: {
                        type: "list",
                        member: {
                            shape: "Sb0"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetExportSnapshotRecords: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    exportSnapshotRecords: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                location: {
                                    shape: "S9"
                                },
                                resourceType: {},
                                state: {},
                                sourceInfo: {
                                    type: "structure",
                                    members: {
                                        resourceType: {},
                                        createdAt: {
                                            type: "timestamp"
                                        },
                                        name: {},
                                        arn: {},
                                        fromResourceName: {},
                                        fromResourceArn: {},
                                        instanceSnapshotInfo: {
                                            type: "structure",
                                            members: {
                                                fromBundleId: {},
                                                fromBlueprintId: {},
                                                fromDiskInfo: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            name: {},
                                                            path: {},
                                                            sizeInGb: {
                                                                type: "integer"
                                                            },
                                                            isSystemDisk: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        diskSnapshotInfo: {
                                            type: "structure",
                                            members: {
                                                sizeInGb: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                },
                                destinationInfo: {
                                    shape: "S8z"
                                }
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetInstance: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    instance: {
                        shape: "Sbm"
                    }
                }
            }
        },
        GetInstanceAccessDetails: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {},
                    protocol: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accessDetails: {
                        type: "structure",
                        members: {
                            certKey: {},
                            expiresAt: {
                                type: "timestamp"
                            },
                            ipAddress: {},
                            password: {},
                            passwordData: {
                                type: "structure",
                                members: {
                                    ciphertext: {},
                                    keyPairName: {}
                                }
                            },
                            privateKey: {},
                            protocol: {},
                            instanceName: {},
                            username: {},
                            hostKeys: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        algorithm: {},
                                        publicKey: {},
                                        witnessedAt: {
                                            type: "timestamp"
                                        },
                                        fingerprintSHA1: {},
                                        fingerprintSHA256: {},
                                        notValidBefore: {
                                            type: "timestamp"
                                        },
                                        notValidAfter: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetInstanceMetricData: {
            input: {
                type: "structure",
                required: [ "instanceName", "metricName", "period", "startTime", "endTime", "unit", "statistics" ],
                members: {
                    instanceName: {},
                    metricName: {},
                    period: {
                        type: "integer"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    unit: {},
                    statistics: {
                        shape: "S85"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricData: {
                        shape: "S87"
                    }
                }
            }
        },
        GetInstancePortStates: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    portStates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                fromPort: {
                                    type: "integer"
                                },
                                toPort: {
                                    type: "integer"
                                },
                                protocol: {},
                                state: {},
                                cidrs: {
                                    shape: "Su"
                                },
                                ipv6Cidrs: {
                                    shape: "Su"
                                },
                                cidrListAliases: {
                                    shape: "Su"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetInstanceSnapshot: {
            input: {
                type: "structure",
                required: [ "instanceSnapshotName" ],
                members: {
                    instanceSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceSnapshot: {
                        shape: "Sck"
                    }
                }
            }
        },
        GetInstanceSnapshots: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceSnapshots: {
                        type: "list",
                        member: {
                            shape: "Sck"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetInstanceState: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    state: {
                        shape: "Sbx"
                    }
                }
            }
        },
        GetInstances: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    instances: {
                        type: "list",
                        member: {
                            shape: "Sbm"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetKeyPair: {
            input: {
                type: "structure",
                required: [ "keyPairName" ],
                members: {
                    keyPairName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    keyPair: {
                        shape: "S4y"
                    }
                }
            }
        },
        GetKeyPairs: {
            input: {
                type: "structure",
                members: {
                    pageToken: {},
                    includeDefaultKeyPair: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    keyPairs: {
                        type: "list",
                        member: {
                            shape: "S4y"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetLoadBalancer: {
            input: {
                type: "structure",
                required: [ "loadBalancerName" ],
                members: {
                    loadBalancerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    loadBalancer: {
                        shape: "Sd1"
                    }
                }
            }
        },
        GetLoadBalancerMetricData: {
            input: {
                type: "structure",
                required: [ "loadBalancerName", "metricName", "period", "startTime", "endTime", "unit", "statistics" ],
                members: {
                    loadBalancerName: {},
                    metricName: {},
                    period: {
                        type: "integer"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    unit: {},
                    statistics: {
                        shape: "S85"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricData: {
                        shape: "S87"
                    }
                }
            }
        },
        GetLoadBalancerTlsCertificates: {
            input: {
                type: "structure",
                required: [ "loadBalancerName" ],
                members: {
                    loadBalancerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tlsCertificates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                supportCode: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                location: {
                                    shape: "S9"
                                },
                                resourceType: {},
                                tags: {
                                    shape: "S10"
                                },
                                loadBalancerName: {},
                                isAttached: {
                                    type: "boolean"
                                },
                                status: {},
                                domainName: {},
                                domainValidationRecords: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            type: {},
                                            value: {},
                                            validationStatus: {},
                                            domainName: {},
                                            dnsRecordCreationState: {
                                                type: "structure",
                                                members: {
                                                    code: {},
                                                    message: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                failureReason: {},
                                issuedAt: {
                                    type: "timestamp"
                                },
                                issuer: {},
                                keyAlgorithm: {},
                                notAfter: {
                                    type: "timestamp"
                                },
                                notBefore: {
                                    type: "timestamp"
                                },
                                renewalSummary: {
                                    type: "structure",
                                    members: {
                                        renewalStatus: {},
                                        domainValidationOptions: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    domainName: {},
                                                    validationStatus: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                revocationReason: {},
                                revokedAt: {
                                    type: "timestamp"
                                },
                                serial: {},
                                signatureAlgorithm: {},
                                subject: {},
                                subjectAlternativeNames: {
                                    shape: "Su"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetLoadBalancerTlsPolicies: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tlsPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                isDefault: {
                                    type: "boolean"
                                },
                                description: {},
                                protocols: {
                                    shape: "Su"
                                },
                                ciphers: {
                                    shape: "Su"
                                }
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetLoadBalancers: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    loadBalancers: {
                        type: "list",
                        member: {
                            shape: "Sd1"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetOperation: {
            input: {
                type: "structure",
                required: [ "operationId" ],
                members: {
                    operationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        GetOperations: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    },
                    nextPageToken: {}
                }
            }
        },
        GetOperationsForResource: {
            input: {
                type: "structure",
                required: [ "resourceName" ],
                members: {
                    resourceName: {},
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    },
                    nextPageCount: {
                        deprecated: true
                    },
                    nextPageToken: {}
                }
            }
        },
        GetRegions: {
            input: {
                type: "structure",
                members: {
                    includeAvailabilityZones: {
                        type: "boolean"
                    },
                    includeRelationalDatabaseAvailabilityZones: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    regions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                continentCode: {},
                                description: {},
                                displayName: {},
                                name: {},
                                availabilityZones: {
                                    shape: "Sed"
                                },
                                relationalDatabaseAvailabilityZones: {
                                    shape: "Sed"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetRelationalDatabase: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    relationalDatabase: {
                        shape: "Seh"
                    }
                }
            }
        },
        GetRelationalDatabaseBlueprints: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    blueprints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                blueprintId: {},
                                engine: {},
                                engineVersion: {},
                                engineDescription: {},
                                engineVersionDescription: {},
                                isEngineDefault: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetRelationalDatabaseBundles: {
            input: {
                type: "structure",
                members: {
                    pageToken: {},
                    includeInactive: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bundles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                bundleId: {},
                                name: {},
                                price: {
                                    type: "float"
                                },
                                ramSizeInGb: {
                                    type: "float"
                                },
                                diskSizeInGb: {
                                    type: "integer"
                                },
                                transferPerMonthInGb: {
                                    type: "integer"
                                },
                                cpuCount: {
                                    type: "integer"
                                },
                                isEncrypted: {
                                    type: "boolean"
                                },
                                isActive: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetRelationalDatabaseEvents: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {},
                    durationInMinutes: {
                        type: "integer"
                    },
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    relationalDatabaseEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resource: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                message: {},
                                eventCategories: {
                                    shape: "Su"
                                }
                            }
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetRelationalDatabaseLogEvents: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName", "logStreamName" ],
                members: {
                    relationalDatabaseName: {},
                    logStreamName: {},
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    startFromHead: {
                        type: "boolean"
                    },
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceLogEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    type: "timestamp"
                                },
                                message: {}
                            }
                        }
                    },
                    nextBackwardToken: {},
                    nextForwardToken: {}
                }
            }
        },
        GetRelationalDatabaseLogStreams: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    logStreams: {
                        shape: "Su"
                    }
                }
            }
        },
        GetRelationalDatabaseMasterUserPassword: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {},
                    passwordVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    masterUserPassword: {
                        shape: "S56"
                    },
                    createdAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetRelationalDatabaseMetricData: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName", "metricName", "period", "startTime", "endTime", "unit", "statistics" ],
                members: {
                    relationalDatabaseName: {},
                    metricName: {},
                    period: {
                        type: "integer"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    unit: {},
                    statistics: {
                        shape: "S85"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    metricName: {},
                    metricData: {
                        shape: "S87"
                    }
                }
            }
        },
        GetRelationalDatabaseParameters: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {},
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    parameters: {
                        shape: "Sfe"
                    },
                    nextPageToken: {}
                }
            }
        },
        GetRelationalDatabaseSnapshot: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseSnapshotName" ],
                members: {
                    relationalDatabaseSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    relationalDatabaseSnapshot: {
                        shape: "Sfi"
                    }
                }
            }
        },
        GetRelationalDatabaseSnapshots: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    relationalDatabaseSnapshots: {
                        type: "list",
                        member: {
                            shape: "Sfi"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetRelationalDatabases: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    relationalDatabases: {
                        type: "list",
                        member: {
                            shape: "Seh"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        GetStaticIp: {
            input: {
                type: "structure",
                required: [ "staticIpName" ],
                members: {
                    staticIpName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    staticIp: {
                        shape: "Sfr"
                    }
                }
            }
        },
        GetStaticIps: {
            input: {
                type: "structure",
                members: {
                    pageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    staticIps: {
                        type: "list",
                        member: {
                            shape: "Sfr"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        ImportKeyPair: {
            input: {
                type: "structure",
                required: [ "keyPairName", "publicKeyBase64" ],
                members: {
                    keyPairName: {},
                    publicKeyBase64: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        IsVpcPeered: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    isPeered: {
                        type: "boolean"
                    }
                }
            }
        },
        OpenInstancePublicPorts: {
            input: {
                type: "structure",
                required: [ "portInfo", "instanceName" ],
                members: {
                    portInfo: {
                        shape: "Sr"
                    },
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        PeerVpc: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        PutAlarm: {
            input: {
                type: "structure",
                required: [ "alarmName", "metricName", "monitoredResourceName", "comparisonOperator", "threshold", "evaluationPeriods" ],
                members: {
                    alarmName: {},
                    metricName: {},
                    monitoredResourceName: {},
                    comparisonOperator: {},
                    threshold: {
                        type: "double"
                    },
                    evaluationPeriods: {
                        type: "integer"
                    },
                    datapointsToAlarm: {
                        type: "integer"
                    },
                    treatMissingData: {},
                    contactProtocols: {
                        shape: "S7f"
                    },
                    notificationTriggers: {
                        shape: "S7g"
                    },
                    notificationEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        PutInstancePublicPorts: {
            input: {
                type: "structure",
                required: [ "portInfos", "instanceName" ],
                members: {
                    portInfos: {
                        type: "list",
                        member: {
                            shape: "Sr"
                        }
                    },
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        RebootInstance: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        RebootRelationalDatabase: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        RegisterContainerImage: {
            input: {
                type: "structure",
                required: [ "serviceName", "label", "digest" ],
                members: {
                    serviceName: {},
                    label: {},
                    digest: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    containerImage: {
                        shape: "S9c"
                    }
                }
            }
        },
        ReleaseStaticIp: {
            input: {
                type: "structure",
                required: [ "staticIpName" ],
                members: {
                    staticIpName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        ResetDistributionCache: {
            input: {
                type: "structure",
                members: {
                    distributionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    createTime: {
                        type: "timestamp"
                    },
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        SendContactMethodVerification: {
            input: {
                type: "structure",
                required: [ "protocol" ],
                members: {
                    protocol: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        SetIpAddressType: {
            input: {
                type: "structure",
                required: [ "resourceType", "resourceName", "ipAddressType" ],
                members: {
                    resourceType: {},
                    resourceName: {},
                    ipAddressType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        SetResourceAccessForBucket: {
            input: {
                type: "structure",
                required: [ "resourceName", "bucketName", "access" ],
                members: {
                    resourceName: {},
                    bucketName: {},
                    access: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        StartGUISession: {
            input: {
                type: "structure",
                required: [ "resourceName" ],
                members: {
                    resourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        StartInstance: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        StartRelationalDatabase: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        StopGUISession: {
            input: {
                type: "structure",
                required: [ "resourceName" ],
                members: {
                    resourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        StopInstance: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {},
                    force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        StopRelationalDatabase: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {},
                    relationalDatabaseSnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceName", "tags" ],
                members: {
                    resourceName: {},
                    resourceArn: {},
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        TestAlarm: {
            input: {
                type: "structure",
                required: [ "alarmName", "state" ],
                members: {
                    alarmName: {},
                    state: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        UnpeerVpc: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceName", "tagKeys" ],
                members: {
                    resourceName: {},
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        UpdateBucket: {
            input: {
                type: "structure",
                required: [ "bucketName" ],
                members: {
                    bucketName: {},
                    accessRules: {
                        shape: "S16"
                    },
                    versioning: {},
                    readonlyAccessAccounts: {
                        shape: "S18"
                    },
                    accessLogConfig: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bucket: {
                        shape: "S15"
                    },
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        UpdateBucketBundle: {
            input: {
                type: "structure",
                required: [ "bucketName", "bundleId" ],
                members: {
                    bucketName: {},
                    bundleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        UpdateContainerService: {
            input: {
                type: "structure",
                required: [ "serviceName" ],
                members: {
                    serviceName: {},
                    power: {},
                    scale: {
                        type: "integer"
                    },
                    isDisabled: {
                        type: "boolean"
                    },
                    publicDomainNames: {
                        shape: "S2l"
                    },
                    privateRegistryAccess: {
                        shape: "S2x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    containerService: {
                        shape: "S30"
                    }
                }
            }
        },
        UpdateDistribution: {
            input: {
                type: "structure",
                required: [ "distributionName" ],
                members: {
                    distributionName: {},
                    origin: {
                        shape: "S3r"
                    },
                    defaultCacheBehavior: {
                        shape: "S3t"
                    },
                    cacheBehaviorSettings: {
                        shape: "S3v"
                    },
                    cacheBehaviors: {
                        shape: "S43"
                    },
                    isEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        UpdateDistributionBundle: {
            input: {
                type: "structure",
                members: {
                    distributionName: {},
                    bundleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        UpdateDomainEntry: {
            input: {
                type: "structure",
                required: [ "domainName", "domainEntry" ],
                members: {
                    domainName: {},
                    domainEntry: {
                        shape: "S4c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        UpdateInstanceMetadataOptions: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {},
                    httpTokens: {},
                    httpEndpoint: {},
                    httpPutResponseHopLimit: {
                        type: "integer"
                    },
                    httpProtocolIpv6: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operation: {
                        shape: "S5"
                    }
                }
            }
        },
        UpdateLoadBalancerAttribute: {
            input: {
                type: "structure",
                required: [ "loadBalancerName", "attributeName", "attributeValue" ],
                members: {
                    loadBalancerName: {},
                    attributeName: {},
                    attributeValue: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        UpdateRelationalDatabase: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName" ],
                members: {
                    relationalDatabaseName: {},
                    masterUserPassword: {
                        shape: "S56"
                    },
                    rotateMasterUserPassword: {
                        type: "boolean"
                    },
                    preferredBackupWindow: {},
                    preferredMaintenanceWindow: {},
                    enableBackupRetention: {
                        type: "boolean"
                    },
                    disableBackupRetention: {
                        type: "boolean"
                    },
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    applyImmediately: {
                        type: "boolean"
                    },
                    caCertificateIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        },
        UpdateRelationalDatabaseParameters: {
            input: {
                type: "structure",
                required: [ "relationalDatabaseName", "parameters" ],
                members: {
                    relationalDatabaseName: {},
                    parameters: {
                        shape: "Sfe"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    operations: {
                        shape: "S4"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                shape: "S5"
            }
        },
        S5: {
            type: "structure",
            members: {
                id: {},
                resourceName: {},
                resourceType: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                isTerminal: {
                    type: "boolean"
                },
                operationDetails: {},
                operationType: {},
                status: {},
                statusChangedAt: {
                    type: "timestamp"
                },
                errorCode: {},
                errorDetails: {}
            }
        },
        S9: {
            type: "structure",
            members: {
                availabilityZone: {},
                regionName: {}
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "structure",
            members: {
                fromPort: {
                    type: "integer"
                },
                toPort: {
                    type: "integer"
                },
                protocol: {},
                cidrs: {
                    shape: "Su"
                },
                ipv6Cidrs: {
                    shape: "Su"
                },
                cidrListAliases: {
                    shape: "Su"
                }
            }
        },
        Su: {
            type: "list",
            member: {}
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                resourceType: {},
                accessRules: {
                    shape: "S16"
                },
                arn: {},
                bundleId: {},
                createdAt: {
                    type: "timestamp"
                },
                url: {},
                location: {
                    shape: "S9"
                },
                name: {},
                supportCode: {},
                tags: {
                    shape: "S10"
                },
                objectVersioning: {},
                ableToUpdateBundle: {
                    type: "boolean"
                },
                readonlyAccessAccounts: {
                    shape: "S18"
                },
                resourcesReceivingAccess: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {},
                            resourceType: {}
                        }
                    }
                },
                state: {
                    type: "structure",
                    members: {
                        code: {},
                        message: {}
                    }
                },
                accessLogConfig: {
                    shape: "S1c"
                }
            }
        },
        S16: {
            type: "structure",
            members: {
                getObject: {},
                allowPublicOverrides: {
                    type: "boolean"
                }
            }
        },
        S18: {
            type: "list",
            member: {}
        },
        S1c: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                },
                destination: {},
                prefix: {}
            }
        },
        S1g: {
            type: "structure",
            members: {
                accessKeyId: {
                    type: "string",
                    sensitive: true
                },
                secretAccessKey: {},
                status: {},
                createdAt: {
                    type: "timestamp"
                },
                lastUsed: {
                    type: "structure",
                    members: {
                        lastUsedDate: {
                            type: "timestamp"
                        },
                        region: {},
                        serviceName: {}
                    }
                }
            }
        },
        S1n: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "structure",
            members: {
                certificateArn: {},
                certificateName: {},
                domainName: {},
                certificateDetail: {
                    type: "structure",
                    members: {
                        arn: {},
                        name: {},
                        domainName: {},
                        status: {},
                        serialNumber: {},
                        subjectAlternativeNames: {
                            shape: "S1n"
                        },
                        domainValidationRecords: {
                            shape: "S1t"
                        },
                        requestFailureReason: {},
                        inUseResourceCount: {
                            type: "integer"
                        },
                        keyAlgorithm: {},
                        createdAt: {
                            type: "timestamp"
                        },
                        issuedAt: {
                            type: "timestamp"
                        },
                        issuerCA: {},
                        notBefore: {
                            type: "timestamp"
                        },
                        notAfter: {
                            type: "timestamp"
                        },
                        eligibleToRenew: {},
                        renewalSummary: {
                            type: "structure",
                            members: {
                                domainValidationRecords: {
                                    shape: "S1t"
                                },
                                renewalStatus: {},
                                renewalStatusReason: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        },
                        revokedAt: {
                            type: "timestamp"
                        },
                        revocationReason: {},
                        tags: {
                            shape: "S10"
                        },
                        supportCode: {}
                    }
                },
                tags: {
                    shape: "S10"
                }
            }
        },
        S1t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    domainName: {},
                    resourceRecord: {
                        type: "structure",
                        members: {
                            name: {},
                            type: {},
                            value: {}
                        }
                    },
                    dnsRecordCreationState: {
                        type: "structure",
                        members: {
                            code: {},
                            message: {}
                        }
                    },
                    validationStatus: {}
                }
            }
        },
        S2l: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        S2o: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    image: {},
                    command: {
                        shape: "Su"
                    },
                    environment: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    ports: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S2u: {
            type: "structure",
            required: [ "containerName", "containerPort" ],
            members: {
                containerName: {},
                containerPort: {
                    type: "integer"
                },
                healthCheck: {
                    shape: "S2w"
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                healthyThreshold: {
                    type: "integer"
                },
                unhealthyThreshold: {
                    type: "integer"
                },
                timeoutSeconds: {
                    type: "integer"
                },
                intervalSeconds: {
                    type: "integer"
                },
                path: {},
                successCodes: {}
            }
        },
        S2x: {
            type: "structure",
            members: {
                ecrImagePullerRole: {
                    type: "structure",
                    members: {
                        isActive: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S30: {
            type: "structure",
            members: {
                containerServiceName: {},
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                power: {},
                powerId: {},
                state: {},
                stateDetail: {
                    type: "structure",
                    members: {
                        code: {},
                        message: {}
                    }
                },
                scale: {
                    type: "integer"
                },
                currentDeployment: {
                    shape: "S34"
                },
                nextDeployment: {
                    shape: "S34"
                },
                isDisabled: {
                    type: "boolean"
                },
                principalArn: {},
                privateDomainName: {},
                publicDomainNames: {
                    shape: "S2l"
                },
                url: {},
                privateRegistryAccess: {
                    type: "structure",
                    members: {
                        ecrImagePullerRole: {
                            type: "structure",
                            members: {
                                isActive: {
                                    type: "boolean"
                                },
                                principalArn: {}
                            }
                        }
                    }
                }
            }
        },
        S34: {
            type: "structure",
            members: {
                version: {
                    type: "integer"
                },
                state: {},
                containers: {
                    shape: "S2o"
                },
                publicEndpoint: {
                    type: "structure",
                    members: {
                        containerName: {},
                        containerPort: {
                            type: "integer"
                        },
                        healthCheck: {
                            shape: "S2w"
                        }
                    }
                },
                createdAt: {
                    type: "timestamp"
                }
            }
        },
        S3f: {
            type: "list",
            member: {
                shape: "S3g"
            }
        },
        S3g: {
            type: "structure",
            required: [ "addOnType" ],
            members: {
                addOnType: {},
                autoSnapshotAddOnRequest: {
                    type: "structure",
                    members: {
                        snapshotTimeOfDay: {}
                    }
                },
                stopInstanceOnIdleRequest: {
                    type: "structure",
                    members: {
                        threshold: {},
                        duration: {}
                    }
                }
            }
        },
        S3r: {
            type: "structure",
            members: {
                name: {},
                regionName: {},
                protocolPolicy: {}
            }
        },
        S3t: {
            type: "structure",
            members: {
                behavior: {}
            }
        },
        S3v: {
            type: "structure",
            members: {
                defaultTTL: {
                    type: "long"
                },
                minimumTTL: {
                    type: "long"
                },
                maximumTTL: {
                    type: "long"
                },
                allowedHTTPMethods: {},
                cachedHTTPMethods: {},
                forwardedCookies: {
                    type: "structure",
                    members: {
                        option: {},
                        cookiesAllowList: {
                            shape: "Su"
                        }
                    }
                },
                forwardedHeaders: {
                    type: "structure",
                    members: {
                        option: {},
                        headersAllowList: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                forwardedQueryStrings: {
                    type: "structure",
                    members: {
                        option: {
                            type: "boolean"
                        },
                        queryStringsAllowList: {
                            shape: "Su"
                        }
                    }
                }
            }
        },
        S43: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    path: {},
                    behavior: {}
                }
            }
        },
        S47: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                alternativeDomainNames: {
                    shape: "Su"
                },
                status: {},
                isEnabled: {
                    type: "boolean"
                },
                domainName: {},
                bundleId: {},
                certificateName: {},
                origin: {
                    type: "structure",
                    members: {
                        name: {},
                        resourceType: {},
                        regionName: {},
                        protocolPolicy: {}
                    }
                },
                originPublicDNS: {},
                defaultCacheBehavior: {
                    shape: "S3t"
                },
                cacheBehaviorSettings: {
                    shape: "S3v"
                },
                cacheBehaviors: {
                    shape: "S43"
                },
                ableToUpdateBundle: {
                    type: "boolean"
                },
                ipAddressType: {},
                tags: {
                    shape: "S10"
                }
            }
        },
        S4c: {
            type: "structure",
            members: {
                id: {},
                name: {},
                target: {},
                isAlias: {
                    type: "boolean"
                },
                type: {},
                options: {
                    deprecated: true,
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S4y: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                fingerprint: {}
            }
        },
        S51: {
            type: "list",
            member: {}
        },
        S56: {
            type: "string",
            sensitive: true
        },
        S7f: {
            type: "list",
            member: {}
        },
        S7g: {
            type: "list",
            member: {}
        },
        S85: {
            type: "list",
            member: {}
        },
        S87: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    average: {
                        type: "double"
                    },
                    maximum: {
                        type: "double"
                    },
                    minimum: {
                        type: "double"
                    },
                    sampleCount: {
                        type: "double"
                    },
                    sum: {
                        type: "double"
                    },
                    timestamp: {
                        type: "timestamp"
                    },
                    unit: {}
                }
            }
        },
        S8z: {
            type: "structure",
            members: {
                id: {},
                service: {}
            }
        },
        S9c: {
            type: "structure",
            members: {
                image: {},
                digest: {},
                createdAt: {
                    type: "timestamp"
                }
            }
        },
        Sa7: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                addOns: {
                    shape: "Sa8"
                },
                sizeInGb: {
                    type: "integer"
                },
                isSystemDisk: {
                    type: "boolean"
                },
                iops: {
                    type: "integer"
                },
                path: {},
                state: {},
                attachedTo: {},
                isAttached: {
                    type: "boolean"
                },
                attachmentState: {
                    deprecated: true
                },
                gbInUse: {
                    deprecated: true,
                    type: "integer"
                },
                autoMountStatus: {}
            }
        },
        Sa8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    status: {},
                    snapshotTimeOfDay: {},
                    nextSnapshotTimeOfDay: {},
                    threshold: {},
                    duration: {}
                }
            }
        },
        Sae: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                sizeInGb: {
                    type: "integer"
                },
                state: {},
                progress: {},
                fromDiskName: {},
                fromDiskArn: {},
                fromInstanceName: {},
                fromInstanceArn: {},
                isFromAutoSnapshot: {
                    type: "boolean"
                }
            }
        },
        Sal: {
            type: "list",
            member: {
                shape: "Sa7"
            }
        },
        Sb0: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                domainEntries: {
                    type: "list",
                    member: {
                        shape: "S4c"
                    }
                },
                registeredDomainDelegationInfo: {
                    type: "structure",
                    members: {
                        nameServersUpdateState: {
                            type: "structure",
                            members: {
                                code: {},
                                message: {}
                            }
                        },
                        r53HostedZoneDeletionState: {
                            type: "structure",
                            members: {
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        Sbm: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                blueprintId: {},
                blueprintName: {},
                bundleId: {},
                addOns: {
                    shape: "Sa8"
                },
                isStaticIp: {
                    type: "boolean"
                },
                privateIpAddress: {},
                publicIpAddress: {},
                ipv6Addresses: {
                    type: "list",
                    member: {}
                },
                ipAddressType: {},
                hardware: {
                    type: "structure",
                    members: {
                        cpuCount: {
                            type: "integer"
                        },
                        disks: {
                            shape: "Sal"
                        },
                        ramSizeInGb: {
                            type: "float"
                        }
                    }
                },
                networking: {
                    type: "structure",
                    members: {
                        monthlyTransfer: {
                            type: "structure",
                            members: {
                                gbPerMonthAllocated: {
                                    type: "integer"
                                }
                            }
                        },
                        ports: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    fromPort: {
                                        type: "integer"
                                    },
                                    toPort: {
                                        type: "integer"
                                    },
                                    protocol: {},
                                    accessFrom: {},
                                    accessType: {},
                                    commonName: {},
                                    accessDirection: {},
                                    cidrs: {
                                        shape: "Su"
                                    },
                                    ipv6Cidrs: {
                                        shape: "Su"
                                    },
                                    cidrListAliases: {
                                        shape: "Su"
                                    }
                                }
                            }
                        }
                    }
                },
                state: {
                    shape: "Sbx"
                },
                username: {},
                sshKeyName: {},
                metadataOptions: {
                    type: "structure",
                    members: {
                        state: {},
                        httpTokens: {},
                        httpEndpoint: {},
                        httpPutResponseHopLimit: {
                            type: "integer"
                        },
                        httpProtocolIpv6: {}
                    }
                }
            }
        },
        Sbx: {
            type: "structure",
            members: {
                code: {
                    type: "integer"
                },
                name: {}
            }
        },
        Sck: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                state: {},
                progress: {},
                fromAttachedDisks: {
                    shape: "Sal"
                },
                fromInstanceName: {},
                fromInstanceArn: {},
                fromBlueprintId: {},
                fromBundleId: {},
                isFromAutoSnapshot: {
                    type: "boolean"
                },
                sizeInGb: {
                    type: "integer"
                }
            }
        },
        Sd1: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                dnsName: {},
                state: {},
                protocol: {},
                publicPorts: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                },
                healthCheckPath: {},
                instancePort: {
                    type: "integer"
                },
                instanceHealthSummary: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            instanceName: {},
                            instanceHealth: {},
                            instanceHealthReason: {}
                        }
                    }
                },
                tlsCertificateSummaries: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {},
                            isAttached: {
                                type: "boolean"
                            }
                        }
                    }
                },
                configurationOptions: {
                    type: "map",
                    key: {},
                    value: {}
                },
                ipAddressType: {},
                httpsRedirectionEnabled: {
                    type: "boolean"
                },
                tlsPolicyName: {}
            }
        },
        Sed: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    zoneName: {},
                    state: {}
                }
            }
        },
        Seh: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                relationalDatabaseBlueprintId: {},
                relationalDatabaseBundleId: {},
                masterDatabaseName: {},
                hardware: {
                    type: "structure",
                    members: {
                        cpuCount: {
                            type: "integer"
                        },
                        diskSizeInGb: {
                            type: "integer"
                        },
                        ramSizeInGb: {
                            type: "float"
                        }
                    }
                },
                state: {},
                secondaryAvailabilityZone: {},
                backupRetentionEnabled: {
                    type: "boolean"
                },
                pendingModifiedValues: {
                    type: "structure",
                    members: {
                        masterUserPassword: {},
                        engineVersion: {},
                        backupRetentionEnabled: {
                            type: "boolean"
                        }
                    }
                },
                engine: {},
                engineVersion: {},
                latestRestorableTime: {
                    type: "timestamp"
                },
                masterUsername: {},
                parameterApplyStatus: {},
                preferredBackupWindow: {},
                preferredMaintenanceWindow: {},
                publiclyAccessible: {
                    type: "boolean"
                },
                masterEndpoint: {
                    type: "structure",
                    members: {
                        port: {
                            type: "integer"
                        },
                        address: {}
                    }
                },
                pendingMaintenanceActions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            action: {},
                            description: {},
                            currentApplyDate: {
                                type: "timestamp"
                            }
                        }
                    }
                },
                caCertificateIdentifier: {}
            }
        },
        Sfe: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    allowedValues: {},
                    applyMethod: {},
                    applyType: {},
                    dataType: {},
                    description: {},
                    isModifiable: {
                        type: "boolean"
                    },
                    parameterName: {},
                    parameterValue: {}
                }
            }
        },
        Sfi: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                tags: {
                    shape: "S10"
                },
                engine: {},
                engineVersion: {},
                sizeInGb: {
                    type: "integer"
                },
                state: {},
                fromRelationalDatabaseName: {},
                fromRelationalDatabaseArn: {},
                fromRelationalDatabaseBundleId: {},
                fromRelationalDatabaseBlueprintId: {}
            }
        },
        Sfr: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                supportCode: {},
                createdAt: {
                    type: "timestamp"
                },
                location: {
                    shape: "S9"
                },
                resourceType: {},
                ipAddress: {},
                attachedTo: {},
                isAttached: {
                    type: "boolean"
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["machinelearning"] = {};

AWS.MachineLearning = AWS.Service.defineService("machinelearning", [ "2014-12-12" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    107: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.MachineLearning.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                if (request.operation === "predict") {
                    request.addListener("build", this.buildEndpoint);
                }
            },
            buildEndpoint: function buildEndpoint(request) {
                var url = request.params.PredictEndpoint;
                if (url) {
                    request.httpRequest.endpoint = new AWS.Endpoint(url);
                }
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 107 ]);

AWS.apiLoader.services["machinelearning"]["2014-12-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-12-12",
        endpointPrefix: "machinelearning",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Machine Learning",
        serviceId: "Machine Learning",
        signatureVersion: "v4",
        targetPrefix: "AmazonML_20141212",
        uid: "machinelearning-2014-12-12"
    },
    operations: {
        AddTags: {
            input: {
                type: "structure",
                required: [ "Tags", "ResourceId", "ResourceType" ],
                members: {
                    Tags: {
                        shape: "S2"
                    },
                    ResourceId: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceId: {},
                    ResourceType: {}
                }
            }
        },
        CreateBatchPrediction: {
            input: {
                type: "structure",
                required: [ "BatchPredictionId", "MLModelId", "BatchPredictionDataSourceId", "OutputUri" ],
                members: {
                    BatchPredictionId: {},
                    BatchPredictionName: {},
                    MLModelId: {},
                    BatchPredictionDataSourceId: {},
                    OutputUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BatchPredictionId: {}
                }
            }
        },
        CreateDataSourceFromRDS: {
            input: {
                type: "structure",
                required: [ "DataSourceId", "RDSData", "RoleARN" ],
                members: {
                    DataSourceId: {},
                    DataSourceName: {},
                    RDSData: {
                        type: "structure",
                        required: [ "DatabaseInformation", "SelectSqlQuery", "DatabaseCredentials", "S3StagingLocation", "ResourceRole", "ServiceRole", "SubnetId", "SecurityGroupIds" ],
                        members: {
                            DatabaseInformation: {
                                shape: "Sf"
                            },
                            SelectSqlQuery: {},
                            DatabaseCredentials: {
                                type: "structure",
                                required: [ "Username", "Password" ],
                                members: {
                                    Username: {},
                                    Password: {
                                        type: "string",
                                        sensitive: true
                                    }
                                }
                            },
                            S3StagingLocation: {},
                            DataRearrangement: {},
                            DataSchema: {},
                            DataSchemaUri: {},
                            ResourceRole: {},
                            ServiceRole: {},
                            SubnetId: {},
                            SecurityGroupIds: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    RoleARN: {},
                    ComputeStatistics: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceId: {}
                }
            }
        },
        CreateDataSourceFromRedshift: {
            input: {
                type: "structure",
                required: [ "DataSourceId", "DataSpec", "RoleARN" ],
                members: {
                    DataSourceId: {},
                    DataSourceName: {},
                    DataSpec: {
                        type: "structure",
                        required: [ "DatabaseInformation", "SelectSqlQuery", "DatabaseCredentials", "S3StagingLocation" ],
                        members: {
                            DatabaseInformation: {
                                shape: "Sy"
                            },
                            SelectSqlQuery: {},
                            DatabaseCredentials: {
                                type: "structure",
                                required: [ "Username", "Password" ],
                                members: {
                                    Username: {},
                                    Password: {
                                        type: "string",
                                        sensitive: true
                                    }
                                }
                            },
                            S3StagingLocation: {},
                            DataRearrangement: {},
                            DataSchema: {},
                            DataSchemaUri: {}
                        }
                    },
                    RoleARN: {},
                    ComputeStatistics: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceId: {}
                }
            }
        },
        CreateDataSourceFromS3: {
            input: {
                type: "structure",
                required: [ "DataSourceId", "DataSpec" ],
                members: {
                    DataSourceId: {},
                    DataSourceName: {},
                    DataSpec: {
                        type: "structure",
                        required: [ "DataLocationS3" ],
                        members: {
                            DataLocationS3: {},
                            DataRearrangement: {},
                            DataSchema: {},
                            DataSchemaLocationS3: {}
                        }
                    },
                    ComputeStatistics: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceId: {}
                }
            }
        },
        CreateEvaluation: {
            input: {
                type: "structure",
                required: [ "EvaluationId", "MLModelId", "EvaluationDataSourceId" ],
                members: {
                    EvaluationId: {},
                    EvaluationName: {},
                    MLModelId: {},
                    EvaluationDataSourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EvaluationId: {}
                }
            }
        },
        CreateMLModel: {
            input: {
                type: "structure",
                required: [ "MLModelId", "MLModelType", "TrainingDataSourceId" ],
                members: {
                    MLModelId: {},
                    MLModelName: {},
                    MLModelType: {},
                    Parameters: {
                        shape: "S1d"
                    },
                    TrainingDataSourceId: {},
                    Recipe: {},
                    RecipeUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MLModelId: {}
                }
            }
        },
        CreateRealtimeEndpoint: {
            input: {
                type: "structure",
                required: [ "MLModelId" ],
                members: {
                    MLModelId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MLModelId: {},
                    RealtimeEndpointInfo: {
                        shape: "S1j"
                    }
                }
            }
        },
        DeleteBatchPrediction: {
            input: {
                type: "structure",
                required: [ "BatchPredictionId" ],
                members: {
                    BatchPredictionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BatchPredictionId: {}
                }
            }
        },
        DeleteDataSource: {
            input: {
                type: "structure",
                required: [ "DataSourceId" ],
                members: {
                    DataSourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceId: {}
                }
            }
        },
        DeleteEvaluation: {
            input: {
                type: "structure",
                required: [ "EvaluationId" ],
                members: {
                    EvaluationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EvaluationId: {}
                }
            }
        },
        DeleteMLModel: {
            input: {
                type: "structure",
                required: [ "MLModelId" ],
                members: {
                    MLModelId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MLModelId: {}
                }
            }
        },
        DeleteRealtimeEndpoint: {
            input: {
                type: "structure",
                required: [ "MLModelId" ],
                members: {
                    MLModelId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MLModelId: {},
                    RealtimeEndpointInfo: {
                        shape: "S1j"
                    }
                }
            }
        },
        DeleteTags: {
            input: {
                type: "structure",
                required: [ "TagKeys", "ResourceId", "ResourceType" ],
                members: {
                    TagKeys: {
                        type: "list",
                        member: {}
                    },
                    ResourceId: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceId: {},
                    ResourceType: {}
                }
            }
        },
        DescribeBatchPredictions: {
            input: {
                type: "structure",
                members: {
                    FilterVariable: {},
                    EQ: {},
                    GT: {},
                    LT: {},
                    GE: {},
                    LE: {},
                    NE: {},
                    Prefix: {},
                    SortOrder: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BatchPredictionId: {},
                                MLModelId: {},
                                BatchPredictionDataSourceId: {},
                                InputDataLocationS3: {},
                                CreatedByIamUser: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Name: {},
                                Status: {},
                                OutputUri: {},
                                Message: {},
                                ComputeTime: {
                                    type: "long"
                                },
                                FinishedAt: {
                                    type: "timestamp"
                                },
                                StartedAt: {
                                    type: "timestamp"
                                },
                                TotalRecordCount: {
                                    type: "long"
                                },
                                InvalidRecordCount: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDataSources: {
            input: {
                type: "structure",
                members: {
                    FilterVariable: {},
                    EQ: {},
                    GT: {},
                    LT: {},
                    GE: {},
                    LE: {},
                    NE: {},
                    Prefix: {},
                    SortOrder: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DataSourceId: {},
                                DataLocationS3: {},
                                DataRearrangement: {},
                                CreatedByIamUser: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                DataSizeInBytes: {
                                    type: "long"
                                },
                                NumberOfFiles: {
                                    type: "long"
                                },
                                Name: {},
                                Status: {},
                                Message: {},
                                RedshiftMetadata: {
                                    shape: "S2i"
                                },
                                RDSMetadata: {
                                    shape: "S2j"
                                },
                                RoleARN: {},
                                ComputeStatistics: {
                                    type: "boolean"
                                },
                                ComputeTime: {
                                    type: "long"
                                },
                                FinishedAt: {
                                    type: "timestamp"
                                },
                                StartedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeEvaluations: {
            input: {
                type: "structure",
                members: {
                    FilterVariable: {},
                    EQ: {},
                    GT: {},
                    LT: {},
                    GE: {},
                    LE: {},
                    NE: {},
                    Prefix: {},
                    SortOrder: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EvaluationId: {},
                                MLModelId: {},
                                EvaluationDataSourceId: {},
                                InputDataLocationS3: {},
                                CreatedByIamUser: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Name: {},
                                Status: {},
                                PerformanceMetrics: {
                                    shape: "S2q"
                                },
                                Message: {},
                                ComputeTime: {
                                    type: "long"
                                },
                                FinishedAt: {
                                    type: "timestamp"
                                },
                                StartedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMLModels: {
            input: {
                type: "structure",
                members: {
                    FilterVariable: {},
                    EQ: {},
                    GT: {},
                    LT: {},
                    GE: {},
                    LE: {},
                    NE: {},
                    Prefix: {},
                    SortOrder: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MLModelId: {},
                                TrainingDataSourceId: {},
                                CreatedByIamUser: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Name: {},
                                Status: {},
                                SizeInBytes: {
                                    type: "long"
                                },
                                EndpointInfo: {
                                    shape: "S1j"
                                },
                                TrainingParameters: {
                                    shape: "S1d"
                                },
                                InputDataLocationS3: {},
                                Algorithm: {},
                                MLModelType: {},
                                ScoreThreshold: {
                                    type: "float"
                                },
                                ScoreThresholdLastUpdatedAt: {
                                    type: "timestamp"
                                },
                                Message: {},
                                ComputeTime: {
                                    type: "long"
                                },
                                FinishedAt: {
                                    type: "timestamp"
                                },
                                StartedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                required: [ "ResourceId", "ResourceType" ],
                members: {
                    ResourceId: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceId: {},
                    ResourceType: {},
                    Tags: {
                        shape: "S2"
                    }
                }
            }
        },
        GetBatchPrediction: {
            input: {
                type: "structure",
                required: [ "BatchPredictionId" ],
                members: {
                    BatchPredictionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BatchPredictionId: {},
                    MLModelId: {},
                    BatchPredictionDataSourceId: {},
                    InputDataLocationS3: {},
                    CreatedByIamUser: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Name: {},
                    Status: {},
                    OutputUri: {},
                    LogUri: {},
                    Message: {},
                    ComputeTime: {
                        type: "long"
                    },
                    FinishedAt: {
                        type: "timestamp"
                    },
                    StartedAt: {
                        type: "timestamp"
                    },
                    TotalRecordCount: {
                        type: "long"
                    },
                    InvalidRecordCount: {
                        type: "long"
                    }
                }
            }
        },
        GetDataSource: {
            input: {
                type: "structure",
                required: [ "DataSourceId" ],
                members: {
                    DataSourceId: {},
                    Verbose: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceId: {},
                    DataLocationS3: {},
                    DataRearrangement: {},
                    CreatedByIamUser: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    DataSizeInBytes: {
                        type: "long"
                    },
                    NumberOfFiles: {
                        type: "long"
                    },
                    Name: {},
                    Status: {},
                    LogUri: {},
                    Message: {},
                    RedshiftMetadata: {
                        shape: "S2i"
                    },
                    RDSMetadata: {
                        shape: "S2j"
                    },
                    RoleARN: {},
                    ComputeStatistics: {
                        type: "boolean"
                    },
                    ComputeTime: {
                        type: "long"
                    },
                    FinishedAt: {
                        type: "timestamp"
                    },
                    StartedAt: {
                        type: "timestamp"
                    },
                    DataSourceSchema: {}
                }
            }
        },
        GetEvaluation: {
            input: {
                type: "structure",
                required: [ "EvaluationId" ],
                members: {
                    EvaluationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EvaluationId: {},
                    MLModelId: {},
                    EvaluationDataSourceId: {},
                    InputDataLocationS3: {},
                    CreatedByIamUser: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Name: {},
                    Status: {},
                    PerformanceMetrics: {
                        shape: "S2q"
                    },
                    LogUri: {},
                    Message: {},
                    ComputeTime: {
                        type: "long"
                    },
                    FinishedAt: {
                        type: "timestamp"
                    },
                    StartedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetMLModel: {
            input: {
                type: "structure",
                required: [ "MLModelId" ],
                members: {
                    MLModelId: {},
                    Verbose: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MLModelId: {},
                    TrainingDataSourceId: {},
                    CreatedByIamUser: {},
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastUpdatedAt: {
                        type: "timestamp"
                    },
                    Name: {},
                    Status: {},
                    SizeInBytes: {
                        type: "long"
                    },
                    EndpointInfo: {
                        shape: "S1j"
                    },
                    TrainingParameters: {
                        shape: "S1d"
                    },
                    InputDataLocationS3: {},
                    MLModelType: {},
                    ScoreThreshold: {
                        type: "float"
                    },
                    ScoreThresholdLastUpdatedAt: {
                        type: "timestamp"
                    },
                    LogUri: {},
                    Message: {},
                    ComputeTime: {
                        type: "long"
                    },
                    FinishedAt: {
                        type: "timestamp"
                    },
                    StartedAt: {
                        type: "timestamp"
                    },
                    Recipe: {},
                    Schema: {}
                }
            }
        },
        Predict: {
            input: {
                type: "structure",
                required: [ "MLModelId", "Record", "PredictEndpoint" ],
                members: {
                    MLModelId: {},
                    Record: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    PredictEndpoint: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Prediction: {
                        type: "structure",
                        members: {
                            predictedLabel: {},
                            predictedValue: {
                                type: "float"
                            },
                            predictedScores: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "float"
                                }
                            },
                            details: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateBatchPrediction: {
            input: {
                type: "structure",
                required: [ "BatchPredictionId", "BatchPredictionName" ],
                members: {
                    BatchPredictionId: {},
                    BatchPredictionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BatchPredictionId: {}
                }
            }
        },
        UpdateDataSource: {
            input: {
                type: "structure",
                required: [ "DataSourceId", "DataSourceName" ],
                members: {
                    DataSourceId: {},
                    DataSourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceId: {}
                }
            }
        },
        UpdateEvaluation: {
            input: {
                type: "structure",
                required: [ "EvaluationId", "EvaluationName" ],
                members: {
                    EvaluationId: {},
                    EvaluationName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EvaluationId: {}
                }
            }
        },
        UpdateMLModel: {
            input: {
                type: "structure",
                required: [ "MLModelId" ],
                members: {
                    MLModelId: {},
                    MLModelName: {},
                    ScoreThreshold: {
                        type: "float"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MLModelId: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sf: {
            type: "structure",
            required: [ "InstanceIdentifier", "DatabaseName" ],
            members: {
                InstanceIdentifier: {},
                DatabaseName: {}
            }
        },
        Sy: {
            type: "structure",
            required: [ "DatabaseName", "ClusterIdentifier" ],
            members: {
                DatabaseName: {},
                ClusterIdentifier: {}
            }
        },
        S1d: {
            type: "map",
            key: {},
            value: {}
        },
        S1j: {
            type: "structure",
            members: {
                PeakRequestsPerSecond: {
                    type: "integer"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                EndpointUrl: {},
                EndpointStatus: {}
            }
        },
        S2i: {
            type: "structure",
            members: {
                RedshiftDatabase: {
                    shape: "Sy"
                },
                DatabaseUserName: {},
                SelectSqlQuery: {}
            }
        },
        S2j: {
            type: "structure",
            members: {
                Database: {
                    shape: "Sf"
                },
                DatabaseUserName: {},
                SelectSqlQuery: {},
                ResourceRole: {},
                ServiceRole: {},
                DataPipelineId: {}
            }
        },
        S2q: {
            type: "structure",
            members: {
                Properties: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        }
    },
    paginators: {
        DescribeBatchPredictions: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Results"
        },
        DescribeDataSources: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Results"
        },
        DescribeEvaluations: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Results"
        },
        DescribeMLModels: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Results"
        }
    },
    waiters: {
        DataSourceAvailable: {
            delay: 30,
            operation: "DescribeDataSources",
            maxAttempts: 60,
            acceptors: [ {
                expected: "COMPLETED",
                matcher: "pathAll",
                state: "success",
                argument: "Results[].Status"
            }, {
                expected: "FAILED",
                matcher: "pathAny",
                state: "failure",
                argument: "Results[].Status"
            } ]
        },
        MLModelAvailable: {
            delay: 30,
            operation: "DescribeMLModels",
            maxAttempts: 60,
            acceptors: [ {
                expected: "COMPLETED",
                matcher: "pathAll",
                state: "success",
                argument: "Results[].Status"
            }, {
                expected: "FAILED",
                matcher: "pathAny",
                state: "failure",
                argument: "Results[].Status"
            } ]
        },
        EvaluationAvailable: {
            delay: 30,
            operation: "DescribeEvaluations",
            maxAttempts: 60,
            acceptors: [ {
                expected: "COMPLETED",
                matcher: "pathAll",
                state: "success",
                argument: "Results[].Status"
            }, {
                expected: "FAILED",
                matcher: "pathAny",
                state: "failure",
                argument: "Results[].Status"
            } ]
        },
        BatchPredictionAvailable: {
            delay: 30,
            operation: "DescribeBatchPredictions",
            maxAttempts: 60,
            acceptors: [ {
                expected: "COMPLETED",
                matcher: "pathAll",
                state: "success",
                argument: "Results[].Status"
            }, {
                expected: "FAILED",
                matcher: "pathAny",
                state: "failure",
                argument: "Results[].Status"
            } ]
        }
    }
};

AWS.apiLoader.services["marketplacecommerceanalytics"] = {};

AWS.MarketplaceCommerceAnalytics = AWS.Service.defineService("marketplacecommerceanalytics", [ "2015-07-01" ]);

AWS.apiLoader.services["marketplacecommerceanalytics"]["2015-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-07-01",
        endpointPrefix: "marketplacecommerceanalytics",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Marketplace Commerce Analytics",
        serviceId: "Marketplace Commerce Analytics",
        signatureVersion: "v4",
        signingName: "marketplacecommerceanalytics",
        targetPrefix: "MarketplaceCommerceAnalytics20150701",
        uid: "marketplacecommerceanalytics-2015-07-01"
    },
    operations: {
        GenerateDataSet: {
            input: {
                type: "structure",
                required: [ "dataSetType", "dataSetPublicationDate", "roleNameArn", "destinationS3BucketName", "snsTopicArn" ],
                members: {
                    dataSetType: {},
                    dataSetPublicationDate: {
                        type: "timestamp"
                    },
                    roleNameArn: {},
                    destinationS3BucketName: {},
                    destinationS3Prefix: {},
                    snsTopicArn: {},
                    customerDefinedValues: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSetRequestId: {}
                }
            }
        },
        StartSupportDataExport: {
            input: {
                type: "structure",
                required: [ "dataSetType", "fromDate", "roleNameArn", "destinationS3BucketName", "snsTopicArn" ],
                members: {
                    dataSetType: {},
                    fromDate: {
                        type: "timestamp"
                    },
                    roleNameArn: {},
                    destinationS3BucketName: {},
                    destinationS3Prefix: {},
                    snsTopicArn: {},
                    customerDefinedValues: {
                        shape: "S8"
                    }
                },
                deprecated: true,
                deprecatedMessage: "This target has been deprecated. As of December 2022 Product Support Connection is no longer supported."
            },
            output: {
                type: "structure",
                members: {
                    dataSetRequestId: {}
                },
                deprecated: true,
                deprecatedMessage: "This target has been deprecated. As of December 2022 Product Support Connection is no longer supported."
            },
            deprecated: true,
            deprecatedMessage: "This target has been deprecated. As of December 2022 Product Support Connection is no longer supported."
        }
    },
    shapes: {
        S8: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["marketplacemetering"] = {};

AWS.MarketplaceMetering = AWS.Service.defineService("marketplacemetering", [ "2016-01-14" ]);

AWS.apiLoader.services["marketplacemetering"]["2016-01-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-01-14",
        endpointPrefix: "metering.marketplace",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWSMarketplace Metering",
        serviceId: "Marketplace Metering",
        signatureVersion: "v4",
        signingName: "aws-marketplace",
        targetPrefix: "AWSMPMeteringService",
        uid: "meteringmarketplace-2016-01-14"
    },
    operations: {
        BatchMeterUsage: {
            input: {
                type: "structure",
                required: [ "UsageRecords", "ProductCode" ],
                members: {
                    UsageRecords: {
                        shape: "S2"
                    },
                    ProductCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UsageRecord: {
                                    shape: "S3"
                                },
                                MeteringRecordId: {},
                                Status: {}
                            }
                        }
                    },
                    UnprocessedRecords: {
                        shape: "S2"
                    }
                }
            }
        },
        MeterUsage: {
            input: {
                type: "structure",
                required: [ "ProductCode", "Timestamp", "UsageDimension" ],
                members: {
                    ProductCode: {},
                    Timestamp: {
                        type: "timestamp"
                    },
                    UsageDimension: {},
                    UsageQuantity: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    UsageAllocations: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MeteringRecordId: {}
                }
            }
        },
        RegisterUsage: {
            input: {
                type: "structure",
                required: [ "ProductCode", "PublicKeyVersion" ],
                members: {
                    ProductCode: {},
                    PublicKeyVersion: {
                        type: "integer"
                    },
                    Nonce: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicKeyRotationTimestamp: {
                        type: "timestamp"
                    },
                    Signature: {}
                }
            }
        },
        ResolveCustomer: {
            input: {
                type: "structure",
                required: [ "RegistrationToken" ],
                members: {
                    RegistrationToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerIdentifier: {},
                    ProductCode: {},
                    CustomerAWSAccountId: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {
                shape: "S3"
            }
        },
        S3: {
            type: "structure",
            required: [ "Timestamp", "CustomerIdentifier", "Dimension" ],
            members: {
                Timestamp: {
                    type: "timestamp"
                },
                CustomerIdentifier: {},
                Dimension: {},
                Quantity: {
                    type: "integer"
                },
                UsageAllocations: {
                    shape: "S8"
                }
            }
        },
        S8: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AllocatedUsageQuantity" ],
                members: {
                    AllocatedUsageQuantity: {
                        type: "integer"
                    },
                    Tags: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Value" ],
                            members: {
                                Key: {},
                                Value: {}
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["mturk"] = {};

AWS.MTurk = AWS.Service.defineService("mturk", [ "2017-01-17" ]);

AWS.apiLoader.services["mturk"]["2017-01-17"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-01-17",
        endpointPrefix: "mturk-requester",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon MTurk",
        serviceFullName: "Amazon Mechanical Turk",
        serviceId: "MTurk",
        signatureVersion: "v4",
        targetPrefix: "MTurkRequesterServiceV20170117",
        uid: "mturk-requester-2017-01-17"
    },
    operations: {
        AcceptQualificationRequest: {
            input: {
                type: "structure",
                required: [ "QualificationRequestId" ],
                members: {
                    QualificationRequestId: {},
                    IntegerValue: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ApproveAssignment: {
            input: {
                type: "structure",
                required: [ "AssignmentId" ],
                members: {
                    AssignmentId: {},
                    RequesterFeedback: {},
                    OverrideRejection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        AssociateQualificationWithWorker: {
            input: {
                type: "structure",
                required: [ "QualificationTypeId", "WorkerId" ],
                members: {
                    QualificationTypeId: {},
                    WorkerId: {},
                    IntegerValue: {
                        type: "integer"
                    },
                    SendNotification: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAdditionalAssignmentsForHIT: {
            input: {
                type: "structure",
                required: [ "HITId", "NumberOfAdditionalAssignments" ],
                members: {
                    HITId: {},
                    NumberOfAdditionalAssignments: {
                        type: "integer"
                    },
                    UniqueRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateHIT: {
            input: {
                type: "structure",
                required: [ "LifetimeInSeconds", "AssignmentDurationInSeconds", "Reward", "Title", "Description" ],
                members: {
                    MaxAssignments: {
                        type: "integer"
                    },
                    AutoApprovalDelayInSeconds: {
                        type: "long"
                    },
                    LifetimeInSeconds: {
                        type: "long"
                    },
                    AssignmentDurationInSeconds: {
                        type: "long"
                    },
                    Reward: {},
                    Title: {},
                    Keywords: {},
                    Description: {},
                    Question: {},
                    RequesterAnnotation: {},
                    QualificationRequirements: {
                        shape: "Si"
                    },
                    UniqueRequestToken: {},
                    AssignmentReviewPolicy: {
                        shape: "Sq"
                    },
                    HITReviewPolicy: {
                        shape: "Sq"
                    },
                    HITLayoutId: {},
                    HITLayoutParameters: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HIT: {
                        shape: "Sz"
                    }
                }
            }
        },
        CreateHITType: {
            input: {
                type: "structure",
                required: [ "AssignmentDurationInSeconds", "Reward", "Title", "Description" ],
                members: {
                    AutoApprovalDelayInSeconds: {
                        type: "long"
                    },
                    AssignmentDurationInSeconds: {
                        type: "long"
                    },
                    Reward: {},
                    Title: {},
                    Keywords: {},
                    Description: {},
                    QualificationRequirements: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HITTypeId: {}
                }
            },
            idempotent: true
        },
        CreateHITWithHITType: {
            input: {
                type: "structure",
                required: [ "HITTypeId", "LifetimeInSeconds" ],
                members: {
                    HITTypeId: {},
                    MaxAssignments: {
                        type: "integer"
                    },
                    LifetimeInSeconds: {
                        type: "long"
                    },
                    Question: {},
                    RequesterAnnotation: {},
                    UniqueRequestToken: {},
                    AssignmentReviewPolicy: {
                        shape: "Sq"
                    },
                    HITReviewPolicy: {
                        shape: "Sq"
                    },
                    HITLayoutId: {},
                    HITLayoutParameters: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HIT: {
                        shape: "Sz"
                    }
                }
            }
        },
        CreateQualificationType: {
            input: {
                type: "structure",
                required: [ "Name", "Description", "QualificationTypeStatus" ],
                members: {
                    Name: {},
                    Keywords: {},
                    Description: {},
                    QualificationTypeStatus: {},
                    RetryDelayInSeconds: {
                        type: "long"
                    },
                    Test: {},
                    AnswerKey: {},
                    TestDurationInSeconds: {
                        type: "long"
                    },
                    AutoGranted: {
                        type: "boolean"
                    },
                    AutoGrantedValue: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QualificationType: {
                        shape: "S1a"
                    }
                }
            }
        },
        CreateWorkerBlock: {
            input: {
                type: "structure",
                required: [ "WorkerId", "Reason" ],
                members: {
                    WorkerId: {},
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteHIT: {
            input: {
                type: "structure",
                required: [ "HITId" ],
                members: {
                    HITId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteQualificationType: {
            input: {
                type: "structure",
                required: [ "QualificationTypeId" ],
                members: {
                    QualificationTypeId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteWorkerBlock: {
            input: {
                type: "structure",
                required: [ "WorkerId" ],
                members: {
                    WorkerId: {},
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateQualificationFromWorker: {
            input: {
                type: "structure",
                required: [ "WorkerId", "QualificationTypeId" ],
                members: {
                    WorkerId: {},
                    QualificationTypeId: {},
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccountBalance: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AvailableBalance: {},
                    OnHoldBalance: {}
                }
            },
            idempotent: true
        },
        GetAssignment: {
            input: {
                type: "structure",
                required: [ "AssignmentId" ],
                members: {
                    AssignmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Assignment: {
                        shape: "S1p"
                    },
                    HIT: {
                        shape: "Sz"
                    }
                }
            },
            idempotent: true
        },
        GetFileUploadURL: {
            input: {
                type: "structure",
                required: [ "AssignmentId", "QuestionIdentifier" ],
                members: {
                    AssignmentId: {},
                    QuestionIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileUploadURL: {}
                }
            },
            idempotent: true
        },
        GetHIT: {
            input: {
                type: "structure",
                required: [ "HITId" ],
                members: {
                    HITId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HIT: {
                        shape: "Sz"
                    }
                }
            },
            idempotent: true
        },
        GetQualificationScore: {
            input: {
                type: "structure",
                required: [ "QualificationTypeId", "WorkerId" ],
                members: {
                    QualificationTypeId: {},
                    WorkerId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Qualification: {
                        shape: "S1x"
                    }
                }
            },
            idempotent: true
        },
        GetQualificationType: {
            input: {
                type: "structure",
                required: [ "QualificationTypeId" ],
                members: {
                    QualificationTypeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QualificationType: {
                        shape: "S1a"
                    }
                }
            },
            idempotent: true
        },
        ListAssignmentsForHIT: {
            input: {
                type: "structure",
                required: [ "HITId" ],
                members: {
                    HITId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    AssignmentStatuses: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NumResults: {
                        type: "integer"
                    },
                    Assignments: {
                        type: "list",
                        member: {
                            shape: "S1p"
                        }
                    }
                }
            },
            idempotent: true
        },
        ListBonusPayments: {
            input: {
                type: "structure",
                members: {
                    HITId: {},
                    AssignmentId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NumResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    BonusPayments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkerId: {},
                                BonusAmount: {},
                                AssignmentId: {},
                                Reason: {},
                                GrantTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListHITs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NumResults: {
                        type: "integer"
                    },
                    HITs: {
                        shape: "S2d"
                    }
                }
            },
            idempotent: true
        },
        ListHITsForQualificationType: {
            input: {
                type: "structure",
                required: [ "QualificationTypeId" ],
                members: {
                    QualificationTypeId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NumResults: {
                        type: "integer"
                    },
                    HITs: {
                        shape: "S2d"
                    }
                }
            },
            idempotent: true
        },
        ListQualificationRequests: {
            input: {
                type: "structure",
                members: {
                    QualificationTypeId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NumResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    QualificationRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                QualificationRequestId: {},
                                QualificationTypeId: {},
                                WorkerId: {},
                                Test: {},
                                Answer: {},
                                SubmitTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListQualificationTypes: {
            input: {
                type: "structure",
                required: [ "MustBeRequestable" ],
                members: {
                    Query: {},
                    MustBeRequestable: {
                        type: "boolean"
                    },
                    MustBeOwnedByCaller: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NumResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    QualificationTypes: {
                        type: "list",
                        member: {
                            shape: "S1a"
                        }
                    }
                }
            },
            idempotent: true
        },
        ListReviewPolicyResultsForHIT: {
            input: {
                type: "structure",
                required: [ "HITId" ],
                members: {
                    HITId: {},
                    PolicyLevels: {
                        type: "list",
                        member: {}
                    },
                    RetrieveActions: {
                        type: "boolean"
                    },
                    RetrieveResults: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HITId: {},
                    AssignmentReviewPolicy: {
                        shape: "Sq"
                    },
                    HITReviewPolicy: {
                        shape: "Sq"
                    },
                    AssignmentReviewReport: {
                        shape: "S2r"
                    },
                    HITReviewReport: {
                        shape: "S2r"
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListReviewableHITs: {
            input: {
                type: "structure",
                members: {
                    HITTypeId: {},
                    Status: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NumResults: {
                        type: "integer"
                    },
                    HITs: {
                        shape: "S2d"
                    }
                }
            },
            idempotent: true
        },
        ListWorkerBlocks: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NumResults: {
                        type: "integer"
                    },
                    WorkerBlocks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkerId: {},
                                Reason: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ListWorkersWithQualificationType: {
            input: {
                type: "structure",
                required: [ "QualificationTypeId" ],
                members: {
                    QualificationTypeId: {},
                    Status: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NumResults: {
                        type: "integer"
                    },
                    Qualifications: {
                        type: "list",
                        member: {
                            shape: "S1x"
                        }
                    }
                }
            },
            idempotent: true
        },
        NotifyWorkers: {
            input: {
                type: "structure",
                required: [ "Subject", "MessageText", "WorkerIds" ],
                members: {
                    Subject: {},
                    MessageText: {},
                    WorkerIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NotifyWorkersFailureStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NotifyWorkersFailureCode: {},
                                NotifyWorkersFailureMessage: {},
                                WorkerId: {}
                            }
                        }
                    }
                }
            }
        },
        RejectAssignment: {
            input: {
                type: "structure",
                required: [ "AssignmentId", "RequesterFeedback" ],
                members: {
                    AssignmentId: {},
                    RequesterFeedback: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RejectQualificationRequest: {
            input: {
                type: "structure",
                required: [ "QualificationRequestId" ],
                members: {
                    QualificationRequestId: {},
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendBonus: {
            input: {
                type: "structure",
                required: [ "WorkerId", "BonusAmount", "AssignmentId", "Reason" ],
                members: {
                    WorkerId: {},
                    BonusAmount: {},
                    AssignmentId: {},
                    Reason: {},
                    UniqueRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendTestEventNotification: {
            input: {
                type: "structure",
                required: [ "Notification", "TestEventType" ],
                members: {
                    Notification: {
                        shape: "S3k"
                    },
                    TestEventType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateExpirationForHIT: {
            input: {
                type: "structure",
                required: [ "HITId", "ExpireAt" ],
                members: {
                    HITId: {},
                    ExpireAt: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateHITReviewStatus: {
            input: {
                type: "structure",
                required: [ "HITId" ],
                members: {
                    HITId: {},
                    Revert: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateHITTypeOfHIT: {
            input: {
                type: "structure",
                required: [ "HITId", "HITTypeId" ],
                members: {
                    HITId: {},
                    HITTypeId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateNotificationSettings: {
            input: {
                type: "structure",
                required: [ "HITTypeId" ],
                members: {
                    HITTypeId: {},
                    Notification: {
                        shape: "S3k"
                    },
                    Active: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateQualificationType: {
            input: {
                type: "structure",
                required: [ "QualificationTypeId" ],
                members: {
                    QualificationTypeId: {},
                    Description: {},
                    QualificationTypeStatus: {},
                    Test: {},
                    AnswerKey: {},
                    TestDurationInSeconds: {
                        type: "long"
                    },
                    RetryDelayInSeconds: {
                        type: "long"
                    },
                    AutoGranted: {
                        type: "boolean"
                    },
                    AutoGrantedValue: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QualificationType: {
                        shape: "S1a"
                    }
                }
            }
        }
    },
    shapes: {
        Si: {
            type: "list",
            member: {
                type: "structure",
                required: [ "QualificationTypeId", "Comparator" ],
                members: {
                    QualificationTypeId: {},
                    Comparator: {},
                    IntegerValues: {
                        type: "list",
                        member: {
                            type: "integer"
                        }
                    },
                    LocaleValues: {
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    },
                    RequiredToPreview: {
                        deprecated: true,
                        type: "boolean"
                    },
                    ActionsGuarded: {}
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "Country" ],
            members: {
                Country: {},
                Subdivision: {}
            }
        },
        Sq: {
            type: "structure",
            required: [ "PolicyName" ],
            members: {
                PolicyName: {},
                Parameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Values: {
                                shape: "St"
                            },
                            MapEntries: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Key: {},
                                        Values: {
                                            shape: "St"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        St: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        Sz: {
            type: "structure",
            members: {
                HITId: {},
                HITTypeId: {},
                HITGroupId: {},
                HITLayoutId: {},
                CreationTime: {
                    type: "timestamp"
                },
                Title: {},
                Description: {},
                Question: {},
                Keywords: {},
                HITStatus: {},
                MaxAssignments: {
                    type: "integer"
                },
                Reward: {},
                AutoApprovalDelayInSeconds: {
                    type: "long"
                },
                Expiration: {
                    type: "timestamp"
                },
                AssignmentDurationInSeconds: {
                    type: "long"
                },
                RequesterAnnotation: {},
                QualificationRequirements: {
                    shape: "Si"
                },
                HITReviewStatus: {},
                NumberOfAssignmentsPending: {
                    type: "integer"
                },
                NumberOfAssignmentsAvailable: {
                    type: "integer"
                },
                NumberOfAssignmentsCompleted: {
                    type: "integer"
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                QualificationTypeId: {},
                CreationTime: {
                    type: "timestamp"
                },
                Name: {},
                Description: {},
                Keywords: {},
                QualificationTypeStatus: {},
                Test: {},
                TestDurationInSeconds: {
                    type: "long"
                },
                AnswerKey: {},
                RetryDelayInSeconds: {
                    type: "long"
                },
                IsRequestable: {
                    type: "boolean"
                },
                AutoGranted: {
                    type: "boolean"
                },
                AutoGrantedValue: {
                    type: "integer"
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                AssignmentId: {},
                WorkerId: {},
                HITId: {},
                AssignmentStatus: {},
                AutoApprovalTime: {
                    type: "timestamp"
                },
                AcceptTime: {
                    type: "timestamp"
                },
                SubmitTime: {
                    type: "timestamp"
                },
                ApprovalTime: {
                    type: "timestamp"
                },
                RejectionTime: {
                    type: "timestamp"
                },
                Deadline: {
                    type: "timestamp"
                },
                Answer: {},
                RequesterFeedback: {}
            }
        },
        S1x: {
            type: "structure",
            members: {
                QualificationTypeId: {},
                WorkerId: {},
                GrantTime: {
                    type: "timestamp"
                },
                IntegerValue: {
                    type: "integer"
                },
                LocaleValue: {
                    shape: "Sn"
                },
                Status: {}
            }
        },
        S2d: {
            type: "list",
            member: {
                shape: "Sz"
            }
        },
        S2r: {
            type: "structure",
            members: {
                ReviewResults: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ActionId: {},
                            SubjectId: {},
                            SubjectType: {},
                            QuestionId: {},
                            Key: {},
                            Value: {}
                        }
                    }
                },
                ReviewActions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ActionId: {},
                            ActionName: {},
                            TargetId: {},
                            TargetType: {},
                            Status: {},
                            CompleteTime: {
                                type: "timestamp"
                            },
                            Result: {},
                            ErrorCode: {}
                        }
                    }
                }
            }
        },
        S3k: {
            type: "structure",
            required: [ "Destination", "Transport", "Version", "EventTypes" ],
            members: {
                Destination: {},
                Transport: {},
                Version: {},
                EventTypes: {
                    type: "list",
                    member: {}
                }
            }
        }
    },
    paginators: {
        ListAssignmentsForHIT: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListBonusPayments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListHITs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListHITsForQualificationType: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListQualificationRequests: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListQualificationTypes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListReviewPolicyResultsForHIT: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListReviewableHITs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWorkerBlocks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListWorkersWithQualificationType: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mobileanalytics"] = {};

AWS.MobileAnalytics = AWS.Service.defineService("mobileanalytics", [ "2014-06-05" ]);

AWS.apiLoader.services["mobileanalytics"]["2014-06-05"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-06-05",
        endpointPrefix: "mobileanalytics",
        serviceFullName: "Amazon Mobile Analytics",
        serviceId: "Mobile Analytics",
        signatureVersion: "v4",
        protocol: "rest-json"
    },
    operations: {
        PutEvents: {
            http: {
                requestUri: "/2014-06-05/events",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "events", "clientContext" ],
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "eventType", "timestamp" ],
                            members: {
                                eventType: {},
                                timestamp: {},
                                session: {
                                    type: "structure",
                                    members: {
                                        id: {},
                                        duration: {
                                            type: "long"
                                        },
                                        startTimestamp: {},
                                        stopTimestamp: {}
                                    }
                                },
                                version: {},
                                attributes: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                },
                                metrics: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    clientContext: {
                        location: "header",
                        locationName: "x-amz-Client-Context"
                    },
                    clientContextEncoding: {
                        location: "header",
                        locationName: "x-amz-Client-Context-Encoding"
                    }
                }
            }
        }
    },
    shapes: {}
};

AWS.apiLoader.services["opsworks"] = {};

AWS.OpsWorks = AWS.Service.defineService("opsworks", [ "2013-02-18" ]);

AWS.apiLoader.services["opsworks"]["2013-02-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2013-02-18",
        endpointPrefix: "opsworks",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS OpsWorks",
        serviceId: "OpsWorks",
        signatureVersion: "v4",
        targetPrefix: "OpsWorks_20130218",
        uid: "opsworks-2013-02-18"
    },
    operations: {
        AssignInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId", "LayerIds" ],
                members: {
                    InstanceId: {},
                    LayerIds: {
                        shape: "S3"
                    }
                }
            }
        },
        AssignVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    VolumeId: {},
                    InstanceId: {}
                }
            }
        },
        AssociateElasticIp: {
            input: {
                type: "structure",
                required: [ "ElasticIp" ],
                members: {
                    ElasticIp: {},
                    InstanceId: {}
                }
            }
        },
        AttachElasticLoadBalancer: {
            input: {
                type: "structure",
                required: [ "ElasticLoadBalancerName", "LayerId" ],
                members: {
                    ElasticLoadBalancerName: {},
                    LayerId: {}
                }
            }
        },
        CloneStack: {
            input: {
                type: "structure",
                required: [ "SourceStackId", "ServiceRoleArn" ],
                members: {
                    SourceStackId: {},
                    Name: {},
                    Region: {},
                    VpcId: {},
                    Attributes: {
                        shape: "S8"
                    },
                    ServiceRoleArn: {},
                    DefaultInstanceProfileArn: {},
                    DefaultOs: {},
                    HostnameTheme: {},
                    DefaultAvailabilityZone: {},
                    DefaultSubnetId: {},
                    CustomJson: {},
                    ConfigurationManager: {
                        shape: "Sa"
                    },
                    ChefConfiguration: {
                        shape: "Sb"
                    },
                    UseCustomCookbooks: {
                        type: "boolean"
                    },
                    UseOpsworksSecurityGroups: {
                        type: "boolean"
                    },
                    CustomCookbooksSource: {
                        shape: "Sd"
                    },
                    DefaultSshKeyName: {},
                    ClonePermissions: {
                        type: "boolean"
                    },
                    CloneAppIds: {
                        shape: "S3"
                    },
                    DefaultRootDeviceType: {},
                    AgentVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StackId: {}
                }
            }
        },
        CreateApp: {
            input: {
                type: "structure",
                required: [ "StackId", "Name", "Type" ],
                members: {
                    StackId: {},
                    Shortname: {},
                    Name: {},
                    Description: {},
                    DataSources: {
                        shape: "Si"
                    },
                    Type: {},
                    AppSource: {
                        shape: "Sd"
                    },
                    Domains: {
                        shape: "S3"
                    },
                    EnableSsl: {
                        type: "boolean"
                    },
                    SslConfiguration: {
                        shape: "Sl"
                    },
                    Attributes: {
                        shape: "Sm"
                    },
                    Environment: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppId: {}
                }
            }
        },
        CreateDeployment: {
            input: {
                type: "structure",
                required: [ "StackId", "Command" ],
                members: {
                    StackId: {},
                    AppId: {},
                    InstanceIds: {
                        shape: "S3"
                    },
                    LayerIds: {
                        shape: "S3"
                    },
                    Command: {
                        shape: "Ss"
                    },
                    Comment: {},
                    CustomJson: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeploymentId: {}
                }
            }
        },
        CreateInstance: {
            input: {
                type: "structure",
                required: [ "StackId", "LayerIds", "InstanceType" ],
                members: {
                    StackId: {},
                    LayerIds: {
                        shape: "S3"
                    },
                    InstanceType: {},
                    AutoScalingType: {},
                    Hostname: {},
                    Os: {},
                    AmiId: {},
                    SshKeyName: {},
                    AvailabilityZone: {},
                    VirtualizationType: {},
                    SubnetId: {},
                    Architecture: {},
                    RootDeviceType: {},
                    BlockDeviceMappings: {
                        shape: "Sz"
                    },
                    InstallUpdatesOnBoot: {
                        type: "boolean"
                    },
                    EbsOptimized: {
                        type: "boolean"
                    },
                    AgentVersion: {},
                    Tenancy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceId: {}
                }
            }
        },
        CreateLayer: {
            input: {
                type: "structure",
                required: [ "StackId", "Type", "Name", "Shortname" ],
                members: {
                    StackId: {},
                    Type: {},
                    Name: {},
                    Shortname: {},
                    Attributes: {
                        shape: "S17"
                    },
                    CloudWatchLogsConfiguration: {
                        shape: "S19"
                    },
                    CustomInstanceProfileArn: {},
                    CustomJson: {},
                    CustomSecurityGroupIds: {
                        shape: "S3"
                    },
                    Packages: {
                        shape: "S3"
                    },
                    VolumeConfigurations: {
                        shape: "S1f"
                    },
                    EnableAutoHealing: {
                        type: "boolean"
                    },
                    AutoAssignElasticIps: {
                        type: "boolean"
                    },
                    AutoAssignPublicIps: {
                        type: "boolean"
                    },
                    CustomRecipes: {
                        shape: "S1h"
                    },
                    InstallUpdatesOnBoot: {
                        type: "boolean"
                    },
                    UseEbsOptimizedInstances: {
                        type: "boolean"
                    },
                    LifecycleEventConfiguration: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LayerId: {}
                }
            }
        },
        CreateStack: {
            input: {
                type: "structure",
                required: [ "Name", "Region", "ServiceRoleArn", "DefaultInstanceProfileArn" ],
                members: {
                    Name: {},
                    Region: {},
                    VpcId: {},
                    Attributes: {
                        shape: "S8"
                    },
                    ServiceRoleArn: {},
                    DefaultInstanceProfileArn: {},
                    DefaultOs: {},
                    HostnameTheme: {},
                    DefaultAvailabilityZone: {},
                    DefaultSubnetId: {},
                    CustomJson: {},
                    ConfigurationManager: {
                        shape: "Sa"
                    },
                    ChefConfiguration: {
                        shape: "Sb"
                    },
                    UseCustomCookbooks: {
                        type: "boolean"
                    },
                    UseOpsworksSecurityGroups: {
                        type: "boolean"
                    },
                    CustomCookbooksSource: {
                        shape: "Sd"
                    },
                    DefaultSshKeyName: {},
                    DefaultRootDeviceType: {},
                    AgentVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StackId: {}
                }
            }
        },
        CreateUserProfile: {
            input: {
                type: "structure",
                required: [ "IamUserArn" ],
                members: {
                    IamUserArn: {},
                    SshUsername: {},
                    SshPublicKey: {},
                    AllowSelfManagement: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IamUserArn: {}
                }
            }
        },
        DeleteApp: {
            input: {
                type: "structure",
                required: [ "AppId" ],
                members: {
                    AppId: {}
                }
            }
        },
        DeleteInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    DeleteElasticIp: {
                        type: "boolean"
                    },
                    DeleteVolumes: {
                        type: "boolean"
                    }
                }
            }
        },
        DeleteLayer: {
            input: {
                type: "structure",
                required: [ "LayerId" ],
                members: {
                    LayerId: {}
                }
            }
        },
        DeleteStack: {
            input: {
                type: "structure",
                required: [ "StackId" ],
                members: {
                    StackId: {}
                }
            }
        },
        DeleteUserProfile: {
            input: {
                type: "structure",
                required: [ "IamUserArn" ],
                members: {
                    IamUserArn: {}
                }
            }
        },
        DeregisterEcsCluster: {
            input: {
                type: "structure",
                required: [ "EcsClusterArn" ],
                members: {
                    EcsClusterArn: {}
                }
            }
        },
        DeregisterElasticIp: {
            input: {
                type: "structure",
                required: [ "ElasticIp" ],
                members: {
                    ElasticIp: {}
                }
            }
        },
        DeregisterInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {}
                }
            }
        },
        DeregisterRdsDbInstance: {
            input: {
                type: "structure",
                required: [ "RdsDbInstanceArn" ],
                members: {
                    RdsDbInstanceArn: {}
                }
            }
        },
        DeregisterVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    VolumeId: {}
                }
            }
        },
        DescribeAgentVersions: {
            input: {
                type: "structure",
                members: {
                    StackId: {},
                    ConfigurationManager: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AgentVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Version: {},
                                ConfigurationManager: {
                                    shape: "Sa"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeApps: {
            input: {
                type: "structure",
                members: {
                    StackId: {},
                    AppIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Apps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppId: {},
                                StackId: {},
                                Shortname: {},
                                Name: {},
                                Description: {},
                                DataSources: {
                                    shape: "Si"
                                },
                                Type: {},
                                AppSource: {
                                    shape: "Sd"
                                },
                                Domains: {
                                    shape: "S3"
                                },
                                EnableSsl: {
                                    type: "boolean"
                                },
                                SslConfiguration: {
                                    shape: "Sl"
                                },
                                Attributes: {
                                    shape: "Sm"
                                },
                                CreatedAt: {},
                                Environment: {
                                    shape: "So"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeCommands: {
            input: {
                type: "structure",
                members: {
                    DeploymentId: {},
                    InstanceId: {},
                    CommandIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Commands: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CommandId: {},
                                InstanceId: {},
                                DeploymentId: {},
                                CreatedAt: {},
                                AcknowledgedAt: {},
                                CompletedAt: {},
                                Status: {},
                                ExitCode: {
                                    type: "integer"
                                },
                                LogUrl: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeDeployments: {
            input: {
                type: "structure",
                members: {
                    StackId: {},
                    AppId: {},
                    DeploymentIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeploymentId: {},
                                StackId: {},
                                AppId: {},
                                CreatedAt: {},
                                CompletedAt: {},
                                Duration: {
                                    type: "integer"
                                },
                                IamUserArn: {},
                                Comment: {},
                                Command: {
                                    shape: "Ss"
                                },
                                Status: {},
                                CustomJson: {},
                                InstanceIds: {
                                    shape: "S3"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeEcsClusters: {
            input: {
                type: "structure",
                members: {
                    EcsClusterArns: {
                        shape: "S3"
                    },
                    StackId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EcsClusters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EcsClusterArn: {},
                                EcsClusterName: {},
                                StackId: {},
                                RegisteredAt: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeElasticIps: {
            input: {
                type: "structure",
                members: {
                    InstanceId: {},
                    StackId: {},
                    Ips: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ElasticIps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Ip: {},
                                Name: {},
                                Domain: {},
                                Region: {},
                                InstanceId: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeElasticLoadBalancers: {
            input: {
                type: "structure",
                members: {
                    StackId: {},
                    LayerIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ElasticLoadBalancers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ElasticLoadBalancerName: {},
                                Region: {},
                                DnsName: {},
                                StackId: {},
                                LayerId: {},
                                VpcId: {},
                                AvailabilityZones: {
                                    shape: "S3"
                                },
                                SubnetIds: {
                                    shape: "S3"
                                },
                                Ec2InstanceIds: {
                                    shape: "S3"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeInstances: {
            input: {
                type: "structure",
                members: {
                    StackId: {},
                    LayerId: {},
                    InstanceIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AgentVersion: {},
                                AmiId: {},
                                Architecture: {},
                                Arn: {},
                                AutoScalingType: {},
                                AvailabilityZone: {},
                                BlockDeviceMappings: {
                                    shape: "Sz"
                                },
                                CreatedAt: {},
                                EbsOptimized: {
                                    type: "boolean"
                                },
                                Ec2InstanceId: {},
                                EcsClusterArn: {},
                                EcsContainerInstanceArn: {},
                                ElasticIp: {},
                                Hostname: {},
                                InfrastructureClass: {},
                                InstallUpdatesOnBoot: {
                                    type: "boolean"
                                },
                                InstanceId: {},
                                InstanceProfileArn: {},
                                InstanceType: {},
                                LastServiceErrorId: {},
                                LayerIds: {
                                    shape: "S3"
                                },
                                Os: {},
                                Platform: {},
                                PrivateDns: {},
                                PrivateIp: {},
                                PublicDns: {},
                                PublicIp: {},
                                RegisteredBy: {},
                                ReportedAgentVersion: {},
                                ReportedOs: {
                                    type: "structure",
                                    members: {
                                        Family: {},
                                        Name: {},
                                        Version: {}
                                    }
                                },
                                RootDeviceType: {},
                                RootDeviceVolumeId: {},
                                SecurityGroupIds: {
                                    shape: "S3"
                                },
                                SshHostDsaKeyFingerprint: {},
                                SshHostRsaKeyFingerprint: {},
                                SshKeyName: {},
                                StackId: {},
                                Status: {},
                                SubnetId: {},
                                Tenancy: {},
                                VirtualizationType: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeLayers: {
            input: {
                type: "structure",
                members: {
                    StackId: {},
                    LayerIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Layers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                StackId: {},
                                LayerId: {},
                                Type: {},
                                Name: {},
                                Shortname: {},
                                Attributes: {
                                    shape: "S17"
                                },
                                CloudWatchLogsConfiguration: {
                                    shape: "S19"
                                },
                                CustomInstanceProfileArn: {},
                                CustomJson: {},
                                CustomSecurityGroupIds: {
                                    shape: "S3"
                                },
                                DefaultSecurityGroupNames: {
                                    shape: "S3"
                                },
                                Packages: {
                                    shape: "S3"
                                },
                                VolumeConfigurations: {
                                    shape: "S1f"
                                },
                                EnableAutoHealing: {
                                    type: "boolean"
                                },
                                AutoAssignElasticIps: {
                                    type: "boolean"
                                },
                                AutoAssignPublicIps: {
                                    type: "boolean"
                                },
                                DefaultRecipes: {
                                    shape: "S1h"
                                },
                                CustomRecipes: {
                                    shape: "S1h"
                                },
                                CreatedAt: {},
                                InstallUpdatesOnBoot: {
                                    type: "boolean"
                                },
                                UseEbsOptimizedInstances: {
                                    type: "boolean"
                                },
                                LifecycleEventConfiguration: {
                                    shape: "S1i"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeLoadBasedAutoScaling: {
            input: {
                type: "structure",
                required: [ "LayerIds" ],
                members: {
                    LayerIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoadBasedAutoScalingConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LayerId: {},
                                Enable: {
                                    type: "boolean"
                                },
                                UpScaling: {
                                    shape: "S36"
                                },
                                DownScaling: {
                                    shape: "S36"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeMyUserProfile: {
            output: {
                type: "structure",
                members: {
                    UserProfile: {
                        type: "structure",
                        members: {
                            IamUserArn: {},
                            Name: {},
                            SshUsername: {},
                            SshPublicKey: {}
                        }
                    }
                }
            }
        },
        DescribeOperatingSystems: {
            output: {
                type: "structure",
                members: {
                    OperatingSystems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Id: {},
                                Type: {},
                                ConfigurationManagers: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Version: {}
                                        }
                                    }
                                },
                                ReportedName: {},
                                ReportedVersion: {},
                                Supported: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribePermissions: {
            input: {
                type: "structure",
                members: {
                    IamUserArn: {},
                    StackId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StackId: {},
                                IamUserArn: {},
                                AllowSsh: {
                                    type: "boolean"
                                },
                                AllowSudo: {
                                    type: "boolean"
                                },
                                Level: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeRaidArrays: {
            input: {
                type: "structure",
                members: {
                    InstanceId: {},
                    StackId: {},
                    RaidArrayIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RaidArrays: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RaidArrayId: {},
                                InstanceId: {},
                                Name: {},
                                RaidLevel: {
                                    type: "integer"
                                },
                                NumberOfDisks: {
                                    type: "integer"
                                },
                                Size: {
                                    type: "integer"
                                },
                                Device: {},
                                MountPoint: {},
                                AvailabilityZone: {},
                                CreatedAt: {},
                                StackId: {},
                                VolumeType: {},
                                Iops: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeRdsDbInstances: {
            input: {
                type: "structure",
                required: [ "StackId" ],
                members: {
                    StackId: {},
                    RdsDbInstanceArns: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RdsDbInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RdsDbInstanceArn: {},
                                DbInstanceIdentifier: {},
                                DbUser: {},
                                DbPassword: {},
                                Region: {},
                                Address: {},
                                Engine: {},
                                StackId: {},
                                MissingOnRds: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeServiceErrors: {
            input: {
                type: "structure",
                members: {
                    StackId: {},
                    InstanceId: {},
                    ServiceErrorIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceErrors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServiceErrorId: {},
                                StackId: {},
                                InstanceId: {},
                                Type: {},
                                Message: {},
                                CreatedAt: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeStackProvisioningParameters: {
            input: {
                type: "structure",
                required: [ "StackId" ],
                members: {
                    StackId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AgentInstallerUrl: {},
                    Parameters: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        DescribeStackSummary: {
            input: {
                type: "structure",
                required: [ "StackId" ],
                members: {
                    StackId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StackSummary: {
                        type: "structure",
                        members: {
                            StackId: {},
                            Name: {},
                            Arn: {},
                            LayersCount: {
                                type: "integer"
                            },
                            AppsCount: {
                                type: "integer"
                            },
                            InstancesCount: {
                                type: "structure",
                                members: {
                                    Assigning: {
                                        type: "integer"
                                    },
                                    Booting: {
                                        type: "integer"
                                    },
                                    ConnectionLost: {
                                        type: "integer"
                                    },
                                    Deregistering: {
                                        type: "integer"
                                    },
                                    Online: {
                                        type: "integer"
                                    },
                                    Pending: {
                                        type: "integer"
                                    },
                                    Rebooting: {
                                        type: "integer"
                                    },
                                    Registered: {
                                        type: "integer"
                                    },
                                    Registering: {
                                        type: "integer"
                                    },
                                    Requested: {
                                        type: "integer"
                                    },
                                    RunningSetup: {
                                        type: "integer"
                                    },
                                    SetupFailed: {
                                        type: "integer"
                                    },
                                    ShuttingDown: {
                                        type: "integer"
                                    },
                                    StartFailed: {
                                        type: "integer"
                                    },
                                    StopFailed: {
                                        type: "integer"
                                    },
                                    Stopped: {
                                        type: "integer"
                                    },
                                    Stopping: {
                                        type: "integer"
                                    },
                                    Terminated: {
                                        type: "integer"
                                    },
                                    Terminating: {
                                        type: "integer"
                                    },
                                    Unassigning: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeStacks: {
            input: {
                type: "structure",
                members: {
                    StackIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Stacks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StackId: {},
                                Name: {},
                                Arn: {},
                                Region: {},
                                VpcId: {},
                                Attributes: {
                                    shape: "S8"
                                },
                                ServiceRoleArn: {},
                                DefaultInstanceProfileArn: {},
                                DefaultOs: {},
                                HostnameTheme: {},
                                DefaultAvailabilityZone: {},
                                DefaultSubnetId: {},
                                CustomJson: {},
                                ConfigurationManager: {
                                    shape: "Sa"
                                },
                                ChefConfiguration: {
                                    shape: "Sb"
                                },
                                UseCustomCookbooks: {
                                    type: "boolean"
                                },
                                UseOpsworksSecurityGroups: {
                                    type: "boolean"
                                },
                                CustomCookbooksSource: {
                                    shape: "Sd"
                                },
                                DefaultSshKeyName: {},
                                CreatedAt: {},
                                DefaultRootDeviceType: {},
                                AgentVersion: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeTimeBasedAutoScaling: {
            input: {
                type: "structure",
                required: [ "InstanceIds" ],
                members: {
                    InstanceIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TimeBasedAutoScalingConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceId: {},
                                AutoScalingSchedule: {
                                    shape: "S4b"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeUserProfiles: {
            input: {
                type: "structure",
                members: {
                    IamUserArns: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IamUserArn: {},
                                Name: {},
                                SshUsername: {},
                                SshPublicKey: {},
                                AllowSelfManagement: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeVolumes: {
            input: {
                type: "structure",
                members: {
                    InstanceId: {},
                    StackId: {},
                    RaidArrayId: {},
                    VolumeIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Volumes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VolumeId: {},
                                Ec2VolumeId: {},
                                Name: {},
                                RaidArrayId: {},
                                InstanceId: {},
                                Status: {},
                                Size: {
                                    type: "integer"
                                },
                                Device: {},
                                MountPoint: {},
                                Region: {},
                                AvailabilityZone: {},
                                VolumeType: {},
                                Iops: {
                                    type: "integer"
                                },
                                Encrypted: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DetachElasticLoadBalancer: {
            input: {
                type: "structure",
                required: [ "ElasticLoadBalancerName", "LayerId" ],
                members: {
                    ElasticLoadBalancerName: {},
                    LayerId: {}
                }
            }
        },
        DisassociateElasticIp: {
            input: {
                type: "structure",
                required: [ "ElasticIp" ],
                members: {
                    ElasticIp: {}
                }
            }
        },
        GetHostnameSuggestion: {
            input: {
                type: "structure",
                required: [ "LayerId" ],
                members: {
                    LayerId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LayerId: {},
                    Hostname: {}
                }
            }
        },
        GrantAccess: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    ValidForInMinutes: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemporaryCredential: {
                        type: "structure",
                        members: {
                            Username: {},
                            Password: {},
                            ValidForInMinutes: {
                                type: "integer"
                            },
                            InstanceId: {}
                        }
                    }
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S50"
                    },
                    NextToken: {}
                }
            }
        },
        RebootInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {}
                }
            }
        },
        RegisterEcsCluster: {
            input: {
                type: "structure",
                required: [ "EcsClusterArn", "StackId" ],
                members: {
                    EcsClusterArn: {},
                    StackId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EcsClusterArn: {}
                }
            }
        },
        RegisterElasticIp: {
            input: {
                type: "structure",
                required: [ "ElasticIp", "StackId" ],
                members: {
                    ElasticIp: {},
                    StackId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ElasticIp: {}
                }
            }
        },
        RegisterInstance: {
            input: {
                type: "structure",
                required: [ "StackId" ],
                members: {
                    StackId: {},
                    Hostname: {},
                    PublicIp: {},
                    PrivateIp: {},
                    RsaPublicKey: {},
                    RsaPublicKeyFingerprint: {},
                    InstanceIdentity: {
                        type: "structure",
                        members: {
                            Document: {},
                            Signature: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceId: {}
                }
            }
        },
        RegisterRdsDbInstance: {
            input: {
                type: "structure",
                required: [ "StackId", "RdsDbInstanceArn", "DbUser", "DbPassword" ],
                members: {
                    StackId: {},
                    RdsDbInstanceArn: {},
                    DbUser: {},
                    DbPassword: {}
                }
            }
        },
        RegisterVolume: {
            input: {
                type: "structure",
                required: [ "StackId" ],
                members: {
                    Ec2VolumeId: {},
                    StackId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeId: {}
                }
            }
        },
        SetLoadBasedAutoScaling: {
            input: {
                type: "structure",
                required: [ "LayerId" ],
                members: {
                    LayerId: {},
                    Enable: {
                        type: "boolean"
                    },
                    UpScaling: {
                        shape: "S36"
                    },
                    DownScaling: {
                        shape: "S36"
                    }
                }
            }
        },
        SetPermission: {
            input: {
                type: "structure",
                required: [ "StackId", "IamUserArn" ],
                members: {
                    StackId: {},
                    IamUserArn: {},
                    AllowSsh: {
                        type: "boolean"
                    },
                    AllowSudo: {
                        type: "boolean"
                    },
                    Level: {}
                }
            }
        },
        SetTimeBasedAutoScaling: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    AutoScalingSchedule: {
                        shape: "S4b"
                    }
                }
            }
        },
        StartInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {}
                }
            }
        },
        StartStack: {
            input: {
                type: "structure",
                required: [ "StackId" ],
                members: {
                    StackId: {}
                }
            }
        },
        StopInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    Force: {
                        type: "boolean"
                    }
                }
            }
        },
        StopStack: {
            input: {
                type: "structure",
                required: [ "StackId" ],
                members: {
                    StackId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S50"
                    }
                }
            }
        },
        UnassignInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {}
                }
            }
        },
        UnassignVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    VolumeId: {}
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateApp: {
            input: {
                type: "structure",
                required: [ "AppId" ],
                members: {
                    AppId: {},
                    Name: {},
                    Description: {},
                    DataSources: {
                        shape: "Si"
                    },
                    Type: {},
                    AppSource: {
                        shape: "Sd"
                    },
                    Domains: {
                        shape: "S3"
                    },
                    EnableSsl: {
                        type: "boolean"
                    },
                    SslConfiguration: {
                        shape: "Sl"
                    },
                    Attributes: {
                        shape: "Sm"
                    },
                    Environment: {
                        shape: "So"
                    }
                }
            }
        },
        UpdateElasticIp: {
            input: {
                type: "structure",
                required: [ "ElasticIp" ],
                members: {
                    ElasticIp: {},
                    Name: {}
                }
            }
        },
        UpdateInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    LayerIds: {
                        shape: "S3"
                    },
                    InstanceType: {},
                    AutoScalingType: {},
                    Hostname: {},
                    Os: {},
                    AmiId: {},
                    SshKeyName: {},
                    Architecture: {},
                    InstallUpdatesOnBoot: {
                        type: "boolean"
                    },
                    EbsOptimized: {
                        type: "boolean"
                    },
                    AgentVersion: {}
                }
            }
        },
        UpdateLayer: {
            input: {
                type: "structure",
                required: [ "LayerId" ],
                members: {
                    LayerId: {},
                    Name: {},
                    Shortname: {},
                    Attributes: {
                        shape: "S17"
                    },
                    CloudWatchLogsConfiguration: {
                        shape: "S19"
                    },
                    CustomInstanceProfileArn: {},
                    CustomJson: {},
                    CustomSecurityGroupIds: {
                        shape: "S3"
                    },
                    Packages: {
                        shape: "S3"
                    },
                    VolumeConfigurations: {
                        shape: "S1f"
                    },
                    EnableAutoHealing: {
                        type: "boolean"
                    },
                    AutoAssignElasticIps: {
                        type: "boolean"
                    },
                    AutoAssignPublicIps: {
                        type: "boolean"
                    },
                    CustomRecipes: {
                        shape: "S1h"
                    },
                    InstallUpdatesOnBoot: {
                        type: "boolean"
                    },
                    UseEbsOptimizedInstances: {
                        type: "boolean"
                    },
                    LifecycleEventConfiguration: {
                        shape: "S1i"
                    }
                }
            }
        },
        UpdateMyUserProfile: {
            input: {
                type: "structure",
                members: {
                    SshPublicKey: {}
                }
            }
        },
        UpdateRdsDbInstance: {
            input: {
                type: "structure",
                required: [ "RdsDbInstanceArn" ],
                members: {
                    RdsDbInstanceArn: {},
                    DbUser: {},
                    DbPassword: {}
                }
            }
        },
        UpdateStack: {
            input: {
                type: "structure",
                required: [ "StackId" ],
                members: {
                    StackId: {},
                    Name: {},
                    Attributes: {
                        shape: "S8"
                    },
                    ServiceRoleArn: {},
                    DefaultInstanceProfileArn: {},
                    DefaultOs: {},
                    HostnameTheme: {},
                    DefaultAvailabilityZone: {},
                    DefaultSubnetId: {},
                    CustomJson: {},
                    ConfigurationManager: {
                        shape: "Sa"
                    },
                    ChefConfiguration: {
                        shape: "Sb"
                    },
                    UseCustomCookbooks: {
                        type: "boolean"
                    },
                    CustomCookbooksSource: {
                        shape: "Sd"
                    },
                    DefaultSshKeyName: {},
                    DefaultRootDeviceType: {},
                    UseOpsworksSecurityGroups: {
                        type: "boolean"
                    },
                    AgentVersion: {}
                }
            }
        },
        UpdateUserProfile: {
            input: {
                type: "structure",
                required: [ "IamUserArn" ],
                members: {
                    IamUserArn: {},
                    SshUsername: {},
                    SshPublicKey: {},
                    AllowSelfManagement: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    VolumeId: {},
                    Name: {},
                    MountPoint: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S8: {
            type: "map",
            key: {},
            value: {}
        },
        Sa: {
            type: "structure",
            members: {
                Name: {},
                Version: {}
            }
        },
        Sb: {
            type: "structure",
            members: {
                ManageBerkshelf: {
                    type: "boolean"
                },
                BerkshelfVersion: {}
            }
        },
        Sd: {
            type: "structure",
            members: {
                Type: {},
                Url: {},
                Username: {},
                Password: {},
                SshKey: {},
                Revision: {}
            }
        },
        Si: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Arn: {},
                    DatabaseName: {}
                }
            }
        },
        Sl: {
            type: "structure",
            required: [ "Certificate", "PrivateKey" ],
            members: {
                Certificate: {},
                PrivateKey: {},
                Chain: {}
            }
        },
        Sm: {
            type: "map",
            key: {},
            value: {}
        },
        So: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {},
                    Secure: {
                        type: "boolean"
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Args: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S3"
                    }
                }
            }
        },
        Sz: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DeviceName: {},
                    NoDevice: {},
                    VirtualName: {},
                    Ebs: {
                        type: "structure",
                        members: {
                            SnapshotId: {},
                            Iops: {
                                type: "integer"
                            },
                            VolumeSize: {
                                type: "integer"
                            },
                            VolumeType: {},
                            DeleteOnTermination: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S17: {
            type: "map",
            key: {},
            value: {}
        },
        S19: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                LogStreams: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            LogGroupName: {},
                            DatetimeFormat: {},
                            TimeZone: {},
                            File: {},
                            FileFingerprintLines: {},
                            MultiLineStartPattern: {},
                            InitialPosition: {},
                            Encoding: {},
                            BufferDuration: {
                                type: "integer"
                            },
                            BatchCount: {
                                type: "integer"
                            },
                            BatchSize: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "MountPoint", "NumberOfDisks", "Size" ],
                members: {
                    MountPoint: {},
                    RaidLevel: {
                        type: "integer"
                    },
                    NumberOfDisks: {
                        type: "integer"
                    },
                    Size: {
                        type: "integer"
                    },
                    VolumeType: {},
                    Iops: {
                        type: "integer"
                    },
                    Encrypted: {
                        type: "boolean"
                    }
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                Setup: {
                    shape: "S3"
                },
                Configure: {
                    shape: "S3"
                },
                Deploy: {
                    shape: "S3"
                },
                Undeploy: {
                    shape: "S3"
                },
                Shutdown: {
                    shape: "S3"
                }
            }
        },
        S1i: {
            type: "structure",
            members: {
                Shutdown: {
                    type: "structure",
                    members: {
                        ExecutionTimeout: {
                            type: "integer"
                        },
                        DelayUntilElbConnectionsDrained: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S36: {
            type: "structure",
            members: {
                InstanceCount: {
                    type: "integer"
                },
                ThresholdsWaitTime: {
                    type: "integer"
                },
                IgnoreMetricsTime: {
                    type: "integer"
                },
                CpuThreshold: {
                    type: "double"
                },
                MemoryThreshold: {
                    type: "double"
                },
                LoadThreshold: {
                    type: "double"
                },
                Alarms: {
                    shape: "S3"
                }
            }
        },
        S4b: {
            type: "structure",
            members: {
                Monday: {
                    shape: "S4c"
                },
                Tuesday: {
                    shape: "S4c"
                },
                Wednesday: {
                    shape: "S4c"
                },
                Thursday: {
                    shape: "S4c"
                },
                Friday: {
                    shape: "S4c"
                },
                Saturday: {
                    shape: "S4c"
                },
                Sunday: {
                    shape: "S4c"
                }
            }
        },
        S4c: {
            type: "map",
            key: {},
            value: {}
        },
        S50: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        DescribeApps: {
            result_key: "Apps"
        },
        DescribeCommands: {
            result_key: "Commands"
        },
        DescribeDeployments: {
            result_key: "Deployments"
        },
        DescribeEcsClusters: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EcsClusters"
        },
        DescribeElasticIps: {
            result_key: "ElasticIps"
        },
        DescribeElasticLoadBalancers: {
            result_key: "ElasticLoadBalancers"
        },
        DescribeInstances: {
            result_key: "Instances"
        },
        DescribeLayers: {
            result_key: "Layers"
        },
        DescribeLoadBasedAutoScaling: {
            result_key: "LoadBasedAutoScalingConfigurations"
        },
        DescribePermissions: {
            result_key: "Permissions"
        },
        DescribeRaidArrays: {
            result_key: "RaidArrays"
        },
        DescribeServiceErrors: {
            result_key: "ServiceErrors"
        },
        DescribeStacks: {
            result_key: "Stacks"
        },
        DescribeTimeBasedAutoScaling: {
            result_key: "TimeBasedAutoScalingConfigurations"
        },
        DescribeUserProfiles: {
            result_key: "UserProfiles"
        },
        DescribeVolumes: {
            result_key: "Volumes"
        }
    },
    waiters: {
        AppExists: {
            delay: 1,
            operation: "DescribeApps",
            maxAttempts: 40,
            acceptors: [ {
                expected: 200,
                matcher: "status",
                state: "success"
            }, {
                matcher: "status",
                expected: 400,
                state: "failure"
            } ]
        },
        DeploymentSuccessful: {
            delay: 15,
            operation: "DescribeDeployments",
            maxAttempts: 40,
            description: "Wait until a deployment has completed successfully.",
            acceptors: [ {
                expected: "successful",
                matcher: "pathAll",
                state: "success",
                argument: "Deployments[].Status"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Deployments[].Status"
            } ]
        },
        InstanceOnline: {
            delay: 15,
            operation: "DescribeInstances",
            maxAttempts: 40,
            description: "Wait until OpsWorks instance is online.",
            acceptors: [ {
                expected: "online",
                matcher: "pathAll",
                state: "success",
                argument: "Instances[].Status"
            }, {
                expected: "setup_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "shutting_down",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "start_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "stopped",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "stopping",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "terminating",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "terminated",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "stop_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            } ]
        },
        InstanceRegistered: {
            delay: 15,
            operation: "DescribeInstances",
            maxAttempts: 40,
            description: "Wait until OpsWorks instance is registered.",
            acceptors: [ {
                expected: "registered",
                matcher: "pathAll",
                state: "success",
                argument: "Instances[].Status"
            }, {
                expected: "setup_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "shutting_down",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "stopped",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "stopping",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "terminating",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "terminated",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "stop_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            } ]
        },
        InstanceStopped: {
            delay: 15,
            operation: "DescribeInstances",
            maxAttempts: 40,
            description: "Wait until OpsWorks instance is stopped.",
            acceptors: [ {
                expected: "stopped",
                matcher: "pathAll",
                state: "success",
                argument: "Instances[].Status"
            }, {
                expected: "booting",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "pending",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "requested",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "running_setup",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "setup_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "start_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "stop_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            } ]
        },
        InstanceTerminated: {
            delay: 15,
            operation: "DescribeInstances",
            maxAttempts: 40,
            description: "Wait until OpsWorks instance is terminated.",
            acceptors: [ {
                expected: "terminated",
                matcher: "pathAll",
                state: "success",
                argument: "Instances[].Status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            }, {
                expected: "booting",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "online",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "pending",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "requested",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "running_setup",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "setup_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            }, {
                expected: "start_failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Instances[].Status"
            } ]
        }
    }
};

AWS.apiLoader.services["opsworkscm"] = {};

AWS.OpsWorksCM = AWS.Service.defineService("opsworkscm", [ "2016-11-01" ]);

AWS.apiLoader.services["opsworkscm"]["2016-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-11-01",
        endpointPrefix: "opsworks-cm",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "OpsWorksCM",
        serviceFullName: "AWS OpsWorks CM",
        serviceId: "OpsWorksCM",
        signatureVersion: "v4",
        signingName: "opsworks-cm",
        targetPrefix: "OpsWorksCM_V2016_11_01",
        uid: "opsworkscm-2016-11-01"
    },
    operations: {
        AssociateNode: {
            input: {
                type: "structure",
                required: [ "ServerName", "NodeName", "EngineAttributes" ],
                members: {
                    ServerName: {},
                    NodeName: {},
                    EngineAttributes: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NodeAssociationStatusToken: {}
                }
            }
        },
        CreateBackup: {
            input: {
                type: "structure",
                required: [ "ServerName" ],
                members: {
                    ServerName: {},
                    Description: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "Sh"
                    }
                }
            }
        },
        CreateServer: {
            input: {
                type: "structure",
                required: [ "Engine", "ServerName", "InstanceProfileArn", "InstanceType", "ServiceRoleArn" ],
                members: {
                    AssociatePublicIpAddress: {
                        type: "boolean"
                    },
                    CustomDomain: {},
                    CustomCertificate: {},
                    CustomPrivateKey: {
                        type: "string",
                        sensitive: true
                    },
                    DisableAutomatedBackup: {
                        type: "boolean"
                    },
                    Engine: {},
                    EngineModel: {},
                    EngineVersion: {},
                    EngineAttributes: {
                        shape: "S4"
                    },
                    BackupRetentionCount: {
                        type: "integer"
                    },
                    ServerName: {},
                    InstanceProfileArn: {},
                    InstanceType: {},
                    KeyPair: {},
                    PreferredMaintenanceWindow: {},
                    PreferredBackupWindow: {},
                    SecurityGroupIds: {
                        shape: "Sn"
                    },
                    ServiceRoleArn: {},
                    SubnetIds: {
                        shape: "Sn"
                    },
                    Tags: {
                        shape: "Sc"
                    },
                    BackupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Server: {
                        shape: "Sz"
                    }
                }
            }
        },
        DeleteBackup: {
            input: {
                type: "structure",
                required: [ "BackupId" ],
                members: {
                    BackupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteServer: {
            input: {
                type: "structure",
                required: [ "ServerName" ],
                members: {
                    ServerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAccountAttributes: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Maximum: {
                                    type: "integer"
                                },
                                Used: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeBackups: {
            input: {
                type: "structure",
                members: {
                    BackupId: {},
                    ServerName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Backups: {
                        type: "list",
                        member: {
                            shape: "Sh"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                required: [ "ServerName" ],
                members: {
                    ServerName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServerEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                ServerName: {},
                                Message: {},
                                LogUrl: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeNodeAssociationStatus: {
            input: {
                type: "structure",
                required: [ "NodeAssociationStatusToken", "ServerName" ],
                members: {
                    NodeAssociationStatusToken: {},
                    ServerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NodeAssociationStatus: {},
                    EngineAttributes: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribeServers: {
            input: {
                type: "structure",
                members: {
                    ServerName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Servers: {
                        type: "list",
                        member: {
                            shape: "Sz"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateNode: {
            input: {
                type: "structure",
                required: [ "ServerName", "NodeName" ],
                members: {
                    ServerName: {},
                    NodeName: {},
                    EngineAttributes: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NodeAssociationStatusToken: {}
                }
            }
        },
        ExportServerEngineAttribute: {
            input: {
                type: "structure",
                required: [ "ExportAttributeName", "ServerName" ],
                members: {
                    ExportAttributeName: {},
                    ServerName: {},
                    InputAttributes: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EngineAttribute: {
                        shape: "S5"
                    },
                    ServerName: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sc"
                    },
                    NextToken: {}
                }
            }
        },
        RestoreServer: {
            input: {
                type: "structure",
                required: [ "BackupId", "ServerName" ],
                members: {
                    BackupId: {},
                    ServerName: {},
                    InstanceType: {},
                    KeyPair: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Server: {
                        shape: "Sz"
                    }
                }
            }
        },
        StartMaintenance: {
            input: {
                type: "structure",
                required: [ "ServerName" ],
                members: {
                    ServerName: {},
                    EngineAttributes: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Server: {
                        shape: "Sz"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateServer: {
            input: {
                type: "structure",
                required: [ "ServerName" ],
                members: {
                    DisableAutomatedBackup: {
                        type: "boolean"
                    },
                    BackupRetentionCount: {
                        type: "integer"
                    },
                    ServerName: {},
                    PreferredMaintenanceWindow: {},
                    PreferredBackupWindow: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Server: {
                        shape: "Sz"
                    }
                }
            }
        },
        UpdateServerEngineAttributes: {
            input: {
                type: "structure",
                required: [ "ServerName", "AttributeName" ],
                members: {
                    ServerName: {},
                    AttributeName: {},
                    AttributeValue: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Server: {
                        shape: "Sz"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                shape: "S5"
            }
        },
        S5: {
            type: "structure",
            members: {
                Name: {},
                Value: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sh: {
            type: "structure",
            members: {
                BackupArn: {},
                BackupId: {},
                BackupType: {},
                CreatedAt: {
                    type: "timestamp"
                },
                Description: {},
                Engine: {},
                EngineModel: {},
                EngineVersion: {},
                InstanceProfileArn: {},
                InstanceType: {},
                KeyPair: {},
                PreferredBackupWindow: {},
                PreferredMaintenanceWindow: {},
                S3DataSize: {
                    deprecated: true,
                    type: "integer"
                },
                S3DataUrl: {
                    deprecated: true
                },
                S3LogUrl: {},
                SecurityGroupIds: {
                    shape: "Sn"
                },
                ServerName: {},
                ServiceRoleArn: {},
                Status: {},
                StatusDescription: {},
                SubnetIds: {
                    shape: "Sn"
                },
                ToolsVersion: {},
                UserArn: {}
            }
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sz: {
            type: "structure",
            members: {
                AssociatePublicIpAddress: {
                    type: "boolean"
                },
                BackupRetentionCount: {
                    type: "integer"
                },
                ServerName: {},
                CreatedAt: {
                    type: "timestamp"
                },
                CloudFormationStackArn: {},
                CustomDomain: {},
                DisableAutomatedBackup: {
                    type: "boolean"
                },
                Endpoint: {},
                Engine: {},
                EngineModel: {},
                EngineAttributes: {
                    shape: "S4"
                },
                EngineVersion: {},
                InstanceProfileArn: {},
                InstanceType: {},
                KeyPair: {},
                MaintenanceStatus: {},
                PreferredMaintenanceWindow: {},
                PreferredBackupWindow: {},
                SecurityGroupIds: {
                    shape: "Sn"
                },
                ServiceRoleArn: {},
                Status: {},
                StatusReason: {},
                SubnetIds: {
                    shape: "Sn"
                },
                ServerArn: {}
            }
        }
    },
    paginators: {
        DescribeBackups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Backups"
        },
        DescribeEvents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ServerEvents"
        },
        DescribeServers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Servers"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Tags"
        }
    },
    waiters: {
        NodeAssociated: {
            delay: 15,
            maxAttempts: 15,
            operation: "DescribeNodeAssociationStatus",
            description: "Wait until node is associated or disassociated.",
            acceptors: [ {
                expected: "SUCCESS",
                state: "success",
                matcher: "path",
                argument: "NodeAssociationStatus"
            }, {
                expected: "FAILED",
                state: "failure",
                matcher: "path",
                argument: "NodeAssociationStatus"
            } ]
        }
    }
};

AWS.apiLoader.services["organizations"] = {};

AWS.Organizations = AWS.Service.defineService("organizations", [ "2016-11-28" ]);

AWS.apiLoader.services["organizations"]["2016-11-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-11-28",
        endpointPrefix: "organizations",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Organizations",
        serviceFullName: "AWS Organizations",
        serviceId: "Organizations",
        signatureVersion: "v4",
        targetPrefix: "AWSOrganizationsV20161128",
        uid: "organizations-2016-11-28"
    },
    operations: {
        AcceptHandshake: {
            input: {
                type: "structure",
                required: [ "HandshakeId" ],
                members: {
                    HandshakeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Handshake: {
                        shape: "S4"
                    }
                }
            }
        },
        AttachPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId", "TargetId" ],
                members: {
                    PolicyId: {},
                    TargetId: {}
                }
            }
        },
        CancelHandshake: {
            input: {
                type: "structure",
                required: [ "HandshakeId" ],
                members: {
                    HandshakeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Handshake: {
                        shape: "S4"
                    }
                }
            }
        },
        CloseAccount: {
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {}
                }
            }
        },
        CreateAccount: {
            input: {
                type: "structure",
                required: [ "Email", "AccountName" ],
                members: {
                    Email: {
                        shape: "Sp"
                    },
                    AccountName: {
                        shape: "Sq"
                    },
                    RoleName: {},
                    IamUserAccessToBilling: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreateAccountStatus: {
                        shape: "Sy"
                    }
                }
            }
        },
        CreateGovCloudAccount: {
            input: {
                type: "structure",
                required: [ "Email", "AccountName" ],
                members: {
                    Email: {
                        shape: "Sp"
                    },
                    AccountName: {
                        shape: "Sq"
                    },
                    RoleName: {},
                    IamUserAccessToBilling: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreateAccountStatus: {
                        shape: "Sy"
                    }
                }
            }
        },
        CreateOrganization: {
            input: {
                type: "structure",
                members: {
                    FeatureSet: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Organization: {
                        shape: "S17"
                    }
                }
            }
        },
        CreateOrganizationalUnit: {
            input: {
                type: "structure",
                required: [ "ParentId", "Name" ],
                members: {
                    ParentId: {},
                    Name: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationalUnit: {
                        shape: "S1j"
                    }
                }
            }
        },
        CreatePolicy: {
            input: {
                type: "structure",
                required: [ "Content", "Description", "Name", "Type" ],
                members: {
                    Content: {},
                    Description: {},
                    Name: {},
                    Type: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "S1r"
                    }
                }
            }
        },
        DeclineHandshake: {
            input: {
                type: "structure",
                required: [ "HandshakeId" ],
                members: {
                    HandshakeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Handshake: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteOrganization: {},
        DeleteOrganizationalUnit: {
            input: {
                type: "structure",
                required: [ "OrganizationalUnitId" ],
                members: {
                    OrganizationalUnitId: {}
                }
            }
        },
        DeletePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {}
                }
            }
        },
        DeleteResourcePolicy: {},
        DeregisterDelegatedAdministrator: {
            input: {
                type: "structure",
                required: [ "AccountId", "ServicePrincipal" ],
                members: {
                    AccountId: {},
                    ServicePrincipal: {}
                }
            }
        },
        DescribeAccount: {
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Account: {
                        shape: "S23"
                    }
                }
            }
        },
        DescribeCreateAccountStatus: {
            input: {
                type: "structure",
                required: [ "CreateAccountRequestId" ],
                members: {
                    CreateAccountRequestId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CreateAccountStatus: {
                        shape: "Sy"
                    }
                }
            }
        },
        DescribeEffectivePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyType" ],
                members: {
                    PolicyType: {},
                    TargetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EffectivePolicy: {
                        type: "structure",
                        members: {
                            PolicyContent: {},
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            TargetId: {},
                            PolicyType: {}
                        }
                    }
                }
            }
        },
        DescribeHandshake: {
            input: {
                type: "structure",
                required: [ "HandshakeId" ],
                members: {
                    HandshakeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Handshake: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribeOrganization: {
            output: {
                type: "structure",
                members: {
                    Organization: {
                        shape: "S17"
                    }
                }
            }
        },
        DescribeOrganizationalUnit: {
            input: {
                type: "structure",
                required: [ "OrganizationalUnitId" ],
                members: {
                    OrganizationalUnitId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationalUnit: {
                        shape: "S1j"
                    }
                }
            }
        },
        DescribePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "S1r"
                    }
                }
            }
        },
        DescribeResourcePolicy: {
            output: {
                type: "structure",
                members: {
                    ResourcePolicy: {
                        shape: "S2l"
                    }
                }
            }
        },
        DetachPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId", "TargetId" ],
                members: {
                    PolicyId: {},
                    TargetId: {}
                }
            }
        },
        DisableAWSServiceAccess: {
            input: {
                type: "structure",
                required: [ "ServicePrincipal" ],
                members: {
                    ServicePrincipal: {}
                }
            }
        },
        DisablePolicyType: {
            input: {
                type: "structure",
                required: [ "RootId", "PolicyType" ],
                members: {
                    RootId: {},
                    PolicyType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Root: {
                        shape: "S2v"
                    }
                }
            }
        },
        EnableAWSServiceAccess: {
            input: {
                type: "structure",
                required: [ "ServicePrincipal" ],
                members: {
                    ServicePrincipal: {}
                }
            }
        },
        EnableAllFeatures: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Handshake: {
                        shape: "S4"
                    }
                }
            }
        },
        EnablePolicyType: {
            input: {
                type: "structure",
                required: [ "RootId", "PolicyType" ],
                members: {
                    RootId: {},
                    PolicyType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Root: {
                        shape: "S2v"
                    }
                }
            }
        },
        InviteAccountToOrganization: {
            input: {
                type: "structure",
                required: [ "Target" ],
                members: {
                    Target: {
                        shape: "S7"
                    },
                    Notes: {
                        type: "string",
                        sensitive: true
                    },
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Handshake: {
                        shape: "S4"
                    }
                }
            }
        },
        LeaveOrganization: {},
        ListAWSServiceAccessForOrganization: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EnabledServicePrincipals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServicePrincipal: {},
                                DateEnabled: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAccounts: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accounts: {
                        shape: "S3e"
                    },
                    NextToken: {}
                }
            }
        },
        ListAccountsForParent: {
            input: {
                type: "structure",
                required: [ "ParentId" ],
                members: {
                    ParentId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accounts: {
                        shape: "S3e"
                    },
                    NextToken: {}
                }
            }
        },
        ListChildren: {
            input: {
                type: "structure",
                required: [ "ParentId", "ChildType" ],
                members: {
                    ParentId: {},
                    ChildType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Children: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCreateAccountStatus: {
            input: {
                type: "structure",
                members: {
                    States: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreateAccountStatuses: {
                        type: "list",
                        member: {
                            shape: "Sy"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDelegatedAdministrators: {
            input: {
                type: "structure",
                members: {
                    ServicePrincipal: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DelegatedAdministrators: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Email: {
                                    shape: "Sp"
                                },
                                Name: {
                                    shape: "S24"
                                },
                                Status: {},
                                JoinedMethod: {},
                                JoinedTimestamp: {
                                    type: "timestamp"
                                },
                                DelegationEnabledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDelegatedServicesForAccount: {
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DelegatedServices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ServicePrincipal: {},
                                DelegationEnabledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHandshakesForAccount: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S40"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Handshakes: {
                        shape: "S42"
                    },
                    NextToken: {}
                }
            }
        },
        ListHandshakesForOrganization: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S40"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Handshakes: {
                        shape: "S42"
                    },
                    NextToken: {}
                }
            }
        },
        ListOrganizationalUnitsForParent: {
            input: {
                type: "structure",
                required: [ "ParentId" ],
                members: {
                    ParentId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationalUnits: {
                        type: "list",
                        member: {
                            shape: "S1j"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListParents: {
            input: {
                type: "structure",
                required: [ "ChildId" ],
                members: {
                    ChildId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Parents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPolicies: {
            input: {
                type: "structure",
                required: [ "Filter" ],
                members: {
                    Filter: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policies: {
                        shape: "S4f"
                    },
                    NextToken: {}
                }
            }
        },
        ListPoliciesForTarget: {
            input: {
                type: "structure",
                required: [ "TargetId", "Filter" ],
                members: {
                    TargetId: {},
                    Filter: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policies: {
                        shape: "S4f"
                    },
                    NextToken: {}
                }
            }
        },
        ListRoots: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Roots: {
                        type: "list",
                        member: {
                            shape: "S2v"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "St"
                    },
                    NextToken: {}
                }
            }
        },
        ListTargetsForPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Targets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TargetId: {},
                                Arn: {},
                                Name: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        MoveAccount: {
            input: {
                type: "structure",
                required: [ "AccountId", "SourceParentId", "DestinationParentId" ],
                members: {
                    AccountId: {},
                    SourceParentId: {},
                    DestinationParentId: {}
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "Content" ],
                members: {
                    Content: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourcePolicy: {
                        shape: "S2l"
                    }
                }
            }
        },
        RegisterDelegatedAdministrator: {
            input: {
                type: "structure",
                required: [ "AccountId", "ServicePrincipal" ],
                members: {
                    AccountId: {},
                    ServicePrincipal: {}
                }
            }
        },
        RemoveAccountFromOrganization: {
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Tags" ],
                members: {
                    ResourceId: {},
                    Tags: {
                        shape: "St"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagKeys" ],
                members: {
                    ResourceId: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateOrganizationalUnit: {
            input: {
                type: "structure",
                required: [ "OrganizationalUnitId" ],
                members: {
                    OrganizationalUnitId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationalUnit: {
                        shape: "S1j"
                    }
                }
            }
        },
        UpdatePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {},
                    Name: {},
                    Description: {},
                    Content: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "S1r"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Parties: {
                    type: "list",
                    member: {
                        shape: "S7"
                    }
                },
                State: {},
                RequestedTimestamp: {
                    type: "timestamp"
                },
                ExpirationTimestamp: {
                    type: "timestamp"
                },
                Action: {},
                Resources: {
                    shape: "Sd"
                }
            }
        },
        S7: {
            type: "structure",
            required: [ "Id", "Type" ],
            members: {
                Id: {
                    type: "string",
                    sensitive: true
                },
                Type: {}
            }
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {
                        type: "string",
                        sensitive: true
                    },
                    Type: {},
                    Resources: {
                        shape: "Sd"
                    }
                }
            }
        },
        Sp: {
            type: "string",
            sensitive: true
        },
        Sq: {
            type: "string",
            sensitive: true
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                Id: {},
                AccountName: {
                    shape: "Sq"
                },
                State: {},
                RequestedTimestamp: {
                    type: "timestamp"
                },
                CompletedTimestamp: {
                    type: "timestamp"
                },
                AccountId: {},
                GovCloudAccountId: {},
                FailureReason: {}
            }
        },
        S17: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                FeatureSet: {},
                MasterAccountArn: {},
                MasterAccountId: {},
                MasterAccountEmail: {
                    shape: "Sp"
                },
                AvailablePolicyTypes: {
                    shape: "S1b"
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Status: {}
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {}
            }
        },
        S1r: {
            type: "structure",
            members: {
                PolicySummary: {
                    shape: "S1s"
                },
                Content: {}
            }
        },
        S1s: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                Description: {},
                Type: {},
                AwsManaged: {
                    type: "boolean"
                }
            }
        },
        S23: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Email: {
                    shape: "Sp"
                },
                Name: {
                    shape: "S24"
                },
                Status: {},
                JoinedMethod: {},
                JoinedTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S24: {
            type: "string",
            sensitive: true
        },
        S2l: {
            type: "structure",
            members: {
                ResourcePolicySummary: {
                    type: "structure",
                    members: {
                        Id: {},
                        Arn: {}
                    }
                },
                Content: {}
            }
        },
        S2v: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                PolicyTypes: {
                    shape: "S1b"
                }
            }
        },
        S3e: {
            type: "list",
            member: {
                shape: "S23"
            }
        },
        S40: {
            type: "structure",
            members: {
                ActionType: {},
                ParentHandshakeId: {}
            }
        },
        S42: {
            type: "list",
            member: {
                shape: "S4"
            }
        },
        S4f: {
            type: "list",
            member: {
                shape: "S1s"
            }
        }
    },
    paginators: {
        ListAWSServiceAccessForOrganization: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListAccounts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListAccountsForParent: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListChildren: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListCreateAccountStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDelegatedAdministrators: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DelegatedAdministrators"
        },
        ListDelegatedServicesForAccount: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DelegatedServices"
        },
        ListHandshakesForAccount: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListHandshakesForOrganization: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListOrganizationalUnitsForParent: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListParents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListPolicies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListPoliciesForTarget: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListRoots: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Tags"
        },
        ListTargetsForPolicy: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["pinpoint"] = {};

AWS.Pinpoint = AWS.Service.defineService("pinpoint", [ "2016-12-01" ]);

AWS.apiLoader.services["pinpoint"]["2016-12-01"] = {
    metadata: {
        apiVersion: "2016-12-01",
        endpointPrefix: "pinpoint",
        signingName: "mobiletargeting",
        serviceFullName: "Amazon Pinpoint",
        serviceId: "Pinpoint",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "pinpoint-2016-12-01",
        signatureVersion: "v4"
    },
    operations: {
        CreateApp: {
            http: {
                requestUri: "/v1/apps",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    CreateApplicationRequest: {
                        type: "structure",
                        members: {
                            Name: {},
                            tags: {
                                shape: "S4",
                                locationName: "tags"
                            }
                        },
                        required: [ "Name" ]
                    }
                },
                required: [ "CreateApplicationRequest" ],
                payload: "CreateApplicationRequest"
            },
            output: {
                type: "structure",
                members: {
                    ApplicationResponse: {
                        shape: "S6"
                    }
                },
                required: [ "ApplicationResponse" ],
                payload: "ApplicationResponse"
            }
        },
        CreateCampaign: {
            http: {
                requestUri: "/v1/apps/{application-id}/campaigns",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    WriteCampaignRequest: {
                        shape: "S8"
                    }
                },
                required: [ "ApplicationId", "WriteCampaignRequest" ],
                payload: "WriteCampaignRequest"
            },
            output: {
                type: "structure",
                members: {
                    CampaignResponse: {
                        shape: "S1j"
                    }
                },
                required: [ "CampaignResponse" ],
                payload: "CampaignResponse"
            }
        },
        CreateEmailTemplate: {
            http: {
                requestUri: "/v1/templates/{template-name}/email",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    EmailTemplateRequest: {
                        shape: "S1p"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    }
                },
                required: [ "TemplateName", "EmailTemplateRequest" ],
                payload: "EmailTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    CreateTemplateMessageBody: {
                        shape: "S1r"
                    }
                },
                required: [ "CreateTemplateMessageBody" ],
                payload: "CreateTemplateMessageBody"
            }
        },
        CreateExportJob: {
            http: {
                requestUri: "/v1/apps/{application-id}/jobs/export",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    ExportJobRequest: {
                        type: "structure",
                        members: {
                            RoleArn: {},
                            S3UrlPrefix: {},
                            SegmentId: {},
                            SegmentVersion: {
                                type: "integer"
                            }
                        },
                        required: [ "S3UrlPrefix", "RoleArn" ]
                    }
                },
                required: [ "ApplicationId", "ExportJobRequest" ],
                payload: "ExportJobRequest"
            },
            output: {
                type: "structure",
                members: {
                    ExportJobResponse: {
                        shape: "S1v"
                    }
                },
                required: [ "ExportJobResponse" ],
                payload: "ExportJobResponse"
            }
        },
        CreateImportJob: {
            http: {
                requestUri: "/v1/apps/{application-id}/jobs/import",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    ImportJobRequest: {
                        type: "structure",
                        members: {
                            DefineSegment: {
                                type: "boolean"
                            },
                            ExternalId: {},
                            Format: {},
                            RegisterEndpoints: {
                                type: "boolean"
                            },
                            RoleArn: {},
                            S3Url: {},
                            SegmentId: {},
                            SegmentName: {}
                        },
                        required: [ "Format", "S3Url", "RoleArn" ]
                    }
                },
                required: [ "ApplicationId", "ImportJobRequest" ],
                payload: "ImportJobRequest"
            },
            output: {
                type: "structure",
                members: {
                    ImportJobResponse: {
                        shape: "S22"
                    }
                },
                required: [ "ImportJobResponse" ],
                payload: "ImportJobResponse"
            }
        },
        CreateInAppTemplate: {
            http: {
                requestUri: "/v1/templates/{template-name}/inapp",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    InAppTemplateRequest: {
                        shape: "S25"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    }
                },
                required: [ "TemplateName", "InAppTemplateRequest" ],
                payload: "InAppTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    TemplateCreateMessageBody: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Message: {},
                            RequestID: {}
                        }
                    }
                },
                required: [ "TemplateCreateMessageBody" ],
                payload: "TemplateCreateMessageBody"
            }
        },
        CreateJourney: {
            http: {
                requestUri: "/v1/apps/{application-id}/journeys",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    WriteJourneyRequest: {
                        shape: "S29"
                    }
                },
                required: [ "ApplicationId", "WriteJourneyRequest" ],
                payload: "WriteJourneyRequest"
            },
            output: {
                type: "structure",
                members: {
                    JourneyResponse: {
                        shape: "S3u"
                    }
                },
                required: [ "JourneyResponse" ],
                payload: "JourneyResponse"
            }
        },
        CreatePushTemplate: {
            http: {
                requestUri: "/v1/templates/{template-name}/push",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    PushNotificationTemplateRequest: {
                        shape: "S3w"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    }
                },
                required: [ "TemplateName", "PushNotificationTemplateRequest" ],
                payload: "PushNotificationTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    CreateTemplateMessageBody: {
                        shape: "S1r"
                    }
                },
                required: [ "CreateTemplateMessageBody" ],
                payload: "CreateTemplateMessageBody"
            }
        },
        CreateRecommenderConfiguration: {
            http: {
                requestUri: "/v1/recommenders",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    CreateRecommenderConfiguration: {
                        type: "structure",
                        members: {
                            Attributes: {
                                shape: "S4"
                            },
                            Description: {},
                            Name: {},
                            RecommendationProviderIdType: {},
                            RecommendationProviderRoleArn: {},
                            RecommendationProviderUri: {},
                            RecommendationTransformerUri: {},
                            RecommendationsDisplayName: {},
                            RecommendationsPerMessage: {
                                type: "integer"
                            }
                        },
                        required: [ "RecommendationProviderUri", "RecommendationProviderRoleArn" ]
                    }
                },
                required: [ "CreateRecommenderConfiguration" ],
                payload: "CreateRecommenderConfiguration"
            },
            output: {
                type: "structure",
                members: {
                    RecommenderConfigurationResponse: {
                        shape: "S44"
                    }
                },
                required: [ "RecommenderConfigurationResponse" ],
                payload: "RecommenderConfigurationResponse"
            }
        },
        CreateSegment: {
            http: {
                requestUri: "/v1/apps/{application-id}/segments",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    WriteSegmentRequest: {
                        shape: "S46"
                    }
                },
                required: [ "ApplicationId", "WriteSegmentRequest" ],
                payload: "WriteSegmentRequest"
            },
            output: {
                type: "structure",
                members: {
                    SegmentResponse: {
                        shape: "S4h"
                    }
                },
                required: [ "SegmentResponse" ],
                payload: "SegmentResponse"
            }
        },
        CreateSmsTemplate: {
            http: {
                requestUri: "/v1/templates/{template-name}/sms",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    SMSTemplateRequest: {
                        shape: "S4m"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    }
                },
                required: [ "TemplateName", "SMSTemplateRequest" ],
                payload: "SMSTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    CreateTemplateMessageBody: {
                        shape: "S1r"
                    }
                },
                required: [ "CreateTemplateMessageBody" ],
                payload: "CreateTemplateMessageBody"
            }
        },
        CreateVoiceTemplate: {
            http: {
                requestUri: "/v1/templates/{template-name}/voice",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    VoiceTemplateRequest: {
                        shape: "S4p"
                    }
                },
                required: [ "TemplateName", "VoiceTemplateRequest" ],
                payload: "VoiceTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    CreateTemplateMessageBody: {
                        shape: "S1r"
                    }
                },
                required: [ "CreateTemplateMessageBody" ],
                payload: "CreateTemplateMessageBody"
            }
        },
        DeleteAdmChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/adm",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ADMChannelResponse: {
                        shape: "S4t"
                    }
                },
                required: [ "ADMChannelResponse" ],
                payload: "ADMChannelResponse"
            }
        },
        DeleteApnsChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/apns",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    APNSChannelResponse: {
                        shape: "S4w"
                    }
                },
                required: [ "APNSChannelResponse" ],
                payload: "APNSChannelResponse"
            }
        },
        DeleteApnsSandboxChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/apns_sandbox",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    APNSSandboxChannelResponse: {
                        shape: "S4z"
                    }
                },
                required: [ "APNSSandboxChannelResponse" ],
                payload: "APNSSandboxChannelResponse"
            }
        },
        DeleteApnsVoipChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/apns_voip",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    APNSVoipChannelResponse: {
                        shape: "S52"
                    }
                },
                required: [ "APNSVoipChannelResponse" ],
                payload: "APNSVoipChannelResponse"
            }
        },
        DeleteApnsVoipSandboxChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/apns_voip_sandbox",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    APNSVoipSandboxChannelResponse: {
                        shape: "S55"
                    }
                },
                required: [ "APNSVoipSandboxChannelResponse" ],
                payload: "APNSVoipSandboxChannelResponse"
            }
        },
        DeleteApp: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationResponse: {
                        shape: "S6"
                    }
                },
                required: [ "ApplicationResponse" ],
                payload: "ApplicationResponse"
            }
        },
        DeleteBaiduChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/baidu",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    BaiduChannelResponse: {
                        shape: "S5a"
                    }
                },
                required: [ "BaiduChannelResponse" ],
                payload: "BaiduChannelResponse"
            }
        },
        DeleteCampaign: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/campaigns/{campaign-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    CampaignId: {
                        location: "uri",
                        locationName: "campaign-id"
                    }
                },
                required: [ "CampaignId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    CampaignResponse: {
                        shape: "S1j"
                    }
                },
                required: [ "CampaignResponse" ],
                payload: "CampaignResponse"
            }
        },
        DeleteEmailChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/email",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    EmailChannelResponse: {
                        shape: "S5f"
                    }
                },
                required: [ "EmailChannelResponse" ],
                payload: "EmailChannelResponse"
            }
        },
        DeleteEmailTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/v1/templates/{template-name}/email",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        DeleteEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/endpoints/{endpoint-id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    EndpointId: {
                        location: "uri",
                        locationName: "endpoint-id"
                    }
                },
                required: [ "ApplicationId", "EndpointId" ]
            },
            output: {
                type: "structure",
                members: {
                    EndpointResponse: {
                        shape: "S5l"
                    }
                },
                required: [ "EndpointResponse" ],
                payload: "EndpointResponse"
            }
        },
        DeleteEventStream: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/eventstream",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    EventStream: {
                        shape: "S5u"
                    }
                },
                required: [ "EventStream" ],
                payload: "EventStream"
            }
        },
        DeleteGcmChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/gcm",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    GCMChannelResponse: {
                        shape: "S5x"
                    }
                },
                required: [ "GCMChannelResponse" ],
                payload: "GCMChannelResponse"
            }
        },
        DeleteInAppTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/v1/templates/{template-name}/inapp",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        DeleteJourney: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    }
                },
                required: [ "JourneyId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    JourneyResponse: {
                        shape: "S3u"
                    }
                },
                required: [ "JourneyResponse" ],
                payload: "JourneyResponse"
            }
        },
        DeletePushTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/v1/templates/{template-name}/push",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        DeleteRecommenderConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/v1/recommenders/{recommender-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RecommenderId: {
                        location: "uri",
                        locationName: "recommender-id"
                    }
                },
                required: [ "RecommenderId" ]
            },
            output: {
                type: "structure",
                members: {
                    RecommenderConfigurationResponse: {
                        shape: "S44"
                    }
                },
                required: [ "RecommenderConfigurationResponse" ],
                payload: "RecommenderConfigurationResponse"
            }
        },
        DeleteSegment: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/segments/{segment-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    SegmentId: {
                        location: "uri",
                        locationName: "segment-id"
                    }
                },
                required: [ "SegmentId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    SegmentResponse: {
                        shape: "S4h"
                    }
                },
                required: [ "SegmentResponse" ],
                payload: "SegmentResponse"
            }
        },
        DeleteSmsChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/sms",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    SMSChannelResponse: {
                        shape: "S6a"
                    }
                },
                required: [ "SMSChannelResponse" ],
                payload: "SMSChannelResponse"
            }
        },
        DeleteSmsTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/v1/templates/{template-name}/sms",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        DeleteUserEndpoints: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/users/{user-id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "user-id"
                    }
                },
                required: [ "ApplicationId", "UserId" ]
            },
            output: {
                type: "structure",
                members: {
                    EndpointsResponse: {
                        shape: "S6f"
                    }
                },
                required: [ "EndpointsResponse" ],
                payload: "EndpointsResponse"
            }
        },
        DeleteVoiceChannel: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apps/{application-id}/channels/voice",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    VoiceChannelResponse: {
                        shape: "S6j"
                    }
                },
                required: [ "VoiceChannelResponse" ],
                payload: "VoiceChannelResponse"
            }
        },
        DeleteVoiceTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/v1/templates/{template-name}/voice",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        GetAdmChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/adm",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ADMChannelResponse: {
                        shape: "S4t"
                    }
                },
                required: [ "ADMChannelResponse" ],
                payload: "ADMChannelResponse"
            }
        },
        GetApnsChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/apns",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    APNSChannelResponse: {
                        shape: "S4w"
                    }
                },
                required: [ "APNSChannelResponse" ],
                payload: "APNSChannelResponse"
            }
        },
        GetApnsSandboxChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/apns_sandbox",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    APNSSandboxChannelResponse: {
                        shape: "S4z"
                    }
                },
                required: [ "APNSSandboxChannelResponse" ],
                payload: "APNSSandboxChannelResponse"
            }
        },
        GetApnsVoipChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/apns_voip",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    APNSVoipChannelResponse: {
                        shape: "S52"
                    }
                },
                required: [ "APNSVoipChannelResponse" ],
                payload: "APNSVoipChannelResponse"
            }
        },
        GetApnsVoipSandboxChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/apns_voip_sandbox",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    APNSVoipSandboxChannelResponse: {
                        shape: "S55"
                    }
                },
                required: [ "APNSVoipSandboxChannelResponse" ],
                payload: "APNSVoipSandboxChannelResponse"
            }
        },
        GetApp: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationResponse: {
                        shape: "S6"
                    }
                },
                required: [ "ApplicationResponse" ],
                payload: "ApplicationResponse"
            }
        },
        GetApplicationDateRangeKpi: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/kpis/daterange/{kpi-name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    EndTime: {
                        shape: "S3d",
                        location: "querystring",
                        locationName: "end-time"
                    },
                    KpiName: {
                        location: "uri",
                        locationName: "kpi-name"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    StartTime: {
                        shape: "S3d",
                        location: "querystring",
                        locationName: "start-time"
                    }
                },
                required: [ "ApplicationId", "KpiName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationDateRangeKpiResponse: {
                        type: "structure",
                        members: {
                            ApplicationId: {},
                            EndTime: {
                                shape: "S3d"
                            },
                            KpiName: {},
                            KpiResult: {
                                shape: "S71"
                            },
                            NextToken: {},
                            StartTime: {
                                shape: "S3d"
                            }
                        },
                        required: [ "KpiResult", "KpiName", "EndTime", "StartTime", "ApplicationId" ]
                    }
                },
                required: [ "ApplicationDateRangeKpiResponse" ],
                payload: "ApplicationDateRangeKpiResponse"
            }
        },
        GetApplicationSettings: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationSettingsResource: {
                        shape: "S78"
                    }
                },
                required: [ "ApplicationSettingsResource" ],
                payload: "ApplicationSettingsResource"
            }
        },
        GetApps: {
            http: {
                method: "GET",
                requestUri: "/v1/apps",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationsResponse: {
                        type: "structure",
                        members: {
                            Item: {
                                type: "list",
                                member: {
                                    shape: "S6"
                                }
                            },
                            NextToken: {}
                        }
                    }
                },
                required: [ "ApplicationsResponse" ],
                payload: "ApplicationsResponse"
            }
        },
        GetBaiduChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/baidu",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    BaiduChannelResponse: {
                        shape: "S5a"
                    }
                },
                required: [ "BaiduChannelResponse" ],
                payload: "BaiduChannelResponse"
            }
        },
        GetCampaign: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/campaigns/{campaign-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    CampaignId: {
                        location: "uri",
                        locationName: "campaign-id"
                    }
                },
                required: [ "CampaignId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    CampaignResponse: {
                        shape: "S1j"
                    }
                },
                required: [ "CampaignResponse" ],
                payload: "CampaignResponse"
            }
        },
        GetCampaignActivities: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/campaigns/{campaign-id}/activities",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    CampaignId: {
                        location: "uri",
                        locationName: "campaign-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "ApplicationId", "CampaignId" ]
            },
            output: {
                type: "structure",
                members: {
                    ActivitiesResponse: {
                        type: "structure",
                        members: {
                            Item: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ApplicationId: {},
                                        CampaignId: {},
                                        End: {},
                                        Id: {},
                                        Result: {},
                                        ScheduledStart: {},
                                        Start: {},
                                        State: {},
                                        SuccessfulEndpointCount: {
                                            type: "integer"
                                        },
                                        TimezonesCompletedCount: {
                                            type: "integer"
                                        },
                                        TimezonesTotalCount: {
                                            type: "integer"
                                        },
                                        TotalEndpointCount: {
                                            type: "integer"
                                        },
                                        TreatmentId: {},
                                        ExecutionMetrics: {
                                            shape: "S4"
                                        }
                                    },
                                    required: [ "CampaignId", "Id", "ApplicationId" ]
                                }
                            },
                            NextToken: {}
                        },
                        required: [ "Item" ]
                    }
                },
                required: [ "ActivitiesResponse" ],
                payload: "ActivitiesResponse"
            }
        },
        GetCampaignDateRangeKpi: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/campaigns/{campaign-id}/kpis/daterange/{kpi-name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    CampaignId: {
                        location: "uri",
                        locationName: "campaign-id"
                    },
                    EndTime: {
                        shape: "S3d",
                        location: "querystring",
                        locationName: "end-time"
                    },
                    KpiName: {
                        location: "uri",
                        locationName: "kpi-name"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    StartTime: {
                        shape: "S3d",
                        location: "querystring",
                        locationName: "start-time"
                    }
                },
                required: [ "ApplicationId", "KpiName", "CampaignId" ]
            },
            output: {
                type: "structure",
                members: {
                    CampaignDateRangeKpiResponse: {
                        type: "structure",
                        members: {
                            ApplicationId: {},
                            CampaignId: {},
                            EndTime: {
                                shape: "S3d"
                            },
                            KpiName: {},
                            KpiResult: {
                                shape: "S71"
                            },
                            NextToken: {},
                            StartTime: {
                                shape: "S3d"
                            }
                        },
                        required: [ "KpiResult", "KpiName", "EndTime", "CampaignId", "StartTime", "ApplicationId" ]
                    }
                },
                required: [ "CampaignDateRangeKpiResponse" ],
                payload: "CampaignDateRangeKpiResponse"
            }
        },
        GetCampaignVersion: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    CampaignId: {
                        location: "uri",
                        locationName: "campaign-id"
                    },
                    Version: {
                        location: "uri",
                        locationName: "version"
                    }
                },
                required: [ "Version", "ApplicationId", "CampaignId" ]
            },
            output: {
                type: "structure",
                members: {
                    CampaignResponse: {
                        shape: "S1j"
                    }
                },
                required: [ "CampaignResponse" ],
                payload: "CampaignResponse"
            }
        },
        GetCampaignVersions: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/campaigns/{campaign-id}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    CampaignId: {
                        location: "uri",
                        locationName: "campaign-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "ApplicationId", "CampaignId" ]
            },
            output: {
                type: "structure",
                members: {
                    CampaignsResponse: {
                        shape: "S7u"
                    }
                },
                required: [ "CampaignsResponse" ],
                payload: "CampaignsResponse"
            }
        },
        GetCampaigns: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/campaigns",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    CampaignsResponse: {
                        shape: "S7u"
                    }
                },
                required: [ "CampaignsResponse" ],
                payload: "CampaignsResponse"
            }
        },
        GetChannels: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ChannelsResponse: {
                        type: "structure",
                        members: {
                            Channels: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        ApplicationId: {},
                                        CreationDate: {},
                                        Enabled: {
                                            type: "boolean"
                                        },
                                        HasCredential: {
                                            type: "boolean"
                                        },
                                        Id: {},
                                        IsArchived: {
                                            type: "boolean"
                                        },
                                        LastModifiedBy: {},
                                        LastModifiedDate: {},
                                        Version: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        },
                        required: [ "Channels" ]
                    }
                },
                required: [ "ChannelsResponse" ],
                payload: "ChannelsResponse"
            }
        },
        GetEmailChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/email",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    EmailChannelResponse: {
                        shape: "S5f"
                    }
                },
                required: [ "EmailChannelResponse" ],
                payload: "EmailChannelResponse"
            }
        },
        GetEmailTemplate: {
            http: {
                method: "GET",
                requestUri: "/v1/templates/{template-name}/email",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    EmailTemplateResponse: {
                        type: "structure",
                        members: {
                            Arn: {},
                            CreationDate: {},
                            DefaultSubstitutions: {},
                            HtmlPart: {},
                            LastModifiedDate: {},
                            RecommenderId: {},
                            Subject: {},
                            tags: {
                                shape: "S4",
                                locationName: "tags"
                            },
                            TemplateDescription: {},
                            TemplateName: {},
                            TemplateType: {},
                            TextPart: {},
                            Version: {}
                        },
                        required: [ "LastModifiedDate", "CreationDate", "TemplateName", "TemplateType" ]
                    }
                },
                required: [ "EmailTemplateResponse" ],
                payload: "EmailTemplateResponse"
            }
        },
        GetEndpoint: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/endpoints/{endpoint-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    EndpointId: {
                        location: "uri",
                        locationName: "endpoint-id"
                    }
                },
                required: [ "ApplicationId", "EndpointId" ]
            },
            output: {
                type: "structure",
                members: {
                    EndpointResponse: {
                        shape: "S5l"
                    }
                },
                required: [ "EndpointResponse" ],
                payload: "EndpointResponse"
            }
        },
        GetEventStream: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/eventstream",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    EventStream: {
                        shape: "S5u"
                    }
                },
                required: [ "EventStream" ],
                payload: "EventStream"
            }
        },
        GetExportJob: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/jobs/export/{job-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "job-id"
                    }
                },
                required: [ "ApplicationId", "JobId" ]
            },
            output: {
                type: "structure",
                members: {
                    ExportJobResponse: {
                        shape: "S1v"
                    }
                },
                required: [ "ExportJobResponse" ],
                payload: "ExportJobResponse"
            }
        },
        GetExportJobs: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/jobs/export",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ExportJobsResponse: {
                        shape: "S8h"
                    }
                },
                required: [ "ExportJobsResponse" ],
                payload: "ExportJobsResponse"
            }
        },
        GetGcmChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/gcm",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    GCMChannelResponse: {
                        shape: "S5x"
                    }
                },
                required: [ "GCMChannelResponse" ],
                payload: "GCMChannelResponse"
            }
        },
        GetImportJob: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/jobs/import/{job-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "job-id"
                    }
                },
                required: [ "ApplicationId", "JobId" ]
            },
            output: {
                type: "structure",
                members: {
                    ImportJobResponse: {
                        shape: "S22"
                    }
                },
                required: [ "ImportJobResponse" ],
                payload: "ImportJobResponse"
            }
        },
        GetImportJobs: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/jobs/import",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ImportJobsResponse: {
                        shape: "S8p"
                    }
                },
                required: [ "ImportJobsResponse" ],
                payload: "ImportJobsResponse"
            }
        },
        GetInAppMessages: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/endpoints/{endpoint-id}/inappmessages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    EndpointId: {
                        location: "uri",
                        locationName: "endpoint-id"
                    }
                },
                required: [ "ApplicationId", "EndpointId" ]
            },
            output: {
                type: "structure",
                members: {
                    InAppMessagesResponse: {
                        type: "structure",
                        members: {
                            InAppMessageCampaigns: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        CampaignId: {},
                                        DailyCap: {
                                            type: "integer"
                                        },
                                        InAppMessage: {
                                            type: "structure",
                                            members: {
                                                Content: {
                                                    shape: "So"
                                                },
                                                CustomConfig: {
                                                    shape: "S4"
                                                },
                                                Layout: {}
                                            }
                                        },
                                        Priority: {
                                            type: "integer"
                                        },
                                        Schedule: {
                                            type: "structure",
                                            members: {
                                                EndDate: {},
                                                EventFilter: {
                                                    shape: "Sz"
                                                },
                                                QuietTime: {
                                                    shape: "S1c"
                                                }
                                            }
                                        },
                                        SessionCap: {
                                            type: "integer"
                                        },
                                        TotalCap: {
                                            type: "integer"
                                        },
                                        TreatmentId: {}
                                    }
                                }
                            }
                        }
                    }
                },
                required: [ "InAppMessagesResponse" ],
                payload: "InAppMessagesResponse"
            }
        },
        GetInAppTemplate: {
            http: {
                method: "GET",
                requestUri: "/v1/templates/{template-name}/inapp",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    InAppTemplateResponse: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Content: {
                                shape: "So"
                            },
                            CreationDate: {},
                            CustomConfig: {
                                shape: "S4"
                            },
                            LastModifiedDate: {},
                            Layout: {},
                            tags: {
                                shape: "S4",
                                locationName: "tags"
                            },
                            TemplateDescription: {},
                            TemplateName: {},
                            TemplateType: {},
                            Version: {}
                        },
                        required: [ "LastModifiedDate", "CreationDate", "TemplateName", "TemplateType" ]
                    }
                },
                required: [ "InAppTemplateResponse" ],
                payload: "InAppTemplateResponse"
            }
        },
        GetJourney: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    }
                },
                required: [ "JourneyId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    JourneyResponse: {
                        shape: "S3u"
                    }
                },
                required: [ "JourneyResponse" ],
                payload: "JourneyResponse"
            }
        },
        GetJourneyDateRangeKpi: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}/kpis/daterange/{kpi-name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    EndTime: {
                        shape: "S3d",
                        location: "querystring",
                        locationName: "end-time"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    },
                    KpiName: {
                        location: "uri",
                        locationName: "kpi-name"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    StartTime: {
                        shape: "S3d",
                        location: "querystring",
                        locationName: "start-time"
                    }
                },
                required: [ "JourneyId", "ApplicationId", "KpiName" ]
            },
            output: {
                type: "structure",
                members: {
                    JourneyDateRangeKpiResponse: {
                        type: "structure",
                        members: {
                            ApplicationId: {},
                            EndTime: {
                                shape: "S3d"
                            },
                            JourneyId: {},
                            KpiName: {},
                            KpiResult: {
                                shape: "S71"
                            },
                            NextToken: {},
                            StartTime: {
                                shape: "S3d"
                            }
                        },
                        required: [ "KpiResult", "KpiName", "JourneyId", "EndTime", "StartTime", "ApplicationId" ]
                    }
                },
                required: [ "JourneyDateRangeKpiResponse" ],
                payload: "JourneyDateRangeKpiResponse"
            }
        },
        GetJourneyExecutionActivityMetrics: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}/activities/{journey-activity-id}/execution-metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JourneyActivityId: {
                        location: "uri",
                        locationName: "journey-activity-id"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    }
                },
                required: [ "JourneyActivityId", "ApplicationId", "JourneyId" ]
            },
            output: {
                type: "structure",
                members: {
                    JourneyExecutionActivityMetricsResponse: {
                        type: "structure",
                        members: {
                            ActivityType: {},
                            ApplicationId: {},
                            JourneyActivityId: {},
                            JourneyId: {},
                            LastEvaluatedTime: {},
                            Metrics: {
                                shape: "S4"
                            }
                        },
                        required: [ "Metrics", "JourneyId", "LastEvaluatedTime", "JourneyActivityId", "ActivityType", "ApplicationId" ]
                    }
                },
                required: [ "JourneyExecutionActivityMetricsResponse" ],
                payload: "JourneyExecutionActivityMetricsResponse"
            }
        },
        GetJourneyExecutionMetrics: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}/execution-metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    }
                },
                required: [ "ApplicationId", "JourneyId" ]
            },
            output: {
                type: "structure",
                members: {
                    JourneyExecutionMetricsResponse: {
                        type: "structure",
                        members: {
                            ApplicationId: {},
                            JourneyId: {},
                            LastEvaluatedTime: {},
                            Metrics: {
                                shape: "S4"
                            }
                        },
                        required: [ "Metrics", "JourneyId", "LastEvaluatedTime", "ApplicationId" ]
                    }
                },
                required: [ "JourneyExecutionMetricsResponse" ],
                payload: "JourneyExecutionMetricsResponse"
            }
        },
        GetJourneyRunExecutionActivityMetrics: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}/runs/{run-id}/activities/{journey-activity-id}/execution-metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JourneyActivityId: {
                        location: "uri",
                        locationName: "journey-activity-id"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    RunId: {
                        location: "uri",
                        locationName: "run-id"
                    }
                },
                required: [ "RunId", "JourneyActivityId", "JourneyId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    JourneyRunExecutionActivityMetricsResponse: {
                        type: "structure",
                        members: {
                            ActivityType: {},
                            ApplicationId: {},
                            JourneyActivityId: {},
                            JourneyId: {},
                            LastEvaluatedTime: {},
                            Metrics: {
                                shape: "S4"
                            },
                            RunId: {}
                        },
                        required: [ "Metrics", "JourneyId", "LastEvaluatedTime", "JourneyActivityId", "ActivityType", "RunId", "ApplicationId" ]
                    }
                },
                required: [ "JourneyRunExecutionActivityMetricsResponse" ],
                payload: "JourneyRunExecutionActivityMetricsResponse"
            }
        },
        GetJourneyRunExecutionMetrics: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}/runs/{run-id}/execution-metrics",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    RunId: {
                        location: "uri",
                        locationName: "run-id"
                    }
                },
                required: [ "RunId", "ApplicationId", "JourneyId" ]
            },
            output: {
                type: "structure",
                members: {
                    JourneyRunExecutionMetricsResponse: {
                        type: "structure",
                        members: {
                            ApplicationId: {},
                            JourneyId: {},
                            LastEvaluatedTime: {},
                            Metrics: {
                                shape: "S4"
                            },
                            RunId: {}
                        },
                        required: [ "Metrics", "JourneyId", "LastEvaluatedTime", "RunId", "ApplicationId" ]
                    }
                },
                required: [ "JourneyRunExecutionMetricsResponse" ],
                payload: "JourneyRunExecutionMetricsResponse"
            }
        },
        GetJourneyRuns: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}/runs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "ApplicationId", "JourneyId" ]
            },
            output: {
                type: "structure",
                members: {
                    JourneyRunsResponse: {
                        type: "structure",
                        members: {
                            Item: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        CreationTime: {},
                                        LastUpdateTime: {},
                                        RunId: {},
                                        Status: {}
                                    },
                                    required: [ "Status", "LastUpdateTime", "CreationTime", "RunId" ]
                                }
                            },
                            NextToken: {}
                        },
                        required: [ "Item" ]
                    }
                },
                required: [ "JourneyRunsResponse" ],
                payload: "JourneyRunsResponse"
            }
        },
        GetPushTemplate: {
            http: {
                method: "GET",
                requestUri: "/v1/templates/{template-name}/push",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    PushNotificationTemplateResponse: {
                        type: "structure",
                        members: {
                            ADM: {
                                shape: "S3x"
                            },
                            APNS: {
                                shape: "S3y"
                            },
                            Arn: {},
                            Baidu: {
                                shape: "S3x"
                            },
                            CreationDate: {},
                            Default: {
                                shape: "S3z"
                            },
                            DefaultSubstitutions: {},
                            GCM: {
                                shape: "S3x"
                            },
                            LastModifiedDate: {},
                            RecommenderId: {},
                            tags: {
                                shape: "S4",
                                locationName: "tags"
                            },
                            TemplateDescription: {},
                            TemplateName: {},
                            TemplateType: {},
                            Version: {}
                        },
                        required: [ "LastModifiedDate", "CreationDate", "TemplateType", "TemplateName" ]
                    }
                },
                required: [ "PushNotificationTemplateResponse" ],
                payload: "PushNotificationTemplateResponse"
            }
        },
        GetRecommenderConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v1/recommenders/{recommender-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RecommenderId: {
                        location: "uri",
                        locationName: "recommender-id"
                    }
                },
                required: [ "RecommenderId" ]
            },
            output: {
                type: "structure",
                members: {
                    RecommenderConfigurationResponse: {
                        shape: "S44"
                    }
                },
                required: [ "RecommenderConfigurationResponse" ],
                payload: "RecommenderConfigurationResponse"
            }
        },
        GetRecommenderConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v1/recommenders",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ListRecommenderConfigurationsResponse: {
                        type: "structure",
                        members: {
                            Item: {
                                type: "list",
                                member: {
                                    shape: "S44"
                                }
                            },
                            NextToken: {}
                        },
                        required: [ "Item" ]
                    }
                },
                required: [ "ListRecommenderConfigurationsResponse" ],
                payload: "ListRecommenderConfigurationsResponse"
            }
        },
        GetSegment: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/segments/{segment-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    SegmentId: {
                        location: "uri",
                        locationName: "segment-id"
                    }
                },
                required: [ "SegmentId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    SegmentResponse: {
                        shape: "S4h"
                    }
                },
                required: [ "SegmentResponse" ],
                payload: "SegmentResponse"
            }
        },
        GetSegmentExportJobs: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/segments/{segment-id}/jobs/export",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    SegmentId: {
                        location: "uri",
                        locationName: "segment-id"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "SegmentId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ExportJobsResponse: {
                        shape: "S8h"
                    }
                },
                required: [ "ExportJobsResponse" ],
                payload: "ExportJobsResponse"
            }
        },
        GetSegmentImportJobs: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/segments/{segment-id}/jobs/import",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    SegmentId: {
                        location: "uri",
                        locationName: "segment-id"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "SegmentId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ImportJobsResponse: {
                        shape: "S8p"
                    }
                },
                required: [ "ImportJobsResponse" ],
                payload: "ImportJobsResponse"
            }
        },
        GetSegmentVersion: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/segments/{segment-id}/versions/{version}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    SegmentId: {
                        location: "uri",
                        locationName: "segment-id"
                    },
                    Version: {
                        location: "uri",
                        locationName: "version"
                    }
                },
                required: [ "SegmentId", "Version", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    SegmentResponse: {
                        shape: "S4h"
                    }
                },
                required: [ "SegmentResponse" ],
                payload: "SegmentResponse"
            }
        },
        GetSegmentVersions: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/segments/{segment-id}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    SegmentId: {
                        location: "uri",
                        locationName: "segment-id"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "SegmentId", "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    SegmentsResponse: {
                        shape: "Sa7"
                    }
                },
                required: [ "SegmentsResponse" ],
                payload: "SegmentsResponse"
            }
        },
        GetSegments: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/segments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    SegmentsResponse: {
                        shape: "Sa7"
                    }
                },
                required: [ "SegmentsResponse" ],
                payload: "SegmentsResponse"
            }
        },
        GetSmsChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/sms",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    SMSChannelResponse: {
                        shape: "S6a"
                    }
                },
                required: [ "SMSChannelResponse" ],
                payload: "SMSChannelResponse"
            }
        },
        GetSmsTemplate: {
            http: {
                method: "GET",
                requestUri: "/v1/templates/{template-name}/sms",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    SMSTemplateResponse: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Body: {},
                            CreationDate: {},
                            DefaultSubstitutions: {},
                            LastModifiedDate: {},
                            RecommenderId: {},
                            tags: {
                                shape: "S4",
                                locationName: "tags"
                            },
                            TemplateDescription: {},
                            TemplateName: {},
                            TemplateType: {},
                            Version: {}
                        },
                        required: [ "LastModifiedDate", "CreationDate", "TemplateName", "TemplateType" ]
                    }
                },
                required: [ "SMSTemplateResponse" ],
                payload: "SMSTemplateResponse"
            }
        },
        GetUserEndpoints: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/users/{user-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "user-id"
                    }
                },
                required: [ "ApplicationId", "UserId" ]
            },
            output: {
                type: "structure",
                members: {
                    EndpointsResponse: {
                        shape: "S6f"
                    }
                },
                required: [ "EndpointsResponse" ],
                payload: "EndpointsResponse"
            }
        },
        GetVoiceChannel: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/channels/voice",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    VoiceChannelResponse: {
                        shape: "S6j"
                    }
                },
                required: [ "VoiceChannelResponse" ],
                payload: "VoiceChannelResponse"
            }
        },
        GetVoiceTemplate: {
            http: {
                method: "GET",
                requestUri: "/v1/templates/{template-name}/voice",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName" ]
            },
            output: {
                type: "structure",
                members: {
                    VoiceTemplateResponse: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Body: {},
                            CreationDate: {},
                            DefaultSubstitutions: {},
                            LanguageCode: {},
                            LastModifiedDate: {},
                            tags: {
                                shape: "S4",
                                locationName: "tags"
                            },
                            TemplateDescription: {},
                            TemplateName: {},
                            TemplateType: {},
                            Version: {},
                            VoiceId: {}
                        },
                        required: [ "LastModifiedDate", "CreationDate", "TemplateName", "TemplateType" ]
                    }
                },
                required: [ "VoiceTemplateResponse" ],
                payload: "VoiceTemplateResponse"
            }
        },
        ListJourneys: {
            http: {
                method: "GET",
                requestUri: "/v1/apps/{application-id}/journeys",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Token: {
                        location: "querystring",
                        locationName: "token"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    JourneysResponse: {
                        type: "structure",
                        members: {
                            Item: {
                                type: "list",
                                member: {
                                    shape: "S3u"
                                }
                            },
                            NextToken: {}
                        },
                        required: [ "Item" ]
                    }
                },
                required: [ "JourneysResponse" ],
                payload: "JourneysResponse"
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    TagsModel: {
                        shape: "Sat"
                    }
                },
                required: [ "TagsModel" ],
                payload: "TagsModel"
            }
        },
        ListTemplateVersions: {
            http: {
                method: "GET",
                requestUri: "/v1/templates/{template-name}/{template-type}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    TemplateType: {
                        location: "uri",
                        locationName: "template-type"
                    }
                },
                required: [ "TemplateName", "TemplateType" ]
            },
            output: {
                type: "structure",
                members: {
                    TemplateVersionsResponse: {
                        type: "structure",
                        members: {
                            Item: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        CreationDate: {},
                                        DefaultSubstitutions: {},
                                        LastModifiedDate: {},
                                        TemplateDescription: {},
                                        TemplateName: {},
                                        TemplateType: {},
                                        Version: {}
                                    },
                                    required: [ "LastModifiedDate", "CreationDate", "TemplateName", "TemplateType" ]
                                }
                            },
                            Message: {},
                            NextToken: {},
                            RequestID: {}
                        },
                        required: [ "Item" ]
                    }
                },
                required: [ "TemplateVersionsResponse" ],
                payload: "TemplateVersionsResponse"
            }
        },
        ListTemplates: {
            http: {
                method: "GET",
                requestUri: "/v1/templates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "page-size"
                    },
                    Prefix: {
                        location: "querystring",
                        locationName: "prefix"
                    },
                    TemplateType: {
                        location: "querystring",
                        locationName: "template-type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplatesResponse: {
                        type: "structure",
                        members: {
                            Item: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Arn: {},
                                        CreationDate: {},
                                        DefaultSubstitutions: {},
                                        LastModifiedDate: {},
                                        tags: {
                                            shape: "S4",
                                            locationName: "tags"
                                        },
                                        TemplateDescription: {},
                                        TemplateName: {},
                                        TemplateType: {},
                                        Version: {}
                                    },
                                    required: [ "LastModifiedDate", "CreationDate", "TemplateName", "TemplateType" ]
                                }
                            },
                            NextToken: {}
                        },
                        required: [ "Item" ]
                    }
                },
                required: [ "TemplatesResponse" ],
                payload: "TemplatesResponse"
            }
        },
        PhoneNumberValidate: {
            http: {
                requestUri: "/v1/phone/number/validate",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NumberValidateRequest: {
                        type: "structure",
                        members: {
                            IsoCountryCode: {},
                            PhoneNumber: {}
                        }
                    }
                },
                required: [ "NumberValidateRequest" ],
                payload: "NumberValidateRequest"
            },
            output: {
                type: "structure",
                members: {
                    NumberValidateResponse: {
                        type: "structure",
                        members: {
                            Carrier: {},
                            City: {},
                            CleansedPhoneNumberE164: {},
                            CleansedPhoneNumberNational: {},
                            Country: {},
                            CountryCodeIso2: {},
                            CountryCodeNumeric: {},
                            County: {},
                            OriginalCountryCodeIso2: {},
                            OriginalPhoneNumber: {},
                            PhoneType: {},
                            PhoneTypeCode: {
                                type: "integer"
                            },
                            Timezone: {},
                            ZipCode: {}
                        }
                    }
                },
                required: [ "NumberValidateResponse" ],
                payload: "NumberValidateResponse"
            }
        },
        PutEventStream: {
            http: {
                requestUri: "/v1/apps/{application-id}/eventstream",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    WriteEventStream: {
                        type: "structure",
                        members: {
                            DestinationStreamArn: {},
                            RoleArn: {}
                        },
                        required: [ "RoleArn", "DestinationStreamArn" ]
                    }
                },
                required: [ "ApplicationId", "WriteEventStream" ],
                payload: "WriteEventStream"
            },
            output: {
                type: "structure",
                members: {
                    EventStream: {
                        shape: "S5u"
                    }
                },
                required: [ "EventStream" ],
                payload: "EventStream"
            }
        },
        PutEvents: {
            http: {
                requestUri: "/v1/apps/{application-id}/events",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    EventsRequest: {
                        type: "structure",
                        members: {
                            BatchItem: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        Endpoint: {
                                            type: "structure",
                                            members: {
                                                Address: {},
                                                Attributes: {
                                                    shape: "S5m"
                                                },
                                                ChannelType: {},
                                                Demographic: {
                                                    shape: "S5o"
                                                },
                                                EffectiveDate: {},
                                                EndpointStatus: {},
                                                Location: {
                                                    shape: "S5p"
                                                },
                                                Metrics: {
                                                    shape: "S5q"
                                                },
                                                OptOut: {},
                                                RequestId: {},
                                                User: {
                                                    shape: "S5r"
                                                }
                                            }
                                        },
                                        Events: {
                                            type: "map",
                                            key: {},
                                            value: {
                                                type: "structure",
                                                members: {
                                                    AppPackageName: {},
                                                    AppTitle: {},
                                                    AppVersionCode: {},
                                                    Attributes: {
                                                        shape: "S4"
                                                    },
                                                    ClientSdkVersion: {},
                                                    EventType: {},
                                                    Metrics: {
                                                        shape: "S5q"
                                                    },
                                                    SdkName: {},
                                                    Session: {
                                                        type: "structure",
                                                        members: {
                                                            Duration: {
                                                                type: "integer"
                                                            },
                                                            Id: {},
                                                            StartTimestamp: {},
                                                            StopTimestamp: {}
                                                        },
                                                        required: [ "StartTimestamp", "Id" ]
                                                    },
                                                    Timestamp: {}
                                                },
                                                required: [ "EventType", "Timestamp" ]
                                            }
                                        }
                                    },
                                    required: [ "Endpoint", "Events" ]
                                }
                            }
                        },
                        required: [ "BatchItem" ]
                    }
                },
                required: [ "ApplicationId", "EventsRequest" ],
                payload: "EventsRequest"
            },
            output: {
                type: "structure",
                members: {
                    EventsResponse: {
                        type: "structure",
                        members: {
                            Results: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        EndpointItemResponse: {
                                            type: "structure",
                                            members: {
                                                Message: {},
                                                StatusCode: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        EventsItemResponse: {
                                            type: "map",
                                            key: {},
                                            value: {
                                                type: "structure",
                                                members: {
                                                    Message: {},
                                                    StatusCode: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                required: [ "EventsResponse" ],
                payload: "EventsResponse"
            }
        },
        RemoveAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/attributes/{attribute-type}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    AttributeType: {
                        location: "uri",
                        locationName: "attribute-type"
                    },
                    UpdateAttributesRequest: {
                        type: "structure",
                        members: {
                            Blacklist: {
                                shape: "S14"
                            }
                        }
                    }
                },
                required: [ "AttributeType", "ApplicationId", "UpdateAttributesRequest" ],
                payload: "UpdateAttributesRequest"
            },
            output: {
                type: "structure",
                members: {
                    AttributesResource: {
                        type: "structure",
                        members: {
                            ApplicationId: {},
                            AttributeType: {},
                            Attributes: {
                                shape: "S14"
                            }
                        },
                        required: [ "AttributeType", "ApplicationId" ]
                    }
                },
                required: [ "AttributesResource" ],
                payload: "AttributesResource"
            }
        },
        SendMessages: {
            http: {
                requestUri: "/v1/apps/{application-id}/messages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    MessageRequest: {
                        type: "structure",
                        members: {
                            Addresses: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        BodyOverride: {},
                                        ChannelType: {},
                                        Context: {
                                            shape: "S4"
                                        },
                                        RawContent: {},
                                        Substitutions: {
                                            shape: "S5m"
                                        },
                                        TitleOverride: {}
                                    }
                                }
                            },
                            Context: {
                                shape: "S4"
                            },
                            Endpoints: {
                                shape: "Sby"
                            },
                            MessageConfiguration: {
                                shape: "Sc0"
                            },
                            TemplateConfiguration: {
                                shape: "S1d"
                            },
                            TraceId: {}
                        },
                        required: [ "MessageConfiguration" ]
                    }
                },
                required: [ "ApplicationId", "MessageRequest" ],
                payload: "MessageRequest"
            },
            output: {
                type: "structure",
                members: {
                    MessageResponse: {
                        shape: "Scf"
                    }
                },
                required: [ "MessageResponse" ],
                payload: "MessageResponse"
            }
        },
        SendOTPMessage: {
            http: {
                requestUri: "/v1/apps/{application-id}/otp",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    SendOTPMessageRequestParameters: {
                        type: "structure",
                        members: {
                            AllowedAttempts: {
                                type: "integer"
                            },
                            BrandName: {},
                            Channel: {},
                            CodeLength: {
                                type: "integer"
                            },
                            DestinationIdentity: {},
                            EntityId: {},
                            Language: {},
                            OriginationIdentity: {},
                            ReferenceId: {},
                            TemplateId: {},
                            ValidityPeriod: {
                                type: "integer"
                            }
                        },
                        required: [ "BrandName", "ReferenceId", "Channel", "DestinationIdentity", "OriginationIdentity" ]
                    }
                },
                required: [ "ApplicationId", "SendOTPMessageRequestParameters" ],
                payload: "SendOTPMessageRequestParameters"
            },
            output: {
                type: "structure",
                members: {
                    MessageResponse: {
                        shape: "Scf"
                    }
                },
                required: [ "MessageResponse" ],
                payload: "MessageResponse"
            }
        },
        SendUsersMessages: {
            http: {
                requestUri: "/v1/apps/{application-id}/users-messages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    SendUsersMessageRequest: {
                        type: "structure",
                        members: {
                            Context: {
                                shape: "S4"
                            },
                            MessageConfiguration: {
                                shape: "Sc0"
                            },
                            TemplateConfiguration: {
                                shape: "S1d"
                            },
                            TraceId: {},
                            Users: {
                                shape: "Sby"
                            }
                        },
                        required: [ "MessageConfiguration", "Users" ]
                    }
                },
                required: [ "ApplicationId", "SendUsersMessageRequest" ],
                payload: "SendUsersMessageRequest"
            },
            output: {
                type: "structure",
                members: {
                    SendUsersMessageResponse: {
                        type: "structure",
                        members: {
                            ApplicationId: {},
                            RequestId: {},
                            Result: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "Scg"
                                }
                            }
                        },
                        required: [ "ApplicationId" ]
                    }
                },
                required: [ "SendUsersMessageResponse" ],
                payload: "SendUsersMessageResponse"
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagsModel: {
                        shape: "Sat"
                    }
                },
                required: [ "ResourceArn", "TagsModel" ],
                payload: "TagsModel"
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "S14",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateAdmChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/adm",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ADMChannelRequest: {
                        type: "structure",
                        members: {
                            ClientId: {},
                            ClientSecret: {},
                            Enabled: {
                                type: "boolean"
                            }
                        },
                        required: [ "ClientSecret", "ClientId" ]
                    },
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId", "ADMChannelRequest" ],
                payload: "ADMChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    ADMChannelResponse: {
                        shape: "S4t"
                    }
                },
                required: [ "ADMChannelResponse" ],
                payload: "ADMChannelResponse"
            }
        },
        UpdateApnsChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/apns",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    APNSChannelRequest: {
                        type: "structure",
                        members: {
                            BundleId: {},
                            Certificate: {},
                            DefaultAuthenticationMethod: {},
                            Enabled: {
                                type: "boolean"
                            },
                            PrivateKey: {},
                            TeamId: {},
                            TokenKey: {},
                            TokenKeyId: {}
                        }
                    },
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId", "APNSChannelRequest" ],
                payload: "APNSChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    APNSChannelResponse: {
                        shape: "S4w"
                    }
                },
                required: [ "APNSChannelResponse" ],
                payload: "APNSChannelResponse"
            }
        },
        UpdateApnsSandboxChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/apns_sandbox",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    APNSSandboxChannelRequest: {
                        type: "structure",
                        members: {
                            BundleId: {},
                            Certificate: {},
                            DefaultAuthenticationMethod: {},
                            Enabled: {
                                type: "boolean"
                            },
                            PrivateKey: {},
                            TeamId: {},
                            TokenKey: {},
                            TokenKeyId: {}
                        }
                    },
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId", "APNSSandboxChannelRequest" ],
                payload: "APNSSandboxChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    APNSSandboxChannelResponse: {
                        shape: "S4z"
                    }
                },
                required: [ "APNSSandboxChannelResponse" ],
                payload: "APNSSandboxChannelResponse"
            }
        },
        UpdateApnsVoipChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/apns_voip",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    APNSVoipChannelRequest: {
                        type: "structure",
                        members: {
                            BundleId: {},
                            Certificate: {},
                            DefaultAuthenticationMethod: {},
                            Enabled: {
                                type: "boolean"
                            },
                            PrivateKey: {},
                            TeamId: {},
                            TokenKey: {},
                            TokenKeyId: {}
                        }
                    },
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId", "APNSVoipChannelRequest" ],
                payload: "APNSVoipChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    APNSVoipChannelResponse: {
                        shape: "S52"
                    }
                },
                required: [ "APNSVoipChannelResponse" ],
                payload: "APNSVoipChannelResponse"
            }
        },
        UpdateApnsVoipSandboxChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/apns_voip_sandbox",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    APNSVoipSandboxChannelRequest: {
                        type: "structure",
                        members: {
                            BundleId: {},
                            Certificate: {},
                            DefaultAuthenticationMethod: {},
                            Enabled: {
                                type: "boolean"
                            },
                            PrivateKey: {},
                            TeamId: {},
                            TokenKey: {},
                            TokenKeyId: {}
                        }
                    },
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    }
                },
                required: [ "ApplicationId", "APNSVoipSandboxChannelRequest" ],
                payload: "APNSVoipSandboxChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    APNSVoipSandboxChannelResponse: {
                        shape: "S55"
                    }
                },
                required: [ "APNSVoipSandboxChannelResponse" ],
                payload: "APNSVoipSandboxChannelResponse"
            }
        },
        UpdateApplicationSettings: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    WriteApplicationSettingsRequest: {
                        type: "structure",
                        members: {
                            CampaignHook: {
                                shape: "S1f"
                            },
                            CloudWatchMetricsEnabled: {
                                type: "boolean"
                            },
                            EventTaggingEnabled: {
                                type: "boolean"
                            },
                            Limits: {
                                shape: "S1h"
                            },
                            QuietTime: {
                                shape: "S1c"
                            },
                            JourneyLimits: {
                                shape: "S79"
                            }
                        }
                    }
                },
                required: [ "ApplicationId", "WriteApplicationSettingsRequest" ],
                payload: "WriteApplicationSettingsRequest"
            },
            output: {
                type: "structure",
                members: {
                    ApplicationSettingsResource: {
                        shape: "S78"
                    }
                },
                required: [ "ApplicationSettingsResource" ],
                payload: "ApplicationSettingsResource"
            }
        },
        UpdateBaiduChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/baidu",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    BaiduChannelRequest: {
                        type: "structure",
                        members: {
                            ApiKey: {},
                            Enabled: {
                                type: "boolean"
                            },
                            SecretKey: {}
                        },
                        required: [ "SecretKey", "ApiKey" ]
                    }
                },
                required: [ "ApplicationId", "BaiduChannelRequest" ],
                payload: "BaiduChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    BaiduChannelResponse: {
                        shape: "S5a"
                    }
                },
                required: [ "BaiduChannelResponse" ],
                payload: "BaiduChannelResponse"
            }
        },
        UpdateCampaign: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/campaigns/{campaign-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    CampaignId: {
                        location: "uri",
                        locationName: "campaign-id"
                    },
                    WriteCampaignRequest: {
                        shape: "S8"
                    }
                },
                required: [ "CampaignId", "ApplicationId", "WriteCampaignRequest" ],
                payload: "WriteCampaignRequest"
            },
            output: {
                type: "structure",
                members: {
                    CampaignResponse: {
                        shape: "S1j"
                    }
                },
                required: [ "CampaignResponse" ],
                payload: "CampaignResponse"
            }
        },
        UpdateEmailChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/email",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    EmailChannelRequest: {
                        type: "structure",
                        members: {
                            ConfigurationSet: {},
                            Enabled: {
                                type: "boolean"
                            },
                            FromAddress: {},
                            Identity: {},
                            RoleArn: {}
                        },
                        required: [ "FromAddress", "Identity" ]
                    }
                },
                required: [ "ApplicationId", "EmailChannelRequest" ],
                payload: "EmailChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    EmailChannelResponse: {
                        shape: "S5f"
                    }
                },
                required: [ "EmailChannelResponse" ],
                payload: "EmailChannelResponse"
            }
        },
        UpdateEmailTemplate: {
            http: {
                method: "PUT",
                requestUri: "/v1/templates/{template-name}/email",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    CreateNewVersion: {
                        location: "querystring",
                        locationName: "create-new-version",
                        type: "boolean"
                    },
                    EmailTemplateRequest: {
                        shape: "S1p"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName", "EmailTemplateRequest" ],
                payload: "EmailTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        UpdateEndpoint: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/endpoints/{endpoint-id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    EndpointId: {
                        location: "uri",
                        locationName: "endpoint-id"
                    },
                    EndpointRequest: {
                        type: "structure",
                        members: {
                            Address: {},
                            Attributes: {
                                shape: "S5m"
                            },
                            ChannelType: {},
                            Demographic: {
                                shape: "S5o"
                            },
                            EffectiveDate: {},
                            EndpointStatus: {},
                            Location: {
                                shape: "S5p"
                            },
                            Metrics: {
                                shape: "S5q"
                            },
                            OptOut: {},
                            RequestId: {},
                            User: {
                                shape: "S5r"
                            }
                        }
                    }
                },
                required: [ "ApplicationId", "EndpointId", "EndpointRequest" ],
                payload: "EndpointRequest"
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        UpdateEndpointsBatch: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/endpoints",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    EndpointBatchRequest: {
                        type: "structure",
                        members: {
                            Item: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Address: {},
                                        Attributes: {
                                            shape: "S5m"
                                        },
                                        ChannelType: {},
                                        Demographic: {
                                            shape: "S5o"
                                        },
                                        EffectiveDate: {},
                                        EndpointStatus: {},
                                        Id: {},
                                        Location: {
                                            shape: "S5p"
                                        },
                                        Metrics: {
                                            shape: "S5q"
                                        },
                                        OptOut: {},
                                        RequestId: {},
                                        User: {
                                            shape: "S5r"
                                        }
                                    }
                                }
                            }
                        },
                        required: [ "Item" ]
                    }
                },
                required: [ "ApplicationId", "EndpointBatchRequest" ],
                payload: "EndpointBatchRequest"
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        UpdateGcmChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/gcm",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    GCMChannelRequest: {
                        type: "structure",
                        members: {
                            ApiKey: {},
                            DefaultAuthenticationMethod: {},
                            Enabled: {
                                type: "boolean"
                            },
                            ServiceJson: {}
                        }
                    }
                },
                required: [ "ApplicationId", "GCMChannelRequest" ],
                payload: "GCMChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    GCMChannelResponse: {
                        shape: "S5x"
                    }
                },
                required: [ "GCMChannelResponse" ],
                payload: "GCMChannelResponse"
            }
        },
        UpdateInAppTemplate: {
            http: {
                method: "PUT",
                requestUri: "/v1/templates/{template-name}/inapp",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    CreateNewVersion: {
                        location: "querystring",
                        locationName: "create-new-version",
                        type: "boolean"
                    },
                    InAppTemplateRequest: {
                        shape: "S25"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName", "InAppTemplateRequest" ],
                payload: "InAppTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        UpdateJourney: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    },
                    WriteJourneyRequest: {
                        shape: "S29"
                    }
                },
                required: [ "JourneyId", "ApplicationId", "WriteJourneyRequest" ],
                payload: "WriteJourneyRequest"
            },
            output: {
                type: "structure",
                members: {
                    JourneyResponse: {
                        shape: "S3u"
                    }
                },
                required: [ "JourneyResponse" ],
                payload: "JourneyResponse"
            }
        },
        UpdateJourneyState: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/journeys/{journey-id}/state",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    JourneyId: {
                        location: "uri",
                        locationName: "journey-id"
                    },
                    JourneyStateRequest: {
                        type: "structure",
                        members: {
                            State: {}
                        }
                    }
                },
                required: [ "JourneyId", "ApplicationId", "JourneyStateRequest" ],
                payload: "JourneyStateRequest"
            },
            output: {
                type: "structure",
                members: {
                    JourneyResponse: {
                        shape: "S3u"
                    }
                },
                required: [ "JourneyResponse" ],
                payload: "JourneyResponse"
            }
        },
        UpdatePushTemplate: {
            http: {
                method: "PUT",
                requestUri: "/v1/templates/{template-name}/push",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    CreateNewVersion: {
                        location: "querystring",
                        locationName: "create-new-version",
                        type: "boolean"
                    },
                    PushNotificationTemplateRequest: {
                        shape: "S3w"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName", "PushNotificationTemplateRequest" ],
                payload: "PushNotificationTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        UpdateRecommenderConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v1/recommenders/{recommender-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RecommenderId: {
                        location: "uri",
                        locationName: "recommender-id"
                    },
                    UpdateRecommenderConfiguration: {
                        type: "structure",
                        members: {
                            Attributes: {
                                shape: "S4"
                            },
                            Description: {},
                            Name: {},
                            RecommendationProviderIdType: {},
                            RecommendationProviderRoleArn: {},
                            RecommendationProviderUri: {},
                            RecommendationTransformerUri: {},
                            RecommendationsDisplayName: {},
                            RecommendationsPerMessage: {
                                type: "integer"
                            }
                        },
                        required: [ "RecommendationProviderUri", "RecommendationProviderRoleArn" ]
                    }
                },
                required: [ "RecommenderId", "UpdateRecommenderConfiguration" ],
                payload: "UpdateRecommenderConfiguration"
            },
            output: {
                type: "structure",
                members: {
                    RecommenderConfigurationResponse: {
                        shape: "S44"
                    }
                },
                required: [ "RecommenderConfigurationResponse" ],
                payload: "RecommenderConfigurationResponse"
            }
        },
        UpdateSegment: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/segments/{segment-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    SegmentId: {
                        location: "uri",
                        locationName: "segment-id"
                    },
                    WriteSegmentRequest: {
                        shape: "S46"
                    }
                },
                required: [ "SegmentId", "ApplicationId", "WriteSegmentRequest" ],
                payload: "WriteSegmentRequest"
            },
            output: {
                type: "structure",
                members: {
                    SegmentResponse: {
                        shape: "S4h"
                    }
                },
                required: [ "SegmentResponse" ],
                payload: "SegmentResponse"
            }
        },
        UpdateSmsChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/sms",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    SMSChannelRequest: {
                        type: "structure",
                        members: {
                            Enabled: {
                                type: "boolean"
                            },
                            SenderId: {},
                            ShortCode: {}
                        }
                    }
                },
                required: [ "ApplicationId", "SMSChannelRequest" ],
                payload: "SMSChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    SMSChannelResponse: {
                        shape: "S6a"
                    }
                },
                required: [ "SMSChannelResponse" ],
                payload: "SMSChannelResponse"
            }
        },
        UpdateSmsTemplate: {
            http: {
                method: "PUT",
                requestUri: "/v1/templates/{template-name}/sms",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    CreateNewVersion: {
                        location: "querystring",
                        locationName: "create-new-version",
                        type: "boolean"
                    },
                    SMSTemplateRequest: {
                        shape: "S4m"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    }
                },
                required: [ "TemplateName", "SMSTemplateRequest" ],
                payload: "SMSTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        UpdateTemplateActiveVersion: {
            http: {
                method: "PUT",
                requestUri: "/v1/templates/{template-name}/{template-type}/active-version",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    TemplateActiveVersionRequest: {
                        type: "structure",
                        members: {
                            Version: {}
                        }
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    TemplateType: {
                        location: "uri",
                        locationName: "template-type"
                    }
                },
                required: [ "TemplateName", "TemplateType", "TemplateActiveVersionRequest" ],
                payload: "TemplateActiveVersionRequest"
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        UpdateVoiceChannel: {
            http: {
                method: "PUT",
                requestUri: "/v1/apps/{application-id}/channels/voice",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    VoiceChannelRequest: {
                        type: "structure",
                        members: {
                            Enabled: {
                                type: "boolean"
                            }
                        }
                    }
                },
                required: [ "ApplicationId", "VoiceChannelRequest" ],
                payload: "VoiceChannelRequest"
            },
            output: {
                type: "structure",
                members: {
                    VoiceChannelResponse: {
                        shape: "S6j"
                    }
                },
                required: [ "VoiceChannelResponse" ],
                payload: "VoiceChannelResponse"
            }
        },
        UpdateVoiceTemplate: {
            http: {
                method: "PUT",
                requestUri: "/v1/templates/{template-name}/voice",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    CreateNewVersion: {
                        location: "querystring",
                        locationName: "create-new-version",
                        type: "boolean"
                    },
                    TemplateName: {
                        location: "uri",
                        locationName: "template-name"
                    },
                    Version: {
                        location: "querystring",
                        locationName: "version"
                    },
                    VoiceTemplateRequest: {
                        shape: "S4p"
                    }
                },
                required: [ "TemplateName", "VoiceTemplateRequest" ],
                payload: "VoiceTemplateRequest"
            },
            output: {
                type: "structure",
                members: {
                    MessageBody: {
                        shape: "S5i"
                    }
                },
                required: [ "MessageBody" ],
                payload: "MessageBody"
            }
        },
        VerifyOTPMessage: {
            http: {
                requestUri: "/v1/apps/{application-id}/verify-otp",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "application-id"
                    },
                    VerifyOTPMessageRequestParameters: {
                        type: "structure",
                        members: {
                            DestinationIdentity: {},
                            Otp: {},
                            ReferenceId: {}
                        },
                        required: [ "ReferenceId", "Otp", "DestinationIdentity" ]
                    }
                },
                required: [ "ApplicationId", "VerifyOTPMessageRequestParameters" ],
                payload: "VerifyOTPMessageRequestParameters"
            },
            output: {
                type: "structure",
                members: {
                    VerificationResponse: {
                        type: "structure",
                        members: {
                            Valid: {
                                type: "boolean"
                            }
                        }
                    }
                },
                required: [ "VerificationResponse" ],
                payload: "VerificationResponse"
            }
        }
    },
    shapes: {
        S4: {
            type: "map",
            key: {},
            value: {}
        },
        S6: {
            type: "structure",
            members: {
                Arn: {},
                Id: {},
                Name: {},
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                CreationDate: {}
            },
            required: [ "Id", "Arn", "Name" ]
        },
        S8: {
            type: "structure",
            members: {
                AdditionalTreatments: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CustomDeliveryConfiguration: {
                                shape: "Sb"
                            },
                            MessageConfiguration: {
                                shape: "Se"
                            },
                            Schedule: {
                                shape: "Sy"
                            },
                            SizePercent: {
                                type: "integer"
                            },
                            TemplateConfiguration: {
                                shape: "S1d"
                            },
                            TreatmentDescription: {},
                            TreatmentName: {}
                        },
                        required: [ "SizePercent" ]
                    }
                },
                CustomDeliveryConfiguration: {
                    shape: "Sb"
                },
                Description: {},
                HoldoutPercent: {
                    type: "integer"
                },
                Hook: {
                    shape: "S1f"
                },
                IsPaused: {
                    type: "boolean"
                },
                Limits: {
                    shape: "S1h"
                },
                MessageConfiguration: {
                    shape: "Se"
                },
                Name: {},
                Schedule: {
                    shape: "Sy"
                },
                SegmentId: {},
                SegmentVersion: {
                    type: "integer"
                },
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                TemplateConfiguration: {
                    shape: "S1d"
                },
                TreatmentDescription: {},
                TreatmentName: {},
                Priority: {
                    type: "integer"
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                DeliveryUri: {},
                EndpointTypes: {
                    shape: "Sc"
                }
            },
            required: [ "DeliveryUri" ]
        },
        Sc: {
            type: "list",
            member: {}
        },
        Se: {
            type: "structure",
            members: {
                ADMMessage: {
                    shape: "Sf"
                },
                APNSMessage: {
                    shape: "Sf"
                },
                BaiduMessage: {
                    shape: "Sf"
                },
                CustomMessage: {
                    type: "structure",
                    members: {
                        Data: {}
                    }
                },
                DefaultMessage: {
                    shape: "Sf"
                },
                EmailMessage: {
                    type: "structure",
                    members: {
                        Body: {},
                        FromAddress: {},
                        HtmlBody: {},
                        Title: {}
                    }
                },
                GCMMessage: {
                    shape: "Sf"
                },
                SMSMessage: {
                    type: "structure",
                    members: {
                        Body: {},
                        MessageType: {},
                        OriginationNumber: {},
                        SenderId: {},
                        EntityId: {},
                        TemplateId: {}
                    }
                },
                InAppMessage: {
                    type: "structure",
                    members: {
                        Body: {},
                        Content: {
                            shape: "So"
                        },
                        CustomConfig: {
                            shape: "S4"
                        },
                        Layout: {}
                    }
                }
            }
        },
        Sf: {
            type: "structure",
            members: {
                Action: {},
                Body: {},
                ImageIconUrl: {},
                ImageSmallIconUrl: {},
                ImageUrl: {},
                JsonBody: {},
                MediaUrl: {},
                RawContent: {},
                SilentPush: {
                    type: "boolean"
                },
                TimeToLive: {
                    type: "integer"
                },
                Title: {},
                Url: {}
            }
        },
        So: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    BackgroundColor: {},
                    BodyConfig: {
                        type: "structure",
                        members: {
                            Alignment: {},
                            Body: {},
                            TextColor: {}
                        },
                        required: [ "Alignment", "TextColor", "Body" ]
                    },
                    HeaderConfig: {
                        type: "structure",
                        members: {
                            Alignment: {},
                            Header: {},
                            TextColor: {}
                        },
                        required: [ "Alignment", "Header", "TextColor" ]
                    },
                    ImageUrl: {},
                    PrimaryBtn: {
                        shape: "St"
                    },
                    SecondaryBtn: {
                        shape: "St"
                    }
                }
            }
        },
        St: {
            type: "structure",
            members: {
                Android: {
                    shape: "Su"
                },
                DefaultConfig: {
                    type: "structure",
                    members: {
                        BackgroundColor: {},
                        BorderRadius: {
                            type: "integer"
                        },
                        ButtonAction: {},
                        Link: {},
                        Text: {},
                        TextColor: {}
                    },
                    required: [ "ButtonAction", "Text" ]
                },
                IOS: {
                    shape: "Su"
                },
                Web: {
                    shape: "Su"
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                ButtonAction: {},
                Link: {}
            },
            required: [ "ButtonAction" ]
        },
        Sy: {
            type: "structure",
            members: {
                EndTime: {},
                EventFilter: {
                    shape: "Sz"
                },
                Frequency: {},
                IsLocalTime: {
                    type: "boolean"
                },
                QuietTime: {
                    shape: "S1c"
                },
                StartTime: {},
                Timezone: {}
            },
            required: [ "StartTime" ]
        },
        Sz: {
            type: "structure",
            members: {
                Dimensions: {
                    shape: "S10"
                },
                FilterType: {}
            },
            required: [ "FilterType", "Dimensions" ]
        },
        S10: {
            type: "structure",
            members: {
                Attributes: {
                    shape: "S11"
                },
                EventType: {
                    shape: "S15"
                },
                Metrics: {
                    shape: "S17"
                }
            }
        },
        S11: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    AttributeType: {},
                    Values: {
                        shape: "S14"
                    }
                },
                required: [ "Values" ]
            }
        },
        S14: {
            type: "list",
            member: {}
        },
        S15: {
            type: "structure",
            members: {
                DimensionType: {},
                Values: {
                    shape: "S14"
                }
            },
            required: [ "Values" ]
        },
        S17: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    ComparisonOperator: {},
                    Value: {
                        type: "double"
                    }
                },
                required: [ "ComparisonOperator", "Value" ]
            }
        },
        S1c: {
            type: "structure",
            members: {
                End: {},
                Start: {}
            }
        },
        S1d: {
            type: "structure",
            members: {
                EmailTemplate: {
                    shape: "S1e"
                },
                PushTemplate: {
                    shape: "S1e"
                },
                SMSTemplate: {
                    shape: "S1e"
                },
                VoiceTemplate: {
                    shape: "S1e"
                },
                InAppTemplate: {
                    shape: "S1e"
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                Name: {},
                Version: {}
            }
        },
        S1f: {
            type: "structure",
            members: {
                LambdaFunctionName: {},
                Mode: {},
                WebUrl: {}
            }
        },
        S1h: {
            type: "structure",
            members: {
                Daily: {
                    type: "integer"
                },
                MaximumDuration: {
                    type: "integer"
                },
                MessagesPerSecond: {
                    type: "integer"
                },
                Total: {
                    type: "integer"
                },
                Session: {
                    type: "integer"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                AdditionalTreatments: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CustomDeliveryConfiguration: {
                                shape: "Sb"
                            },
                            Id: {},
                            MessageConfiguration: {
                                shape: "Se"
                            },
                            Schedule: {
                                shape: "Sy"
                            },
                            SizePercent: {
                                type: "integer"
                            },
                            State: {
                                shape: "S1m"
                            },
                            TemplateConfiguration: {
                                shape: "S1d"
                            },
                            TreatmentDescription: {},
                            TreatmentName: {}
                        },
                        required: [ "Id", "SizePercent" ]
                    }
                },
                ApplicationId: {},
                Arn: {},
                CreationDate: {},
                CustomDeliveryConfiguration: {
                    shape: "Sb"
                },
                DefaultState: {
                    shape: "S1m"
                },
                Description: {},
                HoldoutPercent: {
                    type: "integer"
                },
                Hook: {
                    shape: "S1f"
                },
                Id: {},
                IsPaused: {
                    type: "boolean"
                },
                LastModifiedDate: {},
                Limits: {
                    shape: "S1h"
                },
                MessageConfiguration: {
                    shape: "Se"
                },
                Name: {},
                Schedule: {
                    shape: "Sy"
                },
                SegmentId: {},
                SegmentVersion: {
                    type: "integer"
                },
                State: {
                    shape: "S1m"
                },
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                TemplateConfiguration: {
                    shape: "S1d"
                },
                TreatmentDescription: {},
                TreatmentName: {},
                Version: {
                    type: "integer"
                },
                Priority: {
                    type: "integer"
                }
            },
            required: [ "LastModifiedDate", "CreationDate", "SegmentId", "SegmentVersion", "Id", "Arn", "ApplicationId" ]
        },
        S1m: {
            type: "structure",
            members: {
                CampaignStatus: {}
            }
        },
        S1p: {
            type: "structure",
            members: {
                DefaultSubstitutions: {},
                HtmlPart: {},
                RecommenderId: {},
                Subject: {},
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                TemplateDescription: {},
                TextPart: {}
            }
        },
        S1r: {
            type: "structure",
            members: {
                Arn: {},
                Message: {},
                RequestID: {}
            }
        },
        S1v: {
            type: "structure",
            members: {
                ApplicationId: {},
                CompletedPieces: {
                    type: "integer"
                },
                CompletionDate: {},
                CreationDate: {},
                Definition: {
                    type: "structure",
                    members: {
                        RoleArn: {},
                        S3UrlPrefix: {},
                        SegmentId: {},
                        SegmentVersion: {
                            type: "integer"
                        }
                    },
                    required: [ "S3UrlPrefix", "RoleArn" ]
                },
                FailedPieces: {
                    type: "integer"
                },
                Failures: {
                    shape: "S14"
                },
                Id: {},
                JobStatus: {},
                TotalFailures: {
                    type: "integer"
                },
                TotalPieces: {
                    type: "integer"
                },
                TotalProcessed: {
                    type: "integer"
                },
                Type: {}
            },
            required: [ "JobStatus", "CreationDate", "Type", "Definition", "Id", "ApplicationId" ]
        },
        S22: {
            type: "structure",
            members: {
                ApplicationId: {},
                CompletedPieces: {
                    type: "integer"
                },
                CompletionDate: {},
                CreationDate: {},
                Definition: {
                    type: "structure",
                    members: {
                        DefineSegment: {
                            type: "boolean"
                        },
                        ExternalId: {},
                        Format: {},
                        RegisterEndpoints: {
                            type: "boolean"
                        },
                        RoleArn: {},
                        S3Url: {},
                        SegmentId: {},
                        SegmentName: {}
                    },
                    required: [ "Format", "S3Url", "RoleArn" ]
                },
                FailedPieces: {
                    type: "integer"
                },
                Failures: {
                    shape: "S14"
                },
                Id: {},
                JobStatus: {},
                TotalFailures: {
                    type: "integer"
                },
                TotalPieces: {
                    type: "integer"
                },
                TotalProcessed: {
                    type: "integer"
                },
                Type: {}
            },
            required: [ "JobStatus", "CreationDate", "Type", "Definition", "Id", "ApplicationId" ]
        },
        S25: {
            type: "structure",
            members: {
                Content: {
                    shape: "So"
                },
                CustomConfig: {
                    shape: "S4"
                },
                Layout: {},
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                TemplateDescription: {}
            }
        },
        S29: {
            type: "structure",
            members: {
                Activities: {
                    shape: "S2a"
                },
                CreationDate: {},
                LastModifiedDate: {},
                Limits: {
                    shape: "S3a"
                },
                LocalTime: {
                    type: "boolean"
                },
                Name: {},
                QuietTime: {
                    shape: "S1c"
                },
                RefreshFrequency: {},
                Schedule: {
                    shape: "S3c"
                },
                StartActivity: {},
                StartCondition: {
                    shape: "S3e"
                },
                State: {},
                WaitForQuietTime: {
                    type: "boolean"
                },
                RefreshOnSegmentUpdate: {
                    type: "boolean"
                },
                JourneyChannelSettings: {
                    shape: "S3i"
                },
                SendingSchedule: {
                    type: "boolean"
                },
                OpenHours: {
                    shape: "S3j"
                },
                ClosedDays: {
                    shape: "S3o"
                },
                TimezoneEstimationMethods: {
                    shape: "S3r"
                }
            },
            required: [ "Name" ]
        },
        S2a: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    CUSTOM: {
                        type: "structure",
                        members: {
                            DeliveryUri: {},
                            EndpointTypes: {
                                shape: "Sc"
                            },
                            MessageConfig: {
                                type: "structure",
                                members: {
                                    Data: {}
                                }
                            },
                            NextActivity: {},
                            TemplateName: {},
                            TemplateVersion: {}
                        }
                    },
                    ConditionalSplit: {
                        type: "structure",
                        members: {
                            Condition: {
                                type: "structure",
                                members: {
                                    Conditions: {
                                        type: "list",
                                        member: {
                                            shape: "S2h"
                                        }
                                    },
                                    Operator: {}
                                }
                            },
                            EvaluationWaitTime: {
                                shape: "S2u"
                            },
                            FalseActivity: {},
                            TrueActivity: {}
                        }
                    },
                    Description: {},
                    EMAIL: {
                        type: "structure",
                        members: {
                            MessageConfig: {
                                type: "structure",
                                members: {
                                    FromAddress: {}
                                }
                            },
                            NextActivity: {},
                            TemplateName: {},
                            TemplateVersion: {}
                        }
                    },
                    Holdout: {
                        type: "structure",
                        members: {
                            NextActivity: {},
                            Percentage: {
                                type: "integer"
                            }
                        },
                        required: [ "Percentage" ]
                    },
                    MultiCondition: {
                        type: "structure",
                        members: {
                            Branches: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Condition: {
                                            shape: "S2h"
                                        },
                                        NextActivity: {}
                                    }
                                }
                            },
                            DefaultActivity: {},
                            EvaluationWaitTime: {
                                shape: "S2u"
                            }
                        }
                    },
                    PUSH: {
                        type: "structure",
                        members: {
                            MessageConfig: {
                                type: "structure",
                                members: {
                                    TimeToLive: {}
                                }
                            },
                            NextActivity: {},
                            TemplateName: {},
                            TemplateVersion: {}
                        }
                    },
                    RandomSplit: {
                        type: "structure",
                        members: {
                            Branches: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        NextActivity: {},
                                        Percentage: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SMS: {
                        type: "structure",
                        members: {
                            MessageConfig: {
                                type: "structure",
                                members: {
                                    MessageType: {},
                                    OriginationNumber: {},
                                    SenderId: {},
                                    EntityId: {},
                                    TemplateId: {}
                                }
                            },
                            NextActivity: {},
                            TemplateName: {},
                            TemplateVersion: {}
                        }
                    },
                    Wait: {
                        type: "structure",
                        members: {
                            NextActivity: {},
                            WaitTime: {
                                shape: "S2u"
                            }
                        }
                    },
                    ContactCenter: {
                        type: "structure",
                        members: {
                            NextActivity: {}
                        }
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                EventCondition: {
                    type: "structure",
                    members: {
                        Dimensions: {
                            shape: "S10"
                        },
                        MessageActivity: {}
                    }
                },
                SegmentCondition: {
                    shape: "S2j"
                },
                SegmentDimensions: {
                    shape: "S2k",
                    locationName: "segmentDimensions"
                }
            }
        },
        S2j: {
            type: "structure",
            members: {
                SegmentId: {}
            },
            required: [ "SegmentId" ]
        },
        S2k: {
            type: "structure",
            members: {
                Attributes: {
                    shape: "S11"
                },
                Behavior: {
                    type: "structure",
                    members: {
                        Recency: {
                            type: "structure",
                            members: {
                                Duration: {},
                                RecencyType: {}
                            },
                            required: [ "Duration", "RecencyType" ]
                        }
                    }
                },
                Demographic: {
                    type: "structure",
                    members: {
                        AppVersion: {
                            shape: "S15"
                        },
                        Channel: {
                            shape: "S15"
                        },
                        DeviceType: {
                            shape: "S15"
                        },
                        Make: {
                            shape: "S15"
                        },
                        Model: {
                            shape: "S15"
                        },
                        Platform: {
                            shape: "S15"
                        }
                    }
                },
                Location: {
                    type: "structure",
                    members: {
                        Country: {
                            shape: "S15"
                        },
                        GPSPoint: {
                            type: "structure",
                            members: {
                                Coordinates: {
                                    type: "structure",
                                    members: {
                                        Latitude: {
                                            type: "double"
                                        },
                                        Longitude: {
                                            type: "double"
                                        }
                                    },
                                    required: [ "Latitude", "Longitude" ]
                                },
                                RangeInKilometers: {
                                    type: "double"
                                }
                            },
                            required: [ "Coordinates" ]
                        }
                    }
                },
                Metrics: {
                    shape: "S17"
                },
                UserAttributes: {
                    shape: "S11"
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                WaitFor: {},
                WaitUntil: {}
            }
        },
        S3a: {
            type: "structure",
            members: {
                DailyCap: {
                    type: "integer"
                },
                EndpointReentryCap: {
                    type: "integer"
                },
                MessagesPerSecond: {
                    type: "integer"
                },
                EndpointReentryInterval: {},
                TimeframeCap: {
                    shape: "S3b"
                },
                TotalCap: {
                    type: "integer"
                }
            }
        },
        S3b: {
            type: "structure",
            members: {
                Cap: {
                    type: "integer"
                },
                Days: {
                    type: "integer"
                }
            }
        },
        S3c: {
            type: "structure",
            members: {
                EndTime: {
                    shape: "S3d"
                },
                StartTime: {
                    shape: "S3d"
                },
                Timezone: {}
            }
        },
        S3d: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S3e: {
            type: "structure",
            members: {
                Description: {},
                EventStartCondition: {
                    type: "structure",
                    members: {
                        EventFilter: {
                            type: "structure",
                            members: {
                                Dimensions: {
                                    shape: "S10"
                                },
                                FilterType: {}
                            },
                            required: [ "FilterType", "Dimensions" ]
                        },
                        SegmentId: {}
                    }
                },
                SegmentStartCondition: {
                    shape: "S2j"
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                ConnectCampaignArn: {},
                ConnectCampaignExecutionRoleArn: {}
            }
        },
        S3j: {
            type: "structure",
            members: {
                EMAIL: {
                    shape: "S3k"
                },
                SMS: {
                    shape: "S3k"
                },
                PUSH: {
                    shape: "S3k"
                },
                VOICE: {
                    shape: "S3k"
                },
                CUSTOM: {
                    shape: "S3k"
                }
            }
        },
        S3k: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {
                    type: "structure",
                    members: {
                        StartTime: {},
                        EndTime: {}
                    }
                }
            }
        },
        S3o: {
            type: "structure",
            members: {
                EMAIL: {
                    shape: "S3p"
                },
                SMS: {
                    shape: "S3p"
                },
                PUSH: {
                    shape: "S3p"
                },
                VOICE: {
                    shape: "S3p"
                },
                CUSTOM: {
                    shape: "S3p"
                }
            }
        },
        S3p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    StartDateTime: {},
                    EndDateTime: {}
                }
            }
        },
        S3r: {
            type: "list",
            member: {}
        },
        S3u: {
            type: "structure",
            members: {
                Activities: {
                    shape: "S2a"
                },
                ApplicationId: {},
                CreationDate: {},
                Id: {},
                LastModifiedDate: {},
                Limits: {
                    shape: "S3a"
                },
                LocalTime: {
                    type: "boolean"
                },
                Name: {},
                QuietTime: {
                    shape: "S1c"
                },
                RefreshFrequency: {},
                Schedule: {
                    shape: "S3c"
                },
                StartActivity: {},
                StartCondition: {
                    shape: "S3e"
                },
                State: {},
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                WaitForQuietTime: {
                    type: "boolean"
                },
                RefreshOnSegmentUpdate: {
                    type: "boolean"
                },
                JourneyChannelSettings: {
                    shape: "S3i"
                },
                SendingSchedule: {
                    type: "boolean"
                },
                OpenHours: {
                    shape: "S3j"
                },
                ClosedDays: {
                    shape: "S3o"
                },
                TimezoneEstimationMethods: {
                    shape: "S3r"
                }
            },
            required: [ "Name", "Id", "ApplicationId" ]
        },
        S3w: {
            type: "structure",
            members: {
                ADM: {
                    shape: "S3x"
                },
                APNS: {
                    shape: "S3y"
                },
                Baidu: {
                    shape: "S3x"
                },
                Default: {
                    shape: "S3z"
                },
                DefaultSubstitutions: {},
                GCM: {
                    shape: "S3x"
                },
                RecommenderId: {},
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                TemplateDescription: {}
            }
        },
        S3x: {
            type: "structure",
            members: {
                Action: {},
                Body: {},
                ImageIconUrl: {},
                ImageUrl: {},
                RawContent: {},
                SmallImageIconUrl: {},
                Sound: {},
                Title: {},
                Url: {}
            }
        },
        S3y: {
            type: "structure",
            members: {
                Action: {},
                Body: {},
                MediaUrl: {},
                RawContent: {},
                Sound: {},
                Title: {},
                Url: {}
            }
        },
        S3z: {
            type: "structure",
            members: {
                Action: {},
                Body: {},
                Sound: {},
                Title: {},
                Url: {}
            }
        },
        S44: {
            type: "structure",
            members: {
                Attributes: {
                    shape: "S4"
                },
                CreationDate: {},
                Description: {},
                Id: {},
                LastModifiedDate: {},
                Name: {},
                RecommendationProviderIdType: {},
                RecommendationProviderRoleArn: {},
                RecommendationProviderUri: {},
                RecommendationTransformerUri: {},
                RecommendationsDisplayName: {},
                RecommendationsPerMessage: {
                    type: "integer"
                }
            },
            required: [ "RecommendationProviderUri", "LastModifiedDate", "CreationDate", "RecommendationProviderRoleArn", "Id" ]
        },
        S46: {
            type: "structure",
            members: {
                Dimensions: {
                    shape: "S2k"
                },
                Name: {},
                SegmentGroups: {
                    shape: "S47"
                },
                tags: {
                    shape: "S4",
                    locationName: "tags"
                }
            }
        },
        S47: {
            type: "structure",
            members: {
                Groups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Dimensions: {
                                type: "list",
                                member: {
                                    shape: "S2k"
                                }
                            },
                            SourceSegments: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Id: {},
                                        Version: {
                                            type: "integer"
                                        }
                                    },
                                    required: [ "Id" ]
                                }
                            },
                            SourceType: {},
                            Type: {}
                        }
                    }
                },
                Include: {}
            }
        },
        S4h: {
            type: "structure",
            members: {
                ApplicationId: {},
                Arn: {},
                CreationDate: {},
                Dimensions: {
                    shape: "S2k"
                },
                Id: {},
                ImportDefinition: {
                    type: "structure",
                    members: {
                        ChannelCounts: {
                            type: "map",
                            key: {},
                            value: {
                                type: "integer"
                            }
                        },
                        ExternalId: {},
                        Format: {},
                        RoleArn: {},
                        S3Url: {},
                        Size: {
                            type: "integer"
                        }
                    },
                    required: [ "Format", "S3Url", "Size", "ExternalId", "RoleArn" ]
                },
                LastModifiedDate: {},
                Name: {},
                SegmentGroups: {
                    shape: "S47"
                },
                SegmentType: {},
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                Version: {
                    type: "integer"
                }
            },
            required: [ "SegmentType", "CreationDate", "Id", "Arn", "ApplicationId" ]
        },
        S4m: {
            type: "structure",
            members: {
                Body: {},
                DefaultSubstitutions: {},
                RecommenderId: {},
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                TemplateDescription: {}
            }
        },
        S4p: {
            type: "structure",
            members: {
                Body: {},
                DefaultSubstitutions: {},
                LanguageCode: {},
                tags: {
                    shape: "S4",
                    locationName: "tags"
                },
                TemplateDescription: {},
                VoiceId: {}
            }
        },
        S4t: {
            type: "structure",
            members: {
                ApplicationId: {},
                CreationDate: {},
                Enabled: {
                    type: "boolean"
                },
                HasCredential: {
                    type: "boolean"
                },
                Id: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                Platform: {},
                Version: {
                    type: "integer"
                }
            },
            required: [ "Platform" ]
        },
        S4w: {
            type: "structure",
            members: {
                ApplicationId: {},
                CreationDate: {},
                DefaultAuthenticationMethod: {},
                Enabled: {
                    type: "boolean"
                },
                HasCredential: {
                    type: "boolean"
                },
                HasTokenKey: {
                    type: "boolean"
                },
                Id: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                Platform: {},
                Version: {
                    type: "integer"
                }
            },
            required: [ "Platform" ]
        },
        S4z: {
            type: "structure",
            members: {
                ApplicationId: {},
                CreationDate: {},
                DefaultAuthenticationMethod: {},
                Enabled: {
                    type: "boolean"
                },
                HasCredential: {
                    type: "boolean"
                },
                HasTokenKey: {
                    type: "boolean"
                },
                Id: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                Platform: {},
                Version: {
                    type: "integer"
                }
            },
            required: [ "Platform" ]
        },
        S52: {
            type: "structure",
            members: {
                ApplicationId: {},
                CreationDate: {},
                DefaultAuthenticationMethod: {},
                Enabled: {
                    type: "boolean"
                },
                HasCredential: {
                    type: "boolean"
                },
                HasTokenKey: {
                    type: "boolean"
                },
                Id: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                Platform: {},
                Version: {
                    type: "integer"
                }
            },
            required: [ "Platform" ]
        },
        S55: {
            type: "structure",
            members: {
                ApplicationId: {},
                CreationDate: {},
                DefaultAuthenticationMethod: {},
                Enabled: {
                    type: "boolean"
                },
                HasCredential: {
                    type: "boolean"
                },
                HasTokenKey: {
                    type: "boolean"
                },
                Id: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                Platform: {},
                Version: {
                    type: "integer"
                }
            },
            required: [ "Platform" ]
        },
        S5a: {
            type: "structure",
            members: {
                ApplicationId: {},
                CreationDate: {},
                Credential: {},
                Enabled: {
                    type: "boolean"
                },
                HasCredential: {
                    type: "boolean"
                },
                Id: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                Platform: {},
                Version: {
                    type: "integer"
                }
            },
            required: [ "Credential", "Platform" ]
        },
        S5f: {
            type: "structure",
            members: {
                ApplicationId: {},
                ConfigurationSet: {},
                CreationDate: {},
                Enabled: {
                    type: "boolean"
                },
                FromAddress: {},
                HasCredential: {
                    type: "boolean"
                },
                Id: {},
                Identity: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                MessagesPerSecond: {
                    type: "integer"
                },
                Platform: {},
                RoleArn: {},
                Version: {
                    type: "integer"
                }
            },
            required: [ "Platform" ]
        },
        S5i: {
            type: "structure",
            members: {
                Message: {},
                RequestID: {}
            }
        },
        S5l: {
            type: "structure",
            members: {
                Address: {},
                ApplicationId: {},
                Attributes: {
                    shape: "S5m"
                },
                ChannelType: {},
                CohortId: {},
                CreationDate: {},
                Demographic: {
                    shape: "S5o"
                },
                EffectiveDate: {},
                EndpointStatus: {},
                Id: {},
                Location: {
                    shape: "S5p"
                },
                Metrics: {
                    shape: "S5q"
                },
                OptOut: {},
                RequestId: {},
                User: {
                    shape: "S5r"
                }
            }
        },
        S5m: {
            type: "map",
            key: {},
            value: {
                shape: "S14"
            }
        },
        S5o: {
            type: "structure",
            members: {
                AppVersion: {},
                Locale: {},
                Make: {},
                Model: {},
                ModelVersion: {},
                Platform: {},
                PlatformVersion: {},
                Timezone: {}
            }
        },
        S5p: {
            type: "structure",
            members: {
                City: {},
                Country: {},
                Latitude: {
                    type: "double"
                },
                Longitude: {
                    type: "double"
                },
                PostalCode: {},
                Region: {}
            }
        },
        S5q: {
            type: "map",
            key: {},
            value: {
                type: "double"
            }
        },
        S5r: {
            type: "structure",
            members: {
                UserAttributes: {
                    shape: "S5m"
                },
                UserId: {}
            }
        },
        S5u: {
            type: "structure",
            members: {
                ApplicationId: {},
                DestinationStreamArn: {},
                ExternalId: {},
                LastModifiedDate: {},
                LastUpdatedBy: {},
                RoleArn: {}
            },
            required: [ "ApplicationId", "RoleArn", "DestinationStreamArn" ]
        },
        S5x: {
            type: "structure",
            members: {
                ApplicationId: {},
                CreationDate: {},
                Credential: {},
                DefaultAuthenticationMethod: {},
                Enabled: {
                    type: "boolean"
                },
                HasCredential: {
                    type: "boolean"
                },
                HasFcmServiceCredentials: {
                    type: "boolean"
                },
                Id: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                Platform: {},
                Version: {
                    type: "integer"
                }
            },
            required: [ "Platform" ]
        },
        S6a: {
            type: "structure",
            members: {
                ApplicationId: {},
                CreationDate: {},
                Enabled: {
                    type: "boolean"
                },
                HasCredential: {
                    type: "boolean"
                },
                Id: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                Platform: {},
                PromotionalMessagesPerSecond: {
                    type: "integer"
                },
                SenderId: {},
                ShortCode: {},
                TransactionalMessagesPerSecond: {
                    type: "integer"
                },
                Version: {
                    type: "integer"
                }
            },
            required: [ "Platform" ]
        },
        S6f: {
            type: "structure",
            members: {
                Item: {
                    type: "list",
                    member: {
                        shape: "S5l"
                    }
                }
            },
            required: [ "Item" ]
        },
        S6j: {
            type: "structure",
            members: {
                ApplicationId: {},
                CreationDate: {},
                Enabled: {
                    type: "boolean"
                },
                HasCredential: {
                    type: "boolean"
                },
                Id: {},
                IsArchived: {
                    type: "boolean"
                },
                LastModifiedBy: {},
                LastModifiedDate: {},
                Platform: {},
                Version: {
                    type: "integer"
                }
            },
            required: [ "Platform" ]
        },
        S71: {
            type: "structure",
            members: {
                Rows: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            GroupedBys: {
                                shape: "S74"
                            },
                            Values: {
                                shape: "S74"
                            }
                        },
                        required: [ "GroupedBys", "Values" ]
                    }
                }
            },
            required: [ "Rows" ]
        },
        S74: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Type: {},
                    Value: {}
                },
                required: [ "Type", "Value", "Key" ]
            }
        },
        S78: {
            type: "structure",
            members: {
                ApplicationId: {},
                CampaignHook: {
                    shape: "S1f"
                },
                LastModifiedDate: {},
                Limits: {
                    shape: "S1h"
                },
                QuietTime: {
                    shape: "S1c"
                },
                JourneyLimits: {
                    shape: "S79"
                }
            },
            required: [ "ApplicationId" ]
        },
        S79: {
            type: "structure",
            members: {
                DailyCap: {
                    type: "integer"
                },
                TimeframeCap: {
                    shape: "S3b"
                },
                TotalCap: {
                    type: "integer"
                }
            }
        },
        S7u: {
            type: "structure",
            members: {
                Item: {
                    type: "list",
                    member: {
                        shape: "S1j"
                    }
                },
                NextToken: {}
            },
            required: [ "Item" ]
        },
        S8h: {
            type: "structure",
            members: {
                Item: {
                    type: "list",
                    member: {
                        shape: "S1v"
                    }
                },
                NextToken: {}
            },
            required: [ "Item" ]
        },
        S8p: {
            type: "structure",
            members: {
                Item: {
                    type: "list",
                    member: {
                        shape: "S22"
                    }
                },
                NextToken: {}
            },
            required: [ "Item" ]
        },
        Sa7: {
            type: "structure",
            members: {
                Item: {
                    type: "list",
                    member: {
                        shape: "S4h"
                    }
                },
                NextToken: {}
            },
            required: [ "Item" ]
        },
        Sat: {
            type: "structure",
            members: {
                tags: {
                    shape: "S4",
                    locationName: "tags"
                }
            },
            required: [ "tags" ]
        },
        Sby: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    BodyOverride: {},
                    Context: {
                        shape: "S4"
                    },
                    RawContent: {},
                    Substitutions: {
                        shape: "S5m"
                    },
                    TitleOverride: {}
                }
            }
        },
        Sc0: {
            type: "structure",
            members: {
                ADMMessage: {
                    type: "structure",
                    members: {
                        Action: {},
                        Body: {},
                        ConsolidationKey: {},
                        Data: {
                            shape: "S4"
                        },
                        ExpiresAfter: {},
                        IconReference: {},
                        ImageIconUrl: {},
                        ImageUrl: {},
                        MD5: {},
                        RawContent: {},
                        SilentPush: {
                            type: "boolean"
                        },
                        SmallImageIconUrl: {},
                        Sound: {},
                        Substitutions: {
                            shape: "S5m"
                        },
                        Title: {},
                        Url: {}
                    }
                },
                APNSMessage: {
                    type: "structure",
                    members: {
                        APNSPushType: {},
                        Action: {},
                        Badge: {
                            type: "integer"
                        },
                        Body: {},
                        Category: {},
                        CollapseId: {},
                        Data: {
                            shape: "S4"
                        },
                        MediaUrl: {},
                        PreferredAuthenticationMethod: {},
                        Priority: {},
                        RawContent: {},
                        SilentPush: {
                            type: "boolean"
                        },
                        Sound: {},
                        Substitutions: {
                            shape: "S5m"
                        },
                        ThreadId: {},
                        TimeToLive: {
                            type: "integer"
                        },
                        Title: {},
                        Url: {}
                    }
                },
                BaiduMessage: {
                    type: "structure",
                    members: {
                        Action: {},
                        Body: {},
                        Data: {
                            shape: "S4"
                        },
                        IconReference: {},
                        ImageIconUrl: {},
                        ImageUrl: {},
                        RawContent: {},
                        SilentPush: {
                            type: "boolean"
                        },
                        SmallImageIconUrl: {},
                        Sound: {},
                        Substitutions: {
                            shape: "S5m"
                        },
                        TimeToLive: {
                            type: "integer"
                        },
                        Title: {},
                        Url: {}
                    }
                },
                DefaultMessage: {
                    type: "structure",
                    members: {
                        Body: {},
                        Substitutions: {
                            shape: "S5m"
                        }
                    }
                },
                DefaultPushNotificationMessage: {
                    type: "structure",
                    members: {
                        Action: {},
                        Body: {},
                        Data: {
                            shape: "S4"
                        },
                        SilentPush: {
                            type: "boolean"
                        },
                        Substitutions: {
                            shape: "S5m"
                        },
                        Title: {},
                        Url: {}
                    }
                },
                EmailMessage: {
                    type: "structure",
                    members: {
                        Body: {},
                        FeedbackForwardingAddress: {},
                        FromAddress: {},
                        RawEmail: {
                            type: "structure",
                            members: {
                                Data: {
                                    type: "blob"
                                }
                            }
                        },
                        ReplyToAddresses: {
                            shape: "S14"
                        },
                        SimpleEmail: {
                            type: "structure",
                            members: {
                                HtmlPart: {
                                    shape: "Sca"
                                },
                                Subject: {
                                    shape: "Sca"
                                },
                                TextPart: {
                                    shape: "Sca"
                                }
                            }
                        },
                        Substitutions: {
                            shape: "S5m"
                        }
                    }
                },
                GCMMessage: {
                    type: "structure",
                    members: {
                        Action: {},
                        Body: {},
                        CollapseKey: {},
                        Data: {
                            shape: "S4"
                        },
                        IconReference: {},
                        ImageIconUrl: {},
                        ImageUrl: {},
                        PreferredAuthenticationMethod: {},
                        Priority: {},
                        RawContent: {},
                        RestrictedPackageName: {},
                        SilentPush: {
                            type: "boolean"
                        },
                        SmallImageIconUrl: {},
                        Sound: {},
                        Substitutions: {
                            shape: "S5m"
                        },
                        TimeToLive: {
                            type: "integer"
                        },
                        Title: {},
                        Url: {}
                    }
                },
                SMSMessage: {
                    type: "structure",
                    members: {
                        Body: {},
                        Keyword: {},
                        MediaUrl: {},
                        MessageType: {},
                        OriginationNumber: {},
                        SenderId: {},
                        Substitutions: {
                            shape: "S5m"
                        },
                        EntityId: {},
                        TemplateId: {}
                    }
                },
                VoiceMessage: {
                    type: "structure",
                    members: {
                        Body: {},
                        LanguageCode: {},
                        OriginationNumber: {},
                        Substitutions: {
                            shape: "S5m"
                        },
                        VoiceId: {}
                    }
                }
            }
        },
        Sca: {
            type: "structure",
            members: {
                Charset: {},
                Data: {}
            }
        },
        Scf: {
            type: "structure",
            members: {
                ApplicationId: {},
                EndpointResult: {
                    shape: "Scg"
                },
                RequestId: {},
                Result: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            DeliveryStatus: {},
                            MessageId: {},
                            StatusCode: {
                                type: "integer"
                            },
                            StatusMessage: {},
                            UpdatedToken: {}
                        },
                        required: [ "DeliveryStatus", "StatusCode" ]
                    }
                }
            },
            required: [ "ApplicationId" ]
        },
        Scg: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Address: {},
                    DeliveryStatus: {},
                    MessageId: {},
                    StatusCode: {
                        type: "integer"
                    },
                    StatusMessage: {},
                    UpdatedToken: {}
                },
                required: [ "DeliveryStatus", "StatusCode" ]
            }
        }
    }
};

AWS.apiLoader.services["polly"] = {};

AWS.Polly = AWS.Service.defineService("polly", [ "2016-06-10" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    110: [ function(require, module, exports) {
        require("../polly/presigner");
    }, {
        "../polly/presigner": 78
    } ],
    78: [ function(require, module, exports) {
        var AWS = require("../core");
        var rest = AWS.Protocol.Rest;
        AWS.Polly.Presigner = AWS.util.inherit({
            constructor: function Signer(options) {
                options = options || {};
                this.options = options;
                this.service = options.service;
                this.bindServiceObject(options);
                this._operations = {};
            },
            bindServiceObject: function bindServiceObject(options) {
                options = options || {};
                if (!this.service) {
                    this.service = new AWS.Polly(options);
                } else {
                    var config = AWS.util.copy(this.service.config);
                    this.service = new this.service.constructor.__super__(config);
                    this.service.config.params = AWS.util.merge(this.service.config.params || {}, options.params);
                }
            },
            modifyInputMembers: function modifyInputMembers(input) {
                var modifiedInput = AWS.util.copy(input);
                modifiedInput.members = AWS.util.copy(input.members);
                AWS.util.each(input.members, function(name, member) {
                    modifiedInput.members[name] = AWS.util.copy(member);
                    if (!member.location || member.location === "body") {
                        modifiedInput.members[name].location = "querystring";
                        modifiedInput.members[name].locationName = name;
                    }
                });
                return modifiedInput;
            },
            convertPostToGet: function convertPostToGet(req) {
                req.httpRequest.method = "GET";
                var operation = req.service.api.operations[req.operation];
                var input = this._operations[req.operation];
                if (!input) {
                    this._operations[req.operation] = input = this.modifyInputMembers(operation.input);
                }
                var uri = rest.generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);
                req.httpRequest.path = uri;
                req.httpRequest.body = "";
                delete req.httpRequest.headers["Content-Length"];
                delete req.httpRequest.headers["Content-Type"];
            },
            getSynthesizeSpeechUrl: function getSynthesizeSpeechUrl(params, expires, callback) {
                var self = this;
                var request = this.service.makeRequest("synthesizeSpeech", params);
                request.removeAllListeners("build");
                request.on("build", function(req) {
                    self.convertPostToGet(req);
                });
                return request.presign(expires, callback);
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 110 ]);

AWS.apiLoader.services["polly"]["2016-06-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-06-10",
        endpointPrefix: "polly",
        protocol: "rest-json",
        serviceFullName: "Amazon Polly",
        serviceId: "Polly",
        signatureVersion: "v4",
        uid: "polly-2016-06-10"
    },
    operations: {
        DeleteLexicon: {
            http: {
                method: "DELETE",
                requestUri: "/v1/lexicons/{LexiconName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "LexiconName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeVoices: {
            http: {
                method: "GET",
                requestUri: "/v1/voices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Engine: {
                        location: "querystring",
                        locationName: "Engine"
                    },
                    LanguageCode: {
                        location: "querystring",
                        locationName: "LanguageCode"
                    },
                    IncludeAdditionalLanguageCodes: {
                        location: "querystring",
                        locationName: "IncludeAdditionalLanguageCodes",
                        type: "boolean"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Voices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Gender: {},
                                Id: {},
                                LanguageCode: {},
                                LanguageName: {},
                                Name: {},
                                AdditionalLanguageCodes: {
                                    type: "list",
                                    member: {}
                                },
                                SupportedEngines: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetLexicon: {
            http: {
                method: "GET",
                requestUri: "/v1/lexicons/{LexiconName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "LexiconName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Lexicon: {
                        type: "structure",
                        members: {
                            Content: {
                                shape: "Sl"
                            },
                            Name: {}
                        }
                    },
                    LexiconAttributes: {
                        shape: "Sm"
                    }
                }
            }
        },
        GetSpeechSynthesisTask: {
            http: {
                method: "GET",
                requestUri: "/v1/synthesisTasks/{TaskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TaskId" ],
                members: {
                    TaskId: {
                        location: "uri",
                        locationName: "TaskId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SynthesisTask: {
                        shape: "Sv"
                    }
                }
            }
        },
        ListLexicons: {
            http: {
                method: "GET",
                requestUri: "/v1/lexicons",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Lexicons: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Attributes: {
                                    shape: "Sm"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSpeechSynthesisTasks: {
            http: {
                method: "GET",
                requestUri: "/v1/synthesisTasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "Status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SynthesisTasks: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    }
                }
            }
        },
        PutLexicon: {
            http: {
                method: "PUT",
                requestUri: "/v1/lexicons/{LexiconName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "Content" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "LexiconName"
                    },
                    Content: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartSpeechSynthesisTask: {
            http: {
                requestUri: "/v1/synthesisTasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "OutputFormat", "OutputS3BucketName", "Text", "VoiceId" ],
                members: {
                    Engine: {},
                    LanguageCode: {},
                    LexiconNames: {
                        shape: "S12"
                    },
                    OutputFormat: {},
                    OutputS3BucketName: {},
                    OutputS3KeyPrefix: {},
                    SampleRate: {},
                    SnsTopicArn: {},
                    SpeechMarkTypes: {
                        shape: "S15"
                    },
                    Text: {},
                    TextType: {},
                    VoiceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SynthesisTask: {
                        shape: "Sv"
                    }
                }
            }
        },
        SynthesizeSpeech: {
            http: {
                requestUri: "/v1/speech",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "OutputFormat", "Text", "VoiceId" ],
                members: {
                    Engine: {},
                    LanguageCode: {},
                    LexiconNames: {
                        shape: "S12"
                    },
                    OutputFormat: {},
                    SampleRate: {},
                    SpeechMarkTypes: {
                        shape: "S15"
                    },
                    Text: {},
                    TextType: {},
                    VoiceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AudioStream: {
                        type: "blob",
                        streaming: true
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    RequestCharacters: {
                        location: "header",
                        locationName: "x-amzn-RequestCharacters",
                        type: "integer"
                    }
                },
                payload: "AudioStream"
            }
        }
    },
    shapes: {
        Sl: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "structure",
            members: {
                Alphabet: {},
                LanguageCode: {},
                LastModified: {
                    type: "timestamp"
                },
                LexiconArn: {},
                LexemesCount: {
                    type: "integer"
                },
                Size: {
                    type: "integer"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                Engine: {},
                TaskId: {},
                TaskStatus: {},
                TaskStatusReason: {},
                OutputUri: {},
                CreationTime: {
                    type: "timestamp"
                },
                RequestCharacters: {
                    type: "integer"
                },
                SnsTopicArn: {},
                LexiconNames: {
                    shape: "S12"
                },
                OutputFormat: {},
                SampleRate: {},
                SpeechMarkTypes: {
                    shape: "S15"
                },
                TextType: {},
                VoiceId: {},
                LanguageCode: {}
            }
        },
        S12: {
            type: "list",
            member: {}
        },
        S15: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListSpeechSynthesisTasks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["rds"] = {};

AWS.RDS = AWS.Service.defineService("rds", [ "2013-01-10", "2013-02-12", "2013-09-09", "2014-09-01", "2014-10-31" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    111: [ function(require, module, exports) {
        var AWS = require("../core");
        var rdsutil = require("./rdsutil");
        require("../rds/signer");
        var crossRegionOperations = [ "copyDBSnapshot", "createDBInstanceReadReplica", "createDBCluster", "copyDBClusterSnapshot", "startDBInstanceAutomatedBackupsReplication" ];
        AWS.util.update(AWS.RDS.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                rdsutil.setupRequestListeners(this, request, crossRegionOperations);
            }
        });
    }, {
        "../core": 44,
        "../rds/signer": 86,
        "./rdsutil": 113
    } ],
    86: [ function(require, module, exports) {
        var AWS = require("../core");
        var service = null;
        var api = {
            signatureVersion: "v4",
            signingName: "rds-db",
            operations: {}
        };
        var requiredAuthTokenOptions = {
            region: "string",
            hostname: "string",
            port: "number",
            username: "string"
        };
        AWS.RDS.Signer = AWS.util.inherit({
            constructor: function Signer(options) {
                this.options = options || {};
            },
            convertUrlToAuthToken: function convertUrlToAuthToken(url) {
                var protocol = "https://";
                if (url.indexOf(protocol) === 0) {
                    return url.substring(protocol.length);
                }
            },
            getAuthToken: function getAuthToken(options, callback) {
                if (typeof options === "function" && callback === undefined) {
                    callback = options;
                    options = {};
                }
                var self = this;
                var hasCallback = typeof callback === "function";
                options = AWS.util.merge(this.options, options);
                var optionsValidation = this.validateAuthTokenOptions(options);
                if (optionsValidation !== true) {
                    if (hasCallback) {
                        return callback(optionsValidation, null);
                    }
                    throw optionsValidation;
                }
                var expires = 900;
                var serviceOptions = {
                    region: options.region,
                    endpoint: new AWS.Endpoint(options.hostname + ":" + options.port),
                    paramValidation: false,
                    signatureVersion: "v4"
                };
                if (options.credentials) {
                    serviceOptions.credentials = options.credentials;
                }
                service = new AWS.Service(serviceOptions);
                service.api = api;
                var request = service.makeRequest();
                this.modifyRequestForAuthToken(request, options);
                if (hasCallback) {
                    request.presign(expires, function(err, url) {
                        if (url) {
                            url = self.convertUrlToAuthToken(url);
                        }
                        callback(err, url);
                    });
                } else {
                    var url = request.presign(expires);
                    return this.convertUrlToAuthToken(url);
                }
            },
            modifyRequestForAuthToken: function modifyRequestForAuthToken(request, options) {
                request.on("build", request.buildAsGet);
                var httpRequest = request.httpRequest;
                httpRequest.body = AWS.util.queryParamsToString({
                    Action: "connect",
                    DBUser: options.username
                });
            },
            validateAuthTokenOptions: function validateAuthTokenOptions(options) {
                var message = "";
                options = options || {};
                for (var key in requiredAuthTokenOptions) {
                    if (!Object.prototype.hasOwnProperty.call(requiredAuthTokenOptions, key)) {
                        continue;
                    }
                    if (typeof options[key] !== requiredAuthTokenOptions[key]) {
                        message += "option '" + key + "' should have been type '" + requiredAuthTokenOptions[key] + "', was '" + typeof options[key] + "'.\n";
                    }
                }
                if (message.length) {
                    return AWS.util.error(new Error(), {
                        code: "InvalidParameter",
                        message: message
                    });
                }
                return true;
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 111 ]);

AWS.apiLoader.services["rds"]["2014-10-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-10-31",
        endpointPrefix: "rds",
        protocol: "query",
        serviceAbbreviation: "Amazon RDS",
        serviceFullName: "Amazon Relational Database Service",
        serviceId: "RDS",
        signatureVersion: "v4",
        uid: "rds-2014-10-31",
        xmlNamespace: "http://rds.amazonaws.com/doc/2014-10-31/"
    },
    operations: {
        AddRoleToDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "RoleArn" ],
                members: {
                    DBClusterIdentifier: {},
                    RoleArn: {},
                    FeatureName: {}
                }
            }
        },
        AddRoleToDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "RoleArn", "FeatureName" ],
                members: {
                    DBInstanceIdentifier: {},
                    RoleArn: {},
                    FeatureName: {}
                }
            }
        },
        AddSourceIdentifierToSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "AddSourceIdentifierToSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S6"
                    }
                }
            }
        },
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "Tags" ],
                members: {
                    ResourceName: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ApplyPendingMaintenanceAction: {
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ApplyAction", "OptInType" ],
                members: {
                    ResourceIdentifier: {},
                    ApplyAction: {},
                    OptInType: {}
                }
            },
            output: {
                resultWrapper: "ApplyPendingMaintenanceActionResult",
                type: "structure",
                members: {
                    ResourcePendingMaintenanceActions: {
                        shape: "Sf"
                    }
                }
            }
        },
        AuthorizeDBSecurityGroupIngress: {
            input: {
                type: "structure",
                required: [ "DBSecurityGroupName" ],
                members: {
                    DBSecurityGroupName: {},
                    CIDRIP: {},
                    EC2SecurityGroupName: {},
                    EC2SecurityGroupId: {},
                    EC2SecurityGroupOwnerId: {}
                }
            },
            output: {
                resultWrapper: "AuthorizeDBSecurityGroupIngressResult",
                type: "structure",
                members: {
                    DBSecurityGroup: {
                        shape: "Sl"
                    }
                }
            }
        },
        BacktrackDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "BacktrackTo" ],
                members: {
                    DBClusterIdentifier: {},
                    BacktrackTo: {
                        type: "timestamp"
                    },
                    Force: {
                        type: "boolean"
                    },
                    UseEarliestTimeOnPointInTimeUnavailable: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "Ss",
                resultWrapper: "BacktrackDBClusterResult"
            }
        },
        CancelExportTask: {
            input: {
                type: "structure",
                required: [ "ExportTaskIdentifier" ],
                members: {
                    ExportTaskIdentifier: {}
                }
            },
            output: {
                shape: "Su",
                resultWrapper: "CancelExportTaskResult"
            }
        },
        CopyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupDescription" ],
                members: {
                    SourceDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupDescription: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "S10"
                    }
                }
            }
        },
        CopyDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterSnapshotIdentifier", "TargetDBClusterSnapshotIdentifier" ],
                members: {
                    SourceDBClusterSnapshotIdentifier: {},
                    TargetDBClusterSnapshotIdentifier: {},
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    CopyTags: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    SourceRegion: {}
                }
            },
            output: {
                resultWrapper: "CopyDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "S13"
                    }
                }
            }
        },
        CopyDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "SourceDBParameterGroupIdentifier", "TargetDBParameterGroupIdentifier", "TargetDBParameterGroupDescription" ],
                members: {
                    SourceDBParameterGroupIdentifier: {},
                    TargetDBParameterGroupIdentifier: {},
                    TargetDBParameterGroupDescription: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBParameterGroupResult",
                type: "structure",
                members: {
                    DBParameterGroup: {
                        shape: "S17"
                    }
                }
            }
        },
        CopyDBSnapshot: {
            input: {
                type: "structure",
                required: [ "SourceDBSnapshotIdentifier", "TargetDBSnapshotIdentifier" ],
                members: {
                    SourceDBSnapshotIdentifier: {},
                    TargetDBSnapshotIdentifier: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "Sb"
                    },
                    CopyTags: {
                        type: "boolean"
                    },
                    PreSignedUrl: {},
                    OptionGroupName: {},
                    TargetCustomAvailabilityZone: {},
                    CopyOptionGroup: {
                        type: "boolean"
                    },
                    SourceRegion: {}
                }
            },
            output: {
                resultWrapper: "CopyDBSnapshotResult",
                type: "structure",
                members: {
                    DBSnapshot: {
                        shape: "S1a"
                    }
                }
            }
        },
        CopyOptionGroup: {
            input: {
                type: "structure",
                required: [ "SourceOptionGroupIdentifier", "TargetOptionGroupIdentifier", "TargetOptionGroupDescription" ],
                members: {
                    SourceOptionGroupIdentifier: {},
                    TargetOptionGroupIdentifier: {},
                    TargetOptionGroupDescription: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CopyOptionGroupResult",
                type: "structure",
                members: {
                    OptionGroup: {
                        shape: "S1g"
                    }
                }
            }
        },
        CreateBlueGreenDeployment: {
            input: {
                type: "structure",
                required: [ "BlueGreenDeploymentName", "Source" ],
                members: {
                    BlueGreenDeploymentName: {},
                    Source: {},
                    TargetEngineVersion: {},
                    TargetDBParameterGroupName: {},
                    TargetDBClusterParameterGroupName: {},
                    Tags: {
                        shape: "Sb"
                    },
                    TargetDBInstanceClass: {},
                    UpgradeTargetStorageConfig: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateBlueGreenDeploymentResult",
                type: "structure",
                members: {
                    BlueGreenDeployment: {
                        shape: "S1x"
                    }
                }
            }
        },
        CreateCustomDBEngineVersion: {
            input: {
                type: "structure",
                required: [ "Engine", "EngineVersion" ],
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DatabaseInstallationFilesS3BucketName: {},
                    DatabaseInstallationFilesS3Prefix: {},
                    ImageId: {},
                    KMSKeyId: {},
                    Description: {},
                    Manifest: {},
                    Tags: {
                        shape: "Sb"
                    },
                    SourceCustomDbEngineVersionIdentifier: {},
                    UseAwsProvidedLatestImage: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S2g",
                resultWrapper: "CreateCustomDBEngineVersionResult"
            }
        },
        CreateDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "S14"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    CharacterSetName: {},
                    DatabaseName: {},
                    DBClusterIdentifier: {},
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    DBSubnetGroupName: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    MasterUsername: {},
                    MasterUserPassword: {},
                    OptionGroupName: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    ReplicationSourceIdentifier: {},
                    Tags: {
                        shape: "Sb"
                    },
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    BacktrackWindow: {
                        type: "long"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "S2p"
                    },
                    EngineMode: {},
                    ScalingConfiguration: {
                        shape: "S2v"
                    },
                    RdsCustomClusterConfiguration: {
                        shape: "S2w"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    GlobalClusterIdentifier: {},
                    EnableHttpEndpoint: {
                        type: "boolean"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    Domain: {},
                    DomainIAMRoleName: {},
                    EnableGlobalWriteForwarding: {
                        type: "boolean"
                    },
                    DBClusterInstanceClass: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    StorageType: {},
                    Iops: {
                        type: "integer"
                    },
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    MonitoringRoleArn: {},
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    PerformanceInsightsRetentionPeriod: {
                        type: "integer"
                    },
                    ServerlessV2ScalingConfiguration: {
                        shape: "S2y"
                    },
                    NetworkType: {},
                    DBSystemId: {},
                    ManageMasterUserPassword: {
                        type: "boolean"
                    },
                    MasterUserSecretKmsKeyId: {},
                    EnableLocalWriteForwarding: {
                        type: "boolean"
                    },
                    SourceRegion: {}
                }
            },
            output: {
                resultWrapper: "CreateDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        CreateDBClusterEndpoint: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "DBClusterEndpointIdentifier", "EndpointType" ],
                members: {
                    DBClusterIdentifier: {},
                    DBClusterEndpointIdentifier: {},
                    EndpointType: {},
                    StaticMembers: {
                        shape: "Sv"
                    },
                    ExcludedMembers: {
                        shape: "Sv"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                shape: "S3n",
                resultWrapper: "CreateDBClusterEndpointResult"
            }
        },
        CreateDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "DBParameterGroupFamily", "Description" ],
                members: {
                    DBClusterParameterGroupName: {},
                    DBParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "S10"
                    }
                }
            }
        },
        CreateDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "DBClusterIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    DBClusterIdentifier: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "DBInstanceClass", "Engine" ],
                members: {
                    DBName: {},
                    DBInstanceIdentifier: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    DBInstanceClass: {},
                    Engine: {},
                    MasterUsername: {},
                    MasterUserPassword: {},
                    DBSecurityGroups: {
                        shape: "S3t"
                    },
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    AvailabilityZone: {},
                    DBSubnetGroupName: {},
                    PreferredMaintenanceWindow: {},
                    DBParameterGroupName: {},
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    PreferredBackupWindow: {},
                    Port: {
                        type: "integer"
                    },
                    MultiAZ: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    LicenseModel: {},
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    CharacterSetName: {},
                    NcharCharacterSetName: {},
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    DBClusterIdentifier: {},
                    StorageType: {},
                    TdeCredentialArn: {},
                    TdeCredentialPassword: {},
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    Domain: {},
                    DomainFqdn: {},
                    DomainOu: {},
                    DomainAuthSecretArn: {},
                    DomainDnsIps: {
                        shape: "Sv"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    MonitoringRoleArn: {},
                    DomainIAMRoleName: {},
                    PromotionTier: {
                        type: "integer"
                    },
                    Timezone: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    PerformanceInsightsRetentionPeriod: {
                        type: "integer"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "S2p"
                    },
                    ProcessorFeatures: {
                        shape: "S1c"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    MaxAllocatedStorage: {
                        type: "integer"
                    },
                    EnableCustomerOwnedIp: {
                        type: "boolean"
                    },
                    CustomIamInstanceProfile: {},
                    BackupTarget: {},
                    NetworkType: {},
                    StorageThroughput: {
                        type: "integer"
                    },
                    ManageMasterUserPassword: {
                        type: "boolean"
                    },
                    MasterUserSecretKmsKeyId: {},
                    CACertificateIdentifier: {},
                    DBSystemId: {},
                    DedicatedLogVolume: {
                        type: "boolean"
                    },
                    MultiTenant: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        CreateDBInstanceReadReplica: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    SourceDBInstanceIdentifier: {},
                    DBInstanceClass: {},
                    AvailabilityZone: {},
                    Port: {
                        type: "integer"
                    },
                    MultiAZ: {
                        type: "boolean"
                    },
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    DBParameterGroupName: {},
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    DBSubnetGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    StorageType: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    MonitoringRoleArn: {},
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    PerformanceInsightsRetentionPeriod: {
                        type: "integer"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "S2p"
                    },
                    ProcessorFeatures: {
                        shape: "S1c"
                    },
                    UseDefaultProcessorFeatures: {
                        type: "boolean"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    Domain: {},
                    DomainIAMRoleName: {},
                    DomainFqdn: {},
                    DomainOu: {},
                    DomainAuthSecretArn: {},
                    DomainDnsIps: {
                        shape: "Sv"
                    },
                    ReplicaMode: {},
                    MaxAllocatedStorage: {
                        type: "integer"
                    },
                    CustomIamInstanceProfile: {},
                    NetworkType: {},
                    StorageThroughput: {
                        type: "integer"
                    },
                    EnableCustomerOwnedIp: {
                        type: "boolean"
                    },
                    AllocatedStorage: {
                        type: "integer"
                    },
                    SourceDBClusterIdentifier: {},
                    DedicatedLogVolume: {
                        type: "boolean"
                    },
                    UpgradeStorageConfig: {
                        type: "boolean"
                    },
                    SourceRegion: {}
                }
            },
            output: {
                resultWrapper: "CreateDBInstanceReadReplicaResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        CreateDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName", "DBParameterGroupFamily", "Description" ],
                members: {
                    DBParameterGroupName: {},
                    DBParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBParameterGroupResult",
                type: "structure",
                members: {
                    DBParameterGroup: {
                        shape: "S17"
                    }
                }
            }
        },
        CreateDBProxy: {
            input: {
                type: "structure",
                required: [ "DBProxyName", "EngineFamily", "Auth", "RoleArn", "VpcSubnetIds" ],
                members: {
                    DBProxyName: {},
                    EngineFamily: {},
                    Auth: {
                        shape: "S4o"
                    },
                    RoleArn: {},
                    VpcSubnetIds: {
                        shape: "Sv"
                    },
                    VpcSecurityGroupIds: {
                        shape: "Sv"
                    },
                    RequireTLS: {
                        type: "boolean"
                    },
                    IdleClientTimeout: {
                        type: "integer"
                    },
                    DebugLogging: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBProxyResult",
                type: "structure",
                members: {
                    DBProxy: {
                        shape: "S4u"
                    }
                }
            }
        },
        CreateDBProxyEndpoint: {
            input: {
                type: "structure",
                required: [ "DBProxyName", "DBProxyEndpointName", "VpcSubnetIds" ],
                members: {
                    DBProxyName: {},
                    DBProxyEndpointName: {},
                    VpcSubnetIds: {
                        shape: "Sv"
                    },
                    VpcSecurityGroupIds: {
                        shape: "Sv"
                    },
                    TargetRole: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBProxyEndpointResult",
                type: "structure",
                members: {
                    DBProxyEndpoint: {
                        shape: "S53"
                    }
                }
            }
        },
        CreateDBSecurityGroup: {
            input: {
                type: "structure",
                required: [ "DBSecurityGroupName", "DBSecurityGroupDescription" ],
                members: {
                    DBSecurityGroupName: {},
                    DBSecurityGroupDescription: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBSecurityGroupResult",
                type: "structure",
                members: {
                    DBSecurityGroup: {
                        shape: "Sl"
                    }
                }
            }
        },
        CreateDBSnapshot: {
            input: {
                type: "structure",
                required: [ "DBSnapshotIdentifier", "DBInstanceIdentifier" ],
                members: {
                    DBSnapshotIdentifier: {},
                    DBInstanceIdentifier: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBSnapshotResult",
                type: "structure",
                members: {
                    DBSnapshot: {
                        shape: "S1a"
                    }
                }
            }
        },
        CreateDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "DBSubnetGroupDescription", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S5a"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S3z"
                    }
                }
            }
        },
        CreateEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SnsTopicArn" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S8"
                    },
                    SourceIds: {
                        shape: "S7"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S6"
                    }
                }
            }
        },
        CreateGlobalCluster: {
            input: {
                type: "structure",
                members: {
                    GlobalClusterIdentifier: {},
                    SourceDBClusterIdentifier: {},
                    Engine: {},
                    EngineVersion: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    DatabaseName: {},
                    StorageEncrypted: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S5g"
                    }
                }
            }
        },
        CreateIntegration: {
            input: {
                type: "structure",
                required: [ "SourceArn", "TargetArn", "IntegrationName" ],
                members: {
                    SourceArn: {},
                    TargetArn: {},
                    IntegrationName: {},
                    KMSKeyId: {},
                    AdditionalEncryptionContext: {
                        shape: "S5r"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                shape: "S5s",
                resultWrapper: "CreateIntegrationResult"
            }
        },
        CreateOptionGroup: {
            input: {
                type: "structure",
                required: [ "OptionGroupName", "EngineName", "MajorEngineVersion", "OptionGroupDescription" ],
                members: {
                    OptionGroupName: {},
                    EngineName: {},
                    MajorEngineVersion: {},
                    OptionGroupDescription: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateOptionGroupResult",
                type: "structure",
                members: {
                    OptionGroup: {
                        shape: "S1g"
                    }
                }
            }
        },
        CreateTenantDatabase: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "TenantDBName", "MasterUsername", "MasterUserPassword" ],
                members: {
                    DBInstanceIdentifier: {},
                    TenantDBName: {},
                    MasterUsername: {},
                    MasterUserPassword: {
                        shape: "S60"
                    },
                    CharacterSetName: {},
                    NcharCharacterSetName: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "CreateTenantDatabaseResult",
                type: "structure",
                members: {
                    TenantDatabase: {
                        shape: "S62"
                    }
                }
            }
        },
        DeleteBlueGreenDeployment: {
            input: {
                type: "structure",
                required: [ "BlueGreenDeploymentIdentifier" ],
                members: {
                    BlueGreenDeploymentIdentifier: {},
                    DeleteTarget: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DeleteBlueGreenDeploymentResult",
                type: "structure",
                members: {
                    BlueGreenDeployment: {
                        shape: "S1x"
                    }
                }
            }
        },
        DeleteCustomDBEngineVersion: {
            input: {
                type: "structure",
                required: [ "Engine", "EngineVersion" ],
                members: {
                    Engine: {},
                    EngineVersion: {}
                }
            },
            output: {
                shape: "S2g",
                resultWrapper: "DeleteCustomDBEngineVersionResult"
            }
        },
        DeleteDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    SkipFinalSnapshot: {
                        type: "boolean"
                    },
                    FinalDBSnapshotIdentifier: {},
                    DeleteAutomatedBackups: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        DeleteDBClusterAutomatedBackup: {
            input: {
                type: "structure",
                required: [ "DbClusterResourceId" ],
                members: {
                    DbClusterResourceId: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterAutomatedBackupResult",
                type: "structure",
                members: {
                    DBClusterAutomatedBackup: {
                        shape: "S6b"
                    }
                }
            }
        },
        DeleteDBClusterEndpoint: {
            input: {
                type: "structure",
                required: [ "DBClusterEndpointIdentifier" ],
                members: {
                    DBClusterEndpointIdentifier: {}
                }
            },
            output: {
                shape: "S3n",
                resultWrapper: "DeleteDBClusterEndpointResult"
            }
        },
        DeleteDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {}
                }
            }
        },
        DeleteDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "S13"
                    }
                }
            }
        },
        DeleteDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    SkipFinalSnapshot: {
                        type: "boolean"
                    },
                    FinalDBSnapshotIdentifier: {},
                    DeleteAutomatedBackups: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DeleteDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        DeleteDBInstanceAutomatedBackup: {
            input: {
                type: "structure",
                members: {
                    DbiResourceId: {},
                    DBInstanceAutomatedBackupsArn: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBInstanceAutomatedBackupResult",
                type: "structure",
                members: {
                    DBInstanceAutomatedBackup: {
                        shape: "S6l"
                    }
                }
            }
        },
        DeleteDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName" ],
                members: {
                    DBParameterGroupName: {}
                }
            }
        },
        DeleteDBProxy: {
            input: {
                type: "structure",
                required: [ "DBProxyName" ],
                members: {
                    DBProxyName: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBProxyResult",
                type: "structure",
                members: {
                    DBProxy: {
                        shape: "S4u"
                    }
                }
            }
        },
        DeleteDBProxyEndpoint: {
            input: {
                type: "structure",
                required: [ "DBProxyEndpointName" ],
                members: {
                    DBProxyEndpointName: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBProxyEndpointResult",
                type: "structure",
                members: {
                    DBProxyEndpoint: {
                        shape: "S53"
                    }
                }
            }
        },
        DeleteDBSecurityGroup: {
            input: {
                type: "structure",
                required: [ "DBSecurityGroupName" ],
                members: {
                    DBSecurityGroupName: {}
                }
            }
        },
        DeleteDBSnapshot: {
            input: {
                type: "structure",
                required: [ "DBSnapshotIdentifier" ],
                members: {
                    DBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBSnapshotResult",
                type: "structure",
                members: {
                    DBSnapshot: {
                        shape: "S1a"
                    }
                }
            }
        },
        DeleteDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName" ],
                members: {
                    DBSubnetGroupName: {}
                }
            }
        },
        DeleteEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {}
                }
            },
            output: {
                resultWrapper: "DeleteEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S6"
                    }
                }
            }
        },
        DeleteGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S5g"
                    }
                }
            }
        },
        DeleteIntegration: {
            input: {
                type: "structure",
                required: [ "IntegrationIdentifier" ],
                members: {
                    IntegrationIdentifier: {}
                }
            },
            output: {
                shape: "S5s",
                resultWrapper: "DeleteIntegrationResult"
            }
        },
        DeleteOptionGroup: {
            input: {
                type: "structure",
                required: [ "OptionGroupName" ],
                members: {
                    OptionGroupName: {}
                }
            }
        },
        DeleteTenantDatabase: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "TenantDBName" ],
                members: {
                    DBInstanceIdentifier: {},
                    TenantDBName: {},
                    SkipFinalSnapshot: {
                        type: "boolean"
                    },
                    FinalDBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteTenantDatabaseResult",
                type: "structure",
                members: {
                    TenantDatabase: {
                        shape: "S62"
                    }
                }
            }
        },
        DeregisterDBProxyTargets: {
            input: {
                type: "structure",
                required: [ "DBProxyName" ],
                members: {
                    DBProxyName: {},
                    TargetGroupName: {},
                    DBInstanceIdentifiers: {
                        shape: "Sv"
                    },
                    DBClusterIdentifiers: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "DeregisterDBProxyTargetsResult",
                type: "structure",
                members: {}
            }
        },
        DescribeAccountAttributes: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                resultWrapper: "DescribeAccountAttributesResult",
                type: "structure",
                members: {
                    AccountQuotas: {
                        type: "list",
                        member: {
                            locationName: "AccountQuota",
                            type: "structure",
                            members: {
                                AccountQuotaName: {},
                                Used: {
                                    type: "long"
                                },
                                Max: {
                                    type: "long"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeBlueGreenDeployments: {
            input: {
                type: "structure",
                members: {
                    BlueGreenDeploymentIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeBlueGreenDeploymentsResult",
                type: "structure",
                members: {
                    BlueGreenDeployments: {
                        type: "list",
                        member: {
                            shape: "S1x"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeCertificates: {
            input: {
                type: "structure",
                members: {
                    CertificateIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeCertificatesResult",
                type: "structure",
                members: {
                    DefaultCertificateForNewLaunches: {},
                    Certificates: {
                        type: "list",
                        member: {
                            shape: "S7l",
                            locationName: "Certificate"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBClusterAutomatedBackups: {
            input: {
                type: "structure",
                members: {
                    DbClusterResourceId: {},
                    DBClusterIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterAutomatedBackupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterAutomatedBackups: {
                        type: "list",
                        member: {
                            shape: "S6b",
                            locationName: "DBClusterAutomatedBackup"
                        }
                    }
                }
            }
        },
        DescribeDBClusterBacktracks: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    BacktrackIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterBacktracksResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterBacktracks: {
                        type: "list",
                        member: {
                            shape: "Ss",
                            locationName: "DBClusterBacktrack"
                        }
                    }
                }
            }
        },
        DescribeDBClusterEndpoints: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    DBClusterEndpointIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterEndpointsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterEndpoints: {
                        type: "list",
                        member: {
                            shape: "S3n",
                            locationName: "DBClusterEndpointList"
                        }
                    }
                }
            }
        },
        DescribeDBClusterParameterGroups: {
            input: {
                type: "structure",
                members: {
                    DBClusterParameterGroupName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterParameterGroups: {
                        type: "list",
                        member: {
                            shape: "S10",
                            locationName: "DBClusterParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeDBClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Source: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParametersResult",
                type: "structure",
                members: {
                    Parameters: {
                        shape: "S80"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBClusterSnapshotAttributes: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotAttributesResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S85"
                    }
                }
            }
        },
        DescribeDBClusterSnapshots: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    DBClusterSnapshotIdentifier: {},
                    SnapshotType: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    IncludeShared: {
                        type: "boolean"
                    },
                    IncludePublic: {
                        type: "boolean"
                    },
                    DbClusterResourceId: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterSnapshots: {
                        type: "list",
                        member: {
                            shape: "S13",
                            locationName: "DBClusterSnapshot"
                        }
                    }
                }
            }
        },
        DescribeDBClusters: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    IncludeShared: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusters: {
                        type: "list",
                        member: {
                            shape: "S31",
                            locationName: "DBCluster"
                        }
                    }
                }
            }
        },
        DescribeDBEngineVersions: {
            input: {
                type: "structure",
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    DefaultOnly: {
                        type: "boolean"
                    },
                    ListSupportedCharacterSets: {
                        type: "boolean"
                    },
                    ListSupportedTimezones: {
                        type: "boolean"
                    },
                    IncludeAll: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBEngineVersionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBEngineVersions: {
                        type: "list",
                        member: {
                            shape: "S2g",
                            locationName: "DBEngineVersion"
                        }
                    }
                }
            }
        },
        DescribeDBInstanceAutomatedBackups: {
            input: {
                type: "structure",
                members: {
                    DbiResourceId: {},
                    DBInstanceIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    DBInstanceAutomatedBackupsArn: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBInstanceAutomatedBackupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBInstanceAutomatedBackups: {
                        type: "list",
                        member: {
                            shape: "S6l",
                            locationName: "DBInstanceAutomatedBackup"
                        }
                    }
                }
            }
        },
        DescribeDBInstances: {
            input: {
                type: "structure",
                members: {
                    DBInstanceIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBInstancesResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBInstances: {
                        type: "list",
                        member: {
                            shape: "S3v",
                            locationName: "DBInstance"
                        }
                    }
                }
            }
        },
        DescribeDBLogFiles: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    FilenameContains: {},
                    FileLastWritten: {
                        type: "long"
                    },
                    FileSize: {
                        type: "long"
                    },
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBLogFilesResult",
                type: "structure",
                members: {
                    DescribeDBLogFiles: {
                        type: "list",
                        member: {
                            locationName: "DescribeDBLogFilesDetails",
                            type: "structure",
                            members: {
                                LogFileName: {},
                                LastWritten: {
                                    type: "long"
                                },
                                Size: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBParameterGroups: {
            input: {
                type: "structure",
                members: {
                    DBParameterGroupName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBParameterGroups: {
                        type: "list",
                        member: {
                            shape: "S17",
                            locationName: "DBParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeDBParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName" ],
                members: {
                    DBParameterGroupName: {},
                    Source: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBParametersResult",
                type: "structure",
                members: {
                    Parameters: {
                        shape: "S80"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBProxies: {
            input: {
                type: "structure",
                members: {
                    DBProxyName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBProxiesResult",
                type: "structure",
                members: {
                    DBProxies: {
                        type: "list",
                        member: {
                            shape: "S4u"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBProxyEndpoints: {
            input: {
                type: "structure",
                members: {
                    DBProxyName: {},
                    DBProxyEndpointName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBProxyEndpointsResult",
                type: "structure",
                members: {
                    DBProxyEndpoints: {
                        type: "list",
                        member: {
                            shape: "S53"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBProxyTargetGroups: {
            input: {
                type: "structure",
                required: [ "DBProxyName" ],
                members: {
                    DBProxyName: {},
                    TargetGroupName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBProxyTargetGroupsResult",
                type: "structure",
                members: {
                    TargetGroups: {
                        type: "list",
                        member: {
                            shape: "S96"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBProxyTargets: {
            input: {
                type: "structure",
                required: [ "DBProxyName" ],
                members: {
                    DBProxyName: {},
                    TargetGroupName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBProxyTargetsResult",
                type: "structure",
                members: {
                    Targets: {
                        shape: "S9a"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBSecurityGroups: {
            input: {
                type: "structure",
                members: {
                    DBSecurityGroupName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBSecurityGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBSecurityGroups: {
                        type: "list",
                        member: {
                            shape: "Sl",
                            locationName: "DBSecurityGroup"
                        }
                    }
                }
            }
        },
        DescribeDBSnapshotAttributes: {
            input: {
                type: "structure",
                required: [ "DBSnapshotIdentifier" ],
                members: {
                    DBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBSnapshotAttributesResult",
                type: "structure",
                members: {
                    DBSnapshotAttributesResult: {
                        shape: "S9m"
                    }
                }
            }
        },
        DescribeDBSnapshotTenantDatabases: {
            input: {
                type: "structure",
                members: {
                    DBInstanceIdentifier: {},
                    DBSnapshotIdentifier: {},
                    SnapshotType: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    DbiResourceId: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBSnapshotTenantDatabasesResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBSnapshotTenantDatabases: {
                        type: "list",
                        member: {
                            locationName: "DBSnapshotTenantDatabase",
                            type: "structure",
                            members: {
                                DBSnapshotIdentifier: {},
                                DBInstanceIdentifier: {},
                                DbiResourceId: {},
                                EngineName: {},
                                SnapshotType: {},
                                TenantDatabaseCreateTime: {
                                    type: "timestamp"
                                },
                                TenantDBName: {},
                                MasterUsername: {},
                                TenantDatabaseResourceId: {},
                                CharacterSetName: {},
                                DBSnapshotTenantDatabaseARN: {},
                                NcharCharacterSetName: {},
                                TagList: {
                                    shape: "Sb"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeDBSnapshots: {
            input: {
                type: "structure",
                members: {
                    DBInstanceIdentifier: {},
                    DBSnapshotIdentifier: {},
                    SnapshotType: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    IncludeShared: {
                        type: "boolean"
                    },
                    IncludePublic: {
                        type: "boolean"
                    },
                    DbiResourceId: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBSnapshotsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBSnapshots: {
                        type: "list",
                        member: {
                            shape: "S1a",
                            locationName: "DBSnapshot"
                        }
                    }
                }
            }
        },
        DescribeDBSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    DBSubnetGroupName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBSubnetGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBSubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S3z",
                            locationName: "DBSubnetGroup"
                        }
                    }
                }
            }
        },
        DescribeEngineDefaultClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupFamily" ],
                members: {
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEngineDefaultClusterParametersResult",
                type: "structure",
                members: {
                    EngineDefaults: {
                        shape: "Sa1"
                    }
                }
            }
        },
        DescribeEngineDefaultParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupFamily" ],
                members: {
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEngineDefaultParametersResult",
                type: "structure",
                members: {
                    EngineDefaults: {
                        shape: "Sa1"
                    }
                }
            }
        },
        DescribeEventCategories: {
            input: {
                type: "structure",
                members: {
                    SourceType: {},
                    Filters: {
                        shape: "S7c"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeEventCategoriesResult",
                type: "structure",
                members: {
                    EventCategoriesMapList: {
                        type: "list",
                        member: {
                            locationName: "EventCategoriesMap",
                            type: "structure",
                            members: {
                                SourceType: {},
                                EventCategories: {
                                    shape: "S8"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeEventSubscriptions: {
            input: {
                type: "structure",
                members: {
                    SubscriptionName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventSubscriptionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    EventSubscriptionsList: {
                        type: "list",
                        member: {
                            shape: "S6",
                            locationName: "EventSubscription"
                        }
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceIdentifier: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    EventCategories: {
                        shape: "S8"
                    },
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Events: {
                        type: "list",
                        member: {
                            locationName: "Event",
                            type: "structure",
                            members: {
                                SourceIdentifier: {},
                                SourceType: {},
                                Message: {},
                                EventCategories: {
                                    shape: "S8"
                                },
                                Date: {
                                    type: "timestamp"
                                },
                                SourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeExportTasks: {
            input: {
                type: "structure",
                members: {
                    ExportTaskIdentifier: {},
                    SourceArn: {},
                    Filters: {
                        shape: "S7c"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    SourceType: {}
                }
            },
            output: {
                resultWrapper: "DescribeExportTasksResult",
                type: "structure",
                members: {
                    Marker: {},
                    ExportTasks: {
                        type: "list",
                        member: {
                            shape: "Su",
                            locationName: "ExportTask"
                        }
                    }
                }
            }
        },
        DescribeGlobalClusters: {
            input: {
                type: "structure",
                members: {
                    GlobalClusterIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeGlobalClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    GlobalClusters: {
                        type: "list",
                        member: {
                            shape: "S5g",
                            locationName: "GlobalClusterMember"
                        }
                    }
                }
            }
        },
        DescribeIntegrations: {
            input: {
                type: "structure",
                members: {
                    IntegrationIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeIntegrationsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Integrations: {
                        type: "list",
                        member: {
                            shape: "S5s",
                            locationName: "Integration"
                        }
                    }
                }
            }
        },
        DescribeOptionGroupOptions: {
            input: {
                type: "structure",
                required: [ "EngineName" ],
                members: {
                    EngineName: {},
                    MajorEngineVersion: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeOptionGroupOptionsResult",
                type: "structure",
                members: {
                    OptionGroupOptions: {
                        type: "list",
                        member: {
                            locationName: "OptionGroupOption",
                            type: "structure",
                            members: {
                                Name: {},
                                Description: {},
                                EngineName: {},
                                MajorEngineVersion: {},
                                MinimumRequiredMinorEngineVersion: {},
                                PortRequired: {
                                    type: "boolean"
                                },
                                DefaultPort: {
                                    type: "integer"
                                },
                                OptionsDependedOn: {
                                    type: "list",
                                    member: {
                                        locationName: "OptionName"
                                    }
                                },
                                OptionsConflictsWith: {
                                    type: "list",
                                    member: {
                                        locationName: "OptionConflictName"
                                    }
                                },
                                Persistent: {
                                    type: "boolean"
                                },
                                Permanent: {
                                    type: "boolean"
                                },
                                RequiresAutoMinorEngineVersionUpgrade: {
                                    type: "boolean"
                                },
                                VpcOnly: {
                                    type: "boolean"
                                },
                                SupportsOptionVersionDowngrade: {
                                    type: "boolean"
                                },
                                OptionGroupOptionSettings: {
                                    type: "list",
                                    member: {
                                        locationName: "OptionGroupOptionSetting",
                                        type: "structure",
                                        members: {
                                            SettingName: {},
                                            SettingDescription: {},
                                            DefaultValue: {},
                                            ApplyType: {},
                                            AllowedValues: {},
                                            IsModifiable: {
                                                type: "boolean"
                                            },
                                            IsRequired: {
                                                type: "boolean"
                                            },
                                            MinimumEngineVersionPerAllowedValue: {
                                                type: "list",
                                                member: {
                                                    locationName: "MinimumEngineVersionPerAllowedValue",
                                                    type: "structure",
                                                    members: {
                                                        AllowedValue: {},
                                                        MinimumEngineVersion: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                OptionGroupOptionVersions: {
                                    type: "list",
                                    member: {
                                        locationName: "OptionVersion",
                                        type: "structure",
                                        members: {
                                            Version: {},
                                            IsDefault: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                CopyableCrossAccount: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeOptionGroups: {
            input: {
                type: "structure",
                members: {
                    OptionGroupName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    EngineName: {},
                    MajorEngineVersion: {}
                }
            },
            output: {
                resultWrapper: "DescribeOptionGroupsResult",
                type: "structure",
                members: {
                    OptionGroupsList: {
                        type: "list",
                        member: {
                            shape: "S1g",
                            locationName: "OptionGroup"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeOrderableDBInstanceOptions: {
            input: {
                type: "structure",
                required: [ "Engine" ],
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBInstanceClass: {},
                    LicenseModel: {},
                    AvailabilityZoneGroup: {},
                    Vpc: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeOrderableDBInstanceOptionsResult",
                type: "structure",
                members: {
                    OrderableDBInstanceOptions: {
                        type: "list",
                        member: {
                            locationName: "OrderableDBInstanceOption",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                DBInstanceClass: {},
                                LicenseModel: {},
                                AvailabilityZoneGroup: {},
                                AvailabilityZones: {
                                    type: "list",
                                    member: {
                                        shape: "S42",
                                        locationName: "AvailabilityZone"
                                    }
                                },
                                MultiAZCapable: {
                                    type: "boolean"
                                },
                                ReadReplicaCapable: {
                                    type: "boolean"
                                },
                                Vpc: {
                                    type: "boolean"
                                },
                                SupportsStorageEncryption: {
                                    type: "boolean"
                                },
                                StorageType: {},
                                SupportsIops: {
                                    type: "boolean"
                                },
                                SupportsEnhancedMonitoring: {
                                    type: "boolean"
                                },
                                SupportsIAMDatabaseAuthentication: {
                                    type: "boolean"
                                },
                                SupportsPerformanceInsights: {
                                    type: "boolean"
                                },
                                MinStorageSize: {
                                    type: "integer"
                                },
                                MaxStorageSize: {
                                    type: "integer"
                                },
                                MinIopsPerDbInstance: {
                                    type: "integer"
                                },
                                MaxIopsPerDbInstance: {
                                    type: "integer"
                                },
                                MinIopsPerGib: {
                                    type: "double"
                                },
                                MaxIopsPerGib: {
                                    type: "double"
                                },
                                AvailableProcessorFeatures: {
                                    shape: "Sba"
                                },
                                SupportedEngineModes: {
                                    shape: "S2m"
                                },
                                SupportsStorageAutoscaling: {
                                    type: "boolean"
                                },
                                SupportsKerberosAuthentication: {
                                    type: "boolean"
                                },
                                OutpostCapable: {
                                    type: "boolean"
                                },
                                SupportedActivityStreamModes: {
                                    type: "list",
                                    member: {}
                                },
                                SupportsGlobalDatabases: {
                                    type: "boolean"
                                },
                                SupportsClusters: {
                                    type: "boolean"
                                },
                                SupportedNetworkTypes: {
                                    shape: "Sv"
                                },
                                SupportsStorageThroughput: {
                                    type: "boolean"
                                },
                                MinStorageThroughputPerDbInstance: {
                                    type: "integer"
                                },
                                MaxStorageThroughputPerDbInstance: {
                                    type: "integer"
                                },
                                MinStorageThroughputPerIops: {
                                    type: "double"
                                },
                                MaxStorageThroughputPerIops: {
                                    type: "double"
                                },
                                SupportsDedicatedLogVolume: {
                                    type: "boolean"
                                }
                            },
                            wrapper: true
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribePendingMaintenanceActions: {
            input: {
                type: "structure",
                members: {
                    ResourceIdentifier: {},
                    Filters: {
                        shape: "S7c"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribePendingMaintenanceActionsResult",
                type: "structure",
                members: {
                    PendingMaintenanceActions: {
                        type: "list",
                        member: {
                            shape: "Sf",
                            locationName: "ResourcePendingMaintenanceActions"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeReservedDBInstances: {
            input: {
                type: "structure",
                members: {
                    ReservedDBInstanceId: {},
                    ReservedDBInstancesOfferingId: {},
                    DBInstanceClass: {},
                    Duration: {},
                    ProductDescription: {},
                    OfferingType: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    LeaseId: {},
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeReservedDBInstancesResult",
                type: "structure",
                members: {
                    Marker: {},
                    ReservedDBInstances: {
                        type: "list",
                        member: {
                            shape: "Sbj",
                            locationName: "ReservedDBInstance"
                        }
                    }
                }
            }
        },
        DescribeReservedDBInstancesOfferings: {
            input: {
                type: "structure",
                members: {
                    ReservedDBInstancesOfferingId: {},
                    DBInstanceClass: {},
                    Duration: {},
                    ProductDescription: {},
                    OfferingType: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S7c"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeReservedDBInstancesOfferingsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ReservedDBInstancesOfferings: {
                        type: "list",
                        member: {
                            locationName: "ReservedDBInstancesOffering",
                            type: "structure",
                            members: {
                                ReservedDBInstancesOfferingId: {},
                                DBInstanceClass: {},
                                Duration: {
                                    type: "integer"
                                },
                                FixedPrice: {
                                    type: "double"
                                },
                                UsagePrice: {
                                    type: "double"
                                },
                                CurrencyCode: {},
                                ProductDescription: {},
                                OfferingType: {},
                                MultiAZ: {
                                    type: "boolean"
                                },
                                RecurringCharges: {
                                    shape: "Sbl"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeSourceRegions: {
            input: {
                type: "structure",
                members: {
                    RegionName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    Filters: {
                        shape: "S7c"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeSourceRegionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    SourceRegions: {
                        type: "list",
                        member: {
                            locationName: "SourceRegion",
                            type: "structure",
                            members: {
                                RegionName: {},
                                Endpoint: {},
                                Status: {},
                                SupportsDBInstanceAutomatedBackupsReplication: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTenantDatabases: {
            input: {
                type: "structure",
                members: {
                    DBInstanceIdentifier: {},
                    TenantDBName: {},
                    Filters: {
                        shape: "S7c"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTenantDatabasesResult",
                type: "structure",
                members: {
                    Marker: {},
                    TenantDatabases: {
                        type: "list",
                        member: {
                            shape: "S62",
                            locationName: "TenantDatabase"
                        }
                    }
                }
            }
        },
        DescribeValidDBInstanceModifications: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DescribeValidDBInstanceModificationsResult",
                type: "structure",
                members: {
                    ValidDBInstanceModificationsMessage: {
                        type: "structure",
                        members: {
                            Storage: {
                                type: "list",
                                member: {
                                    locationName: "ValidStorageOptions",
                                    type: "structure",
                                    members: {
                                        StorageType: {},
                                        StorageSize: {
                                            shape: "Sc3"
                                        },
                                        ProvisionedIops: {
                                            shape: "Sc3"
                                        },
                                        IopsToStorageRatio: {
                                            shape: "Sc5"
                                        },
                                        SupportsStorageAutoscaling: {
                                            type: "boolean"
                                        },
                                        ProvisionedStorageThroughput: {
                                            shape: "Sc3"
                                        },
                                        StorageThroughputToIopsRatio: {
                                            shape: "Sc5"
                                        }
                                    }
                                }
                            },
                            ValidProcessorFeatures: {
                                shape: "Sba"
                            },
                            SupportsDedicatedLogVolume: {
                                type: "boolean"
                            }
                        },
                        wrapper: true
                    }
                }
            }
        },
        DownloadDBLogFilePortion: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "LogFileName" ],
                members: {
                    DBInstanceIdentifier: {},
                    LogFileName: {},
                    Marker: {},
                    NumberOfLines: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DownloadDBLogFilePortionResult",
                type: "structure",
                members: {
                    LogFileData: {},
                    Marker: {},
                    AdditionalDataPending: {
                        type: "boolean"
                    }
                }
            }
        },
        FailoverDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    TargetDBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "FailoverDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        FailoverGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier", "TargetDbClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    TargetDbClusterIdentifier: {},
                    AllowDataLoss: {
                        type: "boolean"
                    },
                    Switchover: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "FailoverGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S5g"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceName" ],
                members: {
                    ResourceName: {},
                    Filters: {
                        shape: "S7c"
                    }
                }
            },
            output: {
                resultWrapper: "ListTagsForResourceResult",
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sb"
                    }
                }
            }
        },
        ModifyActivityStream: {
            input: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    AuditPolicyState: {}
                }
            },
            output: {
                resultWrapper: "ModifyActivityStreamResult",
                type: "structure",
                members: {
                    KmsKeyId: {},
                    KinesisStreamName: {},
                    Status: {},
                    Mode: {},
                    EngineNativeAuditFieldsIncluded: {
                        type: "boolean"
                    },
                    PolicyStatus: {}
                }
            }
        },
        ModifyCertificates: {
            input: {
                type: "structure",
                members: {
                    CertificateIdentifier: {},
                    RemoveCustomerOverride: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyCertificatesResult",
                type: "structure",
                members: {
                    Certificate: {
                        shape: "S7l"
                    }
                }
            }
        },
        ModifyCurrentDBClusterCapacity: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    Capacity: {
                        type: "integer"
                    },
                    SecondsBeforeTimeout: {
                        type: "integer"
                    },
                    TimeoutAction: {}
                }
            },
            output: {
                resultWrapper: "ModifyCurrentDBClusterCapacityResult",
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    PendingCapacity: {
                        type: "integer"
                    },
                    CurrentCapacity: {
                        type: "integer"
                    },
                    SecondsBeforeTimeout: {
                        type: "integer"
                    },
                    TimeoutAction: {}
                }
            }
        },
        ModifyCustomDBEngineVersion: {
            input: {
                type: "structure",
                required: [ "Engine", "EngineVersion" ],
                members: {
                    Engine: {},
                    EngineVersion: {},
                    Description: {},
                    Status: {}
                }
            },
            output: {
                shape: "S2g",
                resultWrapper: "ModifyCustomDBEngineVersionResult"
            }
        },
        ModifyDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    NewDBClusterIdentifier: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    Port: {
                        type: "integer"
                    },
                    MasterUserPassword: {},
                    OptionGroupName: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    BacktrackWindow: {
                        type: "long"
                    },
                    CloudwatchLogsExportConfiguration: {
                        shape: "Scr"
                    },
                    EngineVersion: {},
                    AllowMajorVersionUpgrade: {
                        type: "boolean"
                    },
                    DBInstanceParameterGroupName: {},
                    Domain: {},
                    DomainIAMRoleName: {},
                    ScalingConfiguration: {
                        shape: "S2v"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    EnableHttpEndpoint: {
                        type: "boolean"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    EnableGlobalWriteForwarding: {
                        type: "boolean"
                    },
                    DBClusterInstanceClass: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    StorageType: {},
                    Iops: {
                        type: "integer"
                    },
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    MonitoringRoleArn: {},
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    PerformanceInsightsRetentionPeriod: {
                        type: "integer"
                    },
                    ServerlessV2ScalingConfiguration: {
                        shape: "S2y"
                    },
                    NetworkType: {},
                    ManageMasterUserPassword: {
                        type: "boolean"
                    },
                    RotateMasterUserPassword: {
                        type: "boolean"
                    },
                    MasterUserSecretKmsKeyId: {},
                    EngineMode: {},
                    AllowEngineModeChange: {
                        type: "boolean"
                    },
                    EnableLocalWriteForwarding: {
                        type: "boolean"
                    },
                    AwsBackupRecoveryPointArn: {}
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        ModifyDBClusterEndpoint: {
            input: {
                type: "structure",
                required: [ "DBClusterEndpointIdentifier" ],
                members: {
                    DBClusterEndpointIdentifier: {},
                    EndpointType: {},
                    StaticMembers: {
                        shape: "Sv"
                    },
                    ExcludedMembers: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                shape: "S3n",
                resultWrapper: "ModifyDBClusterEndpointResult"
            }
        },
        ModifyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "Parameters" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Parameters: {
                        shape: "S80"
                    }
                }
            },
            output: {
                shape: "Scw",
                resultWrapper: "ModifyDBClusterParameterGroupResult"
            }
        },
        ModifyDBClusterSnapshotAttribute: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "AttributeName" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    AttributeName: {},
                    ValuesToAdd: {
                        shape: "S88"
                    },
                    ValuesToRemove: {
                        shape: "S88"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterSnapshotAttributeResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S85"
                    }
                }
            }
        },
        ModifyDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    DBInstanceClass: {},
                    DBSubnetGroupName: {},
                    DBSecurityGroups: {
                        shape: "S3t"
                    },
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    MasterUserPassword: {},
                    DBParameterGroupName: {},
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AllowMajorVersionUpgrade: {
                        type: "boolean"
                    },
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    LicenseModel: {},
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    NewDBInstanceIdentifier: {},
                    StorageType: {},
                    TdeCredentialArn: {},
                    TdeCredentialPassword: {},
                    CACertificateIdentifier: {},
                    Domain: {},
                    DomainFqdn: {},
                    DomainOu: {},
                    DomainAuthSecretArn: {},
                    DomainDnsIps: {
                        shape: "Sv"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    DBPortNumber: {
                        type: "integer"
                    },
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    MonitoringRoleArn: {},
                    DomainIAMRoleName: {},
                    DisableDomain: {
                        type: "boolean"
                    },
                    PromotionTier: {
                        type: "integer"
                    },
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    PerformanceInsightsRetentionPeriod: {
                        type: "integer"
                    },
                    CloudwatchLogsExportConfiguration: {
                        shape: "Scr"
                    },
                    ProcessorFeatures: {
                        shape: "S1c"
                    },
                    UseDefaultProcessorFeatures: {
                        type: "boolean"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    MaxAllocatedStorage: {
                        type: "integer"
                    },
                    CertificateRotationRestart: {
                        type: "boolean"
                    },
                    ReplicaMode: {},
                    EnableCustomerOwnedIp: {
                        type: "boolean"
                    },
                    AwsBackupRecoveryPointArn: {},
                    AutomationMode: {},
                    ResumeFullAutomationModeMinutes: {
                        type: "integer"
                    },
                    NetworkType: {},
                    StorageThroughput: {
                        type: "integer"
                    },
                    ManageMasterUserPassword: {
                        type: "boolean"
                    },
                    RotateMasterUserPassword: {
                        type: "boolean"
                    },
                    MasterUserSecretKmsKeyId: {},
                    Engine: {},
                    DedicatedLogVolume: {
                        type: "boolean"
                    },
                    MultiTenant: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        ModifyDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName", "Parameters" ],
                members: {
                    DBParameterGroupName: {},
                    Parameters: {
                        shape: "S80"
                    }
                }
            },
            output: {
                shape: "Sd2",
                resultWrapper: "ModifyDBParameterGroupResult"
            }
        },
        ModifyDBProxy: {
            input: {
                type: "structure",
                required: [ "DBProxyName" ],
                members: {
                    DBProxyName: {},
                    NewDBProxyName: {},
                    Auth: {
                        shape: "S4o"
                    },
                    RequireTLS: {
                        type: "boolean"
                    },
                    IdleClientTimeout: {
                        type: "integer"
                    },
                    DebugLogging: {
                        type: "boolean"
                    },
                    RoleArn: {},
                    SecurityGroups: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBProxyResult",
                type: "structure",
                members: {
                    DBProxy: {
                        shape: "S4u"
                    }
                }
            }
        },
        ModifyDBProxyEndpoint: {
            input: {
                type: "structure",
                required: [ "DBProxyEndpointName" ],
                members: {
                    DBProxyEndpointName: {},
                    NewDBProxyEndpointName: {},
                    VpcSecurityGroupIds: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBProxyEndpointResult",
                type: "structure",
                members: {
                    DBProxyEndpoint: {
                        shape: "S53"
                    }
                }
            }
        },
        ModifyDBProxyTargetGroup: {
            input: {
                type: "structure",
                required: [ "TargetGroupName", "DBProxyName" ],
                members: {
                    TargetGroupName: {},
                    DBProxyName: {},
                    ConnectionPoolConfig: {
                        type: "structure",
                        members: {
                            MaxConnectionsPercent: {
                                type: "integer"
                            },
                            MaxIdleConnectionsPercent: {
                                type: "integer"
                            },
                            ConnectionBorrowTimeout: {
                                type: "integer"
                            },
                            SessionPinningFilters: {
                                shape: "Sv"
                            },
                            InitQuery: {}
                        }
                    },
                    NewName: {}
                }
            },
            output: {
                resultWrapper: "ModifyDBProxyTargetGroupResult",
                type: "structure",
                members: {
                    DBProxyTargetGroup: {
                        shape: "S96"
                    }
                }
            }
        },
        ModifyDBSnapshot: {
            input: {
                type: "structure",
                required: [ "DBSnapshotIdentifier" ],
                members: {
                    DBSnapshotIdentifier: {},
                    EngineVersion: {},
                    OptionGroupName: {}
                }
            },
            output: {
                resultWrapper: "ModifyDBSnapshotResult",
                type: "structure",
                members: {
                    DBSnapshot: {
                        shape: "S1a"
                    }
                }
            }
        },
        ModifyDBSnapshotAttribute: {
            input: {
                type: "structure",
                required: [ "DBSnapshotIdentifier", "AttributeName" ],
                members: {
                    DBSnapshotIdentifier: {},
                    AttributeName: {},
                    ValuesToAdd: {
                        shape: "S88"
                    },
                    ValuesToRemove: {
                        shape: "S88"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBSnapshotAttributeResult",
                type: "structure",
                members: {
                    DBSnapshotAttributesResult: {
                        shape: "S9m"
                    }
                }
            }
        },
        ModifyDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S5a"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S3z"
                    }
                }
            }
        },
        ModifyEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S8"
                    },
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S6"
                    }
                }
            }
        },
        ModifyGlobalCluster: {
            input: {
                type: "structure",
                members: {
                    GlobalClusterIdentifier: {},
                    NewGlobalClusterIdentifier: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AllowMajorVersionUpgrade: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S5g"
                    }
                }
            }
        },
        ModifyOptionGroup: {
            input: {
                type: "structure",
                required: [ "OptionGroupName" ],
                members: {
                    OptionGroupName: {},
                    OptionsToInclude: {
                        type: "list",
                        member: {
                            locationName: "OptionConfiguration",
                            type: "structure",
                            required: [ "OptionName" ],
                            members: {
                                OptionName: {},
                                Port: {
                                    type: "integer"
                                },
                                OptionVersion: {},
                                DBSecurityGroupMemberships: {
                                    shape: "S3t"
                                },
                                VpcSecurityGroupMemberships: {
                                    shape: "S2t"
                                },
                                OptionSettings: {
                                    type: "list",
                                    member: {
                                        shape: "S1k",
                                        locationName: "OptionSetting"
                                    }
                                }
                            }
                        }
                    },
                    OptionsToRemove: {
                        type: "list",
                        member: {}
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyOptionGroupResult",
                type: "structure",
                members: {
                    OptionGroup: {
                        shape: "S1g"
                    }
                }
            }
        },
        ModifyTenantDatabase: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "TenantDBName" ],
                members: {
                    DBInstanceIdentifier: {},
                    TenantDBName: {},
                    MasterUserPassword: {
                        shape: "S60"
                    },
                    NewTenantDBName: {}
                }
            },
            output: {
                resultWrapper: "ModifyTenantDatabaseResult",
                type: "structure",
                members: {
                    TenantDatabase: {
                        shape: "S62"
                    }
                }
            }
        },
        PromoteReadReplica: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    PreferredBackupWindow: {}
                }
            },
            output: {
                resultWrapper: "PromoteReadReplicaResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        PromoteReadReplicaDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "PromoteReadReplicaDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        PurchaseReservedDBInstancesOffering: {
            input: {
                type: "structure",
                required: [ "ReservedDBInstancesOfferingId" ],
                members: {
                    ReservedDBInstancesOfferingId: {},
                    ReservedDBInstanceId: {},
                    DBInstanceCount: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                resultWrapper: "PurchaseReservedDBInstancesOfferingResult",
                type: "structure",
                members: {
                    ReservedDBInstance: {
                        shape: "Sbj"
                    }
                }
            }
        },
        RebootDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RebootDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        RebootDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    ForceFailover: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RebootDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        RegisterDBProxyTargets: {
            input: {
                type: "structure",
                required: [ "DBProxyName" ],
                members: {
                    DBProxyName: {},
                    TargetGroupName: {},
                    DBInstanceIdentifiers: {
                        shape: "Sv"
                    },
                    DBClusterIdentifiers: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                resultWrapper: "RegisterDBProxyTargetsResult",
                type: "structure",
                members: {
                    DBProxyTargets: {
                        shape: "S9a"
                    }
                }
            }
        },
        RemoveFromGlobalCluster: {
            input: {
                type: "structure",
                members: {
                    GlobalClusterIdentifier: {},
                    DbClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RemoveFromGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S5g"
                    }
                }
            }
        },
        RemoveRoleFromDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "RoleArn" ],
                members: {
                    DBClusterIdentifier: {},
                    RoleArn: {},
                    FeatureName: {}
                }
            }
        },
        RemoveRoleFromDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "RoleArn", "FeatureName" ],
                members: {
                    DBInstanceIdentifier: {},
                    RoleArn: {},
                    FeatureName: {}
                }
            }
        },
        RemoveSourceIdentifierFromSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RemoveSourceIdentifierFromSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S6"
                    }
                }
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "TagKeys" ],
                members: {
                    ResourceName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ResetDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S80"
                    }
                }
            },
            output: {
                shape: "Scw",
                resultWrapper: "ResetDBClusterParameterGroupResult"
            }
        },
        ResetDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName" ],
                members: {
                    DBParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S80"
                    }
                }
            },
            output: {
                shape: "Sd2",
                resultWrapper: "ResetDBParameterGroupResult"
            }
        },
        RestoreDBClusterFromS3: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "Engine", "MasterUsername", "SourceEngine", "SourceEngineVersion", "S3BucketName", "S3IngestionRoleArn" ],
                members: {
                    AvailabilityZones: {
                        shape: "S14"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    CharacterSetName: {},
                    DatabaseName: {},
                    DBClusterIdentifier: {},
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    DBSubnetGroupName: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    MasterUsername: {},
                    MasterUserPassword: {},
                    OptionGroupName: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    Tags: {
                        shape: "Sb"
                    },
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    SourceEngine: {},
                    SourceEngineVersion: {},
                    S3BucketName: {},
                    S3Prefix: {},
                    S3IngestionRoleArn: {},
                    BacktrackWindow: {
                        type: "long"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "S2p"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    Domain: {},
                    DomainIAMRoleName: {},
                    ServerlessV2ScalingConfiguration: {
                        shape: "S2y"
                    },
                    NetworkType: {},
                    ManageMasterUserPassword: {
                        type: "boolean"
                    },
                    MasterUserSecretKmsKeyId: {},
                    StorageType: {}
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterFromS3Result",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        RestoreDBClusterFromSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "SnapshotIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "S14"
                    },
                    DBClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    DatabaseName: {},
                    OptionGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    KmsKeyId: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    BacktrackWindow: {
                        type: "long"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "S2p"
                    },
                    EngineMode: {},
                    ScalingConfiguration: {
                        shape: "S2v"
                    },
                    DBClusterParameterGroupName: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    Domain: {},
                    DomainIAMRoleName: {},
                    DBClusterInstanceClass: {},
                    StorageType: {},
                    Iops: {
                        type: "integer"
                    },
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    ServerlessV2ScalingConfiguration: {
                        shape: "S2y"
                    },
                    NetworkType: {},
                    RdsCustomClusterConfiguration: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterFromSnapshotResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        RestoreDBClusterToPointInTime: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    RestoreType: {},
                    SourceDBClusterIdentifier: {},
                    RestoreToTime: {
                        type: "timestamp"
                    },
                    UseLatestRestorableTime: {
                        type: "boolean"
                    },
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    OptionGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    KmsKeyId: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    BacktrackWindow: {
                        type: "long"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "S2p"
                    },
                    DBClusterParameterGroupName: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    Domain: {},
                    DomainIAMRoleName: {},
                    ScalingConfiguration: {
                        shape: "S2v"
                    },
                    EngineMode: {},
                    DBClusterInstanceClass: {},
                    StorageType: {},
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    Iops: {
                        type: "integer"
                    },
                    ServerlessV2ScalingConfiguration: {
                        shape: "S2y"
                    },
                    NetworkType: {},
                    SourceDbClusterResourceId: {},
                    RdsCustomClusterConfiguration: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterToPointInTimeResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        RestoreDBInstanceFromDBSnapshot: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    DBSnapshotIdentifier: {},
                    DBInstanceClass: {},
                    Port: {
                        type: "integer"
                    },
                    AvailabilityZone: {},
                    DBSubnetGroupName: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    LicenseModel: {},
                    DBName: {},
                    Engine: {},
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    Tags: {
                        shape: "Sb"
                    },
                    StorageType: {},
                    TdeCredentialArn: {},
                    TdeCredentialPassword: {},
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    Domain: {},
                    DomainFqdn: {},
                    DomainOu: {},
                    DomainAuthSecretArn: {},
                    DomainDnsIps: {
                        shape: "Sv"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    DomainIAMRoleName: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "S2p"
                    },
                    ProcessorFeatures: {
                        shape: "S1c"
                    },
                    UseDefaultProcessorFeatures: {
                        type: "boolean"
                    },
                    DBParameterGroupName: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    EnableCustomerOwnedIp: {
                        type: "boolean"
                    },
                    CustomIamInstanceProfile: {},
                    BackupTarget: {},
                    NetworkType: {},
                    StorageThroughput: {
                        type: "integer"
                    },
                    DBClusterSnapshotIdentifier: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    DedicatedLogVolume: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreDBInstanceFromDBSnapshotResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        RestoreDBInstanceFromS3: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "DBInstanceClass", "Engine", "SourceEngine", "SourceEngineVersion", "S3BucketName", "S3IngestionRoleArn" ],
                members: {
                    DBName: {},
                    DBInstanceIdentifier: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    DBInstanceClass: {},
                    Engine: {},
                    MasterUsername: {},
                    MasterUserPassword: {},
                    DBSecurityGroups: {
                        shape: "S3t"
                    },
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    AvailabilityZone: {},
                    DBSubnetGroupName: {},
                    PreferredMaintenanceWindow: {},
                    DBParameterGroupName: {},
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    PreferredBackupWindow: {},
                    Port: {
                        type: "integer"
                    },
                    MultiAZ: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    LicenseModel: {},
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    StorageType: {},
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    MonitoringRoleArn: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    SourceEngine: {},
                    SourceEngineVersion: {},
                    S3BucketName: {},
                    S3Prefix: {},
                    S3IngestionRoleArn: {},
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    PerformanceInsightsRetentionPeriod: {
                        type: "integer"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "S2p"
                    },
                    ProcessorFeatures: {
                        shape: "S1c"
                    },
                    UseDefaultProcessorFeatures: {
                        type: "boolean"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    MaxAllocatedStorage: {
                        type: "integer"
                    },
                    NetworkType: {},
                    StorageThroughput: {
                        type: "integer"
                    },
                    ManageMasterUserPassword: {
                        type: "boolean"
                    },
                    MasterUserSecretKmsKeyId: {},
                    DedicatedLogVolume: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreDBInstanceFromS3Result",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        RestoreDBInstanceToPointInTime: {
            input: {
                type: "structure",
                required: [ "TargetDBInstanceIdentifier" ],
                members: {
                    SourceDBInstanceIdentifier: {},
                    TargetDBInstanceIdentifier: {},
                    RestoreTime: {
                        type: "timestamp"
                    },
                    UseLatestRestorableTime: {
                        type: "boolean"
                    },
                    DBInstanceClass: {},
                    Port: {
                        type: "integer"
                    },
                    AvailabilityZone: {},
                    DBSubnetGroupName: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    LicenseModel: {},
                    DBName: {},
                    Engine: {},
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    StorageType: {},
                    TdeCredentialArn: {},
                    TdeCredentialPassword: {},
                    VpcSecurityGroupIds: {
                        shape: "S2t"
                    },
                    Domain: {},
                    DomainIAMRoleName: {},
                    DomainFqdn: {},
                    DomainOu: {},
                    DomainAuthSecretArn: {},
                    DomainDnsIps: {
                        shape: "Sv"
                    },
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "S2p"
                    },
                    ProcessorFeatures: {
                        shape: "S1c"
                    },
                    UseDefaultProcessorFeatures: {
                        type: "boolean"
                    },
                    DBParameterGroupName: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    SourceDbiResourceId: {},
                    MaxAllocatedStorage: {
                        type: "integer"
                    },
                    SourceDBInstanceAutomatedBackupsArn: {},
                    EnableCustomerOwnedIp: {
                        type: "boolean"
                    },
                    CustomIamInstanceProfile: {},
                    BackupTarget: {},
                    NetworkType: {},
                    StorageThroughput: {
                        type: "integer"
                    },
                    AllocatedStorage: {
                        type: "integer"
                    },
                    DedicatedLogVolume: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreDBInstanceToPointInTimeResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        RevokeDBSecurityGroupIngress: {
            input: {
                type: "structure",
                required: [ "DBSecurityGroupName" ],
                members: {
                    DBSecurityGroupName: {},
                    CIDRIP: {},
                    EC2SecurityGroupName: {},
                    EC2SecurityGroupId: {},
                    EC2SecurityGroupOwnerId: {}
                }
            },
            output: {
                resultWrapper: "RevokeDBSecurityGroupIngressResult",
                type: "structure",
                members: {
                    DBSecurityGroup: {
                        shape: "Sl"
                    }
                }
            }
        },
        StartActivityStream: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Mode", "KmsKeyId" ],
                members: {
                    ResourceArn: {},
                    Mode: {},
                    KmsKeyId: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    EngineNativeAuditFieldsIncluded: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "StartActivityStreamResult",
                type: "structure",
                members: {
                    KmsKeyId: {},
                    KinesisStreamName: {},
                    Status: {},
                    Mode: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    EngineNativeAuditFieldsIncluded: {
                        type: "boolean"
                    }
                }
            }
        },
        StartDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StartDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        StartDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StartDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        StartDBInstanceAutomatedBackupsReplication: {
            input: {
                type: "structure",
                required: [ "SourceDBInstanceArn" ],
                members: {
                    SourceDBInstanceArn: {},
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    KmsKeyId: {},
                    PreSignedUrl: {}
                }
            },
            output: {
                resultWrapper: "StartDBInstanceAutomatedBackupsReplicationResult",
                type: "structure",
                members: {
                    DBInstanceAutomatedBackup: {
                        shape: "S6l"
                    }
                }
            }
        },
        StartExportTask: {
            input: {
                type: "structure",
                required: [ "ExportTaskIdentifier", "SourceArn", "S3BucketName", "IamRoleArn", "KmsKeyId" ],
                members: {
                    ExportTaskIdentifier: {},
                    SourceArn: {},
                    S3BucketName: {},
                    IamRoleArn: {},
                    KmsKeyId: {},
                    S3Prefix: {},
                    ExportOnly: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                shape: "Su",
                resultWrapper: "StartExportTaskResult"
            }
        },
        StopActivityStream: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    ApplyImmediately: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "StopActivityStreamResult",
                type: "structure",
                members: {
                    KmsKeyId: {},
                    KinesisStreamName: {},
                    Status: {}
                }
            }
        },
        StopDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StopDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S31"
                    }
                }
            }
        },
        StopDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    DBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StopDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        },
        StopDBInstanceAutomatedBackupsReplication: {
            input: {
                type: "structure",
                required: [ "SourceDBInstanceArn" ],
                members: {
                    SourceDBInstanceArn: {}
                }
            },
            output: {
                resultWrapper: "StopDBInstanceAutomatedBackupsReplicationResult",
                type: "structure",
                members: {
                    DBInstanceAutomatedBackup: {
                        shape: "S6l"
                    }
                }
            }
        },
        SwitchoverBlueGreenDeployment: {
            input: {
                type: "structure",
                required: [ "BlueGreenDeploymentIdentifier" ],
                members: {
                    BlueGreenDeploymentIdentifier: {},
                    SwitchoverTimeout: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "SwitchoverBlueGreenDeploymentResult",
                type: "structure",
                members: {
                    BlueGreenDeployment: {
                        shape: "S1x"
                    }
                }
            }
        },
        SwitchoverGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier", "TargetDbClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    TargetDbClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "SwitchoverGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S5g"
                    }
                }
            }
        },
        SwitchoverReadReplica: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "SwitchoverReadReplicaResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S3v"
                    }
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                CustomerAwsId: {},
                CustSubscriptionId: {},
                SnsTopicArn: {},
                Status: {},
                SubscriptionCreationTime: {},
                SourceType: {},
                SourceIdsList: {
                    shape: "S7"
                },
                EventCategoriesList: {
                    shape: "S8"
                },
                Enabled: {
                    type: "boolean"
                },
                EventSubscriptionArn: {}
            },
            wrapper: true
        },
        S7: {
            type: "list",
            member: {
                locationName: "SourceId"
            }
        },
        S8: {
            type: "list",
            member: {
                locationName: "EventCategory"
            }
        },
        Sb: {
            type: "list",
            member: {
                locationName: "Tag",
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sf: {
            type: "structure",
            members: {
                ResourceIdentifier: {},
                PendingMaintenanceActionDetails: {
                    type: "list",
                    member: {
                        locationName: "PendingMaintenanceAction",
                        type: "structure",
                        members: {
                            Action: {},
                            AutoAppliedAfterDate: {
                                type: "timestamp"
                            },
                            ForcedApplyDate: {
                                type: "timestamp"
                            },
                            OptInStatus: {},
                            CurrentApplyDate: {
                                type: "timestamp"
                            },
                            Description: {}
                        }
                    }
                }
            },
            wrapper: true
        },
        Sl: {
            type: "structure",
            members: {
                OwnerId: {},
                DBSecurityGroupName: {},
                DBSecurityGroupDescription: {},
                VpcId: {},
                EC2SecurityGroups: {
                    type: "list",
                    member: {
                        locationName: "EC2SecurityGroup",
                        type: "structure",
                        members: {
                            Status: {},
                            EC2SecurityGroupName: {},
                            EC2SecurityGroupId: {},
                            EC2SecurityGroupOwnerId: {}
                        }
                    }
                },
                IPRanges: {
                    type: "list",
                    member: {
                        locationName: "IPRange",
                        type: "structure",
                        members: {
                            Status: {},
                            CIDRIP: {}
                        }
                    }
                },
                DBSecurityGroupArn: {}
            },
            wrapper: true
        },
        Ss: {
            type: "structure",
            members: {
                DBClusterIdentifier: {},
                BacktrackIdentifier: {},
                BacktrackTo: {
                    type: "timestamp"
                },
                BacktrackedFrom: {
                    type: "timestamp"
                },
                BacktrackRequestCreationTime: {
                    type: "timestamp"
                },
                Status: {}
            }
        },
        Su: {
            type: "structure",
            members: {
                ExportTaskIdentifier: {},
                SourceArn: {},
                ExportOnly: {
                    shape: "Sv"
                },
                SnapshotTime: {
                    type: "timestamp"
                },
                TaskStartTime: {
                    type: "timestamp"
                },
                TaskEndTime: {
                    type: "timestamp"
                },
                S3Bucket: {},
                S3Prefix: {},
                IamRoleArn: {},
                KmsKeyId: {},
                Status: {},
                PercentProgress: {
                    type: "integer"
                },
                TotalExtractedDataInGB: {
                    type: "integer"
                },
                FailureCause: {},
                WarningMessage: {},
                SourceType: {}
            }
        },
        Sv: {
            type: "list",
            member: {}
        },
        S10: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {},
                DBParameterGroupFamily: {},
                Description: {},
                DBClusterParameterGroupArn: {}
            },
            wrapper: true
        },
        S13: {
            type: "structure",
            members: {
                AvailabilityZones: {
                    shape: "S14"
                },
                DBClusterSnapshotIdentifier: {},
                DBClusterIdentifier: {},
                SnapshotCreateTime: {
                    type: "timestamp"
                },
                Engine: {},
                EngineMode: {},
                AllocatedStorage: {
                    type: "integer"
                },
                Status: {},
                Port: {
                    type: "integer"
                },
                VpcId: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                MasterUsername: {},
                EngineVersion: {},
                LicenseModel: {},
                SnapshotType: {},
                PercentProgress: {
                    type: "integer"
                },
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DBClusterSnapshotArn: {},
                SourceDBClusterSnapshotArn: {},
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                TagList: {
                    shape: "Sb"
                },
                DBSystemId: {},
                StorageType: {},
                DbClusterResourceId: {}
            },
            wrapper: true
        },
        S14: {
            type: "list",
            member: {
                locationName: "AvailabilityZone"
            }
        },
        S17: {
            type: "structure",
            members: {
                DBParameterGroupName: {},
                DBParameterGroupFamily: {},
                Description: {},
                DBParameterGroupArn: {}
            },
            wrapper: true
        },
        S1a: {
            type: "structure",
            members: {
                DBSnapshotIdentifier: {},
                DBInstanceIdentifier: {},
                SnapshotCreateTime: {
                    type: "timestamp"
                },
                Engine: {},
                AllocatedStorage: {
                    type: "integer"
                },
                Status: {},
                Port: {
                    type: "integer"
                },
                AvailabilityZone: {},
                VpcId: {},
                InstanceCreateTime: {
                    type: "timestamp"
                },
                MasterUsername: {},
                EngineVersion: {},
                LicenseModel: {},
                SnapshotType: {},
                Iops: {
                    type: "integer"
                },
                OptionGroupName: {},
                PercentProgress: {
                    type: "integer"
                },
                SourceRegion: {},
                SourceDBSnapshotIdentifier: {},
                StorageType: {},
                TdeCredentialArn: {},
                Encrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DBSnapshotArn: {},
                Timezone: {},
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                ProcessorFeatures: {
                    shape: "S1c"
                },
                DbiResourceId: {},
                TagList: {
                    shape: "Sb"
                },
                OriginalSnapshotCreateTime: {
                    type: "timestamp"
                },
                SnapshotDatabaseTime: {
                    type: "timestamp"
                },
                SnapshotTarget: {},
                StorageThroughput: {
                    type: "integer"
                },
                DBSystemId: {},
                DedicatedLogVolume: {
                    type: "boolean"
                },
                MultiTenant: {
                    type: "boolean"
                }
            },
            wrapper: true
        },
        S1c: {
            type: "list",
            member: {
                locationName: "ProcessorFeature",
                type: "structure",
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S1g: {
            type: "structure",
            members: {
                OptionGroupName: {},
                OptionGroupDescription: {},
                EngineName: {},
                MajorEngineVersion: {},
                Options: {
                    type: "list",
                    member: {
                        locationName: "Option",
                        type: "structure",
                        members: {
                            OptionName: {},
                            OptionDescription: {},
                            Persistent: {
                                type: "boolean"
                            },
                            Permanent: {
                                type: "boolean"
                            },
                            Port: {
                                type: "integer"
                            },
                            OptionVersion: {},
                            OptionSettings: {
                                type: "list",
                                member: {
                                    shape: "S1k",
                                    locationName: "OptionSetting"
                                }
                            },
                            DBSecurityGroupMemberships: {
                                shape: "S1l"
                            },
                            VpcSecurityGroupMemberships: {
                                shape: "S1n"
                            }
                        }
                    }
                },
                AllowsVpcAndNonVpcInstanceMemberships: {
                    type: "boolean"
                },
                VpcId: {},
                OptionGroupArn: {},
                SourceOptionGroup: {},
                SourceAccountId: {},
                CopyTimestamp: {
                    type: "timestamp"
                }
            },
            wrapper: true
        },
        S1k: {
            type: "structure",
            members: {
                Name: {},
                Value: {},
                DefaultValue: {},
                Description: {},
                ApplyType: {},
                DataType: {},
                AllowedValues: {},
                IsModifiable: {
                    type: "boolean"
                },
                IsCollection: {
                    type: "boolean"
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                locationName: "DBSecurityGroup",
                type: "structure",
                members: {
                    DBSecurityGroupName: {},
                    Status: {}
                }
            }
        },
        S1n: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupMembership",
                type: "structure",
                members: {
                    VpcSecurityGroupId: {},
                    Status: {}
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                BlueGreenDeploymentIdentifier: {},
                BlueGreenDeploymentName: {},
                Source: {},
                Target: {},
                SwitchoverDetails: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SourceMember: {},
                            TargetMember: {},
                            Status: {}
                        }
                    }
                },
                Tasks: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            Status: {}
                        }
                    }
                },
                Status: {},
                StatusDetails: {},
                CreateTime: {
                    type: "timestamp"
                },
                DeleteTime: {
                    type: "timestamp"
                },
                TagList: {
                    shape: "Sb"
                }
            }
        },
        S2g: {
            type: "structure",
            members: {
                Engine: {},
                EngineVersion: {},
                DBParameterGroupFamily: {},
                DBEngineDescription: {},
                DBEngineVersionDescription: {},
                DefaultCharacterSet: {
                    shape: "S2h"
                },
                Image: {
                    type: "structure",
                    members: {
                        ImageId: {},
                        Status: {}
                    }
                },
                DBEngineMediaType: {},
                SupportedCharacterSets: {
                    shape: "S2j"
                },
                SupportedNcharCharacterSets: {
                    shape: "S2j"
                },
                ValidUpgradeTarget: {
                    type: "list",
                    member: {
                        locationName: "UpgradeTarget",
                        type: "structure",
                        members: {
                            Engine: {},
                            EngineVersion: {},
                            Description: {},
                            AutoUpgrade: {
                                type: "boolean"
                            },
                            IsMajorVersionUpgrade: {
                                type: "boolean"
                            },
                            SupportedEngineModes: {
                                shape: "S2m"
                            },
                            SupportsParallelQuery: {
                                type: "boolean"
                            },
                            SupportsGlobalDatabases: {
                                type: "boolean"
                            },
                            SupportsBabelfish: {
                                type: "boolean"
                            },
                            SupportsLocalWriteForwarding: {
                                type: "boolean"
                            },
                            SupportsIntegrations: {
                                type: "boolean"
                            }
                        }
                    }
                },
                SupportedTimezones: {
                    type: "list",
                    member: {
                        locationName: "Timezone",
                        type: "structure",
                        members: {
                            TimezoneName: {}
                        }
                    }
                },
                ExportableLogTypes: {
                    shape: "S2p"
                },
                SupportsLogExportsToCloudwatchLogs: {
                    type: "boolean"
                },
                SupportsReadReplica: {
                    type: "boolean"
                },
                SupportedEngineModes: {
                    shape: "S2m"
                },
                SupportedFeatureNames: {
                    type: "list",
                    member: {}
                },
                Status: {},
                SupportsParallelQuery: {
                    type: "boolean"
                },
                SupportsGlobalDatabases: {
                    type: "boolean"
                },
                MajorEngineVersion: {},
                DatabaseInstallationFilesS3BucketName: {},
                DatabaseInstallationFilesS3Prefix: {},
                DBEngineVersionArn: {},
                KMSKeyId: {},
                CreateTime: {
                    type: "timestamp"
                },
                TagList: {
                    shape: "Sb"
                },
                SupportsBabelfish: {
                    type: "boolean"
                },
                CustomDBEngineVersionManifest: {},
                SupportsCertificateRotationWithoutRestart: {
                    type: "boolean"
                },
                SupportedCACertificateIdentifiers: {
                    type: "list",
                    member: {}
                },
                SupportsLocalWriteForwarding: {
                    type: "boolean"
                },
                SupportsIntegrations: {
                    type: "boolean"
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                CharacterSetName: {},
                CharacterSetDescription: {}
            }
        },
        S2j: {
            type: "list",
            member: {
                shape: "S2h",
                locationName: "CharacterSet"
            }
        },
        S2m: {
            type: "list",
            member: {}
        },
        S2p: {
            type: "list",
            member: {}
        },
        S2t: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupId"
            }
        },
        S2v: {
            type: "structure",
            members: {
                MinCapacity: {
                    type: "integer"
                },
                MaxCapacity: {
                    type: "integer"
                },
                AutoPause: {
                    type: "boolean"
                },
                SecondsUntilAutoPause: {
                    type: "integer"
                },
                TimeoutAction: {},
                SecondsBeforeTimeout: {
                    type: "integer"
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                InterconnectSubnetId: {},
                TransitGatewayMulticastDomainId: {},
                ReplicaMode: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                MinCapacity: {
                    type: "double"
                },
                MaxCapacity: {
                    type: "double"
                }
            }
        },
        S31: {
            type: "structure",
            members: {
                AllocatedStorage: {
                    type: "integer"
                },
                AvailabilityZones: {
                    shape: "S14"
                },
                BackupRetentionPeriod: {
                    type: "integer"
                },
                CharacterSetName: {},
                DatabaseName: {},
                DBClusterIdentifier: {},
                DBClusterParameterGroup: {},
                DBSubnetGroup: {},
                Status: {},
                AutomaticRestartTime: {
                    type: "timestamp"
                },
                PercentProgress: {},
                EarliestRestorableTime: {
                    type: "timestamp"
                },
                Endpoint: {},
                ReaderEndpoint: {},
                CustomEndpoints: {
                    shape: "Sv"
                },
                MultiAZ: {
                    type: "boolean"
                },
                Engine: {},
                EngineVersion: {},
                LatestRestorableTime: {
                    type: "timestamp"
                },
                Port: {
                    type: "integer"
                },
                MasterUsername: {},
                DBClusterOptionGroupMemberships: {
                    type: "list",
                    member: {
                        locationName: "DBClusterOptionGroup",
                        type: "structure",
                        members: {
                            DBClusterOptionGroupName: {},
                            Status: {}
                        }
                    }
                },
                PreferredBackupWindow: {},
                PreferredMaintenanceWindow: {},
                ReplicationSourceIdentifier: {},
                ReadReplicaIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaIdentifier"
                    }
                },
                StatusInfos: {
                    type: "list",
                    member: {
                        locationName: "DBClusterStatusInfo",
                        type: "structure",
                        members: {
                            StatusType: {},
                            Normal: {
                                type: "boolean"
                            },
                            Status: {},
                            Message: {}
                        }
                    }
                },
                DBClusterMembers: {
                    type: "list",
                    member: {
                        locationName: "DBClusterMember",
                        type: "structure",
                        members: {
                            DBInstanceIdentifier: {},
                            IsClusterWriter: {
                                type: "boolean"
                            },
                            DBClusterParameterGroupStatus: {},
                            PromotionTier: {
                                type: "integer"
                            }
                        },
                        wrapper: true
                    }
                },
                VpcSecurityGroups: {
                    shape: "S1n"
                },
                HostedZoneId: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbClusterResourceId: {},
                DBClusterArn: {},
                AssociatedRoles: {
                    type: "list",
                    member: {
                        locationName: "DBClusterRole",
                        type: "structure",
                        members: {
                            RoleArn: {},
                            Status: {},
                            FeatureName: {}
                        }
                    }
                },
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                CloneGroupId: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                EarliestBacktrackTime: {
                    type: "timestamp"
                },
                BacktrackWindow: {
                    type: "long"
                },
                BacktrackConsumedChangeRecords: {
                    type: "long"
                },
                EnabledCloudwatchLogsExports: {
                    shape: "S2p"
                },
                Capacity: {
                    type: "integer"
                },
                EngineMode: {},
                ScalingConfigurationInfo: {
                    type: "structure",
                    members: {
                        MinCapacity: {
                            type: "integer"
                        },
                        MaxCapacity: {
                            type: "integer"
                        },
                        AutoPause: {
                            type: "boolean"
                        },
                        SecondsUntilAutoPause: {
                            type: "integer"
                        },
                        TimeoutAction: {},
                        SecondsBeforeTimeout: {
                            type: "integer"
                        }
                    }
                },
                RdsCustomClusterConfiguration: {
                    shape: "S2w"
                },
                DeletionProtection: {
                    type: "boolean"
                },
                HttpEndpointEnabled: {
                    type: "boolean"
                },
                ActivityStreamMode: {},
                ActivityStreamStatus: {},
                ActivityStreamKmsKeyId: {},
                ActivityStreamKinesisStreamName: {},
                CopyTagsToSnapshot: {
                    type: "boolean"
                },
                CrossAccountClone: {
                    type: "boolean"
                },
                DomainMemberships: {
                    shape: "S3e"
                },
                TagList: {
                    shape: "Sb"
                },
                GlobalWriteForwardingStatus: {},
                GlobalWriteForwardingRequested: {
                    type: "boolean"
                },
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        PendingCloudwatchLogsExports: {
                            shape: "S3i"
                        },
                        DBClusterIdentifier: {},
                        MasterUserPassword: {},
                        IAMDatabaseAuthenticationEnabled: {
                            type: "boolean"
                        },
                        EngineVersion: {},
                        BackupRetentionPeriod: {
                            type: "integer"
                        },
                        AllocatedStorage: {
                            type: "integer"
                        },
                        RdsCustomClusterConfiguration: {
                            shape: "S2w"
                        },
                        Iops: {
                            type: "integer"
                        },
                        StorageType: {}
                    }
                },
                DBClusterInstanceClass: {},
                StorageType: {},
                Iops: {
                    type: "integer"
                },
                PubliclyAccessible: {
                    type: "boolean"
                },
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                MonitoringInterval: {
                    type: "integer"
                },
                MonitoringRoleArn: {},
                PerformanceInsightsEnabled: {
                    type: "boolean"
                },
                PerformanceInsightsKMSKeyId: {},
                PerformanceInsightsRetentionPeriod: {
                    type: "integer"
                },
                ServerlessV2ScalingConfiguration: {
                    type: "structure",
                    members: {
                        MinCapacity: {
                            type: "double"
                        },
                        MaxCapacity: {
                            type: "double"
                        }
                    }
                },
                NetworkType: {},
                DBSystemId: {},
                MasterUserSecret: {
                    shape: "S3k"
                },
                IOOptimizedNextAllowedModificationTime: {
                    type: "timestamp"
                },
                LocalWriteForwardingStatus: {},
                AwsBackupRecoveryPointArn: {}
            },
            wrapper: true
        },
        S3e: {
            type: "list",
            member: {
                locationName: "DomainMembership",
                type: "structure",
                members: {
                    Domain: {},
                    Status: {},
                    FQDN: {},
                    IAMRoleName: {},
                    OU: {},
                    AuthSecretArn: {},
                    DnsIps: {
                        shape: "Sv"
                    }
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                LogTypesToEnable: {
                    shape: "S2p"
                },
                LogTypesToDisable: {
                    shape: "S2p"
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                SecretArn: {},
                SecretStatus: {},
                KmsKeyId: {}
            }
        },
        S3n: {
            type: "structure",
            members: {
                DBClusterEndpointIdentifier: {},
                DBClusterIdentifier: {},
                DBClusterEndpointResourceIdentifier: {},
                Endpoint: {},
                Status: {},
                EndpointType: {},
                CustomEndpointType: {},
                StaticMembers: {
                    shape: "Sv"
                },
                ExcludedMembers: {
                    shape: "Sv"
                },
                DBClusterEndpointArn: {}
            }
        },
        S3t: {
            type: "list",
            member: {
                locationName: "DBSecurityGroupName"
            }
        },
        S3v: {
            type: "structure",
            members: {
                DBInstanceIdentifier: {},
                DBInstanceClass: {},
                Engine: {},
                DBInstanceStatus: {},
                AutomaticRestartTime: {
                    type: "timestamp"
                },
                MasterUsername: {},
                DBName: {},
                Endpoint: {
                    shape: "S3w"
                },
                AllocatedStorage: {
                    type: "integer"
                },
                InstanceCreateTime: {
                    type: "timestamp"
                },
                PreferredBackupWindow: {},
                BackupRetentionPeriod: {
                    type: "integer"
                },
                DBSecurityGroups: {
                    shape: "S1l"
                },
                VpcSecurityGroups: {
                    shape: "S1n"
                },
                DBParameterGroups: {
                    type: "list",
                    member: {
                        locationName: "DBParameterGroup",
                        type: "structure",
                        members: {
                            DBParameterGroupName: {},
                            ParameterApplyStatus: {}
                        }
                    }
                },
                AvailabilityZone: {},
                DBSubnetGroup: {
                    shape: "S3z"
                },
                PreferredMaintenanceWindow: {},
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        DBInstanceClass: {},
                        AllocatedStorage: {
                            type: "integer"
                        },
                        MasterUserPassword: {},
                        Port: {
                            type: "integer"
                        },
                        BackupRetentionPeriod: {
                            type: "integer"
                        },
                        MultiAZ: {
                            type: "boolean"
                        },
                        EngineVersion: {},
                        LicenseModel: {},
                        Iops: {
                            type: "integer"
                        },
                        DBInstanceIdentifier: {},
                        StorageType: {},
                        CACertificateIdentifier: {},
                        DBSubnetGroupName: {},
                        PendingCloudwatchLogsExports: {
                            shape: "S3i"
                        },
                        ProcessorFeatures: {
                            shape: "S1c"
                        },
                        IAMDatabaseAuthenticationEnabled: {
                            type: "boolean"
                        },
                        AutomationMode: {},
                        ResumeFullAutomationModeTime: {
                            type: "timestamp"
                        },
                        StorageThroughput: {
                            type: "integer"
                        },
                        Engine: {},
                        DedicatedLogVolume: {
                            type: "boolean"
                        },
                        MultiTenant: {
                            type: "boolean"
                        }
                    }
                },
                LatestRestorableTime: {
                    type: "timestamp"
                },
                MultiAZ: {
                    type: "boolean"
                },
                EngineVersion: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                ReadReplicaSourceDBInstanceIdentifier: {},
                ReadReplicaDBInstanceIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaDBInstanceIdentifier"
                    }
                },
                ReadReplicaDBClusterIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaDBClusterIdentifier"
                    }
                },
                ReplicaMode: {},
                LicenseModel: {},
                Iops: {
                    type: "integer"
                },
                OptionGroupMemberships: {
                    type: "list",
                    member: {
                        locationName: "OptionGroupMembership",
                        type: "structure",
                        members: {
                            OptionGroupName: {},
                            Status: {}
                        }
                    }
                },
                CharacterSetName: {},
                NcharCharacterSetName: {},
                SecondaryAvailabilityZone: {},
                PubliclyAccessible: {
                    type: "boolean"
                },
                StatusInfos: {
                    type: "list",
                    member: {
                        locationName: "DBInstanceStatusInfo",
                        type: "structure",
                        members: {
                            StatusType: {},
                            Normal: {
                                type: "boolean"
                            },
                            Status: {},
                            Message: {}
                        }
                    }
                },
                StorageType: {},
                TdeCredentialArn: {},
                DbInstancePort: {
                    type: "integer"
                },
                DBClusterIdentifier: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbiResourceId: {},
                CACertificateIdentifier: {},
                DomainMemberships: {
                    shape: "S3e"
                },
                CopyTagsToSnapshot: {
                    type: "boolean"
                },
                MonitoringInterval: {
                    type: "integer"
                },
                EnhancedMonitoringResourceArn: {},
                MonitoringRoleArn: {},
                PromotionTier: {
                    type: "integer"
                },
                DBInstanceArn: {},
                Timezone: {},
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                PerformanceInsightsEnabled: {
                    type: "boolean"
                },
                PerformanceInsightsKMSKeyId: {},
                PerformanceInsightsRetentionPeriod: {
                    type: "integer"
                },
                EnabledCloudwatchLogsExports: {
                    shape: "S2p"
                },
                ProcessorFeatures: {
                    shape: "S1c"
                },
                DeletionProtection: {
                    type: "boolean"
                },
                AssociatedRoles: {
                    type: "list",
                    member: {
                        locationName: "DBInstanceRole",
                        type: "structure",
                        members: {
                            RoleArn: {},
                            FeatureName: {},
                            Status: {}
                        }
                    }
                },
                ListenerEndpoint: {
                    shape: "S3w"
                },
                MaxAllocatedStorage: {
                    type: "integer"
                },
                TagList: {
                    shape: "Sb"
                },
                DBInstanceAutomatedBackupsReplications: {
                    shape: "S4e"
                },
                CustomerOwnedIpEnabled: {
                    type: "boolean"
                },
                AwsBackupRecoveryPointArn: {},
                ActivityStreamStatus: {},
                ActivityStreamKmsKeyId: {},
                ActivityStreamKinesisStreamName: {},
                ActivityStreamMode: {},
                ActivityStreamEngineNativeAuditFieldsIncluded: {
                    type: "boolean"
                },
                AutomationMode: {},
                ResumeFullAutomationModeTime: {
                    type: "timestamp"
                },
                CustomIamInstanceProfile: {},
                BackupTarget: {},
                NetworkType: {},
                ActivityStreamPolicyStatus: {},
                StorageThroughput: {
                    type: "integer"
                },
                DBSystemId: {},
                MasterUserSecret: {
                    shape: "S3k"
                },
                CertificateDetails: {
                    type: "structure",
                    members: {
                        CAIdentifier: {},
                        ValidTill: {
                            type: "timestamp"
                        }
                    }
                },
                ReadReplicaSourceDBClusterIdentifier: {},
                PercentProgress: {},
                DedicatedLogVolume: {
                    type: "boolean"
                },
                IsStorageConfigUpgradeAvailable: {
                    type: "boolean"
                },
                MultiTenant: {
                    type: "boolean"
                }
            },
            wrapper: true
        },
        S3w: {
            type: "structure",
            members: {
                Address: {},
                Port: {
                    type: "integer"
                },
                HostedZoneId: {}
            }
        },
        S3z: {
            type: "structure",
            members: {
                DBSubnetGroupName: {},
                DBSubnetGroupDescription: {},
                VpcId: {},
                SubnetGroupStatus: {},
                Subnets: {
                    type: "list",
                    member: {
                        locationName: "Subnet",
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {
                                shape: "S42"
                            },
                            SubnetOutpost: {
                                type: "structure",
                                members: {
                                    Arn: {}
                                }
                            },
                            SubnetStatus: {}
                        }
                    }
                },
                DBSubnetGroupArn: {},
                SupportedNetworkTypes: {
                    shape: "Sv"
                }
            },
            wrapper: true
        },
        S42: {
            type: "structure",
            members: {
                Name: {}
            },
            wrapper: true
        },
        S4e: {
            type: "list",
            member: {
                locationName: "DBInstanceAutomatedBackupsReplication",
                type: "structure",
                members: {
                    DBInstanceAutomatedBackupsArn: {}
                }
            }
        },
        S4o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Description: {},
                    UserName: {},
                    AuthScheme: {},
                    SecretArn: {},
                    IAMAuth: {},
                    ClientPasswordAuthType: {}
                }
            }
        },
        S4u: {
            type: "structure",
            members: {
                DBProxyName: {},
                DBProxyArn: {},
                Status: {},
                EngineFamily: {},
                VpcId: {},
                VpcSecurityGroupIds: {
                    shape: "Sv"
                },
                VpcSubnetIds: {
                    shape: "Sv"
                },
                Auth: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Description: {},
                            UserName: {},
                            AuthScheme: {},
                            SecretArn: {},
                            IAMAuth: {},
                            ClientPasswordAuthType: {}
                        }
                    }
                },
                RoleArn: {},
                Endpoint: {},
                RequireTLS: {
                    type: "boolean"
                },
                IdleClientTimeout: {
                    type: "integer"
                },
                DebugLogging: {
                    type: "boolean"
                },
                CreatedDate: {
                    type: "timestamp"
                },
                UpdatedDate: {
                    type: "timestamp"
                }
            }
        },
        S53: {
            type: "structure",
            members: {
                DBProxyEndpointName: {},
                DBProxyEndpointArn: {},
                DBProxyName: {},
                Status: {},
                VpcId: {},
                VpcSecurityGroupIds: {
                    shape: "Sv"
                },
                VpcSubnetIds: {
                    shape: "Sv"
                },
                Endpoint: {},
                CreatedDate: {
                    type: "timestamp"
                },
                TargetRole: {},
                IsDefault: {
                    type: "boolean"
                }
            }
        },
        S5a: {
            type: "list",
            member: {
                locationName: "SubnetIdentifier"
            }
        },
        S5g: {
            type: "structure",
            members: {
                GlobalClusterIdentifier: {},
                GlobalClusterResourceId: {},
                GlobalClusterArn: {},
                Status: {},
                Engine: {},
                EngineVersion: {},
                DatabaseName: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                DeletionProtection: {
                    type: "boolean"
                },
                GlobalClusterMembers: {
                    type: "list",
                    member: {
                        locationName: "GlobalClusterMember",
                        type: "structure",
                        members: {
                            DBClusterArn: {},
                            Readers: {
                                type: "list",
                                member: {}
                            },
                            IsWriter: {
                                type: "boolean"
                            },
                            GlobalWriteForwardingStatus: {},
                            SynchronizationStatus: {}
                        },
                        wrapper: true
                    }
                },
                FailoverState: {
                    type: "structure",
                    members: {
                        Status: {},
                        FromDbClusterArn: {},
                        ToDbClusterArn: {},
                        IsDataLossAllowed: {
                            type: "boolean"
                        }
                    },
                    wrapper: true
                }
            },
            wrapper: true
        },
        S5r: {
            type: "map",
            key: {},
            value: {}
        },
        S5s: {
            type: "structure",
            members: {
                SourceArn: {},
                TargetArn: {},
                IntegrationName: {},
                IntegrationArn: {},
                KMSKeyId: {},
                AdditionalEncryptionContext: {
                    shape: "S5r"
                },
                Status: {},
                Tags: {
                    shape: "Sb"
                },
                CreateTime: {
                    type: "timestamp"
                },
                Errors: {
                    type: "list",
                    member: {
                        locationName: "IntegrationError",
                        type: "structure",
                        required: [ "ErrorCode" ],
                        members: {
                            ErrorCode: {},
                            ErrorMessage: {}
                        }
                    }
                }
            }
        },
        S60: {
            type: "string",
            sensitive: true
        },
        S62: {
            type: "structure",
            members: {
                TenantDatabaseCreateTime: {
                    type: "timestamp"
                },
                DBInstanceIdentifier: {},
                TenantDBName: {},
                Status: {},
                MasterUsername: {},
                DbiResourceId: {},
                TenantDatabaseResourceId: {},
                TenantDatabaseARN: {},
                CharacterSetName: {},
                NcharCharacterSetName: {},
                DeletionProtection: {
                    type: "boolean"
                },
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        MasterUserPassword: {
                            shape: "S60"
                        },
                        TenantDBName: {}
                    }
                },
                TagList: {
                    shape: "Sb"
                }
            },
            wrapper: true
        },
        S6b: {
            type: "structure",
            members: {
                Engine: {},
                VpcId: {},
                DBClusterAutomatedBackupsArn: {},
                DBClusterIdentifier: {},
                RestoreWindow: {
                    shape: "S6c"
                },
                MasterUsername: {},
                DbClusterResourceId: {},
                Region: {},
                LicenseModel: {},
                Status: {},
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                ClusterCreateTime: {
                    type: "timestamp"
                },
                StorageEncrypted: {
                    type: "boolean"
                },
                AllocatedStorage: {
                    type: "integer"
                },
                EngineVersion: {},
                DBClusterArn: {},
                BackupRetentionPeriod: {
                    type: "integer"
                },
                EngineMode: {},
                AvailabilityZones: {
                    shape: "S14"
                },
                Port: {
                    type: "integer"
                },
                KmsKeyId: {},
                StorageType: {},
                Iops: {
                    type: "integer"
                },
                AwsBackupRecoveryPointArn: {}
            },
            wrapper: true
        },
        S6c: {
            type: "structure",
            members: {
                EarliestTime: {
                    type: "timestamp"
                },
                LatestTime: {
                    type: "timestamp"
                }
            }
        },
        S6l: {
            type: "structure",
            members: {
                DBInstanceArn: {},
                DbiResourceId: {},
                Region: {},
                DBInstanceIdentifier: {},
                RestoreWindow: {
                    shape: "S6c"
                },
                AllocatedStorage: {
                    type: "integer"
                },
                Status: {},
                Port: {
                    type: "integer"
                },
                AvailabilityZone: {},
                VpcId: {},
                InstanceCreateTime: {
                    type: "timestamp"
                },
                MasterUsername: {},
                Engine: {},
                EngineVersion: {},
                LicenseModel: {},
                Iops: {
                    type: "integer"
                },
                OptionGroupName: {},
                TdeCredentialArn: {},
                Encrypted: {
                    type: "boolean"
                },
                StorageType: {},
                KmsKeyId: {},
                Timezone: {},
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                BackupRetentionPeriod: {
                    type: "integer"
                },
                DBInstanceAutomatedBackupsArn: {},
                DBInstanceAutomatedBackupsReplications: {
                    shape: "S4e"
                },
                BackupTarget: {},
                StorageThroughput: {
                    type: "integer"
                },
                AwsBackupRecoveryPointArn: {},
                DedicatedLogVolume: {
                    type: "boolean"
                },
                MultiTenant: {
                    type: "boolean"
                }
            },
            wrapper: true
        },
        S7c: {
            type: "list",
            member: {
                locationName: "Filter",
                type: "structure",
                required: [ "Name", "Values" ],
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {
                            locationName: "Value"
                        }
                    }
                }
            }
        },
        S7l: {
            type: "structure",
            members: {
                CertificateIdentifier: {},
                CertificateType: {},
                Thumbprint: {},
                ValidFrom: {
                    type: "timestamp"
                },
                ValidTill: {
                    type: "timestamp"
                },
                CertificateArn: {},
                CustomerOverride: {
                    type: "boolean"
                },
                CustomerOverrideValidTill: {
                    type: "timestamp"
                }
            },
            wrapper: true
        },
        S80: {
            type: "list",
            member: {
                locationName: "Parameter",
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterValue: {},
                    Description: {},
                    Source: {},
                    ApplyType: {},
                    DataType: {},
                    AllowedValues: {},
                    IsModifiable: {
                        type: "boolean"
                    },
                    MinimumEngineVersion: {},
                    ApplyMethod: {},
                    SupportedEngineModes: {
                        shape: "S2m"
                    }
                }
            }
        },
        S85: {
            type: "structure",
            members: {
                DBClusterSnapshotIdentifier: {},
                DBClusterSnapshotAttributes: {
                    type: "list",
                    member: {
                        locationName: "DBClusterSnapshotAttribute",
                        type: "structure",
                        members: {
                            AttributeName: {},
                            AttributeValues: {
                                shape: "S88"
                            }
                        }
                    }
                }
            },
            wrapper: true
        },
        S88: {
            type: "list",
            member: {
                locationName: "AttributeValue"
            }
        },
        S96: {
            type: "structure",
            members: {
                DBProxyName: {},
                TargetGroupName: {},
                TargetGroupArn: {},
                IsDefault: {
                    type: "boolean"
                },
                Status: {},
                ConnectionPoolConfig: {
                    type: "structure",
                    members: {
                        MaxConnectionsPercent: {
                            type: "integer"
                        },
                        MaxIdleConnectionsPercent: {
                            type: "integer"
                        },
                        ConnectionBorrowTimeout: {
                            type: "integer"
                        },
                        SessionPinningFilters: {
                            shape: "Sv"
                        },
                        InitQuery: {}
                    }
                },
                CreatedDate: {
                    type: "timestamp"
                },
                UpdatedDate: {
                    type: "timestamp"
                }
            }
        },
        S9a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TargetArn: {},
                    Endpoint: {},
                    TrackedClusterId: {},
                    RdsResourceId: {},
                    Port: {
                        type: "integer"
                    },
                    Type: {},
                    Role: {},
                    TargetHealth: {
                        type: "structure",
                        members: {
                            State: {},
                            Reason: {},
                            Description: {}
                        }
                    }
                }
            }
        },
        S9m: {
            type: "structure",
            members: {
                DBSnapshotIdentifier: {},
                DBSnapshotAttributes: {
                    type: "list",
                    member: {
                        locationName: "DBSnapshotAttribute",
                        type: "structure",
                        members: {
                            AttributeName: {},
                            AttributeValues: {
                                shape: "S88"
                            }
                        },
                        wrapper: true
                    }
                }
            },
            wrapper: true
        },
        Sa1: {
            type: "structure",
            members: {
                DBParameterGroupFamily: {},
                Marker: {},
                Parameters: {
                    shape: "S80"
                }
            },
            wrapper: true
        },
        Sba: {
            type: "list",
            member: {
                locationName: "AvailableProcessorFeature",
                type: "structure",
                members: {
                    Name: {},
                    DefaultValue: {},
                    AllowedValues: {}
                }
            }
        },
        Sbj: {
            type: "structure",
            members: {
                ReservedDBInstanceId: {},
                ReservedDBInstancesOfferingId: {},
                DBInstanceClass: {},
                StartTime: {
                    type: "timestamp"
                },
                Duration: {
                    type: "integer"
                },
                FixedPrice: {
                    type: "double"
                },
                UsagePrice: {
                    type: "double"
                },
                CurrencyCode: {},
                DBInstanceCount: {
                    type: "integer"
                },
                ProductDescription: {},
                OfferingType: {},
                MultiAZ: {
                    type: "boolean"
                },
                State: {},
                RecurringCharges: {
                    shape: "Sbl"
                },
                ReservedDBInstanceArn: {},
                LeaseId: {}
            },
            wrapper: true
        },
        Sbl: {
            type: "list",
            member: {
                locationName: "RecurringCharge",
                type: "structure",
                members: {
                    RecurringChargeAmount: {
                        type: "double"
                    },
                    RecurringChargeFrequency: {}
                },
                wrapper: true
            }
        },
        Sc3: {
            type: "list",
            member: {
                locationName: "Range",
                type: "structure",
                members: {
                    From: {
                        type: "integer"
                    },
                    To: {
                        type: "integer"
                    },
                    Step: {
                        type: "integer"
                    }
                }
            }
        },
        Sc5: {
            type: "list",
            member: {
                locationName: "DoubleRange",
                type: "structure",
                members: {
                    From: {
                        type: "double"
                    },
                    To: {
                        type: "double"
                    }
                }
            }
        },
        Scr: {
            type: "structure",
            members: {
                EnableLogTypes: {
                    shape: "S2p"
                },
                DisableLogTypes: {
                    shape: "S2p"
                }
            }
        },
        Scw: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {}
            }
        },
        Sd2: {
            type: "structure",
            members: {
                DBParameterGroupName: {}
            }
        }
    },
    paginators: {
        DescribeBlueGreenDeployments: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "BlueGreenDeployments"
        },
        DescribeCertificates: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Certificates"
        },
        DescribeDBClusterAutomatedBackups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterAutomatedBackups"
        },
        DescribeDBClusterBacktracks: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterBacktracks"
        },
        DescribeDBClusterEndpoints: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterEndpoints"
        },
        DescribeDBClusterParameterGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterParameterGroups"
        },
        DescribeDBClusterParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Parameters"
        },
        DescribeDBClusterSnapshots: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterSnapshots"
        },
        DescribeDBClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusters"
        },
        DescribeDBEngineVersions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBEngineVersions"
        },
        DescribeDBInstanceAutomatedBackups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBInstanceAutomatedBackups"
        },
        DescribeDBInstances: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBInstances"
        },
        DescribeDBLogFiles: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DescribeDBLogFiles"
        },
        DescribeDBParameterGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBParameterGroups"
        },
        DescribeDBParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Parameters"
        },
        DescribeDBProxies: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBProxies"
        },
        DescribeDBProxyEndpoints: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBProxyEndpoints"
        },
        DescribeDBProxyTargetGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "TargetGroups"
        },
        DescribeDBProxyTargets: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Targets"
        },
        DescribeDBSecurityGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBSecurityGroups"
        },
        DescribeDBSnapshotTenantDatabases: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBSnapshotTenantDatabases"
        },
        DescribeDBSnapshots: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBSnapshots"
        },
        DescribeDBSubnetGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBSubnetGroups"
        },
        DescribeEngineDefaultParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "EngineDefaults.Marker",
            result_key: "EngineDefaults.Parameters"
        },
        DescribeEventSubscriptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "EventSubscriptionsList"
        },
        DescribeEvents: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Events"
        },
        DescribeExportTasks: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ExportTasks"
        },
        DescribeGlobalClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "GlobalClusters"
        },
        DescribeIntegrations: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Integrations"
        },
        DescribeOptionGroupOptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "OptionGroupOptions"
        },
        DescribeOptionGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "OptionGroupsList"
        },
        DescribeOrderableDBInstanceOptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "OrderableDBInstanceOptions"
        },
        DescribePendingMaintenanceActions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "PendingMaintenanceActions"
        },
        DescribeReservedDBInstances: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReservedDBInstances"
        },
        DescribeReservedDBInstancesOfferings: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReservedDBInstancesOfferings"
        },
        DescribeSourceRegions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "SourceRegions"
        },
        DescribeTenantDatabases: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "TenantDatabases"
        },
        DownloadDBLogFilePortion: {
            input_token: "Marker",
            limit_key: "NumberOfLines",
            more_results: "AdditionalDataPending",
            output_token: "Marker",
            result_key: "LogFileData"
        },
        ListTagsForResource: {
            result_key: "TagList"
        }
    },
    waiters: {
        DBInstanceAvailable: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-restore",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-parameters",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        },
        DBInstanceDeleted: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: true,
                matcher: "path",
                state: "success",
                argument: "length(DBInstances) == `0`"
            }, {
                expected: "DBInstanceNotFound",
                matcher: "error",
                state: "success"
            }, {
                expected: "creating",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "modifying",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "resetting-master-credentials",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        },
        DBSnapshotAvailable: {
            delay: 30,
            operation: "DescribeDBSnapshots",
            maxAttempts: 60,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "DBSnapshots[].Status"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "DBSnapshots[].Status"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBSnapshots[].Status"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "DBSnapshots[].Status"
            }, {
                expected: "incompatible-restore",
                matcher: "pathAny",
                state: "failure",
                argument: "DBSnapshots[].Status"
            }, {
                expected: "incompatible-parameters",
                matcher: "pathAny",
                state: "failure",
                argument: "DBSnapshots[].Status"
            } ]
        },
        DBSnapshotDeleted: {
            delay: 30,
            operation: "DescribeDBSnapshots",
            maxAttempts: 60,
            acceptors: [ {
                expected: true,
                matcher: "path",
                state: "success",
                argument: "length(DBSnapshots) == `0`"
            }, {
                expected: "DBSnapshotNotFound",
                matcher: "error",
                state: "success"
            }, {
                expected: "creating",
                matcher: "pathAny",
                state: "failure",
                argument: "DBSnapshots[].Status"
            }, {
                expected: "modifying",
                matcher: "pathAny",
                state: "failure",
                argument: "DBSnapshots[].Status"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBSnapshots[].Status"
            }, {
                expected: "resetting-master-credentials",
                matcher: "pathAny",
                state: "failure",
                argument: "DBSnapshots[].Status"
            } ]
        },
        DBClusterSnapshotAvailable: {
            delay: 30,
            operation: "DescribeDBClusterSnapshots",
            maxAttempts: 60,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "DBClusterSnapshots[].Status"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusterSnapshots[].Status"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusterSnapshots[].Status"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusterSnapshots[].Status"
            }, {
                expected: "incompatible-restore",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusterSnapshots[].Status"
            }, {
                expected: "incompatible-parameters",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusterSnapshots[].Status"
            } ]
        },
        DBClusterSnapshotDeleted: {
            delay: 30,
            operation: "DescribeDBClusterSnapshots",
            maxAttempts: 60,
            acceptors: [ {
                expected: true,
                matcher: "path",
                state: "success",
                argument: "length(DBClusterSnapshots) == `0`"
            }, {
                expected: "DBClusterSnapshotNotFoundFault",
                matcher: "error",
                state: "success"
            }, {
                expected: "creating",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusterSnapshots[].Status"
            }, {
                expected: "modifying",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusterSnapshots[].Status"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusterSnapshots[].Status"
            }, {
                expected: "resetting-master-credentials",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusterSnapshots[].Status"
            } ]
        },
        DBClusterAvailable: {
            delay: 30,
            operation: "DescribeDBClusters",
            maxAttempts: 60,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "DBClusters[].Status"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusters[].Status"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusters[].Status"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusters[].Status"
            }, {
                expected: "incompatible-restore",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusters[].Status"
            }, {
                expected: "incompatible-parameters",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusters[].Status"
            } ]
        },
        DBClusterDeleted: {
            delay: 30,
            operation: "DescribeDBClusters",
            maxAttempts: 60,
            acceptors: [ {
                expected: true,
                matcher: "path",
                state: "success",
                argument: "length(DBClusters) == `0`"
            }, {
                expected: "DBClusterNotFoundFault",
                matcher: "error",
                state: "success"
            }, {
                expected: "creating",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusters[].Status"
            }, {
                expected: "modifying",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusters[].Status"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusters[].Status"
            }, {
                expected: "resetting-master-credentials",
                matcher: "pathAny",
                state: "failure",
                argument: "DBClusters[].Status"
            } ]
        },
        TenantDatabaseAvailable: {
            delay: 30,
            operation: "DescribeTenantDatabases",
            maxAttempts: 60,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "TenantDatabases[].Status"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "TenantDatabases[].Status"
            }, {
                expected: "incompatible-parameters",
                matcher: "pathAny",
                state: "failure",
                argument: "TenantDatabases[].Status"
            }, {
                expected: "incompatible-restore",
                matcher: "pathAny",
                state: "failure",
                argument: "TenantDatabases[].Status"
            } ]
        },
        TenantDatabaseDeleted: {
            delay: 30,
            operation: "DescribeTenantDatabases",
            maxAttempts: 60,
            acceptors: [ {
                expected: true,
                matcher: "path",
                state: "success",
                argument: "length(TenantDatabases) == `0`"
            }, {
                expected: "DBInstanceNotFoundFault",
                matcher: "error",
                state: "success"
            } ]
        }
    }
};

AWS.apiLoader.services["redshift"] = {};

AWS.Redshift = AWS.Service.defineService("redshift", [ "2012-12-01" ]);

AWS.apiLoader.services["redshift"]["2012-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-12-01",
        endpointPrefix: "redshift",
        protocol: "query",
        serviceFullName: "Amazon Redshift",
        serviceId: "Redshift",
        signatureVersion: "v4",
        uid: "redshift-2012-12-01",
        xmlNamespace: "http://redshift.amazonaws.com/doc/2012-12-01/"
    },
    operations: {
        AcceptReservedNodeExchange: {
            input: {
                type: "structure",
                required: [ "ReservedNodeId", "TargetReservedNodeOfferingId" ],
                members: {
                    ReservedNodeId: {},
                    TargetReservedNodeOfferingId: {}
                }
            },
            output: {
                resultWrapper: "AcceptReservedNodeExchangeResult",
                type: "structure",
                members: {
                    ExchangedReservedNode: {
                        shape: "S4"
                    }
                }
            }
        },
        AddPartner: {
            input: {
                shape: "Sb"
            },
            output: {
                shape: "Sg",
                resultWrapper: "AddPartnerResult"
            }
        },
        AssociateDataShareConsumer: {
            input: {
                type: "structure",
                required: [ "DataShareArn" ],
                members: {
                    DataShareArn: {},
                    AssociateEntireAccount: {
                        type: "boolean"
                    },
                    ConsumerArn: {},
                    ConsumerRegion: {},
                    AllowWrites: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "Sj",
                resultWrapper: "AssociateDataShareConsumerResult"
            }
        },
        AuthorizeClusterSecurityGroupIngress: {
            input: {
                type: "structure",
                required: [ "ClusterSecurityGroupName" ],
                members: {
                    ClusterSecurityGroupName: {},
                    CIDRIP: {},
                    EC2SecurityGroupName: {},
                    EC2SecurityGroupOwnerId: {}
                }
            },
            output: {
                resultWrapper: "AuthorizeClusterSecurityGroupIngressResult",
                type: "structure",
                members: {
                    ClusterSecurityGroup: {
                        shape: "Sq"
                    }
                }
            }
        },
        AuthorizeDataShare: {
            input: {
                type: "structure",
                required: [ "DataShareArn", "ConsumerIdentifier" ],
                members: {
                    DataShareArn: {},
                    ConsumerIdentifier: {},
                    AllowWrites: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "Sj",
                resultWrapper: "AuthorizeDataShareResult"
            }
        },
        AuthorizeEndpointAccess: {
            input: {
                type: "structure",
                required: [ "Account" ],
                members: {
                    ClusterIdentifier: {},
                    Account: {},
                    VpcIds: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                shape: "S10",
                resultWrapper: "AuthorizeEndpointAccessResult"
            }
        },
        AuthorizeSnapshotAccess: {
            input: {
                type: "structure",
                required: [ "AccountWithRestoreAccess" ],
                members: {
                    SnapshotIdentifier: {},
                    SnapshotArn: {},
                    SnapshotClusterIdentifier: {},
                    AccountWithRestoreAccess: {}
                }
            },
            output: {
                resultWrapper: "AuthorizeSnapshotAccessResult",
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S14"
                    }
                }
            }
        },
        BatchDeleteClusterSnapshots: {
            input: {
                type: "structure",
                required: [ "Identifiers" ],
                members: {
                    Identifiers: {
                        type: "list",
                        member: {
                            shape: "S1c",
                            locationName: "DeleteClusterSnapshotMessage"
                        }
                    }
                }
            },
            output: {
                resultWrapper: "BatchDeleteClusterSnapshotsResult",
                type: "structure",
                members: {
                    Resources: {
                        shape: "S1e"
                    },
                    Errors: {
                        type: "list",
                        member: {
                            shape: "S1g",
                            locationName: "SnapshotErrorMessage"
                        }
                    }
                }
            }
        },
        BatchModifyClusterSnapshots: {
            input: {
                type: "structure",
                required: [ "SnapshotIdentifierList" ],
                members: {
                    SnapshotIdentifierList: {
                        shape: "S1e"
                    },
                    ManualSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "BatchModifyClusterSnapshotsResult",
                type: "structure",
                members: {
                    Resources: {
                        shape: "S1e"
                    },
                    Errors: {
                        type: "list",
                        member: {
                            shape: "S1g",
                            locationName: "SnapshotErrorMessage"
                        }
                    }
                }
            }
        },
        CancelResize: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {}
                }
            },
            output: {
                shape: "S1l",
                resultWrapper: "CancelResizeResult"
            }
        },
        CopyClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "SourceSnapshotIdentifier", "TargetSnapshotIdentifier" ],
                members: {
                    SourceSnapshotIdentifier: {},
                    SourceSnapshotClusterIdentifier: {},
                    TargetSnapshotIdentifier: {},
                    ManualSnapshotRetentionPeriod: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "CopyClusterSnapshotResult",
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateAuthenticationProfile: {
            input: {
                type: "structure",
                required: [ "AuthenticationProfileName", "AuthenticationProfileContent" ],
                members: {
                    AuthenticationProfileName: {},
                    AuthenticationProfileContent: {}
                }
            },
            output: {
                resultWrapper: "CreateAuthenticationProfileResult",
                type: "structure",
                members: {
                    AuthenticationProfileName: {},
                    AuthenticationProfileContent: {}
                }
            }
        },
        CreateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "NodeType", "MasterUsername" ],
                members: {
                    DBName: {},
                    ClusterIdentifier: {},
                    ClusterType: {},
                    NodeType: {},
                    MasterUsername: {},
                    MasterUserPassword: {
                        shape: "S1x"
                    },
                    ClusterSecurityGroups: {
                        shape: "S1y"
                    },
                    VpcSecurityGroupIds: {
                        shape: "S1z"
                    },
                    ClusterSubnetGroupName: {},
                    AvailabilityZone: {},
                    PreferredMaintenanceWindow: {},
                    ClusterParameterGroupName: {},
                    AutomatedSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    ManualSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    Port: {
                        type: "integer"
                    },
                    ClusterVersion: {},
                    AllowVersionUpgrade: {
                        type: "boolean"
                    },
                    NumberOfNodes: {
                        type: "integer"
                    },
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    Encrypted: {
                        type: "boolean"
                    },
                    HsmClientCertificateIdentifier: {},
                    HsmConfigurationIdentifier: {},
                    ElasticIp: {},
                    Tags: {
                        shape: "St"
                    },
                    KmsKeyId: {},
                    EnhancedVpcRouting: {
                        type: "boolean"
                    },
                    AdditionalInfo: {},
                    IamRoles: {
                        shape: "S20"
                    },
                    MaintenanceTrackName: {},
                    SnapshotScheduleIdentifier: {},
                    AvailabilityZoneRelocation: {
                        type: "boolean"
                    },
                    AquaConfigurationStatus: {},
                    DefaultIamRoleArn: {},
                    LoadSampleData: {},
                    ManageMasterPassword: {
                        type: "boolean"
                    },
                    MasterPasswordSecretKmsKeyId: {},
                    IpAddressType: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    RedshiftIdcApplicationArn: {}
                }
            },
            output: {
                resultWrapper: "CreateClusterResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        CreateClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName", "ParameterGroupFamily", "Description" ],
                members: {
                    ParameterGroupName: {},
                    ParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                resultWrapper: "CreateClusterParameterGroupResult",
                type: "structure",
                members: {
                    ClusterParameterGroup: {
                        shape: "S33"
                    }
                }
            }
        },
        CreateClusterSecurityGroup: {
            input: {
                type: "structure",
                required: [ "ClusterSecurityGroupName", "Description" ],
                members: {
                    ClusterSecurityGroupName: {},
                    Description: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                resultWrapper: "CreateClusterSecurityGroupResult",
                type: "structure",
                members: {
                    ClusterSecurityGroup: {
                        shape: "Sq"
                    }
                }
            }
        },
        CreateClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotIdentifier", "ClusterIdentifier" ],
                members: {
                    SnapshotIdentifier: {},
                    ClusterIdentifier: {},
                    ManualSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                resultWrapper: "CreateClusterSnapshotResult",
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateClusterSubnetGroup: {
            input: {
                type: "structure",
                required: [ "ClusterSubnetGroupName", "Description", "SubnetIds" ],
                members: {
                    ClusterSubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "S39"
                    },
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                resultWrapper: "CreateClusterSubnetGroupResult",
                type: "structure",
                members: {
                    ClusterSubnetGroup: {
                        shape: "S3b"
                    }
                }
            }
        },
        CreateCustomDomainAssociation: {
            input: {
                type: "structure",
                required: [ "CustomDomainName", "CustomDomainCertificateArn", "ClusterIdentifier" ],
                members: {
                    CustomDomainName: {},
                    CustomDomainCertificateArn: {},
                    ClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "CreateCustomDomainAssociationResult",
                type: "structure",
                members: {
                    CustomDomainName: {},
                    CustomDomainCertificateArn: {},
                    ClusterIdentifier: {},
                    CustomDomainCertExpiryTime: {}
                }
            }
        },
        CreateEndpointAccess: {
            input: {
                type: "structure",
                required: [ "EndpointName", "SubnetGroupName" ],
                members: {
                    ClusterIdentifier: {},
                    ResourceOwner: {},
                    EndpointName: {},
                    SubnetGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                shape: "S3n",
                resultWrapper: "CreateEndpointAccessResult"
            }
        },
        CreateEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SnsTopicArn" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    SourceIds: {
                        shape: "S3p"
                    },
                    EventCategories: {
                        shape: "S3q"
                    },
                    Severity: {},
                    Enabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                resultWrapper: "CreateEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S3s"
                    }
                }
            }
        },
        CreateHsmClientCertificate: {
            input: {
                type: "structure",
                required: [ "HsmClientCertificateIdentifier" ],
                members: {
                    HsmClientCertificateIdentifier: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                resultWrapper: "CreateHsmClientCertificateResult",
                type: "structure",
                members: {
                    HsmClientCertificate: {
                        shape: "S3v"
                    }
                }
            }
        },
        CreateHsmConfiguration: {
            input: {
                type: "structure",
                required: [ "HsmConfigurationIdentifier", "Description", "HsmIpAddress", "HsmPartitionName", "HsmPartitionPassword", "HsmServerPublicCertificate" ],
                members: {
                    HsmConfigurationIdentifier: {},
                    Description: {},
                    HsmIpAddress: {},
                    HsmPartitionName: {},
                    HsmPartitionPassword: {},
                    HsmServerPublicCertificate: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                resultWrapper: "CreateHsmConfigurationResult",
                type: "structure",
                members: {
                    HsmConfiguration: {
                        shape: "S3y"
                    }
                }
            }
        },
        CreateRedshiftIdcApplication: {
            input: {
                type: "structure",
                required: [ "IdcInstanceArn", "RedshiftIdcApplicationName", "IdcDisplayName", "IamRoleArn" ],
                members: {
                    IdcInstanceArn: {},
                    RedshiftIdcApplicationName: {},
                    IdentityNamespace: {},
                    IdcDisplayName: {},
                    IamRoleArn: {},
                    AuthorizedTokenIssuerList: {
                        shape: "S43"
                    },
                    ServiceIntegrations: {
                        shape: "S46"
                    }
                }
            },
            output: {
                resultWrapper: "CreateRedshiftIdcApplicationResult",
                type: "structure",
                members: {
                    RedshiftIdcApplication: {
                        shape: "S4d"
                    }
                }
            }
        },
        CreateScheduledAction: {
            input: {
                type: "structure",
                required: [ "ScheduledActionName", "TargetAction", "Schedule", "IamRole" ],
                members: {
                    ScheduledActionName: {},
                    TargetAction: {
                        shape: "S4f"
                    },
                    Schedule: {},
                    IamRole: {},
                    ScheduledActionDescription: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Enable: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S4j",
                resultWrapper: "CreateScheduledActionResult"
            }
        },
        CreateSnapshotCopyGrant: {
            input: {
                type: "structure",
                required: [ "SnapshotCopyGrantName" ],
                members: {
                    SnapshotCopyGrantName: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                resultWrapper: "CreateSnapshotCopyGrantResult",
                type: "structure",
                members: {
                    SnapshotCopyGrant: {
                        shape: "S4o"
                    }
                }
            }
        },
        CreateSnapshotSchedule: {
            input: {
                type: "structure",
                members: {
                    ScheduleDefinitions: {
                        shape: "S4q"
                    },
                    ScheduleIdentifier: {},
                    ScheduleDescription: {},
                    Tags: {
                        shape: "St"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    NextInvocations: {
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S4r",
                resultWrapper: "CreateSnapshotScheduleResult"
            }
        },
        CreateTags: {
            input: {
                type: "structure",
                required: [ "ResourceName", "Tags" ],
                members: {
                    ResourceName: {},
                    Tags: {
                        shape: "St"
                    }
                }
            }
        },
        CreateUsageLimit: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "FeatureType", "LimitType", "Amount" ],
                members: {
                    ClusterIdentifier: {},
                    FeatureType: {},
                    LimitType: {},
                    Amount: {
                        type: "long"
                    },
                    Period: {},
                    BreachAction: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                shape: "S51",
                resultWrapper: "CreateUsageLimitResult"
            }
        },
        DeauthorizeDataShare: {
            input: {
                type: "structure",
                required: [ "DataShareArn", "ConsumerIdentifier" ],
                members: {
                    DataShareArn: {},
                    ConsumerIdentifier: {}
                }
            },
            output: {
                shape: "Sj",
                resultWrapper: "DeauthorizeDataShareResult"
            }
        },
        DeleteAuthenticationProfile: {
            input: {
                type: "structure",
                required: [ "AuthenticationProfileName" ],
                members: {
                    AuthenticationProfileName: {}
                }
            },
            output: {
                resultWrapper: "DeleteAuthenticationProfileResult",
                type: "structure",
                members: {
                    AuthenticationProfileName: {}
                }
            }
        },
        DeleteCluster: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {},
                    SkipFinalClusterSnapshot: {
                        type: "boolean"
                    },
                    FinalClusterSnapshotIdentifier: {},
                    FinalClusterSnapshotRetentionPeriod: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DeleteClusterResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        DeleteClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {}
                }
            }
        },
        DeleteClusterSecurityGroup: {
            input: {
                type: "structure",
                required: [ "ClusterSecurityGroupName" ],
                members: {
                    ClusterSecurityGroupName: {}
                }
            }
        },
        DeleteClusterSnapshot: {
            input: {
                shape: "S1c"
            },
            output: {
                resultWrapper: "DeleteClusterSnapshotResult",
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S14"
                    }
                }
            }
        },
        DeleteClusterSubnetGroup: {
            input: {
                type: "structure",
                required: [ "ClusterSubnetGroupName" ],
                members: {
                    ClusterSubnetGroupName: {}
                }
            }
        },
        DeleteCustomDomainAssociation: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "CustomDomainName" ],
                members: {
                    ClusterIdentifier: {},
                    CustomDomainName: {}
                }
            }
        },
        DeleteEndpointAccess: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {}
                }
            },
            output: {
                shape: "S3n",
                resultWrapper: "DeleteEndpointAccessResult"
            }
        },
        DeleteEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {}
                }
            }
        },
        DeleteHsmClientCertificate: {
            input: {
                type: "structure",
                required: [ "HsmClientCertificateIdentifier" ],
                members: {
                    HsmClientCertificateIdentifier: {}
                }
            }
        },
        DeleteHsmConfiguration: {
            input: {
                type: "structure",
                required: [ "HsmConfigurationIdentifier" ],
                members: {
                    HsmConfigurationIdentifier: {}
                }
            }
        },
        DeletePartner: {
            input: {
                shape: "Sb"
            },
            output: {
                shape: "Sg",
                resultWrapper: "DeletePartnerResult"
            }
        },
        DeleteRedshiftIdcApplication: {
            input: {
                type: "structure",
                required: [ "RedshiftIdcApplicationArn" ],
                members: {
                    RedshiftIdcApplicationArn: {}
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            }
        },
        DeleteScheduledAction: {
            input: {
                type: "structure",
                required: [ "ScheduledActionName" ],
                members: {
                    ScheduledActionName: {}
                }
            }
        },
        DeleteSnapshotCopyGrant: {
            input: {
                type: "structure",
                required: [ "SnapshotCopyGrantName" ],
                members: {
                    SnapshotCopyGrantName: {}
                }
            }
        },
        DeleteSnapshotSchedule: {
            input: {
                type: "structure",
                required: [ "ScheduleIdentifier" ],
                members: {
                    ScheduleIdentifier: {}
                }
            }
        },
        DeleteTags: {
            input: {
                type: "structure",
                required: [ "ResourceName", "TagKeys" ],
                members: {
                    ResourceName: {},
                    TagKeys: {
                        shape: "S5m"
                    }
                }
            }
        },
        DeleteUsageLimit: {
            input: {
                type: "structure",
                required: [ "UsageLimitId" ],
                members: {
                    UsageLimitId: {}
                }
            }
        },
        DescribeAccountAttributes: {
            input: {
                type: "structure",
                members: {
                    AttributeNames: {
                        type: "list",
                        member: {
                            locationName: "AttributeName"
                        }
                    }
                }
            },
            output: {
                resultWrapper: "DescribeAccountAttributesResult",
                type: "structure",
                members: {
                    AccountAttributes: {
                        type: "list",
                        member: {
                            locationName: "AccountAttribute",
                            type: "structure",
                            members: {
                                AttributeName: {},
                                AttributeValues: {
                                    type: "list",
                                    member: {
                                        locationName: "AttributeValueTarget",
                                        type: "structure",
                                        members: {
                                            AttributeValue: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeAuthenticationProfiles: {
            input: {
                type: "structure",
                members: {
                    AuthenticationProfileName: {}
                }
            },
            output: {
                resultWrapper: "DescribeAuthenticationProfilesResult",
                type: "structure",
                members: {
                    AuthenticationProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AuthenticationProfileName: {},
                                AuthenticationProfileContent: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeClusterDbRevisions: {
            input: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeClusterDbRevisionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ClusterDbRevisions: {
                        type: "list",
                        member: {
                            locationName: "ClusterDbRevision",
                            type: "structure",
                            members: {
                                ClusterIdentifier: {},
                                CurrentDatabaseRevision: {},
                                DatabaseRevisionReleaseDate: {
                                    type: "timestamp"
                                },
                                RevisionTargets: {
                                    type: "list",
                                    member: {
                                        locationName: "RevisionTarget",
                                        type: "structure",
                                        members: {
                                            DatabaseRevision: {},
                                            Description: {},
                                            DatabaseRevisionReleaseDate: {
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeClusterParameterGroups: {
            input: {
                type: "structure",
                members: {
                    ParameterGroupName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeClusterParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ParameterGroups: {
                        type: "list",
                        member: {
                            shape: "S33",
                            locationName: "ClusterParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeClusterParameters: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    Source: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeClusterParametersResult",
                type: "structure",
                members: {
                    Parameters: {
                        shape: "S6b"
                    },
                    Marker: {}
                }
            }
        },
        DescribeClusterSecurityGroups: {
            input: {
                type: "structure",
                members: {
                    ClusterSecurityGroupName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeClusterSecurityGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ClusterSecurityGroups: {
                        type: "list",
                        member: {
                            shape: "Sq",
                            locationName: "ClusterSecurityGroup"
                        }
                    }
                }
            }
        },
        DescribeClusterSnapshots: {
            input: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    SnapshotArn: {},
                    SnapshotType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    OwnerAccount: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    },
                    ClusterExists: {
                        type: "boolean"
                    },
                    SortingEntities: {
                        type: "list",
                        member: {
                            locationName: "SnapshotSortingEntity",
                            type: "structure",
                            required: [ "Attribute" ],
                            members: {
                                Attribute: {},
                                SortOrder: {}
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "DescribeClusterSnapshotsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Snapshots: {
                        type: "list",
                        member: {
                            shape: "S14",
                            locationName: "Snapshot"
                        }
                    }
                }
            }
        },
        DescribeClusterSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    ClusterSubnetGroupName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeClusterSubnetGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ClusterSubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S3b",
                            locationName: "ClusterSubnetGroup"
                        }
                    }
                }
            }
        },
        DescribeClusterTracks: {
            input: {
                type: "structure",
                members: {
                    MaintenanceTrackName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeClusterTracksResult",
                type: "structure",
                members: {
                    MaintenanceTracks: {
                        type: "list",
                        member: {
                            locationName: "MaintenanceTrack",
                            type: "structure",
                            members: {
                                MaintenanceTrackName: {},
                                DatabaseVersion: {},
                                UpdateTargets: {
                                    type: "list",
                                    member: {
                                        locationName: "UpdateTarget",
                                        type: "structure",
                                        members: {
                                            MaintenanceTrackName: {},
                                            DatabaseVersion: {},
                                            SupportedOperations: {
                                                type: "list",
                                                member: {
                                                    locationName: "SupportedOperation",
                                                    type: "structure",
                                                    members: {
                                                        OperationName: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeClusterVersions: {
            input: {
                type: "structure",
                members: {
                    ClusterVersion: {},
                    ClusterParameterGroupFamily: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeClusterVersionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ClusterVersions: {
                        type: "list",
                        member: {
                            locationName: "ClusterVersion",
                            type: "structure",
                            members: {
                                ClusterVersion: {},
                                ClusterParameterGroupFamily: {},
                                Description: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeClusters: {
            input: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    Clusters: {
                        type: "list",
                        member: {
                            shape: "S23",
                            locationName: "Cluster"
                        }
                    }
                }
            }
        },
        DescribeCustomDomainAssociations: {
            input: {
                type: "structure",
                members: {
                    CustomDomainName: {},
                    CustomDomainCertificateArn: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeCustomDomainAssociationsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Associations: {
                        type: "list",
                        member: {
                            locationName: "Association",
                            type: "structure",
                            members: {
                                CustomDomainCertificateArn: {},
                                CustomDomainCertificateExpiryDate: {
                                    type: "timestamp"
                                },
                                CertificateAssociations: {
                                    type: "list",
                                    member: {
                                        locationName: "CertificateAssociation",
                                        type: "structure",
                                        members: {
                                            CustomDomainName: {},
                                            ClusterIdentifier: {}
                                        }
                                    }
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeDataShares: {
            input: {
                type: "structure",
                members: {
                    DataShareArn: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDataSharesResult",
                type: "structure",
                members: {
                    DataShares: {
                        shape: "S7e"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDataSharesForConsumer: {
            input: {
                type: "structure",
                members: {
                    ConsumerArn: {},
                    Status: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDataSharesForConsumerResult",
                type: "structure",
                members: {
                    DataShares: {
                        shape: "S7e"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDataSharesForProducer: {
            input: {
                type: "structure",
                members: {
                    ProducerArn: {},
                    Status: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDataSharesForProducerResult",
                type: "structure",
                members: {
                    DataShares: {
                        shape: "S7e"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDefaultClusterParameters: {
            input: {
                type: "structure",
                required: [ "ParameterGroupFamily" ],
                members: {
                    ParameterGroupFamily: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDefaultClusterParametersResult",
                type: "structure",
                members: {
                    DefaultClusterParameters: {
                        type: "structure",
                        members: {
                            ParameterGroupFamily: {},
                            Marker: {},
                            Parameters: {
                                shape: "S6b"
                            }
                        },
                        wrapper: true
                    }
                }
            }
        },
        DescribeEndpointAccess: {
            input: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    ResourceOwner: {},
                    EndpointName: {},
                    VpcId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEndpointAccessResult",
                type: "structure",
                members: {
                    EndpointAccessList: {
                        type: "list",
                        member: {
                            shape: "S3n"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeEndpointAuthorization: {
            input: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    Account: {},
                    Grantee: {
                        type: "boolean"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEndpointAuthorizationResult",
                type: "structure",
                members: {
                    EndpointAuthorizationList: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeEventCategories: {
            input: {
                type: "structure",
                members: {
                    SourceType: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventCategoriesResult",
                type: "structure",
                members: {
                    EventCategoriesMapList: {
                        type: "list",
                        member: {
                            locationName: "EventCategoriesMap",
                            type: "structure",
                            members: {
                                SourceType: {},
                                Events: {
                                    type: "list",
                                    member: {
                                        locationName: "EventInfoMap",
                                        type: "structure",
                                        members: {
                                            EventId: {},
                                            EventCategories: {
                                                shape: "S3q"
                                            },
                                            EventDescription: {},
                                            Severity: {}
                                        },
                                        wrapper: true
                                    }
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeEventSubscriptions: {
            input: {
                type: "structure",
                members: {
                    SubscriptionName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeEventSubscriptionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    EventSubscriptionsList: {
                        type: "list",
                        member: {
                            shape: "S3s",
                            locationName: "EventSubscription"
                        }
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceIdentifier: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Events: {
                        type: "list",
                        member: {
                            locationName: "Event",
                            type: "structure",
                            members: {
                                SourceIdentifier: {},
                                SourceType: {},
                                Message: {},
                                EventCategories: {
                                    shape: "S3q"
                                },
                                Severity: {},
                                Date: {
                                    type: "timestamp"
                                },
                                EventId: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeHsmClientCertificates: {
            input: {
                type: "structure",
                members: {
                    HsmClientCertificateIdentifier: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeHsmClientCertificatesResult",
                type: "structure",
                members: {
                    Marker: {},
                    HsmClientCertificates: {
                        type: "list",
                        member: {
                            shape: "S3v",
                            locationName: "HsmClientCertificate"
                        }
                    }
                }
            }
        },
        DescribeHsmConfigurations: {
            input: {
                type: "structure",
                members: {
                    HsmConfigurationIdentifier: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeHsmConfigurationsResult",
                type: "structure",
                members: {
                    Marker: {},
                    HsmConfigurations: {
                        type: "list",
                        member: {
                            shape: "S3y",
                            locationName: "HsmConfiguration"
                        }
                    }
                }
            }
        },
        DescribeInboundIntegrations: {
            input: {
                type: "structure",
                members: {
                    IntegrationArn: {},
                    TargetArn: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeInboundIntegrationsResult",
                type: "structure",
                members: {
                    Marker: {},
                    InboundIntegrations: {
                        type: "list",
                        member: {
                            locationName: "InboundIntegration",
                            type: "structure",
                            members: {
                                IntegrationArn: {},
                                SourceArn: {},
                                TargetArn: {},
                                Status: {},
                                Errors: {
                                    type: "list",
                                    member: {
                                        locationName: "IntegrationError",
                                        type: "structure",
                                        required: [ "ErrorCode" ],
                                        members: {
                                            ErrorCode: {},
                                            ErrorMessage: {}
                                        }
                                    }
                                },
                                CreateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeLoggingStatus: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {}
                }
            },
            output: {
                shape: "S8m",
                resultWrapper: "DescribeLoggingStatusResult"
            }
        },
        DescribeNodeConfigurationOptions: {
            input: {
                type: "structure",
                required: [ "ActionType" ],
                members: {
                    ActionType: {},
                    ClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    SnapshotArn: {},
                    OwnerAccount: {},
                    Filters: {
                        locationName: "Filter",
                        type: "list",
                        member: {
                            locationName: "NodeConfigurationOptionsFilter",
                            type: "structure",
                            members: {
                                Name: {},
                                Operator: {},
                                Values: {
                                    shape: "S3h",
                                    locationName: "Value"
                                }
                            }
                        }
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeNodeConfigurationOptionsResult",
                type: "structure",
                members: {
                    NodeConfigurationOptionList: {
                        type: "list",
                        member: {
                            locationName: "NodeConfigurationOption",
                            type: "structure",
                            members: {
                                NodeType: {},
                                NumberOfNodes: {
                                    type: "integer"
                                },
                                EstimatedDiskUtilizationPercent: {
                                    type: "double"
                                },
                                Mode: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeOrderableClusterOptions: {
            input: {
                type: "structure",
                members: {
                    ClusterVersion: {},
                    NodeType: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeOrderableClusterOptionsResult",
                type: "structure",
                members: {
                    OrderableClusterOptions: {
                        type: "list",
                        member: {
                            locationName: "OrderableClusterOption",
                            type: "structure",
                            members: {
                                ClusterVersion: {},
                                ClusterType: {},
                                NodeType: {},
                                AvailabilityZones: {
                                    type: "list",
                                    member: {
                                        shape: "S3e",
                                        locationName: "AvailabilityZone"
                                    }
                                }
                            },
                            wrapper: true
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribePartners: {
            input: {
                type: "structure",
                required: [ "AccountId", "ClusterIdentifier" ],
                members: {
                    AccountId: {},
                    ClusterIdentifier: {},
                    DatabaseName: {},
                    PartnerName: {}
                }
            },
            output: {
                resultWrapper: "DescribePartnersResult",
                type: "structure",
                members: {
                    PartnerIntegrationInfoList: {
                        type: "list",
                        member: {
                            locationName: "PartnerIntegrationInfo",
                            type: "structure",
                            members: {
                                DatabaseName: {},
                                PartnerName: {},
                                Status: {},
                                StatusMessage: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeRedshiftIdcApplications: {
            input: {
                type: "structure",
                members: {
                    RedshiftIdcApplicationArn: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeRedshiftIdcApplicationsResult",
                type: "structure",
                members: {
                    RedshiftIdcApplications: {
                        type: "list",
                        member: {
                            shape: "S4d"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeReservedNodeExchangeStatus: {
            input: {
                type: "structure",
                members: {
                    ReservedNodeId: {},
                    ReservedNodeExchangeRequestId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeReservedNodeExchangeStatusResult",
                type: "structure",
                members: {
                    ReservedNodeExchangeStatusDetails: {
                        type: "list",
                        member: {
                            shape: "S2y",
                            locationName: "ReservedNodeExchangeStatus"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeReservedNodeOfferings: {
            input: {
                type: "structure",
                members: {
                    ReservedNodeOfferingId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeReservedNodeOfferingsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ReservedNodeOfferings: {
                        shape: "S9i"
                    }
                }
            }
        },
        DescribeReservedNodes: {
            input: {
                type: "structure",
                members: {
                    ReservedNodeId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeReservedNodesResult",
                type: "structure",
                members: {
                    Marker: {},
                    ReservedNodes: {
                        type: "list",
                        member: {
                            shape: "S4",
                            locationName: "ReservedNode"
                        }
                    }
                }
            }
        },
        DescribeResize: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {}
                }
            },
            output: {
                shape: "S1l",
                resultWrapper: "DescribeResizeResult"
            }
        },
        DescribeScheduledActions: {
            input: {
                type: "structure",
                members: {
                    ScheduledActionName: {},
                    TargetActionType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Active: {
                        type: "boolean"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            locationName: "ScheduledActionFilter",
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S3h"
                                }
                            }
                        }
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeScheduledActionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ScheduledActions: {
                        type: "list",
                        member: {
                            shape: "S4j",
                            locationName: "ScheduledAction"
                        }
                    }
                }
            }
        },
        DescribeSnapshotCopyGrants: {
            input: {
                type: "structure",
                members: {
                    SnapshotCopyGrantName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeSnapshotCopyGrantsResult",
                type: "structure",
                members: {
                    Marker: {},
                    SnapshotCopyGrants: {
                        type: "list",
                        member: {
                            shape: "S4o",
                            locationName: "SnapshotCopyGrant"
                        }
                    }
                }
            }
        },
        DescribeSnapshotSchedules: {
            input: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    ScheduleIdentifier: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeSnapshotSchedulesResult",
                type: "structure",
                members: {
                    SnapshotSchedules: {
                        type: "list",
                        member: {
                            shape: "S4r",
                            locationName: "SnapshotSchedule"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeStorage: {
            output: {
                resultWrapper: "DescribeStorageResult",
                type: "structure",
                members: {
                    TotalBackupSizeInMegaBytes: {
                        type: "double"
                    },
                    TotalProvisionedStorageInMegaBytes: {
                        type: "double"
                    }
                }
            }
        },
        DescribeTableRestoreStatus: {
            input: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    TableRestoreRequestId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeTableRestoreStatusResult",
                type: "structure",
                members: {
                    TableRestoreStatusDetails: {
                        type: "list",
                        member: {
                            shape: "Sa5",
                            locationName: "TableRestoreStatus"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                members: {
                    ResourceName: {},
                    ResourceType: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTagsResult",
                type: "structure",
                members: {
                    TaggedResources: {
                        type: "list",
                        member: {
                            locationName: "TaggedResource",
                            type: "structure",
                            members: {
                                Tag: {
                                    shape: "Su"
                                },
                                ResourceName: {},
                                ResourceType: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeUsageLimits: {
            input: {
                type: "structure",
                members: {
                    UsageLimitId: {},
                    ClusterIdentifier: {},
                    FeatureType: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    TagKeys: {
                        shape: "S5m"
                    },
                    TagValues: {
                        shape: "S66"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeUsageLimitsResult",
                type: "structure",
                members: {
                    UsageLimits: {
                        type: "list",
                        member: {
                            shape: "S51"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DisableLogging: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {}
                }
            },
            output: {
                shape: "S8m",
                resultWrapper: "DisableLoggingResult"
            }
        },
        DisableSnapshotCopy: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DisableSnapshotCopyResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        DisassociateDataShareConsumer: {
            input: {
                type: "structure",
                required: [ "DataShareArn" ],
                members: {
                    DataShareArn: {},
                    DisassociateEntireAccount: {
                        type: "boolean"
                    },
                    ConsumerArn: {},
                    ConsumerRegion: {}
                }
            },
            output: {
                shape: "Sj",
                resultWrapper: "DisassociateDataShareConsumerResult"
            }
        },
        EnableLogging: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {},
                    BucketName: {},
                    S3KeyPrefix: {},
                    LogDestinationType: {},
                    LogExports: {
                        shape: "S8o"
                    }
                }
            },
            output: {
                shape: "S8m",
                resultWrapper: "EnableLoggingResult"
            }
        },
        EnableSnapshotCopy: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "DestinationRegion" ],
                members: {
                    ClusterIdentifier: {},
                    DestinationRegion: {},
                    RetentionPeriod: {
                        type: "integer"
                    },
                    SnapshotCopyGrantName: {},
                    ManualSnapshotRetentionPeriod: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "EnableSnapshotCopyResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        FailoverPrimaryCompute: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "FailoverPrimaryComputeResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        GetClusterCredentials: {
            input: {
                type: "structure",
                required: [ "DbUser" ],
                members: {
                    DbUser: {},
                    DbName: {},
                    ClusterIdentifier: {},
                    DurationSeconds: {
                        type: "integer"
                    },
                    AutoCreate: {
                        type: "boolean"
                    },
                    DbGroups: {
                        type: "list",
                        member: {
                            locationName: "DbGroup"
                        }
                    },
                    CustomDomainName: {}
                }
            },
            output: {
                resultWrapper: "GetClusterCredentialsResult",
                type: "structure",
                members: {
                    DbUser: {},
                    DbPassword: {
                        shape: "S1x"
                    },
                    Expiration: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetClusterCredentialsWithIAM: {
            input: {
                type: "structure",
                members: {
                    DbName: {},
                    ClusterIdentifier: {},
                    DurationSeconds: {
                        type: "integer"
                    },
                    CustomDomainName: {}
                }
            },
            output: {
                resultWrapper: "GetClusterCredentialsWithIAMResult",
                type: "structure",
                members: {
                    DbUser: {},
                    DbPassword: {
                        shape: "S1x"
                    },
                    Expiration: {
                        type: "timestamp"
                    },
                    NextRefreshTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetReservedNodeExchangeConfigurationOptions: {
            input: {
                type: "structure",
                required: [ "ActionType" ],
                members: {
                    ActionType: {},
                    ClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "GetReservedNodeExchangeConfigurationOptionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ReservedNodeConfigurationOptionList: {
                        type: "list",
                        member: {
                            locationName: "ReservedNodeConfigurationOption",
                            type: "structure",
                            members: {
                                SourceReservedNode: {
                                    shape: "S4"
                                },
                                TargetReservedNodeCount: {
                                    type: "integer"
                                },
                                TargetReservedNodeOffering: {
                                    shape: "S9j"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        GetReservedNodeExchangeOfferings: {
            input: {
                type: "structure",
                required: [ "ReservedNodeId" ],
                members: {
                    ReservedNodeId: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "GetReservedNodeExchangeOfferingsResult",
                type: "structure",
                members: {
                    Marker: {},
                    ReservedNodeOfferings: {
                        shape: "S9i"
                    }
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                resultWrapper: "GetResourcePolicyResult",
                type: "structure",
                members: {
                    ResourcePolicy: {
                        shape: "Sb1"
                    }
                }
            }
        },
        ModifyAquaConfiguration: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {},
                    AquaConfigurationStatus: {}
                }
            },
            output: {
                resultWrapper: "ModifyAquaConfigurationResult",
                type: "structure",
                members: {
                    AquaConfiguration: {
                        shape: "S2w"
                    }
                }
            }
        },
        ModifyAuthenticationProfile: {
            input: {
                type: "structure",
                required: [ "AuthenticationProfileName", "AuthenticationProfileContent" ],
                members: {
                    AuthenticationProfileName: {},
                    AuthenticationProfileContent: {}
                }
            },
            output: {
                resultWrapper: "ModifyAuthenticationProfileResult",
                type: "structure",
                members: {
                    AuthenticationProfileName: {},
                    AuthenticationProfileContent: {}
                }
            }
        },
        ModifyCluster: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {},
                    ClusterType: {},
                    NodeType: {},
                    NumberOfNodes: {
                        type: "integer"
                    },
                    ClusterSecurityGroups: {
                        shape: "S1y"
                    },
                    VpcSecurityGroupIds: {
                        shape: "S1z"
                    },
                    MasterUserPassword: {
                        shape: "S1x"
                    },
                    ClusterParameterGroupName: {},
                    AutomatedSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    ManualSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    PreferredMaintenanceWindow: {},
                    ClusterVersion: {},
                    AllowVersionUpgrade: {
                        type: "boolean"
                    },
                    HsmClientCertificateIdentifier: {},
                    HsmConfigurationIdentifier: {},
                    NewClusterIdentifier: {},
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    ElasticIp: {},
                    EnhancedVpcRouting: {
                        type: "boolean"
                    },
                    MaintenanceTrackName: {},
                    Encrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    AvailabilityZoneRelocation: {
                        type: "boolean"
                    },
                    AvailabilityZone: {},
                    Port: {
                        type: "integer"
                    },
                    ManageMasterPassword: {
                        type: "boolean"
                    },
                    MasterPasswordSecretKmsKeyId: {},
                    IpAddressType: {},
                    MultiAZ: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyClusterResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        ModifyClusterDbRevision: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "RevisionTarget" ],
                members: {
                    ClusterIdentifier: {},
                    RevisionTarget: {}
                }
            },
            output: {
                resultWrapper: "ModifyClusterDbRevisionResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        ModifyClusterIamRoles: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {},
                    AddIamRoles: {
                        shape: "S20"
                    },
                    RemoveIamRoles: {
                        shape: "S20"
                    },
                    DefaultIamRoleArn: {}
                }
            },
            output: {
                resultWrapper: "ModifyClusterIamRolesResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        ModifyClusterMaintenance: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {},
                    DeferMaintenance: {
                        type: "boolean"
                    },
                    DeferMaintenanceIdentifier: {},
                    DeferMaintenanceStartTime: {
                        type: "timestamp"
                    },
                    DeferMaintenanceEndTime: {
                        type: "timestamp"
                    },
                    DeferMaintenanceDuration: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyClusterMaintenanceResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        ModifyClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName", "Parameters" ],
                members: {
                    ParameterGroupName: {},
                    Parameters: {
                        shape: "S6b"
                    }
                }
            },
            output: {
                shape: "Sbf",
                resultWrapper: "ModifyClusterParameterGroupResult"
            }
        },
        ModifyClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotIdentifier" ],
                members: {
                    SnapshotIdentifier: {},
                    ManualSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyClusterSnapshotResult",
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S14"
                    }
                }
            }
        },
        ModifyClusterSnapshotSchedule: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {},
                    ScheduleIdentifier: {},
                    DisassociateSchedule: {
                        type: "boolean"
                    }
                }
            }
        },
        ModifyClusterSubnetGroup: {
            input: {
                type: "structure",
                required: [ "ClusterSubnetGroupName", "SubnetIds" ],
                members: {
                    ClusterSubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "S39"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyClusterSubnetGroupResult",
                type: "structure",
                members: {
                    ClusterSubnetGroup: {
                        shape: "S3b"
                    }
                }
            }
        },
        ModifyCustomDomainAssociation: {
            input: {
                type: "structure",
                required: [ "CustomDomainName", "CustomDomainCertificateArn", "ClusterIdentifier" ],
                members: {
                    CustomDomainName: {},
                    CustomDomainCertificateArn: {},
                    ClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "ModifyCustomDomainAssociationResult",
                type: "structure",
                members: {
                    CustomDomainName: {},
                    CustomDomainCertificateArn: {},
                    ClusterIdentifier: {},
                    CustomDomainCertExpiryTime: {}
                }
            }
        },
        ModifyEndpointAccess: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {},
                    VpcSecurityGroupIds: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                shape: "S3n",
                resultWrapper: "ModifyEndpointAccessResult"
            }
        },
        ModifyEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    SourceIds: {
                        shape: "S3p"
                    },
                    EventCategories: {
                        shape: "S3q"
                    },
                    Severity: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S3s"
                    }
                }
            }
        },
        ModifyRedshiftIdcApplication: {
            input: {
                type: "structure",
                required: [ "RedshiftIdcApplicationArn" ],
                members: {
                    RedshiftIdcApplicationArn: {},
                    IdentityNamespace: {},
                    IamRoleArn: {},
                    IdcDisplayName: {},
                    AuthorizedTokenIssuerList: {
                        shape: "S43"
                    },
                    ServiceIntegrations: {
                        shape: "S46"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyRedshiftIdcApplicationResult",
                type: "structure",
                members: {
                    RedshiftIdcApplication: {
                        shape: "S4d"
                    }
                }
            }
        },
        ModifyScheduledAction: {
            input: {
                type: "structure",
                required: [ "ScheduledActionName" ],
                members: {
                    ScheduledActionName: {},
                    TargetAction: {
                        shape: "S4f"
                    },
                    Schedule: {},
                    IamRole: {},
                    ScheduledActionDescription: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Enable: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S4j",
                resultWrapper: "ModifyScheduledActionResult"
            }
        },
        ModifySnapshotCopyRetentionPeriod: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "RetentionPeriod" ],
                members: {
                    ClusterIdentifier: {},
                    RetentionPeriod: {
                        type: "integer"
                    },
                    Manual: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifySnapshotCopyRetentionPeriodResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        ModifySnapshotSchedule: {
            input: {
                type: "structure",
                required: [ "ScheduleIdentifier", "ScheduleDefinitions" ],
                members: {
                    ScheduleIdentifier: {},
                    ScheduleDefinitions: {
                        shape: "S4q"
                    }
                }
            },
            output: {
                shape: "S4r",
                resultWrapper: "ModifySnapshotScheduleResult"
            }
        },
        ModifyUsageLimit: {
            input: {
                type: "structure",
                required: [ "UsageLimitId" ],
                members: {
                    UsageLimitId: {},
                    Amount: {
                        type: "long"
                    },
                    BreachAction: {}
                }
            },
            output: {
                shape: "S51",
                resultWrapper: "ModifyUsageLimitResult"
            }
        },
        PauseCluster: {
            input: {
                shape: "S4h"
            },
            output: {
                resultWrapper: "PauseClusterResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        PurchaseReservedNodeOffering: {
            input: {
                type: "structure",
                required: [ "ReservedNodeOfferingId" ],
                members: {
                    ReservedNodeOfferingId: {},
                    NodeCount: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "PurchaseReservedNodeOfferingResult",
                type: "structure",
                members: {
                    ReservedNode: {
                        shape: "S4"
                    }
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                resultWrapper: "PutResourcePolicyResult",
                type: "structure",
                members: {
                    ResourcePolicy: {
                        shape: "Sb1"
                    }
                }
            }
        },
        RebootCluster: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RebootClusterResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        RejectDataShare: {
            input: {
                type: "structure",
                required: [ "DataShareArn" ],
                members: {
                    DataShareArn: {}
                }
            },
            output: {
                shape: "Sj",
                resultWrapper: "RejectDataShareResult"
            }
        },
        ResetClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S6b"
                    }
                }
            },
            output: {
                shape: "Sbf",
                resultWrapper: "ResetClusterParameterGroupResult"
            }
        },
        ResizeCluster: {
            input: {
                shape: "S4g"
            },
            output: {
                resultWrapper: "ResizeClusterResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        RestoreFromClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    SnapshotArn: {},
                    SnapshotClusterIdentifier: {},
                    Port: {
                        type: "integer"
                    },
                    AvailabilityZone: {},
                    AllowVersionUpgrade: {
                        type: "boolean"
                    },
                    ClusterSubnetGroupName: {},
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    OwnerAccount: {},
                    HsmClientCertificateIdentifier: {},
                    HsmConfigurationIdentifier: {},
                    ElasticIp: {},
                    ClusterParameterGroupName: {},
                    ClusterSecurityGroups: {
                        shape: "S1y"
                    },
                    VpcSecurityGroupIds: {
                        shape: "S1z"
                    },
                    PreferredMaintenanceWindow: {},
                    AutomatedSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    ManualSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    KmsKeyId: {},
                    NodeType: {},
                    EnhancedVpcRouting: {
                        type: "boolean"
                    },
                    AdditionalInfo: {},
                    IamRoles: {
                        shape: "S20"
                    },
                    MaintenanceTrackName: {},
                    SnapshotScheduleIdentifier: {},
                    NumberOfNodes: {
                        type: "integer"
                    },
                    AvailabilityZoneRelocation: {
                        type: "boolean"
                    },
                    AquaConfigurationStatus: {},
                    DefaultIamRoleArn: {},
                    ReservedNodeId: {},
                    TargetReservedNodeOfferingId: {},
                    Encrypted: {
                        type: "boolean"
                    },
                    ManageMasterPassword: {
                        type: "boolean"
                    },
                    MasterPasswordSecretKmsKeyId: {},
                    IpAddressType: {},
                    MultiAZ: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreFromClusterSnapshotResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        RestoreTableFromClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier", "SnapshotIdentifier", "SourceDatabaseName", "SourceTableName", "NewTableName" ],
                members: {
                    ClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    SourceDatabaseName: {},
                    SourceSchemaName: {},
                    SourceTableName: {},
                    TargetDatabaseName: {},
                    TargetSchemaName: {},
                    NewTableName: {},
                    EnableCaseSensitiveIdentifier: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RestoreTableFromClusterSnapshotResult",
                type: "structure",
                members: {
                    TableRestoreStatus: {
                        shape: "Sa5"
                    }
                }
            }
        },
        ResumeCluster: {
            input: {
                shape: "S4i"
            },
            output: {
                resultWrapper: "ResumeClusterResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        RevokeClusterSecurityGroupIngress: {
            input: {
                type: "structure",
                required: [ "ClusterSecurityGroupName" ],
                members: {
                    ClusterSecurityGroupName: {},
                    CIDRIP: {},
                    EC2SecurityGroupName: {},
                    EC2SecurityGroupOwnerId: {}
                }
            },
            output: {
                resultWrapper: "RevokeClusterSecurityGroupIngressResult",
                type: "structure",
                members: {
                    ClusterSecurityGroup: {
                        shape: "Sq"
                    }
                }
            }
        },
        RevokeEndpointAccess: {
            input: {
                type: "structure",
                members: {
                    ClusterIdentifier: {},
                    Account: {},
                    VpcIds: {
                        shape: "Sz"
                    },
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S10",
                resultWrapper: "RevokeEndpointAccessResult"
            }
        },
        RevokeSnapshotAccess: {
            input: {
                type: "structure",
                required: [ "AccountWithRestoreAccess" ],
                members: {
                    SnapshotIdentifier: {},
                    SnapshotArn: {},
                    SnapshotClusterIdentifier: {},
                    AccountWithRestoreAccess: {}
                }
            },
            output: {
                resultWrapper: "RevokeSnapshotAccessResult",
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S14"
                    }
                }
            }
        },
        RotateEncryptionKey: {
            input: {
                type: "structure",
                required: [ "ClusterIdentifier" ],
                members: {
                    ClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RotateEncryptionKeyResult",
                type: "structure",
                members: {
                    Cluster: {
                        shape: "S23"
                    }
                }
            }
        },
        UpdatePartnerStatus: {
            input: {
                type: "structure",
                required: [ "AccountId", "ClusterIdentifier", "DatabaseName", "PartnerName", "Status" ],
                members: {
                    AccountId: {},
                    ClusterIdentifier: {},
                    DatabaseName: {},
                    PartnerName: {},
                    Status: {},
                    StatusMessage: {}
                }
            },
            output: {
                shape: "Sg",
                resultWrapper: "UpdatePartnerStatusResult"
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                ReservedNodeId: {},
                ReservedNodeOfferingId: {},
                NodeType: {},
                StartTime: {
                    type: "timestamp"
                },
                Duration: {
                    type: "integer"
                },
                FixedPrice: {
                    type: "double"
                },
                UsagePrice: {
                    type: "double"
                },
                CurrencyCode: {},
                NodeCount: {
                    type: "integer"
                },
                State: {},
                OfferingType: {},
                RecurringCharges: {
                    shape: "S8"
                },
                ReservedNodeOfferingType: {}
            },
            wrapper: true
        },
        S8: {
            type: "list",
            member: {
                locationName: "RecurringCharge",
                type: "structure",
                members: {
                    RecurringChargeAmount: {
                        type: "double"
                    },
                    RecurringChargeFrequency: {}
                },
                wrapper: true
            }
        },
        Sb: {
            type: "structure",
            required: [ "AccountId", "ClusterIdentifier", "DatabaseName", "PartnerName" ],
            members: {
                AccountId: {},
                ClusterIdentifier: {},
                DatabaseName: {},
                PartnerName: {}
            }
        },
        Sg: {
            type: "structure",
            members: {
                DatabaseName: {},
                PartnerName: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                DataShareArn: {},
                ProducerArn: {},
                AllowPubliclyAccessibleConsumers: {
                    type: "boolean"
                },
                DataShareAssociations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ConsumerIdentifier: {},
                            Status: {},
                            ConsumerRegion: {},
                            CreatedDate: {
                                type: "timestamp"
                            },
                            StatusChangeDate: {
                                type: "timestamp"
                            },
                            ProducerAllowedWrites: {
                                type: "boolean"
                            },
                            ConsumerAcceptedWrites: {
                                type: "boolean"
                            }
                        }
                    }
                },
                ManagedBy: {}
            }
        },
        Sq: {
            type: "structure",
            members: {
                ClusterSecurityGroupName: {},
                Description: {},
                EC2SecurityGroups: {
                    type: "list",
                    member: {
                        locationName: "EC2SecurityGroup",
                        type: "structure",
                        members: {
                            Status: {},
                            EC2SecurityGroupName: {},
                            EC2SecurityGroupOwnerId: {},
                            Tags: {
                                shape: "St"
                            }
                        }
                    }
                },
                IPRanges: {
                    type: "list",
                    member: {
                        locationName: "IPRange",
                        type: "structure",
                        members: {
                            Status: {},
                            CIDRIP: {},
                            Tags: {
                                shape: "St"
                            }
                        }
                    }
                },
                Tags: {
                    shape: "St"
                }
            },
            wrapper: true
        },
        St: {
            type: "list",
            member: {
                shape: "Su",
                locationName: "Tag"
            }
        },
        Su: {
            type: "structure",
            members: {
                Key: {},
                Value: {}
            }
        },
        Sz: {
            type: "list",
            member: {
                locationName: "VpcIdentifier"
            }
        },
        S10: {
            type: "structure",
            members: {
                Grantor: {},
                Grantee: {},
                ClusterIdentifier: {},
                AuthorizeTime: {
                    type: "timestamp"
                },
                ClusterStatus: {},
                Status: {},
                AllowedAllVPCs: {
                    type: "boolean"
                },
                AllowedVPCs: {
                    shape: "Sz"
                },
                EndpointCount: {
                    type: "integer"
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                SnapshotIdentifier: {},
                ClusterIdentifier: {},
                SnapshotCreateTime: {
                    type: "timestamp"
                },
                Status: {},
                Port: {
                    type: "integer"
                },
                AvailabilityZone: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                MasterUsername: {},
                ClusterVersion: {},
                EngineFullVersion: {},
                SnapshotType: {},
                NodeType: {},
                NumberOfNodes: {
                    type: "integer"
                },
                DBName: {},
                VpcId: {},
                Encrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                EncryptedWithHSM: {
                    type: "boolean"
                },
                AccountsWithRestoreAccess: {
                    type: "list",
                    member: {
                        locationName: "AccountWithRestoreAccess",
                        type: "structure",
                        members: {
                            AccountId: {},
                            AccountAlias: {}
                        }
                    }
                },
                OwnerAccount: {},
                TotalBackupSizeInMegaBytes: {
                    type: "double"
                },
                ActualIncrementalBackupSizeInMegaBytes: {
                    type: "double"
                },
                BackupProgressInMegaBytes: {
                    type: "double"
                },
                CurrentBackupRateInMegaBytesPerSecond: {
                    type: "double"
                },
                EstimatedSecondsToCompletion: {
                    type: "long"
                },
                ElapsedTimeInSeconds: {
                    type: "long"
                },
                SourceRegion: {},
                Tags: {
                    shape: "St"
                },
                RestorableNodeTypes: {
                    type: "list",
                    member: {
                        locationName: "NodeType"
                    }
                },
                EnhancedVpcRouting: {
                    type: "boolean"
                },
                MaintenanceTrackName: {},
                ManualSnapshotRetentionPeriod: {
                    type: "integer"
                },
                ManualSnapshotRemainingDays: {
                    type: "integer"
                },
                SnapshotRetentionStartTime: {
                    type: "timestamp"
                },
                MasterPasswordSecretArn: {},
                MasterPasswordSecretKmsKeyId: {}
            },
            wrapper: true
        },
        S1c: {
            type: "structure",
            required: [ "SnapshotIdentifier" ],
            members: {
                SnapshotIdentifier: {},
                SnapshotClusterIdentifier: {}
            }
        },
        S1e: {
            type: "list",
            member: {
                locationName: "String"
            }
        },
        S1g: {
            type: "structure",
            members: {
                SnapshotIdentifier: {},
                SnapshotClusterIdentifier: {},
                FailureCode: {},
                FailureReason: {}
            }
        },
        S1l: {
            type: "structure",
            members: {
                TargetNodeType: {},
                TargetNumberOfNodes: {
                    type: "integer"
                },
                TargetClusterType: {},
                Status: {},
                ImportTablesCompleted: {
                    type: "list",
                    member: {}
                },
                ImportTablesInProgress: {
                    type: "list",
                    member: {}
                },
                ImportTablesNotStarted: {
                    type: "list",
                    member: {}
                },
                AvgResizeRateInMegaBytesPerSecond: {
                    type: "double"
                },
                TotalResizeDataInMegaBytes: {
                    type: "long"
                },
                ProgressInMegaBytes: {
                    type: "long"
                },
                ElapsedTimeInSeconds: {
                    type: "long"
                },
                EstimatedTimeToCompletionInSeconds: {
                    type: "long"
                },
                ResizeType: {},
                Message: {},
                TargetEncryptionType: {},
                DataTransferProgressPercent: {
                    type: "double"
                }
            }
        },
        S1x: {
            type: "string",
            sensitive: true
        },
        S1y: {
            type: "list",
            member: {
                locationName: "ClusterSecurityGroupName"
            }
        },
        S1z: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupId"
            }
        },
        S20: {
            type: "list",
            member: {
                locationName: "IamRoleArn"
            }
        },
        S23: {
            type: "structure",
            members: {
                ClusterIdentifier: {},
                NodeType: {},
                ClusterStatus: {},
                ClusterAvailabilityStatus: {},
                ModifyStatus: {},
                MasterUsername: {},
                DBName: {},
                Endpoint: {
                    type: "structure",
                    members: {
                        Address: {},
                        Port: {
                            type: "integer"
                        },
                        VpcEndpoints: {
                            type: "list",
                            member: {
                                shape: "S26",
                                locationName: "VpcEndpoint"
                            }
                        }
                    }
                },
                ClusterCreateTime: {
                    type: "timestamp"
                },
                AutomatedSnapshotRetentionPeriod: {
                    type: "integer"
                },
                ManualSnapshotRetentionPeriod: {
                    type: "integer"
                },
                ClusterSecurityGroups: {
                    type: "list",
                    member: {
                        locationName: "ClusterSecurityGroup",
                        type: "structure",
                        members: {
                            ClusterSecurityGroupName: {},
                            Status: {}
                        }
                    }
                },
                VpcSecurityGroups: {
                    shape: "S2b"
                },
                ClusterParameterGroups: {
                    type: "list",
                    member: {
                        locationName: "ClusterParameterGroup",
                        type: "structure",
                        members: {
                            ParameterGroupName: {},
                            ParameterApplyStatus: {},
                            ClusterParameterStatusList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ParameterName: {},
                                        ParameterApplyStatus: {},
                                        ParameterApplyErrorDescription: {}
                                    }
                                }
                            }
                        }
                    }
                },
                ClusterSubnetGroupName: {},
                VpcId: {},
                AvailabilityZone: {},
                PreferredMaintenanceWindow: {},
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        MasterUserPassword: {
                            shape: "S1x"
                        },
                        NodeType: {},
                        NumberOfNodes: {
                            type: "integer"
                        },
                        ClusterType: {},
                        ClusterVersion: {},
                        AutomatedSnapshotRetentionPeriod: {
                            type: "integer"
                        },
                        ClusterIdentifier: {},
                        PubliclyAccessible: {
                            type: "boolean"
                        },
                        EnhancedVpcRouting: {
                            type: "boolean"
                        },
                        MaintenanceTrackName: {},
                        EncryptionType: {}
                    }
                },
                ClusterVersion: {},
                AllowVersionUpgrade: {
                    type: "boolean"
                },
                NumberOfNodes: {
                    type: "integer"
                },
                PubliclyAccessible: {
                    type: "boolean"
                },
                Encrypted: {
                    type: "boolean"
                },
                RestoreStatus: {
                    type: "structure",
                    members: {
                        Status: {},
                        CurrentRestoreRateInMegaBytesPerSecond: {
                            type: "double"
                        },
                        SnapshotSizeInMegaBytes: {
                            type: "long"
                        },
                        ProgressInMegaBytes: {
                            type: "long"
                        },
                        ElapsedTimeInSeconds: {
                            type: "long"
                        },
                        EstimatedTimeToCompletionInSeconds: {
                            type: "long"
                        }
                    }
                },
                DataTransferProgress: {
                    type: "structure",
                    members: {
                        Status: {},
                        CurrentRateInMegaBytesPerSecond: {
                            type: "double"
                        },
                        TotalDataInMegaBytes: {
                            type: "long"
                        },
                        DataTransferredInMegaBytes: {
                            type: "long"
                        },
                        EstimatedTimeToCompletionInSeconds: {
                            type: "long"
                        },
                        ElapsedTimeInSeconds: {
                            type: "long"
                        }
                    }
                },
                HsmStatus: {
                    type: "structure",
                    members: {
                        HsmClientCertificateIdentifier: {},
                        HsmConfigurationIdentifier: {},
                        Status: {}
                    }
                },
                ClusterSnapshotCopyStatus: {
                    type: "structure",
                    members: {
                        DestinationRegion: {},
                        RetentionPeriod: {
                            type: "long"
                        },
                        ManualSnapshotRetentionPeriod: {
                            type: "integer"
                        },
                        SnapshotCopyGrantName: {}
                    }
                },
                ClusterPublicKey: {},
                ClusterNodes: {
                    shape: "S2m"
                },
                ElasticIpStatus: {
                    type: "structure",
                    members: {
                        ElasticIp: {},
                        Status: {}
                    }
                },
                ClusterRevisionNumber: {},
                Tags: {
                    shape: "St"
                },
                KmsKeyId: {},
                EnhancedVpcRouting: {
                    type: "boolean"
                },
                IamRoles: {
                    type: "list",
                    member: {
                        locationName: "ClusterIamRole",
                        type: "structure",
                        members: {
                            IamRoleArn: {},
                            ApplyStatus: {}
                        }
                    }
                },
                PendingActions: {
                    type: "list",
                    member: {}
                },
                MaintenanceTrackName: {},
                ElasticResizeNumberOfNodeOptions: {},
                DeferredMaintenanceWindows: {
                    type: "list",
                    member: {
                        locationName: "DeferredMaintenanceWindow",
                        type: "structure",
                        members: {
                            DeferMaintenanceIdentifier: {},
                            DeferMaintenanceStartTime: {
                                type: "timestamp"
                            },
                            DeferMaintenanceEndTime: {
                                type: "timestamp"
                            }
                        }
                    }
                },
                SnapshotScheduleIdentifier: {},
                SnapshotScheduleState: {},
                ExpectedNextSnapshotScheduleTime: {
                    type: "timestamp"
                },
                ExpectedNextSnapshotScheduleTimeStatus: {},
                NextMaintenanceWindowStartTime: {
                    type: "timestamp"
                },
                ResizeInfo: {
                    type: "structure",
                    members: {
                        ResizeType: {},
                        AllowCancelResize: {
                            type: "boolean"
                        }
                    }
                },
                AvailabilityZoneRelocationStatus: {},
                ClusterNamespaceArn: {},
                TotalStorageCapacityInMegaBytes: {
                    type: "long"
                },
                AquaConfiguration: {
                    shape: "S2w"
                },
                DefaultIamRoleArn: {},
                ReservedNodeExchangeStatus: {
                    shape: "S2y"
                },
                CustomDomainName: {},
                CustomDomainCertificateArn: {},
                CustomDomainCertificateExpiryDate: {
                    type: "timestamp"
                },
                MasterPasswordSecretArn: {},
                MasterPasswordSecretKmsKeyId: {},
                IpAddressType: {},
                MultiAZ: {},
                MultiAZSecondary: {
                    type: "structure",
                    members: {
                        AvailabilityZone: {},
                        ClusterNodes: {
                            shape: "S2m"
                        }
                    }
                }
            },
            wrapper: true
        },
        S26: {
            type: "structure",
            members: {
                VpcEndpointId: {},
                VpcId: {},
                NetworkInterfaces: {
                    type: "list",
                    member: {
                        locationName: "NetworkInterface",
                        type: "structure",
                        members: {
                            NetworkInterfaceId: {},
                            SubnetId: {},
                            PrivateIpAddress: {},
                            AvailabilityZone: {},
                            Ipv6Address: {}
                        }
                    }
                }
            }
        },
        S2b: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroup",
                type: "structure",
                members: {
                    VpcSecurityGroupId: {},
                    Status: {}
                }
            }
        },
        S2m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    NodeRole: {},
                    PrivateIPAddress: {},
                    PublicIPAddress: {}
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                AquaStatus: {},
                AquaConfigurationStatus: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                ReservedNodeExchangeRequestId: {},
                Status: {},
                RequestTime: {
                    type: "timestamp"
                },
                SourceReservedNodeId: {},
                SourceReservedNodeType: {},
                SourceReservedNodeCount: {
                    type: "integer"
                },
                TargetReservedNodeOfferingId: {},
                TargetReservedNodeType: {},
                TargetReservedNodeCount: {
                    type: "integer"
                }
            },
            wrapper: true
        },
        S33: {
            type: "structure",
            members: {
                ParameterGroupName: {},
                ParameterGroupFamily: {},
                Description: {},
                Tags: {
                    shape: "St"
                }
            },
            wrapper: true
        },
        S39: {
            type: "list",
            member: {
                locationName: "SubnetIdentifier"
            }
        },
        S3b: {
            type: "structure",
            members: {
                ClusterSubnetGroupName: {},
                Description: {},
                VpcId: {},
                SubnetGroupStatus: {},
                Subnets: {
                    type: "list",
                    member: {
                        locationName: "Subnet",
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {
                                shape: "S3e"
                            },
                            SubnetStatus: {}
                        }
                    }
                },
                Tags: {
                    shape: "St"
                },
                SupportedClusterIpAddressTypes: {
                    shape: "S3h"
                }
            },
            wrapper: true
        },
        S3e: {
            type: "structure",
            members: {
                Name: {},
                SupportedPlatforms: {
                    type: "list",
                    member: {
                        locationName: "SupportedPlatform",
                        type: "structure",
                        members: {
                            Name: {}
                        },
                        wrapper: true
                    }
                }
            },
            wrapper: true
        },
        S3h: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S3n: {
            type: "structure",
            members: {
                ClusterIdentifier: {},
                ResourceOwner: {},
                SubnetGroupName: {},
                EndpointStatus: {},
                EndpointName: {},
                EndpointCreateTime: {
                    type: "timestamp"
                },
                Port: {
                    type: "integer"
                },
                Address: {},
                VpcSecurityGroups: {
                    shape: "S2b"
                },
                VpcEndpoint: {
                    shape: "S26"
                }
            }
        },
        S3p: {
            type: "list",
            member: {
                locationName: "SourceId"
            }
        },
        S3q: {
            type: "list",
            member: {
                locationName: "EventCategory"
            }
        },
        S3s: {
            type: "structure",
            members: {
                CustomerAwsId: {},
                CustSubscriptionId: {},
                SnsTopicArn: {},
                Status: {},
                SubscriptionCreationTime: {
                    type: "timestamp"
                },
                SourceType: {},
                SourceIdsList: {
                    shape: "S3p"
                },
                EventCategoriesList: {
                    shape: "S3q"
                },
                Severity: {},
                Enabled: {
                    type: "boolean"
                },
                Tags: {
                    shape: "St"
                }
            },
            wrapper: true
        },
        S3v: {
            type: "structure",
            members: {
                HsmClientCertificateIdentifier: {},
                HsmClientCertificatePublicKey: {},
                Tags: {
                    shape: "St"
                }
            },
            wrapper: true
        },
        S3y: {
            type: "structure",
            members: {
                HsmConfigurationIdentifier: {},
                Description: {},
                HsmIpAddress: {},
                HsmPartitionName: {},
                Tags: {
                    shape: "St"
                }
            },
            wrapper: true
        },
        S43: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TrustedTokenIssuerArn: {},
                    AuthorizedAudiencesList: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S46: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LakeFormation: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LakeFormationQuery: {
                                    type: "structure",
                                    required: [ "Authorization" ],
                                    members: {
                                        Authorization: {}
                                    }
                                }
                            },
                            union: true
                        }
                    }
                },
                union: true
            }
        },
        S4d: {
            type: "structure",
            members: {
                IdcInstanceArn: {},
                RedshiftIdcApplicationName: {},
                RedshiftIdcApplicationArn: {},
                IdentityNamespace: {},
                IdcDisplayName: {},
                IamRoleArn: {},
                IdcManagedApplicationArn: {},
                IdcOnboardStatus: {},
                AuthorizedTokenIssuerList: {
                    shape: "S43"
                },
                ServiceIntegrations: {
                    shape: "S46"
                }
            },
            wrapper: true
        },
        S4f: {
            type: "structure",
            members: {
                ResizeCluster: {
                    shape: "S4g"
                },
                PauseCluster: {
                    shape: "S4h"
                },
                ResumeCluster: {
                    shape: "S4i"
                }
            }
        },
        S4g: {
            type: "structure",
            required: [ "ClusterIdentifier" ],
            members: {
                ClusterIdentifier: {},
                ClusterType: {},
                NodeType: {},
                NumberOfNodes: {
                    type: "integer"
                },
                Classic: {
                    type: "boolean"
                },
                ReservedNodeId: {},
                TargetReservedNodeOfferingId: {}
            }
        },
        S4h: {
            type: "structure",
            required: [ "ClusterIdentifier" ],
            members: {
                ClusterIdentifier: {}
            }
        },
        S4i: {
            type: "structure",
            required: [ "ClusterIdentifier" ],
            members: {
                ClusterIdentifier: {}
            }
        },
        S4j: {
            type: "structure",
            members: {
                ScheduledActionName: {},
                TargetAction: {
                    shape: "S4f"
                },
                Schedule: {},
                IamRole: {},
                ScheduledActionDescription: {},
                State: {},
                NextInvocations: {
                    type: "list",
                    member: {
                        locationName: "ScheduledActionTime",
                        type: "timestamp"
                    }
                },
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S4o: {
            type: "structure",
            members: {
                SnapshotCopyGrantName: {},
                KmsKeyId: {},
                Tags: {
                    shape: "St"
                }
            },
            wrapper: true
        },
        S4q: {
            type: "list",
            member: {
                locationName: "ScheduleDefinition"
            }
        },
        S4r: {
            type: "structure",
            members: {
                ScheduleDefinitions: {
                    shape: "S4q"
                },
                ScheduleIdentifier: {},
                ScheduleDescription: {},
                Tags: {
                    shape: "St"
                },
                NextInvocations: {
                    type: "list",
                    member: {
                        locationName: "SnapshotTime",
                        type: "timestamp"
                    }
                },
                AssociatedClusterCount: {
                    type: "integer"
                },
                AssociatedClusters: {
                    type: "list",
                    member: {
                        locationName: "ClusterAssociatedToSchedule",
                        type: "structure",
                        members: {
                            ClusterIdentifier: {},
                            ScheduleAssociationState: {}
                        }
                    }
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                UsageLimitId: {},
                ClusterIdentifier: {},
                FeatureType: {},
                LimitType: {},
                Amount: {
                    type: "long"
                },
                Period: {},
                BreachAction: {},
                Tags: {
                    shape: "St"
                }
            }
        },
        S5m: {
            type: "list",
            member: {
                locationName: "TagKey"
            }
        },
        S66: {
            type: "list",
            member: {
                locationName: "TagValue"
            }
        },
        S6b: {
            type: "list",
            member: {
                locationName: "Parameter",
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterValue: {},
                    Description: {},
                    Source: {},
                    DataType: {},
                    AllowedValues: {},
                    ApplyType: {},
                    IsModifiable: {
                        type: "boolean"
                    },
                    MinimumEngineVersion: {}
                }
            }
        },
        S7e: {
            type: "list",
            member: {
                shape: "Sj"
            }
        },
        S8m: {
            type: "structure",
            members: {
                LoggingEnabled: {
                    type: "boolean"
                },
                BucketName: {},
                S3KeyPrefix: {},
                LastSuccessfulDeliveryTime: {
                    type: "timestamp"
                },
                LastFailureTime: {
                    type: "timestamp"
                },
                LastFailureMessage: {},
                LogDestinationType: {},
                LogExports: {
                    shape: "S8o"
                }
            }
        },
        S8o: {
            type: "list",
            member: {}
        },
        S9i: {
            type: "list",
            member: {
                shape: "S9j",
                locationName: "ReservedNodeOffering"
            }
        },
        S9j: {
            type: "structure",
            members: {
                ReservedNodeOfferingId: {},
                NodeType: {},
                Duration: {
                    type: "integer"
                },
                FixedPrice: {
                    type: "double"
                },
                UsagePrice: {
                    type: "double"
                },
                CurrencyCode: {},
                OfferingType: {},
                RecurringCharges: {
                    shape: "S8"
                },
                ReservedNodeOfferingType: {}
            },
            wrapper: true
        },
        Sa5: {
            type: "structure",
            members: {
                TableRestoreRequestId: {},
                Status: {},
                Message: {},
                RequestTime: {
                    type: "timestamp"
                },
                ProgressInMegaBytes: {
                    type: "long"
                },
                TotalDataInMegaBytes: {
                    type: "long"
                },
                ClusterIdentifier: {},
                SnapshotIdentifier: {},
                SourceDatabaseName: {},
                SourceSchemaName: {},
                SourceTableName: {},
                TargetDatabaseName: {},
                TargetSchemaName: {},
                NewTableName: {}
            },
            wrapper: true
        },
        Sb1: {
            type: "structure",
            members: {
                ResourceArn: {},
                Policy: {}
            }
        },
        Sbf: {
            type: "structure",
            members: {
                ParameterGroupName: {},
                ParameterGroupStatus: {}
            }
        }
    },
    paginators: {
        DescribeClusterDbRevisions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ClusterDbRevisions"
        },
        DescribeClusterParameterGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ParameterGroups"
        },
        DescribeClusterParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Parameters"
        },
        DescribeClusterSecurityGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ClusterSecurityGroups"
        },
        DescribeClusterSnapshots: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Snapshots"
        },
        DescribeClusterSubnetGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ClusterSubnetGroups"
        },
        DescribeClusterTracks: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "MaintenanceTracks"
        },
        DescribeClusterVersions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ClusterVersions"
        },
        DescribeClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Clusters"
        },
        DescribeCustomDomainAssociations: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Associations"
        },
        DescribeDataShares: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DataShares"
        },
        DescribeDataSharesForConsumer: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DataShares"
        },
        DescribeDataSharesForProducer: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DataShares"
        },
        DescribeDefaultClusterParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "DefaultClusterParameters.Marker",
            result_key: "DefaultClusterParameters.Parameters"
        },
        DescribeEndpointAccess: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "EndpointAccessList"
        },
        DescribeEndpointAuthorization: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "EndpointAuthorizationList"
        },
        DescribeEventSubscriptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "EventSubscriptionsList"
        },
        DescribeEvents: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Events"
        },
        DescribeHsmClientCertificates: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "HsmClientCertificates"
        },
        DescribeHsmConfigurations: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "HsmConfigurations"
        },
        DescribeInboundIntegrations: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "InboundIntegrations"
        },
        DescribeNodeConfigurationOptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "NodeConfigurationOptionList"
        },
        DescribeOrderableClusterOptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "OrderableClusterOptions"
        },
        DescribeRedshiftIdcApplications: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "RedshiftIdcApplications"
        },
        DescribeReservedNodeExchangeStatus: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReservedNodeExchangeStatusDetails"
        },
        DescribeReservedNodeOfferings: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReservedNodeOfferings"
        },
        DescribeReservedNodes: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReservedNodes"
        },
        DescribeScheduledActions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ScheduledActions"
        },
        DescribeSnapshotCopyGrants: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "SnapshotCopyGrants"
        },
        DescribeSnapshotSchedules: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "SnapshotSchedules"
        },
        DescribeTableRestoreStatus: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "TableRestoreStatusDetails"
        },
        DescribeTags: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "TaggedResources"
        },
        DescribeUsageLimits: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "UsageLimits"
        },
        GetReservedNodeExchangeConfigurationOptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReservedNodeConfigurationOptionList"
        },
        GetReservedNodeExchangeOfferings: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "ReservedNodeOfferings"
        }
    },
    waiters: {
        ClusterAvailable: {
            delay: 60,
            operation: "DescribeClusters",
            maxAttempts: 30,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "Clusters[].ClusterStatus"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "Clusters[].ClusterStatus"
            }, {
                expected: "ClusterNotFound",
                matcher: "error",
                state: "retry"
            } ]
        },
        ClusterDeleted: {
            delay: 60,
            operation: "DescribeClusters",
            maxAttempts: 30,
            acceptors: [ {
                expected: "ClusterNotFound",
                matcher: "error",
                state: "success"
            }, {
                expected: "creating",
                matcher: "pathAny",
                state: "failure",
                argument: "Clusters[].ClusterStatus"
            }, {
                expected: "modifying",
                matcher: "pathAny",
                state: "failure",
                argument: "Clusters[].ClusterStatus"
            } ]
        },
        ClusterRestored: {
            operation: "DescribeClusters",
            maxAttempts: 30,
            delay: 60,
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "Clusters[].RestoreStatus.Status",
                expected: "completed"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "Clusters[].ClusterStatus",
                expected: "deleting"
            } ]
        },
        SnapshotAvailable: {
            delay: 15,
            operation: "DescribeClusterSnapshots",
            maxAttempts: 20,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "Snapshots[].Status"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "Snapshots[].Status"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "Snapshots[].Status"
            } ]
        }
    }
};

AWS.apiLoader.services["rekognition"] = {};

AWS.Rekognition = AWS.Service.defineService("rekognition", [ "2016-06-27" ]);

AWS.apiLoader.services["rekognition"]["2016-06-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-06-27",
        endpointPrefix: "rekognition",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Rekognition",
        serviceId: "Rekognition",
        signatureVersion: "v4",
        targetPrefix: "RekognitionService",
        uid: "rekognition-2016-06-27"
    },
    operations: {
        AssociateFaces: {
            input: {
                type: "structure",
                required: [ "CollectionId", "UserId", "FaceIds" ],
                members: {
                    CollectionId: {},
                    UserId: {},
                    FaceIds: {
                        shape: "S4"
                    },
                    UserMatchThreshold: {
                        type: "float"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociatedFaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FaceId: {}
                            }
                        }
                    },
                    UnsuccessfulFaceAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FaceId: {},
                                UserId: {},
                                Confidence: {
                                    type: "float"
                                },
                                Reasons: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    UserStatus: {}
                }
            }
        },
        CompareFaces: {
            input: {
                type: "structure",
                required: [ "SourceImage", "TargetImage" ],
                members: {
                    SourceImage: {
                        shape: "Sh"
                    },
                    TargetImage: {
                        shape: "Sh"
                    },
                    SimilarityThreshold: {
                        type: "float"
                    },
                    QualityFilter: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SourceImageFace: {
                        type: "structure",
                        members: {
                            BoundingBox: {
                                shape: "Sq"
                            },
                            Confidence: {
                                type: "float"
                            }
                        }
                    },
                    FaceMatches: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Similarity: {
                                    type: "float"
                                },
                                Face: {
                                    shape: "Su"
                                }
                            }
                        }
                    },
                    UnmatchedFaces: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    SourceImageOrientationCorrection: {},
                    TargetImageOrientationCorrection: {}
                }
            }
        },
        CopyProjectVersion: {
            input: {
                type: "structure",
                required: [ "SourceProjectArn", "SourceProjectVersionArn", "DestinationProjectArn", "VersionName", "OutputConfig" ],
                members: {
                    SourceProjectArn: {},
                    SourceProjectVersionArn: {},
                    DestinationProjectArn: {},
                    VersionName: {},
                    OutputConfig: {
                        shape: "S1c"
                    },
                    Tags: {
                        shape: "S1e"
                    },
                    KmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectVersionArn: {}
                }
            }
        },
        CreateCollection: {
            input: {
                type: "structure",
                required: [ "CollectionId" ],
                members: {
                    CollectionId: {},
                    Tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StatusCode: {
                        type: "integer"
                    },
                    CollectionArn: {},
                    FaceModelVersion: {}
                }
            }
        },
        CreateDataset: {
            input: {
                type: "structure",
                required: [ "DatasetType", "ProjectArn" ],
                members: {
                    DatasetSource: {
                        type: "structure",
                        members: {
                            GroundTruthManifest: {
                                shape: "S1p"
                            },
                            DatasetArn: {}
                        }
                    },
                    DatasetType: {},
                    ProjectArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetArn: {}
                }
            }
        },
        CreateFaceLivenessSession: {
            input: {
                type: "structure",
                members: {
                    KmsKeyId: {},
                    Settings: {
                        type: "structure",
                        members: {
                            OutputConfig: {
                                type: "structure",
                                required: [ "S3Bucket" ],
                                members: {
                                    S3Bucket: {},
                                    S3KeyPrefix: {}
                                }
                            },
                            AuditImagesLimit: {
                                type: "integer"
                            }
                        }
                    },
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {}
                }
            },
            idempotent: true
        },
        CreateProject: {
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {},
                    Feature: {},
                    AutoUpdate: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectArn: {}
                }
            }
        },
        CreateProjectVersion: {
            input: {
                type: "structure",
                required: [ "ProjectArn", "VersionName", "OutputConfig" ],
                members: {
                    ProjectArn: {},
                    VersionName: {},
                    OutputConfig: {
                        shape: "S1c"
                    },
                    TrainingData: {
                        shape: "S26"
                    },
                    TestingData: {
                        shape: "S29"
                    },
                    Tags: {
                        shape: "S1e"
                    },
                    KmsKeyId: {},
                    VersionDescription: {},
                    FeatureConfig: {
                        shape: "S2b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectVersionArn: {}
                }
            }
        },
        CreateStreamProcessor: {
            input: {
                type: "structure",
                required: [ "Input", "Output", "Name", "Settings", "RoleArn" ],
                members: {
                    Input: {
                        shape: "S2f"
                    },
                    Output: {
                        shape: "S2i"
                    },
                    Name: {},
                    Settings: {
                        shape: "S2n"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S1e"
                    },
                    NotificationChannel: {
                        shape: "S2t"
                    },
                    KmsKeyId: {},
                    RegionsOfInterest: {
                        shape: "S2v"
                    },
                    DataSharingPreference: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamProcessorArn: {}
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "CollectionId", "UserId" ],
                members: {
                    CollectionId: {},
                    UserId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCollection: {
            input: {
                type: "structure",
                required: [ "CollectionId" ],
                members: {
                    CollectionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StatusCode: {
                        type: "integer"
                    }
                }
            }
        },
        DeleteDataset: {
            input: {
                type: "structure",
                required: [ "DatasetArn" ],
                members: {
                    DatasetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFaces: {
            input: {
                type: "structure",
                required: [ "CollectionId", "FaceIds" ],
                members: {
                    CollectionId: {},
                    FaceIds: {
                        shape: "S39"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeletedFaces: {
                        shape: "S39"
                    },
                    UnsuccessfulFaceDeletions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FaceId: {},
                                UserId: {},
                                Reasons: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        DeleteProject: {
            input: {
                type: "structure",
                required: [ "ProjectArn" ],
                members: {
                    ProjectArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        DeleteProjectPolicy: {
            input: {
                type: "structure",
                required: [ "ProjectArn", "PolicyName" ],
                members: {
                    ProjectArn: {},
                    PolicyName: {},
                    PolicyRevisionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProjectVersion: {
            input: {
                type: "structure",
                required: [ "ProjectVersionArn" ],
                members: {
                    ProjectVersionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        DeleteStreamProcessor: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "CollectionId", "UserId" ],
                members: {
                    CollectionId: {},
                    UserId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeCollection: {
            input: {
                type: "structure",
                required: [ "CollectionId" ],
                members: {
                    CollectionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FaceCount: {
                        type: "long"
                    },
                    FaceModelVersion: {},
                    CollectionARN: {},
                    CreationTimestamp: {
                        type: "timestamp"
                    },
                    UserCount: {
                        type: "long"
                    }
                }
            }
        },
        DescribeDataset: {
            input: {
                type: "structure",
                required: [ "DatasetArn" ],
                members: {
                    DatasetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetDescription: {
                        type: "structure",
                        members: {
                            CreationTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Status: {},
                            StatusMessage: {},
                            StatusMessageCode: {},
                            DatasetStats: {
                                type: "structure",
                                members: {
                                    LabeledEntries: {
                                        type: "integer"
                                    },
                                    TotalEntries: {
                                        type: "integer"
                                    },
                                    TotalLabels: {
                                        type: "integer"
                                    },
                                    ErrorEntries: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeProjectVersions: {
            input: {
                type: "structure",
                required: [ "ProjectArn" ],
                members: {
                    ProjectArn: {},
                    VersionNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectVersionDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProjectVersionArn: {},
                                CreationTimestamp: {
                                    type: "timestamp"
                                },
                                MinInferenceUnits: {
                                    type: "integer"
                                },
                                Status: {},
                                StatusMessage: {},
                                BillableTrainingTimeInSeconds: {
                                    type: "long"
                                },
                                TrainingEndTimestamp: {
                                    type: "timestamp"
                                },
                                OutputConfig: {
                                    shape: "S1c"
                                },
                                TrainingDataResult: {
                                    type: "structure",
                                    members: {
                                        Input: {
                                            shape: "S26"
                                        },
                                        Output: {
                                            shape: "S26"
                                        },
                                        Validation: {
                                            shape: "S4d"
                                        }
                                    }
                                },
                                TestingDataResult: {
                                    type: "structure",
                                    members: {
                                        Input: {
                                            shape: "S29"
                                        },
                                        Output: {
                                            shape: "S29"
                                        },
                                        Validation: {
                                            shape: "S4d"
                                        }
                                    }
                                },
                                EvaluationResult: {
                                    type: "structure",
                                    members: {
                                        F1Score: {
                                            type: "float"
                                        },
                                        Summary: {
                                            type: "structure",
                                            members: {
                                                S3Object: {
                                                    shape: "Sj"
                                                }
                                            }
                                        }
                                    }
                                },
                                ManifestSummary: {
                                    shape: "S1p"
                                },
                                KmsKeyId: {},
                                MaxInferenceUnits: {
                                    type: "integer"
                                },
                                SourceProjectVersionArn: {},
                                VersionDescription: {},
                                Feature: {},
                                BaseModelVersion: {},
                                FeatureConfig: {
                                    shape: "S2b"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeProjects: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ProjectNames: {
                        type: "list",
                        member: {}
                    },
                    Features: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProjectArn: {},
                                CreationTimestamp: {
                                    type: "timestamp"
                                },
                                Status: {},
                                Datasets: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            CreationTimestamp: {
                                                type: "timestamp"
                                            },
                                            DatasetType: {},
                                            DatasetArn: {},
                                            Status: {},
                                            StatusMessage: {},
                                            StatusMessageCode: {}
                                        }
                                    }
                                },
                                Feature: {},
                                AutoUpdate: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStreamProcessor: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    StreamProcessorArn: {},
                    Status: {},
                    StatusMessage: {},
                    CreationTimestamp: {
                        type: "timestamp"
                    },
                    LastUpdateTimestamp: {
                        type: "timestamp"
                    },
                    Input: {
                        shape: "S2f"
                    },
                    Output: {
                        shape: "S2i"
                    },
                    RoleArn: {},
                    Settings: {
                        shape: "S2n"
                    },
                    NotificationChannel: {
                        shape: "S2t"
                    },
                    KmsKeyId: {},
                    RegionsOfInterest: {
                        shape: "S2v"
                    },
                    DataSharingPreference: {
                        shape: "S2z"
                    }
                }
            }
        },
        DetectCustomLabels: {
            input: {
                type: "structure",
                required: [ "ProjectVersionArn", "Image" ],
                members: {
                    ProjectVersionArn: {},
                    Image: {
                        shape: "Sh"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    MinConfidence: {
                        type: "float"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomLabels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Confidence: {
                                    type: "float"
                                },
                                Geometry: {
                                    shape: "S4x"
                                }
                            }
                        }
                    }
                }
            }
        },
        DetectFaces: {
            input: {
                type: "structure",
                required: [ "Image" ],
                members: {
                    Image: {
                        shape: "Sh"
                    },
                    Attributes: {
                        shape: "S4z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FaceDetails: {
                        type: "list",
                        member: {
                            shape: "S53"
                        }
                    },
                    OrientationCorrection: {}
                }
            }
        },
        DetectLabels: {
            input: {
                type: "structure",
                required: [ "Image" ],
                members: {
                    Image: {
                        shape: "Sh"
                    },
                    MaxLabels: {
                        type: "integer"
                    },
                    MinConfidence: {
                        type: "float"
                    },
                    Features: {
                        type: "list",
                        member: {}
                    },
                    Settings: {
                        type: "structure",
                        members: {
                            GeneralLabels: {
                                shape: "S5j"
                            },
                            ImageProperties: {
                                type: "structure",
                                members: {
                                    MaxDominantColors: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Labels: {
                        type: "list",
                        member: {
                            shape: "S5q"
                        }
                    },
                    OrientationCorrection: {},
                    LabelModelVersion: {},
                    ImageProperties: {
                        type: "structure",
                        members: {
                            Quality: {
                                shape: "S62"
                            },
                            DominantColors: {
                                shape: "S5t"
                            },
                            Foreground: {
                                type: "structure",
                                members: {
                                    Quality: {
                                        shape: "S62"
                                    },
                                    DominantColors: {
                                        shape: "S5t"
                                    }
                                }
                            },
                            Background: {
                                type: "structure",
                                members: {
                                    Quality: {
                                        shape: "S62"
                                    },
                                    DominantColors: {
                                        shape: "S5t"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DetectModerationLabels: {
            input: {
                type: "structure",
                required: [ "Image" ],
                members: {
                    Image: {
                        shape: "Sh"
                    },
                    MinConfidence: {
                        type: "float"
                    },
                    HumanLoopConfig: {
                        type: "structure",
                        required: [ "HumanLoopName", "FlowDefinitionArn" ],
                        members: {
                            HumanLoopName: {},
                            FlowDefinitionArn: {},
                            DataAttributes: {
                                type: "structure",
                                members: {
                                    ContentClassifiers: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    },
                    ProjectVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ModerationLabels: {
                        type: "list",
                        member: {
                            shape: "S6f"
                        }
                    },
                    ModerationModelVersion: {},
                    HumanLoopActivationOutput: {
                        type: "structure",
                        members: {
                            HumanLoopArn: {},
                            HumanLoopActivationReasons: {
                                type: "list",
                                member: {}
                            },
                            HumanLoopActivationConditionsEvaluationResults: {
                                jsonvalue: true
                            }
                        }
                    },
                    ProjectVersion: {}
                }
            }
        },
        DetectProtectiveEquipment: {
            input: {
                type: "structure",
                required: [ "Image" ],
                members: {
                    Image: {
                        shape: "Sh"
                    },
                    SummarizationAttributes: {
                        type: "structure",
                        required: [ "MinConfidence", "RequiredEquipmentTypes" ],
                        members: {
                            MinConfidence: {
                                type: "float"
                            },
                            RequiredEquipmentTypes: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProtectiveEquipmentModelVersion: {},
                    Persons: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BodyParts: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Confidence: {
                                                type: "float"
                                            },
                                            EquipmentDetections: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        BoundingBox: {
                                                            shape: "Sq"
                                                        },
                                                        Confidence: {
                                                            type: "float"
                                                        },
                                                        Type: {},
                                                        CoversBodyPart: {
                                                            type: "structure",
                                                            members: {
                                                                Confidence: {
                                                                    type: "float"
                                                                },
                                                                Value: {
                                                                    type: "boolean"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                BoundingBox: {
                                    shape: "Sq"
                                },
                                Confidence: {
                                    type: "float"
                                },
                                Id: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    Summary: {
                        type: "structure",
                        members: {
                            PersonsWithRequiredEquipment: {
                                shape: "S6z"
                            },
                            PersonsWithoutRequiredEquipment: {
                                shape: "S6z"
                            },
                            PersonsIndeterminate: {
                                shape: "S6z"
                            }
                        }
                    }
                }
            }
        },
        DetectText: {
            input: {
                type: "structure",
                required: [ "Image" ],
                members: {
                    Image: {
                        shape: "Sh"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            WordFilter: {
                                shape: "S72"
                            },
                            RegionsOfInterest: {
                                shape: "S2v"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TextDetections: {
                        type: "list",
                        member: {
                            shape: "S77"
                        }
                    },
                    TextModelVersion: {}
                }
            }
        },
        DisassociateFaces: {
            input: {
                type: "structure",
                required: [ "CollectionId", "UserId", "FaceIds" ],
                members: {
                    CollectionId: {},
                    UserId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FaceIds: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DisassociatedFaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FaceId: {}
                            }
                        }
                    },
                    UnsuccessfulFaceDisassociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FaceId: {},
                                UserId: {},
                                Reasons: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    UserStatus: {}
                }
            }
        },
        DistributeDatasetEntries: {
            input: {
                type: "structure",
                required: [ "Datasets" ],
                members: {
                    Datasets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn" ],
                            members: {
                                Arn: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetCelebrityInfo: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Urls: {
                        shape: "S7o"
                    },
                    Name: {},
                    KnownGender: {
                        shape: "S7q"
                    }
                }
            }
        },
        GetCelebrityRecognition: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SortBy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    StatusMessage: {},
                    VideoMetadata: {
                        shape: "S7z"
                    },
                    NextToken: {},
                    Celebrities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "long"
                                },
                                Celebrity: {
                                    type: "structure",
                                    members: {
                                        Urls: {
                                            shape: "S7o"
                                        },
                                        Name: {},
                                        Id: {},
                                        Confidence: {
                                            type: "float"
                                        },
                                        BoundingBox: {
                                            shape: "Sq"
                                        },
                                        Face: {
                                            shape: "S53"
                                        },
                                        KnownGender: {
                                            shape: "S7q"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    JobId: {},
                    Video: {
                        shape: "S85"
                    },
                    JobTag: {}
                }
            }
        },
        GetContentModeration: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SortBy: {},
                    AggregateBy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    StatusMessage: {},
                    VideoMetadata: {
                        shape: "S7z"
                    },
                    ModerationLabels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "long"
                                },
                                ModerationLabel: {
                                    shape: "S6f"
                                },
                                StartTimestampMillis: {
                                    type: "long"
                                },
                                EndTimestampMillis: {
                                    type: "long"
                                },
                                DurationMillis: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    ModerationModelVersion: {},
                    JobId: {},
                    Video: {
                        shape: "S85"
                    },
                    JobTag: {},
                    GetRequestMetadata: {
                        type: "structure",
                        members: {
                            SortBy: {},
                            AggregateBy: {}
                        }
                    }
                }
            }
        },
        GetFaceDetection: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    StatusMessage: {},
                    VideoMetadata: {
                        shape: "S7z"
                    },
                    NextToken: {},
                    Faces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "long"
                                },
                                Face: {
                                    shape: "S53"
                                }
                            }
                        }
                    },
                    JobId: {},
                    Video: {
                        shape: "S85"
                    },
                    JobTag: {}
                }
            }
        },
        GetFaceLivenessSessionResults: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SessionId", "Status" ],
                members: {
                    SessionId: {},
                    Status: {},
                    Confidence: {
                        type: "float"
                    },
                    ReferenceImage: {
                        shape: "S8l"
                    },
                    AuditImages: {
                        type: "list",
                        member: {
                            shape: "S8l"
                        }
                    }
                }
            }
        },
        GetFaceSearch: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SortBy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    StatusMessage: {},
                    NextToken: {},
                    VideoMetadata: {
                        shape: "S7z"
                    },
                    Persons: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "long"
                                },
                                Person: {
                                    shape: "S8t"
                                },
                                FaceMatches: {
                                    shape: "S8v"
                                }
                            }
                        }
                    },
                    JobId: {},
                    Video: {
                        shape: "S85"
                    },
                    JobTag: {}
                }
            }
        },
        GetLabelDetection: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SortBy: {},
                    AggregateBy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    StatusMessage: {},
                    VideoMetadata: {
                        shape: "S7z"
                    },
                    NextToken: {},
                    Labels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "long"
                                },
                                Label: {
                                    shape: "S5q"
                                },
                                StartTimestampMillis: {
                                    type: "long"
                                },
                                EndTimestampMillis: {
                                    type: "long"
                                },
                                DurationMillis: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    LabelModelVersion: {},
                    JobId: {},
                    Video: {
                        shape: "S85"
                    },
                    JobTag: {},
                    GetRequestMetadata: {
                        type: "structure",
                        members: {
                            SortBy: {},
                            AggregateBy: {}
                        }
                    }
                }
            }
        },
        GetMediaAnalysisJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobId", "OperationsConfig", "Status", "CreationTimestamp", "Input", "OutputConfig" ],
                members: {
                    JobId: {},
                    JobName: {},
                    OperationsConfig: {
                        shape: "S9c"
                    },
                    Status: {},
                    FailureDetails: {
                        shape: "S9f"
                    },
                    CreationTimestamp: {
                        type: "timestamp"
                    },
                    CompletionTimestamp: {
                        type: "timestamp"
                    },
                    Input: {
                        shape: "S9h"
                    },
                    OutputConfig: {
                        shape: "S9i"
                    },
                    KmsKeyId: {},
                    Results: {
                        shape: "S9k"
                    },
                    ManifestSummary: {
                        shape: "S9l"
                    }
                }
            }
        },
        GetPersonTracking: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SortBy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    StatusMessage: {},
                    VideoMetadata: {
                        shape: "S7z"
                    },
                    NextToken: {},
                    Persons: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "long"
                                },
                                Person: {
                                    shape: "S8t"
                                }
                            }
                        }
                    },
                    JobId: {},
                    Video: {
                        shape: "S85"
                    },
                    JobTag: {}
                }
            }
        },
        GetSegmentDetection: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    StatusMessage: {},
                    VideoMetadata: {
                        type: "list",
                        member: {
                            shape: "S7z"
                        }
                    },
                    AudioMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Codec: {},
                                DurationMillis: {
                                    type: "long"
                                },
                                SampleRate: {
                                    type: "long"
                                },
                                NumberOfChannels: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Segments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                StartTimestampMillis: {
                                    type: "long"
                                },
                                EndTimestampMillis: {
                                    type: "long"
                                },
                                DurationMillis: {
                                    type: "long"
                                },
                                StartTimecodeSMPTE: {},
                                EndTimecodeSMPTE: {},
                                DurationSMPTE: {},
                                TechnicalCueSegment: {
                                    type: "structure",
                                    members: {
                                        Type: {},
                                        Confidence: {
                                            type: "float"
                                        }
                                    }
                                },
                                ShotSegment: {
                                    type: "structure",
                                    members: {
                                        Index: {
                                            type: "long"
                                        },
                                        Confidence: {
                                            type: "float"
                                        }
                                    }
                                },
                                StartFrameNumber: {
                                    type: "long"
                                },
                                EndFrameNumber: {
                                    type: "long"
                                },
                                DurationFrames: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    SelectedSegmentTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                ModelVersion: {}
                            }
                        }
                    },
                    JobId: {},
                    Video: {
                        shape: "S85"
                    },
                    JobTag: {}
                }
            }
        },
        GetTextDetection: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    StatusMessage: {},
                    VideoMetadata: {
                        shape: "S7z"
                    },
                    TextDetections: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "long"
                                },
                                TextDetection: {
                                    shape: "S77"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    TextModelVersion: {},
                    JobId: {},
                    Video: {
                        shape: "S85"
                    },
                    JobTag: {}
                }
            }
        },
        IndexFaces: {
            input: {
                type: "structure",
                required: [ "CollectionId", "Image" ],
                members: {
                    CollectionId: {},
                    Image: {
                        shape: "Sh"
                    },
                    ExternalImageId: {},
                    DetectionAttributes: {
                        shape: "S4z"
                    },
                    MaxFaces: {
                        type: "integer"
                    },
                    QualityFilter: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FaceRecords: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Face: {
                                    shape: "S8x"
                                },
                                FaceDetail: {
                                    shape: "S53"
                                }
                            }
                        }
                    },
                    OrientationCorrection: {},
                    FaceModelVersion: {},
                    UnindexedFaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Reasons: {
                                    type: "list",
                                    member: {}
                                },
                                FaceDetail: {
                                    shape: "S53"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListCollections: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CollectionIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    FaceModelVersions: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListDatasetEntries: {
            input: {
                type: "structure",
                required: [ "DatasetArn" ],
                members: {
                    DatasetArn: {},
                    ContainsLabels: {
                        type: "list",
                        member: {}
                    },
                    Labeled: {
                        type: "boolean"
                    },
                    SourceRefContains: {},
                    HasErrors: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetEntries: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListDatasetLabels: {
            input: {
                type: "structure",
                required: [ "DatasetArn" ],
                members: {
                    DatasetArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetLabelDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LabelName: {},
                                LabelStats: {
                                    type: "structure",
                                    members: {
                                        EntryCount: {
                                            type: "integer"
                                        },
                                        BoundingBoxCount: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFaces: {
            input: {
                type: "structure",
                required: [ "CollectionId" ],
                members: {
                    CollectionId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    UserId: {},
                    FaceIds: {
                        shape: "S39"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Faces: {
                        type: "list",
                        member: {
                            shape: "S8x"
                        }
                    },
                    NextToken: {},
                    FaceModelVersion: {}
                }
            }
        },
        ListMediaAnalysisJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MediaAnalysisJobs" ],
                members: {
                    NextToken: {},
                    MediaAnalysisJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "JobId", "OperationsConfig", "Status", "CreationTimestamp", "Input", "OutputConfig" ],
                            members: {
                                JobId: {},
                                JobName: {},
                                OperationsConfig: {
                                    shape: "S9c"
                                },
                                Status: {},
                                FailureDetails: {
                                    shape: "S9f"
                                },
                                CreationTimestamp: {
                                    type: "timestamp"
                                },
                                CompletionTimestamp: {
                                    type: "timestamp"
                                },
                                Input: {
                                    shape: "S9h"
                                },
                                OutputConfig: {
                                    shape: "S9i"
                                },
                                KmsKeyId: {},
                                Results: {
                                    shape: "S9k"
                                },
                                ManifestSummary: {
                                    shape: "S9l"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListProjectPolicies: {
            input: {
                type: "structure",
                required: [ "ProjectArn" ],
                members: {
                    ProjectArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProjectPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProjectArn: {},
                                PolicyName: {},
                                PolicyRevisionId: {},
                                PolicyDocument: {},
                                CreationTimestamp: {
                                    type: "timestamp"
                                },
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStreamProcessors: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    StreamProcessors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Status: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1e"
                    }
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                required: [ "CollectionId" ],
                members: {
                    CollectionId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UserId: {},
                                UserStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutProjectPolicy: {
            input: {
                type: "structure",
                required: [ "ProjectArn", "PolicyName", "PolicyDocument" ],
                members: {
                    ProjectArn: {},
                    PolicyName: {},
                    PolicyRevisionId: {},
                    PolicyDocument: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyRevisionId: {}
                }
            }
        },
        RecognizeCelebrities: {
            input: {
                type: "structure",
                required: [ "Image" ],
                members: {
                    Image: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CelebrityFaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Urls: {
                                    shape: "S7o"
                                },
                                Name: {},
                                Id: {},
                                Face: {
                                    shape: "Su"
                                },
                                MatchConfidence: {
                                    type: "float"
                                },
                                KnownGender: {
                                    shape: "S7q"
                                }
                            }
                        }
                    },
                    UnrecognizedFaces: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    OrientationCorrection: {}
                }
            }
        },
        SearchFaces: {
            input: {
                type: "structure",
                required: [ "CollectionId", "FaceId" ],
                members: {
                    CollectionId: {},
                    FaceId: {},
                    MaxFaces: {
                        type: "integer"
                    },
                    FaceMatchThreshold: {
                        type: "float"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SearchedFaceId: {},
                    FaceMatches: {
                        shape: "S8v"
                    },
                    FaceModelVersion: {}
                }
            }
        },
        SearchFacesByImage: {
            input: {
                type: "structure",
                required: [ "CollectionId", "Image" ],
                members: {
                    CollectionId: {},
                    Image: {
                        shape: "Sh"
                    },
                    MaxFaces: {
                        type: "integer"
                    },
                    FaceMatchThreshold: {
                        type: "float"
                    },
                    QualityFilter: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SearchedFaceBoundingBox: {
                        shape: "Sq"
                    },
                    SearchedFaceConfidence: {
                        type: "float"
                    },
                    FaceMatches: {
                        shape: "S8v"
                    },
                    FaceModelVersion: {}
                }
            }
        },
        SearchUsers: {
            input: {
                type: "structure",
                required: [ "CollectionId" ],
                members: {
                    CollectionId: {},
                    UserId: {},
                    FaceId: {},
                    UserMatchThreshold: {
                        type: "float"
                    },
                    MaxUsers: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserMatches: {
                        shape: "Sc8"
                    },
                    FaceModelVersion: {},
                    SearchedFace: {
                        type: "structure",
                        members: {
                            FaceId: {}
                        }
                    },
                    SearchedUser: {
                        type: "structure",
                        members: {
                            UserId: {}
                        }
                    }
                }
            }
        },
        SearchUsersByImage: {
            input: {
                type: "structure",
                required: [ "CollectionId", "Image" ],
                members: {
                    CollectionId: {},
                    Image: {
                        shape: "Sh"
                    },
                    UserMatchThreshold: {
                        type: "float"
                    },
                    MaxUsers: {
                        type: "integer"
                    },
                    QualityFilter: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserMatches: {
                        shape: "Sc8"
                    },
                    FaceModelVersion: {},
                    SearchedFace: {
                        type: "structure",
                        members: {
                            FaceDetail: {
                                shape: "S53"
                            }
                        }
                    },
                    UnsearchedFaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FaceDetails: {
                                    shape: "S53"
                                },
                                Reasons: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        StartCelebrityRecognition: {
            input: {
                type: "structure",
                required: [ "Video" ],
                members: {
                    Video: {
                        shape: "S85"
                    },
                    ClientRequestToken: {},
                    NotificationChannel: {
                        shape: "Scl"
                    },
                    JobTag: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        StartContentModeration: {
            input: {
                type: "structure",
                required: [ "Video" ],
                members: {
                    Video: {
                        shape: "S85"
                    },
                    MinConfidence: {
                        type: "float"
                    },
                    ClientRequestToken: {},
                    NotificationChannel: {
                        shape: "Scl"
                    },
                    JobTag: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        StartFaceDetection: {
            input: {
                type: "structure",
                required: [ "Video" ],
                members: {
                    Video: {
                        shape: "S85"
                    },
                    ClientRequestToken: {},
                    NotificationChannel: {
                        shape: "Scl"
                    },
                    FaceAttributes: {},
                    JobTag: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        StartFaceSearch: {
            input: {
                type: "structure",
                required: [ "Video", "CollectionId" ],
                members: {
                    Video: {
                        shape: "S85"
                    },
                    ClientRequestToken: {},
                    FaceMatchThreshold: {
                        type: "float"
                    },
                    CollectionId: {},
                    NotificationChannel: {
                        shape: "Scl"
                    },
                    JobTag: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        StartLabelDetection: {
            input: {
                type: "structure",
                required: [ "Video" ],
                members: {
                    Video: {
                        shape: "S85"
                    },
                    ClientRequestToken: {},
                    MinConfidence: {
                        type: "float"
                    },
                    NotificationChannel: {
                        shape: "Scl"
                    },
                    JobTag: {},
                    Features: {
                        type: "list",
                        member: {}
                    },
                    Settings: {
                        type: "structure",
                        members: {
                            GeneralLabels: {
                                shape: "S5j"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        StartMediaAnalysisJob: {
            input: {
                type: "structure",
                required: [ "OperationsConfig", "Input", "OutputConfig" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    JobName: {},
                    OperationsConfig: {
                        shape: "S9c"
                    },
                    Input: {
                        shape: "S9h"
                    },
                    OutputConfig: {
                        shape: "S9i"
                    },
                    KmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        StartPersonTracking: {
            input: {
                type: "structure",
                required: [ "Video" ],
                members: {
                    Video: {
                        shape: "S85"
                    },
                    ClientRequestToken: {},
                    NotificationChannel: {
                        shape: "Scl"
                    },
                    JobTag: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        StartProjectVersion: {
            input: {
                type: "structure",
                required: [ "ProjectVersionArn", "MinInferenceUnits" ],
                members: {
                    ProjectVersionArn: {},
                    MinInferenceUnits: {
                        type: "integer"
                    },
                    MaxInferenceUnits: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        StartSegmentDetection: {
            input: {
                type: "structure",
                required: [ "Video", "SegmentTypes" ],
                members: {
                    Video: {
                        shape: "S85"
                    },
                    ClientRequestToken: {},
                    NotificationChannel: {
                        shape: "Scl"
                    },
                    JobTag: {},
                    Filters: {
                        type: "structure",
                        members: {
                            TechnicalCueFilter: {
                                type: "structure",
                                members: {
                                    MinSegmentConfidence: {
                                        type: "float"
                                    },
                                    BlackFrame: {
                                        type: "structure",
                                        members: {
                                            MaxPixelThreshold: {
                                                type: "float"
                                            },
                                            MinCoveragePercentage: {
                                                type: "float"
                                            }
                                        }
                                    }
                                }
                            },
                            ShotFilter: {
                                type: "structure",
                                members: {
                                    MinSegmentConfidence: {
                                        type: "float"
                                    }
                                }
                            }
                        }
                    },
                    SegmentTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        StartStreamProcessor: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    StartSelector: {
                        type: "structure",
                        members: {
                            KVSStreamStartSelector: {
                                type: "structure",
                                members: {
                                    ProducerTimestamp: {
                                        type: "long"
                                    },
                                    FragmentNumber: {}
                                }
                            }
                        }
                    },
                    StopSelector: {
                        type: "structure",
                        members: {
                            MaxDurationInSeconds: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SessionId: {}
                }
            }
        },
        StartTextDetection: {
            input: {
                type: "structure",
                required: [ "Video" ],
                members: {
                    Video: {
                        shape: "S85"
                    },
                    ClientRequestToken: {},
                    NotificationChannel: {
                        shape: "Scl"
                    },
                    JobTag: {},
                    Filters: {
                        type: "structure",
                        members: {
                            WordFilter: {
                                shape: "S72"
                            },
                            RegionsOfInterest: {
                                shape: "S2v"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        StopProjectVersion: {
            input: {
                type: "structure",
                required: [ "ProjectVersionArn" ],
                members: {
                    ProjectVersionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        StopStreamProcessor: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDatasetEntries: {
            input: {
                type: "structure",
                required: [ "DatasetArn", "Changes" ],
                members: {
                    DatasetArn: {},
                    Changes: {
                        type: "structure",
                        required: [ "GroundTruth" ],
                        members: {
                            GroundTruth: {
                                type: "blob"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateStreamProcessor: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    SettingsForUpdate: {
                        type: "structure",
                        members: {
                            ConnectedHomeForUpdate: {
                                type: "structure",
                                members: {
                                    Labels: {
                                        shape: "S2q"
                                    },
                                    MinConfidence: {
                                        type: "float"
                                    }
                                }
                            }
                        }
                    },
                    RegionsOfInterestForUpdate: {
                        shape: "S2v"
                    },
                    DataSharingPreferenceForUpdate: {
                        shape: "S2z"
                    },
                    ParametersToDelete: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        Sh: {
            type: "structure",
            members: {
                Bytes: {
                    type: "blob"
                },
                S3Object: {
                    shape: "Sj"
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                Bucket: {},
                Name: {},
                Version: {}
            }
        },
        Sq: {
            type: "structure",
            members: {
                Width: {
                    type: "float"
                },
                Height: {
                    type: "float"
                },
                Left: {
                    type: "float"
                },
                Top: {
                    type: "float"
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                BoundingBox: {
                    shape: "Sq"
                },
                Confidence: {
                    type: "float"
                },
                Landmarks: {
                    shape: "Sv"
                },
                Pose: {
                    shape: "Sy"
                },
                Quality: {
                    shape: "S10"
                },
                Emotions: {
                    shape: "S11"
                },
                Smile: {
                    shape: "S14"
                }
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    X: {
                        type: "float"
                    },
                    Y: {
                        type: "float"
                    }
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                Roll: {
                    type: "float"
                },
                Yaw: {
                    type: "float"
                },
                Pitch: {
                    type: "float"
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                Brightness: {
                    type: "float"
                },
                Sharpness: {
                    type: "float"
                }
            }
        },
        S11: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Confidence: {
                        type: "float"
                    }
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                Value: {
                    type: "boolean"
                },
                Confidence: {
                    type: "float"
                }
            }
        },
        S1c: {
            type: "structure",
            members: {
                S3Bucket: {},
                S3KeyPrefix: {}
            }
        },
        S1e: {
            type: "map",
            key: {},
            value: {}
        },
        S1p: {
            type: "structure",
            members: {
                S3Object: {
                    shape: "Sj"
                }
            }
        },
        S26: {
            type: "structure",
            members: {
                Assets: {
                    shape: "S27"
                }
            }
        },
        S27: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    GroundTruthManifest: {
                        shape: "S1p"
                    }
                }
            }
        },
        S29: {
            type: "structure",
            members: {
                Assets: {
                    shape: "S27"
                },
                AutoCreate: {
                    type: "boolean"
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                ContentModeration: {
                    type: "structure",
                    members: {
                        ConfidenceThreshold: {
                            type: "float"
                        }
                    }
                }
            }
        },
        S2f: {
            type: "structure",
            members: {
                KinesisVideoStream: {
                    type: "structure",
                    members: {
                        Arn: {}
                    }
                }
            }
        },
        S2i: {
            type: "structure",
            members: {
                KinesisDataStream: {
                    type: "structure",
                    members: {
                        Arn: {}
                    }
                },
                S3Destination: {
                    type: "structure",
                    members: {
                        Bucket: {},
                        KeyPrefix: {}
                    }
                }
            }
        },
        S2n: {
            type: "structure",
            members: {
                FaceSearch: {
                    type: "structure",
                    members: {
                        CollectionId: {},
                        FaceMatchThreshold: {
                            type: "float"
                        }
                    }
                },
                ConnectedHome: {
                    type: "structure",
                    required: [ "Labels" ],
                    members: {
                        Labels: {
                            shape: "S2q"
                        },
                        MinConfidence: {
                            type: "float"
                        }
                    }
                }
            }
        },
        S2q: {
            type: "list",
            member: {}
        },
        S2t: {
            type: "structure",
            required: [ "SNSTopicArn" ],
            members: {
                SNSTopicArn: {}
            }
        },
        S2v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    BoundingBox: {
                        shape: "Sq"
                    },
                    Polygon: {
                        shape: "S2x"
                    }
                }
            }
        },
        S2x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    X: {
                        type: "float"
                    },
                    Y: {
                        type: "float"
                    }
                }
            }
        },
        S2z: {
            type: "structure",
            required: [ "OptIn" ],
            members: {
                OptIn: {
                    type: "boolean"
                }
            }
        },
        S39: {
            type: "list",
            member: {}
        },
        S4d: {
            type: "structure",
            members: {
                Assets: {
                    shape: "S27"
                }
            }
        },
        S4x: {
            type: "structure",
            members: {
                BoundingBox: {
                    shape: "Sq"
                },
                Polygon: {
                    shape: "S2x"
                }
            }
        },
        S4z: {
            type: "list",
            member: {}
        },
        S53: {
            type: "structure",
            members: {
                BoundingBox: {
                    shape: "Sq"
                },
                AgeRange: {
                    type: "structure",
                    members: {
                        Low: {
                            type: "integer"
                        },
                        High: {
                            type: "integer"
                        }
                    }
                },
                Smile: {
                    shape: "S14"
                },
                Eyeglasses: {
                    type: "structure",
                    members: {
                        Value: {
                            type: "boolean"
                        },
                        Confidence: {
                            type: "float"
                        }
                    }
                },
                Sunglasses: {
                    type: "structure",
                    members: {
                        Value: {
                            type: "boolean"
                        },
                        Confidence: {
                            type: "float"
                        }
                    }
                },
                Gender: {
                    type: "structure",
                    members: {
                        Value: {},
                        Confidence: {
                            type: "float"
                        }
                    }
                },
                Beard: {
                    type: "structure",
                    members: {
                        Value: {
                            type: "boolean"
                        },
                        Confidence: {
                            type: "float"
                        }
                    }
                },
                Mustache: {
                    type: "structure",
                    members: {
                        Value: {
                            type: "boolean"
                        },
                        Confidence: {
                            type: "float"
                        }
                    }
                },
                EyesOpen: {
                    type: "structure",
                    members: {
                        Value: {
                            type: "boolean"
                        },
                        Confidence: {
                            type: "float"
                        }
                    }
                },
                MouthOpen: {
                    type: "structure",
                    members: {
                        Value: {
                            type: "boolean"
                        },
                        Confidence: {
                            type: "float"
                        }
                    }
                },
                Emotions: {
                    shape: "S11"
                },
                Landmarks: {
                    shape: "Sv"
                },
                Pose: {
                    shape: "Sy"
                },
                Quality: {
                    shape: "S10"
                },
                Confidence: {
                    type: "float"
                },
                FaceOccluded: {
                    type: "structure",
                    members: {
                        Value: {
                            type: "boolean"
                        },
                        Confidence: {
                            type: "float"
                        }
                    }
                },
                EyeDirection: {
                    type: "structure",
                    members: {
                        Yaw: {
                            type: "float"
                        },
                        Pitch: {
                            type: "float"
                        },
                        Confidence: {
                            type: "float"
                        }
                    }
                }
            }
        },
        S5j: {
            type: "structure",
            members: {
                LabelInclusionFilters: {
                    shape: "S5k"
                },
                LabelExclusionFilters: {
                    shape: "S5k"
                },
                LabelCategoryInclusionFilters: {
                    shape: "S5k"
                },
                LabelCategoryExclusionFilters: {
                    shape: "S5k"
                }
            }
        },
        S5k: {
            type: "list",
            member: {}
        },
        S5q: {
            type: "structure",
            members: {
                Name: {},
                Confidence: {
                    type: "float"
                },
                Instances: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            BoundingBox: {
                                shape: "Sq"
                            },
                            Confidence: {
                                type: "float"
                            },
                            DominantColors: {
                                shape: "S5t"
                            }
                        }
                    }
                },
                Parents: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {}
                        }
                    }
                },
                Aliases: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {}
                        }
                    }
                },
                Categories: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {}
                        }
                    }
                }
            }
        },
        S5t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Red: {
                        type: "integer"
                    },
                    Blue: {
                        type: "integer"
                    },
                    Green: {
                        type: "integer"
                    },
                    HexCode: {},
                    CSSColor: {},
                    SimplifiedColor: {},
                    PixelPercent: {
                        type: "float"
                    }
                }
            }
        },
        S62: {
            type: "structure",
            members: {
                Brightness: {
                    type: "float"
                },
                Sharpness: {
                    type: "float"
                },
                Contrast: {
                    type: "float"
                }
            }
        },
        S6f: {
            type: "structure",
            members: {
                Confidence: {
                    type: "float"
                },
                Name: {},
                ParentName: {}
            }
        },
        S6z: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S72: {
            type: "structure",
            members: {
                MinConfidence: {
                    type: "float"
                },
                MinBoundingBoxHeight: {
                    type: "float"
                },
                MinBoundingBoxWidth: {
                    type: "float"
                }
            }
        },
        S77: {
            type: "structure",
            members: {
                DetectedText: {},
                Type: {},
                Id: {
                    type: "integer"
                },
                ParentId: {
                    type: "integer"
                },
                Confidence: {
                    type: "float"
                },
                Geometry: {
                    shape: "S4x"
                }
            }
        },
        S7o: {
            type: "list",
            member: {}
        },
        S7q: {
            type: "structure",
            members: {
                Type: {}
            }
        },
        S7z: {
            type: "structure",
            members: {
                Codec: {},
                DurationMillis: {
                    type: "long"
                },
                Format: {},
                FrameRate: {
                    type: "float"
                },
                FrameHeight: {
                    type: "long"
                },
                FrameWidth: {
                    type: "long"
                },
                ColorRange: {}
            }
        },
        S85: {
            type: "structure",
            members: {
                S3Object: {
                    shape: "Sj"
                }
            }
        },
        S8l: {
            type: "structure",
            members: {
                Bytes: {
                    type: "blob",
                    sensitive: true
                },
                S3Object: {
                    shape: "Sj"
                },
                BoundingBox: {
                    shape: "Sq"
                }
            }
        },
        S8t: {
            type: "structure",
            members: {
                Index: {
                    type: "long"
                },
                BoundingBox: {
                    shape: "Sq"
                },
                Face: {
                    shape: "S53"
                }
            }
        },
        S8v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Similarity: {
                        type: "float"
                    },
                    Face: {
                        shape: "S8x"
                    }
                }
            }
        },
        S8x: {
            type: "structure",
            members: {
                FaceId: {},
                BoundingBox: {
                    shape: "Sq"
                },
                ImageId: {},
                ExternalImageId: {},
                Confidence: {
                    type: "float"
                },
                IndexFacesModelVersion: {},
                UserId: {}
            }
        },
        S9c: {
            type: "structure",
            members: {
                DetectModerationLabels: {
                    type: "structure",
                    members: {
                        MinConfidence: {
                            type: "float"
                        },
                        ProjectVersion: {}
                    }
                }
            }
        },
        S9f: {
            type: "structure",
            members: {
                Code: {},
                Message: {}
            }
        },
        S9h: {
            type: "structure",
            required: [ "S3Object" ],
            members: {
                S3Object: {
                    shape: "Sj"
                }
            }
        },
        S9i: {
            type: "structure",
            required: [ "S3Bucket" ],
            members: {
                S3Bucket: {},
                S3KeyPrefix: {}
            }
        },
        S9k: {
            type: "structure",
            members: {
                S3Object: {
                    shape: "Sj"
                }
            }
        },
        S9l: {
            type: "structure",
            members: {
                S3Object: {
                    shape: "Sj"
                }
            }
        },
        Sc8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Similarity: {
                        type: "float"
                    },
                    User: {
                        type: "structure",
                        members: {
                            UserId: {},
                            UserStatus: {}
                        }
                    }
                }
            }
        },
        Scl: {
            type: "structure",
            required: [ "SNSTopicArn", "RoleArn" ],
            members: {
                SNSTopicArn: {},
                RoleArn: {}
            }
        }
    },
    paginators: {
        DescribeProjectVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ProjectVersionDescriptions"
        },
        DescribeProjects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ProjectDescriptions"
        },
        GetCelebrityRecognition: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetContentModeration: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetFaceDetection: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetFaceSearch: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetLabelDetection: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetPersonTracking: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetSegmentDetection: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetTextDetection: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListCollections: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CollectionIds"
        },
        ListDatasetEntries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DatasetEntries"
        },
        ListDatasetLabels: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DatasetLabelDescriptions"
        },
        ListFaces: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Faces"
        },
        ListMediaAnalysisJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListProjectPolicies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ProjectPolicies"
        },
        ListStreamProcessors: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListUsers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Users"
        }
    },
    waiters: {
        ProjectVersionTrainingCompleted: {
            description: "Wait until the ProjectVersion training completes.",
            operation: "DescribeProjectVersions",
            delay: 120,
            maxAttempts: 360,
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "ProjectVersionDescriptions[].Status",
                expected: "TRAINING_COMPLETED"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "ProjectVersionDescriptions[].Status",
                expected: "TRAINING_FAILED"
            } ]
        },
        ProjectVersionRunning: {
            description: "Wait until the ProjectVersion is running.",
            delay: 30,
            maxAttempts: 40,
            operation: "DescribeProjectVersions",
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "ProjectVersionDescriptions[].Status",
                expected: "RUNNING"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "ProjectVersionDescriptions[].Status",
                expected: "FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["resourcegroupstaggingapi"] = {};

AWS.ResourceGroupsTaggingAPI = AWS.Service.defineService("resourcegroupstaggingapi", [ "2017-01-26" ]);

AWS.apiLoader.services["resourcegroupstaggingapi"]["2017-01-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-01-26",
        endpointPrefix: "tagging",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Resource Groups Tagging API",
        serviceId: "Resource Groups Tagging API",
        signatureVersion: "v4",
        targetPrefix: "ResourceGroupsTaggingAPI_20170126",
        uid: "resourcegroupstaggingapi-2017-01-26"
    },
    operations: {
        DescribeReportCreation: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    S3Location: {},
                    ErrorMessage: {}
                }
            }
        },
        GetComplianceSummary: {
            input: {
                type: "structure",
                members: {
                    TargetIdFilters: {
                        type: "list",
                        member: {}
                    },
                    RegionFilters: {
                        type: "list",
                        member: {}
                    },
                    ResourceTypeFilters: {
                        shape: "Sb"
                    },
                    TagKeyFilters: {
                        type: "list",
                        member: {}
                    },
                    GroupBy: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    PaginationToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LastUpdated: {},
                                TargetId: {},
                                TargetIdType: {},
                                Region: {},
                                ResourceType: {},
                                NonCompliantResources: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    PaginationToken: {}
                }
            }
        },
        GetResources: {
            input: {
                type: "structure",
                members: {
                    PaginationToken: {},
                    TagFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    ResourcesPerPage: {
                        type: "integer"
                    },
                    TagsPerPage: {
                        type: "integer"
                    },
                    ResourceTypeFilters: {
                        shape: "Sb"
                    },
                    IncludeComplianceDetails: {
                        type: "boolean"
                    },
                    ExcludeCompliantResources: {
                        type: "boolean"
                    },
                    ResourceARNList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PaginationToken: {},
                    ResourceTagMappingList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceARN: {},
                                Tags: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Key", "Value" ],
                                        members: {
                                            Key: {},
                                            Value: {}
                                        }
                                    }
                                },
                                ComplianceDetails: {
                                    type: "structure",
                                    members: {
                                        NoncompliantKeys: {
                                            shape: "S16"
                                        },
                                        KeysWithNoncompliantValues: {
                                            shape: "S16"
                                        },
                                        ComplianceStatus: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetTagKeys: {
            input: {
                type: "structure",
                members: {
                    PaginationToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PaginationToken: {},
                    TagKeys: {
                        shape: "S16"
                    }
                }
            }
        },
        GetTagValues: {
            input: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    PaginationToken: {},
                    Key: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PaginationToken: {},
                    TagValues: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        StartReportCreation: {
            input: {
                type: "structure",
                required: [ "S3Bucket" ],
                members: {
                    S3Bucket: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResources: {
            input: {
                type: "structure",
                required: [ "ResourceARNList", "Tags" ],
                members: {
                    ResourceARNList: {
                        shape: "S1h"
                    },
                    Tags: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedResourcesMap: {
                        shape: "S1k"
                    }
                }
            }
        },
        UntagResources: {
            input: {
                type: "structure",
                required: [ "ResourceARNList", "TagKeys" ],
                members: {
                    ResourceARNList: {
                        shape: "S1h"
                    },
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedResourcesMap: {
                        shape: "S1k"
                    }
                }
            }
        }
    },
    shapes: {
        Sb: {
            type: "list",
            member: {}
        },
        S16: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    StatusCode: {
                        type: "integer"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        }
    },
    paginators: {
        GetComplianceSummary: {
            input_token: "PaginationToken",
            limit_key: "MaxResults",
            output_token: "PaginationToken",
            result_key: "SummaryList"
        },
        GetResources: {
            input_token: "PaginationToken",
            limit_key: "ResourcesPerPage",
            output_token: "PaginationToken",
            result_key: "ResourceTagMappingList"
        },
        GetTagKeys: {
            input_token: "PaginationToken",
            output_token: "PaginationToken",
            result_key: "TagKeys"
        },
        GetTagValues: {
            input_token: "PaginationToken",
            output_token: "PaginationToken",
            result_key: "TagValues"
        }
    }
};

AWS.apiLoader.services["route53"] = {};

AWS.Route53 = AWS.Service.defineService("route53", [ "2013-04-01" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    114: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.Route53.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                request.on("build", this.sanitizeUrl);
            },
            sanitizeUrl: function sanitizeUrl(request) {
                var path = request.httpRequest.path;
                request.httpRequest.path = path.replace(/\/%2F\w+%2F/, "/");
            },
            retryableError: function retryableError(error) {
                if (error.code === "PriorRequestNotComplete" && error.statusCode === 400) {
                    return true;
                } else {
                    var _super = AWS.Service.prototype.retryableError;
                    return _super.call(this, error);
                }
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 114 ]);

AWS.apiLoader.services["route53"]["2013-04-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2013-04-01",
        endpointPrefix: "route53",
        globalEndpoint: "route53.amazonaws.com",
        protocol: "rest-xml",
        serviceAbbreviation: "Route 53",
        serviceFullName: "Amazon Route 53",
        serviceId: "Route 53",
        signatureVersion: "v4",
        uid: "route53-2013-04-01"
    },
    operations: {
        ActivateKeySigningKey: {
            http: {
                requestUri: "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/activate"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId", "Name" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "HostedZoneId"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        AssociateVPCWithHostedZone: {
            http: {
                requestUri: "/2013-04-01/hostedzone/{Id}/associatevpc"
            },
            input: {
                locationName: "AssociateVPCWithHostedZoneRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "HostedZoneId", "VPC" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    },
                    VPC: {
                        shape: "Sa"
                    },
                    Comment: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        ChangeCidrCollection: {
            http: {
                requestUri: "/2013-04-01/cidrcollection/{CidrCollectionId}"
            },
            input: {
                locationName: "ChangeCidrCollectionRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "Id", "Changes" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "CidrCollectionId"
                    },
                    CollectionVersion: {
                        type: "long"
                    },
                    Changes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "LocationName", "Action", "CidrList" ],
                            members: {
                                LocationName: {},
                                Action: {},
                                CidrList: {
                                    type: "list",
                                    member: {
                                        locationName: "Cidr"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            }
        },
        ChangeResourceRecordSets: {
            http: {
                requestUri: "/2013-04-01/hostedzone/{Id}/rrset/"
            },
            input: {
                locationName: "ChangeResourceRecordSetsRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "HostedZoneId", "ChangeBatch" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    },
                    ChangeBatch: {
                        type: "structure",
                        required: [ "Changes" ],
                        members: {
                            Comment: {},
                            Changes: {
                                type: "list",
                                member: {
                                    locationName: "Change",
                                    type: "structure",
                                    required: [ "Action", "ResourceRecordSet" ],
                                    members: {
                                        Action: {},
                                        ResourceRecordSet: {
                                            shape: "Sv"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        ChangeTagsForResource: {
            http: {
                requestUri: "/2013-04-01/tags/{ResourceType}/{ResourceId}"
            },
            input: {
                locationName: "ChangeTagsForResourceRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "ResourceType", "ResourceId" ],
                members: {
                    ResourceType: {
                        location: "uri",
                        locationName: "ResourceType"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    AddTags: {
                        shape: "S1l"
                    },
                    RemoveTagKeys: {
                        type: "list",
                        member: {
                            locationName: "Key"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateCidrCollection: {
            http: {
                requestUri: "/2013-04-01/cidrcollection",
                responseCode: 201
            },
            input: {
                locationName: "CreateCidrCollectionRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "Name", "CallerReference" ],
                members: {
                    Name: {},
                    CallerReference: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Collection: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Id: {},
                            Name: {},
                            Version: {
                                type: "long"
                            }
                        }
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        CreateHealthCheck: {
            http: {
                requestUri: "/2013-04-01/healthcheck",
                responseCode: 201
            },
            input: {
                locationName: "CreateHealthCheckRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "CallerReference", "HealthCheckConfig" ],
                members: {
                    CallerReference: {},
                    HealthCheckConfig: {
                        shape: "S20"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HealthCheck", "Location" ],
                members: {
                    HealthCheck: {
                        shape: "S2n"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        CreateHostedZone: {
            http: {
                requestUri: "/2013-04-01/hostedzone",
                responseCode: 201
            },
            input: {
                locationName: "CreateHostedZoneRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "Name", "CallerReference" ],
                members: {
                    Name: {},
                    VPC: {
                        shape: "Sa"
                    },
                    CallerReference: {},
                    HostedZoneConfig: {
                        shape: "S34"
                    },
                    DelegationSetId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HostedZone", "ChangeInfo", "DelegationSet", "Location" ],
                members: {
                    HostedZone: {
                        shape: "S37"
                    },
                    ChangeInfo: {
                        shape: "S5"
                    },
                    DelegationSet: {
                        shape: "S39"
                    },
                    VPC: {
                        shape: "Sa"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        CreateKeySigningKey: {
            http: {
                requestUri: "/2013-04-01/keysigningkey",
                responseCode: 201
            },
            input: {
                locationName: "CreateKeySigningKeyRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "CallerReference", "HostedZoneId", "KeyManagementServiceArn", "Name", "Status" ],
                members: {
                    CallerReference: {},
                    HostedZoneId: {},
                    KeyManagementServiceArn: {},
                    Name: {},
                    Status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo", "KeySigningKey", "Location" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    },
                    KeySigningKey: {
                        shape: "S3f"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        CreateQueryLoggingConfig: {
            http: {
                requestUri: "/2013-04-01/queryloggingconfig",
                responseCode: 201
            },
            input: {
                locationName: "CreateQueryLoggingConfigRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "HostedZoneId", "CloudWatchLogsLogGroupArn" ],
                members: {
                    HostedZoneId: {},
                    CloudWatchLogsLogGroupArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "QueryLoggingConfig", "Location" ],
                members: {
                    QueryLoggingConfig: {
                        shape: "S3m"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        CreateReusableDelegationSet: {
            http: {
                requestUri: "/2013-04-01/delegationset",
                responseCode: 201
            },
            input: {
                locationName: "CreateReusableDelegationSetRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "CallerReference" ],
                members: {
                    CallerReference: {},
                    HostedZoneId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DelegationSet", "Location" ],
                members: {
                    DelegationSet: {
                        shape: "S39"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        CreateTrafficPolicy: {
            http: {
                requestUri: "/2013-04-01/trafficpolicy",
                responseCode: 201
            },
            input: {
                locationName: "CreateTrafficPolicyRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "Name", "Document" ],
                members: {
                    Name: {},
                    Document: {},
                    Comment: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicy", "Location" ],
                members: {
                    TrafficPolicy: {
                        shape: "S3v"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        CreateTrafficPolicyInstance: {
            http: {
                requestUri: "/2013-04-01/trafficpolicyinstance",
                responseCode: 201
            },
            input: {
                locationName: "CreateTrafficPolicyInstanceRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "HostedZoneId", "Name", "TTL", "TrafficPolicyId", "TrafficPolicyVersion" ],
                members: {
                    HostedZoneId: {},
                    Name: {},
                    TTL: {
                        type: "long"
                    },
                    TrafficPolicyId: {},
                    TrafficPolicyVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicyInstance", "Location" ],
                members: {
                    TrafficPolicyInstance: {
                        shape: "S40"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        CreateTrafficPolicyVersion: {
            http: {
                requestUri: "/2013-04-01/trafficpolicy/{Id}",
                responseCode: 201
            },
            input: {
                locationName: "CreateTrafficPolicyVersionRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "Id", "Document" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Document: {},
                    Comment: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicy", "Location" ],
                members: {
                    TrafficPolicy: {
                        shape: "S3v"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            }
        },
        CreateVPCAssociationAuthorization: {
            http: {
                requestUri: "/2013-04-01/hostedzone/{Id}/authorizevpcassociation"
            },
            input: {
                locationName: "CreateVPCAssociationAuthorizationRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "HostedZoneId", "VPC" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    },
                    VPC: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HostedZoneId", "VPC" ],
                members: {
                    HostedZoneId: {},
                    VPC: {
                        shape: "Sa"
                    }
                }
            }
        },
        DeactivateKeySigningKey: {
            http: {
                requestUri: "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}/deactivate"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId", "Name" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "HostedZoneId"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteCidrCollection: {
            http: {
                method: "DELETE",
                requestUri: "/2013-04-01/cidrcollection/{CidrCollectionId}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "CidrCollectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteHealthCheck: {
            http: {
                method: "DELETE",
                requestUri: "/2013-04-01/healthcheck/{HealthCheckId}"
            },
            input: {
                type: "structure",
                required: [ "HealthCheckId" ],
                members: {
                    HealthCheckId: {
                        location: "uri",
                        locationName: "HealthCheckId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteHostedZone: {
            http: {
                method: "DELETE",
                requestUri: "/2013-04-01/hostedzone/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteKeySigningKey: {
            http: {
                method: "DELETE",
                requestUri: "/2013-04-01/keysigningkey/{HostedZoneId}/{Name}"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId", "Name" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "HostedZoneId"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteQueryLoggingConfig: {
            http: {
                method: "DELETE",
                requestUri: "/2013-04-01/queryloggingconfig/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteReusableDelegationSet: {
            http: {
                method: "DELETE",
                requestUri: "/2013-04-01/delegationset/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTrafficPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/2013-04-01/trafficpolicy/{Id}/{Version}"
            },
            input: {
                type: "structure",
                required: [ "Id", "Version" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Version: {
                        location: "uri",
                        locationName: "Version",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTrafficPolicyInstance: {
            http: {
                method: "DELETE",
                requestUri: "/2013-04-01/trafficpolicyinstance/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteVPCAssociationAuthorization: {
            http: {
                requestUri: "/2013-04-01/hostedzone/{Id}/deauthorizevpcassociation"
            },
            input: {
                locationName: "DeleteVPCAssociationAuthorizationRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "HostedZoneId", "VPC" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    },
                    VPC: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableHostedZoneDNSSEC: {
            http: {
                requestUri: "/2013-04-01/hostedzone/{Id}/disable-dnssec"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        DisassociateVPCFromHostedZone: {
            http: {
                requestUri: "/2013-04-01/hostedzone/{Id}/disassociatevpc"
            },
            input: {
                locationName: "DisassociateVPCFromHostedZoneRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "HostedZoneId", "VPC" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    },
                    VPC: {
                        shape: "Sa"
                    },
                    Comment: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        EnableHostedZoneDNSSEC: {
            http: {
                requestUri: "/2013-04-01/hostedzone/{Id}/enable-dnssec"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        GetAccountLimit: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/accountlimit/{Type}"
            },
            input: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    Type: {
                        location: "uri",
                        locationName: "Type"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Limit", "Count" ],
                members: {
                    Limit: {
                        type: "structure",
                        required: [ "Type", "Value" ],
                        members: {
                            Type: {},
                            Value: {
                                type: "long"
                            }
                        }
                    },
                    Count: {
                        type: "long"
                    }
                }
            }
        },
        GetChange: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/change/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChangeInfo" ],
                members: {
                    ChangeInfo: {
                        shape: "S5"
                    }
                }
            }
        },
        GetCheckerIpRanges: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/checkeripranges"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "CheckerIpRanges" ],
                members: {
                    CheckerIpRanges: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        GetDNSSEC: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/hostedzone/{Id}/dnssec"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Status", "KeySigningKeys" ],
                members: {
                    Status: {
                        type: "structure",
                        members: {
                            ServeSignature: {},
                            StatusMessage: {}
                        }
                    },
                    KeySigningKeys: {
                        type: "list",
                        member: {
                            shape: "S3f"
                        }
                    }
                }
            }
        },
        GetGeoLocation: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/geolocation"
            },
            input: {
                type: "structure",
                members: {
                    ContinentCode: {
                        location: "querystring",
                        locationName: "continentcode"
                    },
                    CountryCode: {
                        location: "querystring",
                        locationName: "countrycode"
                    },
                    SubdivisionCode: {
                        location: "querystring",
                        locationName: "subdivisioncode"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "GeoLocationDetails" ],
                members: {
                    GeoLocationDetails: {
                        shape: "S5h"
                    }
                }
            }
        },
        GetHealthCheck: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/healthcheck/{HealthCheckId}"
            },
            input: {
                type: "structure",
                required: [ "HealthCheckId" ],
                members: {
                    HealthCheckId: {
                        location: "uri",
                        locationName: "HealthCheckId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HealthCheck" ],
                members: {
                    HealthCheck: {
                        shape: "S2n"
                    }
                }
            }
        },
        GetHealthCheckCount: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/healthcheckcount"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "HealthCheckCount" ],
                members: {
                    HealthCheckCount: {
                        type: "long"
                    }
                }
            }
        },
        GetHealthCheckLastFailureReason: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/healthcheck/{HealthCheckId}/lastfailurereason"
            },
            input: {
                type: "structure",
                required: [ "HealthCheckId" ],
                members: {
                    HealthCheckId: {
                        location: "uri",
                        locationName: "HealthCheckId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HealthCheckObservations" ],
                members: {
                    HealthCheckObservations: {
                        shape: "S5s"
                    }
                }
            }
        },
        GetHealthCheckStatus: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/healthcheck/{HealthCheckId}/status"
            },
            input: {
                type: "structure",
                required: [ "HealthCheckId" ],
                members: {
                    HealthCheckId: {
                        location: "uri",
                        locationName: "HealthCheckId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HealthCheckObservations" ],
                members: {
                    HealthCheckObservations: {
                        shape: "S5s"
                    }
                }
            }
        },
        GetHostedZone: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/hostedzone/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HostedZone" ],
                members: {
                    HostedZone: {
                        shape: "S37"
                    },
                    DelegationSet: {
                        shape: "S39"
                    },
                    VPCs: {
                        shape: "S60"
                    }
                }
            }
        },
        GetHostedZoneCount: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/hostedzonecount"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "HostedZoneCount" ],
                members: {
                    HostedZoneCount: {
                        type: "long"
                    }
                }
            }
        },
        GetHostedZoneLimit: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/hostedzonelimit/{Id}/{Type}"
            },
            input: {
                type: "structure",
                required: [ "Type", "HostedZoneId" ],
                members: {
                    Type: {
                        location: "uri",
                        locationName: "Type"
                    },
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Limit", "Count" ],
                members: {
                    Limit: {
                        type: "structure",
                        required: [ "Type", "Value" ],
                        members: {
                            Type: {},
                            Value: {
                                type: "long"
                            }
                        }
                    },
                    Count: {
                        type: "long"
                    }
                }
            }
        },
        GetQueryLoggingConfig: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/queryloggingconfig/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "QueryLoggingConfig" ],
                members: {
                    QueryLoggingConfig: {
                        shape: "S3m"
                    }
                }
            }
        },
        GetReusableDelegationSet: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/delegationset/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DelegationSet" ],
                members: {
                    DelegationSet: {
                        shape: "S39"
                    }
                }
            }
        },
        GetReusableDelegationSetLimit: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/reusabledelegationsetlimit/{Id}/{Type}"
            },
            input: {
                type: "structure",
                required: [ "Type", "DelegationSetId" ],
                members: {
                    Type: {
                        location: "uri",
                        locationName: "Type"
                    },
                    DelegationSetId: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Limit", "Count" ],
                members: {
                    Limit: {
                        type: "structure",
                        required: [ "Type", "Value" ],
                        members: {
                            Type: {},
                            Value: {
                                type: "long"
                            }
                        }
                    },
                    Count: {
                        type: "long"
                    }
                }
            }
        },
        GetTrafficPolicy: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/trafficpolicy/{Id}/{Version}"
            },
            input: {
                type: "structure",
                required: [ "Id", "Version" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Version: {
                        location: "uri",
                        locationName: "Version",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicy" ],
                members: {
                    TrafficPolicy: {
                        shape: "S3v"
                    }
                }
            }
        },
        GetTrafficPolicyInstance: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/trafficpolicyinstance/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicyInstance" ],
                members: {
                    TrafficPolicyInstance: {
                        shape: "S40"
                    }
                }
            }
        },
        GetTrafficPolicyInstanceCount: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/trafficpolicyinstancecount"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicyInstanceCount" ],
                members: {
                    TrafficPolicyInstanceCount: {
                        type: "integer"
                    }
                }
            }
        },
        ListCidrBlocks: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/cidrcollection/{CidrCollectionId}/cidrblocks"
            },
            input: {
                type: "structure",
                required: [ "CollectionId" ],
                members: {
                    CollectionId: {
                        location: "uri",
                        locationName: "CidrCollectionId"
                    },
                    LocationName: {
                        location: "querystring",
                        locationName: "location"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nexttoken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxresults"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    CidrBlocks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CidrBlock: {},
                                LocationName: {}
                            }
                        }
                    }
                }
            }
        },
        ListCidrCollections: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/cidrcollection"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nexttoken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxresults"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    CidrCollections: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Id: {},
                                Name: {},
                                Version: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListCidrLocations: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/cidrcollection/{CidrCollectionId}"
            },
            input: {
                type: "structure",
                required: [ "CollectionId" ],
                members: {
                    CollectionId: {
                        location: "uri",
                        locationName: "CidrCollectionId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nexttoken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxresults"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    CidrLocations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LocationName: {}
                            }
                        }
                    }
                }
            }
        },
        ListGeoLocations: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/geolocations"
            },
            input: {
                type: "structure",
                members: {
                    StartContinentCode: {
                        location: "querystring",
                        locationName: "startcontinentcode"
                    },
                    StartCountryCode: {
                        location: "querystring",
                        locationName: "startcountrycode"
                    },
                    StartSubdivisionCode: {
                        location: "querystring",
                        locationName: "startsubdivisioncode"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "GeoLocationDetailsList", "IsTruncated", "MaxItems" ],
                members: {
                    GeoLocationDetailsList: {
                        type: "list",
                        member: {
                            shape: "S5h",
                            locationName: "GeoLocationDetails"
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    NextContinentCode: {},
                    NextCountryCode: {},
                    NextSubdivisionCode: {},
                    MaxItems: {}
                }
            }
        },
        ListHealthChecks: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/healthcheck"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HealthChecks", "Marker", "IsTruncated", "MaxItems" ],
                members: {
                    HealthChecks: {
                        type: "list",
                        member: {
                            shape: "S2n",
                            locationName: "HealthCheck"
                        }
                    },
                    Marker: {},
                    IsTruncated: {
                        type: "boolean"
                    },
                    NextMarker: {},
                    MaxItems: {}
                }
            }
        },
        ListHostedZones: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/hostedzone"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    },
                    DelegationSetId: {
                        location: "querystring",
                        locationName: "delegationsetid"
                    },
                    HostedZoneType: {
                        location: "querystring",
                        locationName: "hostedzonetype"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HostedZones", "Marker", "IsTruncated", "MaxItems" ],
                members: {
                    HostedZones: {
                        shape: "S7d"
                    },
                    Marker: {},
                    IsTruncated: {
                        type: "boolean"
                    },
                    NextMarker: {},
                    MaxItems: {}
                }
            }
        },
        ListHostedZonesByName: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/hostedzonesbyname"
            },
            input: {
                type: "structure",
                members: {
                    DNSName: {
                        location: "querystring",
                        locationName: "dnsname"
                    },
                    HostedZoneId: {
                        location: "querystring",
                        locationName: "hostedzoneid"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HostedZones", "IsTruncated", "MaxItems" ],
                members: {
                    HostedZones: {
                        shape: "S7d"
                    },
                    DNSName: {},
                    HostedZoneId: {},
                    IsTruncated: {
                        type: "boolean"
                    },
                    NextDNSName: {},
                    NextHostedZoneId: {},
                    MaxItems: {}
                }
            }
        },
        ListHostedZonesByVPC: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/hostedzonesbyvpc"
            },
            input: {
                type: "structure",
                required: [ "VPCId", "VPCRegion" ],
                members: {
                    VPCId: {
                        location: "querystring",
                        locationName: "vpcid"
                    },
                    VPCRegion: {
                        location: "querystring",
                        locationName: "vpcregion"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nexttoken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HostedZoneSummaries", "MaxItems" ],
                members: {
                    HostedZoneSummaries: {
                        type: "list",
                        member: {
                            locationName: "HostedZoneSummary",
                            type: "structure",
                            required: [ "HostedZoneId", "Name", "Owner" ],
                            members: {
                                HostedZoneId: {},
                                Name: {},
                                Owner: {
                                    type: "structure",
                                    members: {
                                        OwningAccount: {},
                                        OwningService: {}
                                    }
                                }
                            }
                        }
                    },
                    MaxItems: {},
                    NextToken: {}
                }
            }
        },
        ListQueryLoggingConfigs: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/queryloggingconfig"
            },
            input: {
                type: "structure",
                members: {
                    HostedZoneId: {
                        location: "querystring",
                        locationName: "hostedzoneid"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nexttoken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxresults"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "QueryLoggingConfigs" ],
                members: {
                    QueryLoggingConfigs: {
                        type: "list",
                        member: {
                            shape: "S3m",
                            locationName: "QueryLoggingConfig"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceRecordSets: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/hostedzone/{Id}/rrset"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    },
                    StartRecordName: {
                        location: "querystring",
                        locationName: "name"
                    },
                    StartRecordType: {
                        location: "querystring",
                        locationName: "type"
                    },
                    StartRecordIdentifier: {
                        location: "querystring",
                        locationName: "identifier"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceRecordSets", "IsTruncated", "MaxItems" ],
                members: {
                    ResourceRecordSets: {
                        type: "list",
                        member: {
                            shape: "Sv",
                            locationName: "ResourceRecordSet"
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    NextRecordName: {},
                    NextRecordType: {},
                    NextRecordIdentifier: {},
                    MaxItems: {}
                }
            }
        },
        ListReusableDelegationSets: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/delegationset"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DelegationSets", "Marker", "IsTruncated", "MaxItems" ],
                members: {
                    DelegationSets: {
                        type: "list",
                        member: {
                            shape: "S39",
                            locationName: "DelegationSet"
                        }
                    },
                    Marker: {},
                    IsTruncated: {
                        type: "boolean"
                    },
                    NextMarker: {},
                    MaxItems: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/tags/{ResourceType}/{ResourceId}"
            },
            input: {
                type: "structure",
                required: [ "ResourceType", "ResourceId" ],
                members: {
                    ResourceType: {
                        location: "uri",
                        locationName: "ResourceType"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceTagSet" ],
                members: {
                    ResourceTagSet: {
                        shape: "S7y"
                    }
                }
            }
        },
        ListTagsForResources: {
            http: {
                requestUri: "/2013-04-01/tags/{ResourceType}"
            },
            input: {
                locationName: "ListTagsForResourcesRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "ResourceType", "ResourceIds" ],
                members: {
                    ResourceType: {
                        location: "uri",
                        locationName: "ResourceType"
                    },
                    ResourceIds: {
                        type: "list",
                        member: {
                            locationName: "ResourceId"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceTagSets" ],
                members: {
                    ResourceTagSets: {
                        type: "list",
                        member: {
                            shape: "S7y",
                            locationName: "ResourceTagSet"
                        }
                    }
                }
            }
        },
        ListTrafficPolicies: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/trafficpolicies"
            },
            input: {
                type: "structure",
                members: {
                    TrafficPolicyIdMarker: {
                        location: "querystring",
                        locationName: "trafficpolicyid"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicySummaries", "IsTruncated", "TrafficPolicyIdMarker", "MaxItems" ],
                members: {
                    TrafficPolicySummaries: {
                        type: "list",
                        member: {
                            locationName: "TrafficPolicySummary",
                            type: "structure",
                            required: [ "Id", "Name", "Type", "LatestVersion", "TrafficPolicyCount" ],
                            members: {
                                Id: {},
                                Name: {},
                                Type: {},
                                LatestVersion: {
                                    type: "integer"
                                },
                                TrafficPolicyCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    TrafficPolicyIdMarker: {},
                    MaxItems: {}
                }
            }
        },
        ListTrafficPolicyInstances: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/trafficpolicyinstances"
            },
            input: {
                type: "structure",
                members: {
                    HostedZoneIdMarker: {
                        location: "querystring",
                        locationName: "hostedzoneid"
                    },
                    TrafficPolicyInstanceNameMarker: {
                        location: "querystring",
                        locationName: "trafficpolicyinstancename"
                    },
                    TrafficPolicyInstanceTypeMarker: {
                        location: "querystring",
                        locationName: "trafficpolicyinstancetype"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicyInstances", "IsTruncated", "MaxItems" ],
                members: {
                    TrafficPolicyInstances: {
                        shape: "S89"
                    },
                    HostedZoneIdMarker: {},
                    TrafficPolicyInstanceNameMarker: {},
                    TrafficPolicyInstanceTypeMarker: {},
                    IsTruncated: {
                        type: "boolean"
                    },
                    MaxItems: {}
                }
            }
        },
        ListTrafficPolicyInstancesByHostedZone: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/trafficpolicyinstances/hostedzone"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId" ],
                members: {
                    HostedZoneId: {
                        location: "querystring",
                        locationName: "id"
                    },
                    TrafficPolicyInstanceNameMarker: {
                        location: "querystring",
                        locationName: "trafficpolicyinstancename"
                    },
                    TrafficPolicyInstanceTypeMarker: {
                        location: "querystring",
                        locationName: "trafficpolicyinstancetype"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicyInstances", "IsTruncated", "MaxItems" ],
                members: {
                    TrafficPolicyInstances: {
                        shape: "S89"
                    },
                    TrafficPolicyInstanceNameMarker: {},
                    TrafficPolicyInstanceTypeMarker: {},
                    IsTruncated: {
                        type: "boolean"
                    },
                    MaxItems: {}
                }
            }
        },
        ListTrafficPolicyInstancesByPolicy: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/trafficpolicyinstances/trafficpolicy"
            },
            input: {
                type: "structure",
                required: [ "TrafficPolicyId", "TrafficPolicyVersion" ],
                members: {
                    TrafficPolicyId: {
                        location: "querystring",
                        locationName: "id"
                    },
                    TrafficPolicyVersion: {
                        location: "querystring",
                        locationName: "version",
                        type: "integer"
                    },
                    HostedZoneIdMarker: {
                        location: "querystring",
                        locationName: "hostedzoneid"
                    },
                    TrafficPolicyInstanceNameMarker: {
                        location: "querystring",
                        locationName: "trafficpolicyinstancename"
                    },
                    TrafficPolicyInstanceTypeMarker: {
                        location: "querystring",
                        locationName: "trafficpolicyinstancetype"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicyInstances", "IsTruncated", "MaxItems" ],
                members: {
                    TrafficPolicyInstances: {
                        shape: "S89"
                    },
                    HostedZoneIdMarker: {},
                    TrafficPolicyInstanceNameMarker: {},
                    TrafficPolicyInstanceTypeMarker: {},
                    IsTruncated: {
                        type: "boolean"
                    },
                    MaxItems: {}
                }
            }
        },
        ListTrafficPolicyVersions: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/trafficpolicies/{Id}/versions"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    TrafficPolicyVersionMarker: {
                        location: "querystring",
                        locationName: "trafficpolicyversion"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxitems"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicies", "IsTruncated", "TrafficPolicyVersionMarker", "MaxItems" ],
                members: {
                    TrafficPolicies: {
                        type: "list",
                        member: {
                            shape: "S3v",
                            locationName: "TrafficPolicy"
                        }
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    TrafficPolicyVersionMarker: {},
                    MaxItems: {}
                }
            }
        },
        ListVPCAssociationAuthorizations: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/hostedzone/{Id}/authorizevpcassociation"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId" ],
                members: {
                    HostedZoneId: {
                        location: "uri",
                        locationName: "Id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nexttoken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxresults"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HostedZoneId", "VPCs" ],
                members: {
                    HostedZoneId: {},
                    NextToken: {},
                    VPCs: {
                        shape: "S60"
                    }
                }
            }
        },
        TestDNSAnswer: {
            http: {
                method: "GET",
                requestUri: "/2013-04-01/testdnsanswer"
            },
            input: {
                type: "structure",
                required: [ "HostedZoneId", "RecordName", "RecordType" ],
                members: {
                    HostedZoneId: {
                        location: "querystring",
                        locationName: "hostedzoneid"
                    },
                    RecordName: {
                        location: "querystring",
                        locationName: "recordname"
                    },
                    RecordType: {
                        location: "querystring",
                        locationName: "recordtype"
                    },
                    ResolverIP: {
                        location: "querystring",
                        locationName: "resolverip"
                    },
                    EDNS0ClientSubnetIP: {
                        location: "querystring",
                        locationName: "edns0clientsubnetip"
                    },
                    EDNS0ClientSubnetMask: {
                        location: "querystring",
                        locationName: "edns0clientsubnetmask"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Nameserver", "RecordName", "RecordType", "RecordData", "ResponseCode", "Protocol" ],
                members: {
                    Nameserver: {},
                    RecordName: {},
                    RecordType: {},
                    RecordData: {
                        type: "list",
                        member: {
                            locationName: "RecordDataEntry"
                        }
                    },
                    ResponseCode: {},
                    Protocol: {}
                }
            }
        },
        UpdateHealthCheck: {
            http: {
                requestUri: "/2013-04-01/healthcheck/{HealthCheckId}"
            },
            input: {
                locationName: "UpdateHealthCheckRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "HealthCheckId" ],
                members: {
                    HealthCheckId: {
                        location: "uri",
                        locationName: "HealthCheckId"
                    },
                    HealthCheckVersion: {
                        type: "long"
                    },
                    IPAddress: {},
                    Port: {
                        type: "integer"
                    },
                    ResourcePath: {},
                    FullyQualifiedDomainName: {},
                    SearchString: {},
                    FailureThreshold: {
                        type: "integer"
                    },
                    Inverted: {
                        type: "boolean"
                    },
                    Disabled: {
                        type: "boolean"
                    },
                    HealthThreshold: {
                        type: "integer"
                    },
                    ChildHealthChecks: {
                        shape: "S2d"
                    },
                    EnableSNI: {
                        type: "boolean"
                    },
                    Regions: {
                        shape: "S2f"
                    },
                    AlarmIdentifier: {
                        shape: "S2h"
                    },
                    InsufficientDataHealthStatus: {},
                    ResetElements: {
                        type: "list",
                        member: {
                            locationName: "ResettableElementName"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HealthCheck" ],
                members: {
                    HealthCheck: {
                        shape: "S2n"
                    }
                }
            }
        },
        UpdateHostedZoneComment: {
            http: {
                requestUri: "/2013-04-01/hostedzone/{Id}"
            },
            input: {
                locationName: "UpdateHostedZoneCommentRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Comment: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HostedZone" ],
                members: {
                    HostedZone: {
                        shape: "S37"
                    }
                }
            }
        },
        UpdateTrafficPolicyComment: {
            http: {
                requestUri: "/2013-04-01/trafficpolicy/{Id}/{Version}"
            },
            input: {
                locationName: "UpdateTrafficPolicyCommentRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "Id", "Version", "Comment" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    Version: {
                        location: "uri",
                        locationName: "Version",
                        type: "integer"
                    },
                    Comment: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicy" ],
                members: {
                    TrafficPolicy: {
                        shape: "S3v"
                    }
                }
            }
        },
        UpdateTrafficPolicyInstance: {
            http: {
                requestUri: "/2013-04-01/trafficpolicyinstance/{Id}"
            },
            input: {
                locationName: "UpdateTrafficPolicyInstanceRequest",
                xmlNamespace: {
                    uri: "https://route53.amazonaws.com/doc/2013-04-01/"
                },
                type: "structure",
                required: [ "Id", "TTL", "TrafficPolicyId", "TrafficPolicyVersion" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    TTL: {
                        type: "long"
                    },
                    TrafficPolicyId: {},
                    TrafficPolicyVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrafficPolicyInstance" ],
                members: {
                    TrafficPolicyInstance: {
                        shape: "S40"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "Id", "Status", "SubmittedAt" ],
            members: {
                Id: {},
                Status: {},
                SubmittedAt: {
                    type: "timestamp"
                },
                Comment: {}
            }
        },
        Sa: {
            type: "structure",
            members: {
                VPCRegion: {},
                VPCId: {}
            }
        },
        Sv: {
            type: "structure",
            required: [ "Name", "Type" ],
            members: {
                Name: {},
                Type: {},
                SetIdentifier: {},
                Weight: {
                    type: "long"
                },
                Region: {},
                GeoLocation: {
                    type: "structure",
                    members: {
                        ContinentCode: {},
                        CountryCode: {},
                        SubdivisionCode: {}
                    }
                },
                Failover: {},
                MultiValueAnswer: {
                    type: "boolean"
                },
                TTL: {
                    type: "long"
                },
                ResourceRecords: {
                    type: "list",
                    member: {
                        locationName: "ResourceRecord",
                        type: "structure",
                        required: [ "Value" ],
                        members: {
                            Value: {}
                        }
                    }
                },
                AliasTarget: {
                    type: "structure",
                    required: [ "HostedZoneId", "DNSName", "EvaluateTargetHealth" ],
                    members: {
                        HostedZoneId: {},
                        DNSName: {},
                        EvaluateTargetHealth: {
                            type: "boolean"
                        }
                    }
                },
                HealthCheckId: {},
                TrafficPolicyInstanceId: {},
                CidrRoutingConfig: {
                    type: "structure",
                    required: [ "CollectionId", "LocationName" ],
                    members: {
                        CollectionId: {},
                        LocationName: {}
                    }
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                locationName: "Tag",
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S20: {
            type: "structure",
            required: [ "Type" ],
            members: {
                IPAddress: {},
                Port: {
                    type: "integer"
                },
                Type: {},
                ResourcePath: {},
                FullyQualifiedDomainName: {},
                SearchString: {},
                RequestInterval: {
                    type: "integer"
                },
                FailureThreshold: {
                    type: "integer"
                },
                MeasureLatency: {
                    type: "boolean"
                },
                Inverted: {
                    type: "boolean"
                },
                Disabled: {
                    type: "boolean"
                },
                HealthThreshold: {
                    type: "integer"
                },
                ChildHealthChecks: {
                    shape: "S2d"
                },
                EnableSNI: {
                    type: "boolean"
                },
                Regions: {
                    shape: "S2f"
                },
                AlarmIdentifier: {
                    shape: "S2h"
                },
                InsufficientDataHealthStatus: {},
                RoutingControlArn: {}
            }
        },
        S2d: {
            type: "list",
            member: {
                locationName: "ChildHealthCheck"
            }
        },
        S2f: {
            type: "list",
            member: {
                locationName: "Region"
            }
        },
        S2h: {
            type: "structure",
            required: [ "Region", "Name" ],
            members: {
                Region: {},
                Name: {}
            }
        },
        S2n: {
            type: "structure",
            required: [ "Id", "CallerReference", "HealthCheckConfig", "HealthCheckVersion" ],
            members: {
                Id: {},
                CallerReference: {},
                LinkedService: {
                    shape: "S2o"
                },
                HealthCheckConfig: {
                    shape: "S20"
                },
                HealthCheckVersion: {
                    type: "long"
                },
                CloudWatchAlarmConfiguration: {
                    type: "structure",
                    required: [ "EvaluationPeriods", "Threshold", "ComparisonOperator", "Period", "MetricName", "Namespace", "Statistic" ],
                    members: {
                        EvaluationPeriods: {
                            type: "integer"
                        },
                        Threshold: {
                            type: "double"
                        },
                        ComparisonOperator: {},
                        Period: {
                            type: "integer"
                        },
                        MetricName: {},
                        Namespace: {},
                        Statistic: {},
                        Dimensions: {
                            type: "list",
                            member: {
                                locationName: "Dimension",
                                type: "structure",
                                required: [ "Name", "Value" ],
                                members: {
                                    Name: {},
                                    Value: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S2o: {
            type: "structure",
            members: {
                ServicePrincipal: {},
                Description: {}
            }
        },
        S34: {
            type: "structure",
            members: {
                Comment: {},
                PrivateZone: {
                    type: "boolean"
                }
            }
        },
        S37: {
            type: "structure",
            required: [ "Id", "Name", "CallerReference" ],
            members: {
                Id: {},
                Name: {},
                CallerReference: {},
                Config: {
                    shape: "S34"
                },
                ResourceRecordSetCount: {
                    type: "long"
                },
                LinkedService: {
                    shape: "S2o"
                }
            }
        },
        S39: {
            type: "structure",
            required: [ "NameServers" ],
            members: {
                Id: {},
                CallerReference: {},
                NameServers: {
                    type: "list",
                    member: {
                        locationName: "NameServer"
                    }
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                Name: {},
                KmsArn: {},
                Flag: {
                    type: "integer"
                },
                SigningAlgorithmMnemonic: {},
                SigningAlgorithmType: {
                    type: "integer"
                },
                DigestAlgorithmMnemonic: {},
                DigestAlgorithmType: {
                    type: "integer"
                },
                KeyTag: {
                    type: "integer"
                },
                DigestValue: {},
                PublicKey: {},
                DSRecord: {},
                DNSKEYRecord: {},
                Status: {},
                StatusMessage: {},
                CreatedDate: {
                    type: "timestamp"
                },
                LastModifiedDate: {
                    type: "timestamp"
                }
            }
        },
        S3m: {
            type: "structure",
            required: [ "Id", "HostedZoneId", "CloudWatchLogsLogGroupArn" ],
            members: {
                Id: {},
                HostedZoneId: {},
                CloudWatchLogsLogGroupArn: {}
            }
        },
        S3v: {
            type: "structure",
            required: [ "Id", "Version", "Name", "Type", "Document" ],
            members: {
                Id: {},
                Version: {
                    type: "integer"
                },
                Name: {},
                Type: {},
                Document: {},
                Comment: {}
            }
        },
        S40: {
            type: "structure",
            required: [ "Id", "HostedZoneId", "Name", "TTL", "State", "Message", "TrafficPolicyId", "TrafficPolicyVersion", "TrafficPolicyType" ],
            members: {
                Id: {},
                HostedZoneId: {},
                Name: {},
                TTL: {
                    type: "long"
                },
                State: {},
                Message: {},
                TrafficPolicyId: {},
                TrafficPolicyVersion: {
                    type: "integer"
                },
                TrafficPolicyType: {}
            }
        },
        S5h: {
            type: "structure",
            members: {
                ContinentCode: {},
                ContinentName: {},
                CountryCode: {},
                CountryName: {},
                SubdivisionCode: {},
                SubdivisionName: {}
            }
        },
        S5s: {
            type: "list",
            member: {
                locationName: "HealthCheckObservation",
                type: "structure",
                members: {
                    Region: {},
                    IPAddress: {},
                    StatusReport: {
                        type: "structure",
                        members: {
                            Status: {},
                            CheckedTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        S60: {
            type: "list",
            member: {
                shape: "Sa",
                locationName: "VPC"
            }
        },
        S7d: {
            type: "list",
            member: {
                shape: "S37",
                locationName: "HostedZone"
            }
        },
        S7y: {
            type: "structure",
            members: {
                ResourceType: {},
                ResourceId: {},
                Tags: {
                    shape: "S1l"
                }
            }
        },
        S89: {
            type: "list",
            member: {
                shape: "S40",
                locationName: "TrafficPolicyInstance"
            }
        }
    },
    paginators: {
        ListCidrBlocks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CidrBlocks"
        },
        ListCidrCollections: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CidrCollections"
        },
        ListCidrLocations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CidrLocations"
        },
        ListHealthChecks: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "NextMarker",
            result_key: "HealthChecks"
        },
        ListHostedZones: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: "NextMarker",
            result_key: "HostedZones"
        },
        ListQueryLoggingConfigs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "QueryLoggingConfigs"
        },
        ListResourceRecordSets: {
            input_token: [ "StartRecordName", "StartRecordType", "StartRecordIdentifier" ],
            limit_key: "MaxItems",
            more_results: "IsTruncated",
            output_token: [ "NextRecordName", "NextRecordType", "NextRecordIdentifier" ],
            result_key: "ResourceRecordSets"
        }
    },
    waiters: {
        ResourceRecordSetsChanged: {
            delay: 30,
            maxAttempts: 60,
            operation: "GetChange",
            acceptors: [ {
                matcher: "path",
                expected: "INSYNC",
                argument: "ChangeInfo.Status",
                state: "success"
            } ]
        }
    }
};

AWS.apiLoader.services["route53domains"] = {};

AWS.Route53Domains = AWS.Service.defineService("route53domains", [ "2014-05-15" ]);

AWS.apiLoader.services["route53domains"]["2014-05-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-05-15",
        endpointPrefix: "route53domains",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Route 53 Domains",
        serviceId: "Route 53 Domains",
        signatureVersion: "v4",
        targetPrefix: "Route53Domains_v20140515",
        uid: "route53domains-2014-05-15"
    },
    operations: {
        AcceptDomainTransferFromAnotherAwsAccount: {
            input: {
                type: "structure",
                required: [ "DomainName", "Password" ],
                members: {
                    DomainName: {},
                    Password: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        AssociateDelegationSignerToDomain: {
            input: {
                type: "structure",
                required: [ "DomainName", "SigningAttributes" ],
                members: {
                    DomainName: {},
                    SigningAttributes: {
                        type: "structure",
                        members: {
                            Algorithm: {
                                type: "integer"
                            },
                            Flags: {
                                type: "integer"
                            },
                            PublicKey: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        CancelDomainTransferToAnotherAwsAccount: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        CheckDomainAvailability: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    IdnLangCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Availability: {}
                }
            }
        },
        CheckDomainTransferability: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    AuthCode: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Transferability: {
                        type: "structure",
                        members: {
                            Transferable: {}
                        }
                    },
                    Message: {}
                }
            }
        },
        DeleteDomain: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        DeleteTagsForDomain: {
            input: {
                type: "structure",
                required: [ "DomainName", "TagsToDelete" ],
                members: {
                    DomainName: {},
                    TagsToDelete: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableDomainAutoRenew: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableDomainTransferLock: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        DisassociateDelegationSignerFromDomain: {
            input: {
                type: "structure",
                required: [ "DomainName", "Id" ],
                members: {
                    DomainName: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        EnableDomainAutoRenew: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableDomainTransferLock: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        GetContactReachabilityStatus: {
            input: {
                type: "structure",
                members: {
                    domainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domainName: {},
                    status: {}
                }
            }
        },
        GetDomainDetail: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainName: {},
                    Nameservers: {
                        shape: "S19"
                    },
                    AutoRenew: {
                        type: "boolean"
                    },
                    AdminContact: {
                        shape: "S1f"
                    },
                    RegistrantContact: {
                        shape: "S1f"
                    },
                    TechContact: {
                        shape: "S1f"
                    },
                    AdminPrivacy: {
                        type: "boolean"
                    },
                    RegistrantPrivacy: {
                        type: "boolean"
                    },
                    TechPrivacy: {
                        type: "boolean"
                    },
                    RegistrarName: {},
                    WhoIsServer: {},
                    RegistrarUrl: {},
                    AbuseContactEmail: {
                        shape: "S1o"
                    },
                    AbuseContactPhone: {
                        shape: "S1n"
                    },
                    RegistryDomainId: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    UpdatedDate: {
                        type: "timestamp"
                    },
                    ExpirationDate: {
                        type: "timestamp"
                    },
                    Reseller: {},
                    DnsSec: {},
                    StatusList: {
                        type: "list",
                        member: {}
                    },
                    DnssecKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Algorithm: {
                                    type: "integer"
                                },
                                Flags: {
                                    type: "integer"
                                },
                                PublicKey: {},
                                DigestType: {
                                    type: "integer"
                                },
                                Digest: {},
                                KeyTag: {
                                    type: "integer"
                                },
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        GetDomainSuggestions: {
            input: {
                type: "structure",
                required: [ "DomainName", "SuggestionCount", "OnlyAvailable" ],
                members: {
                    DomainName: {},
                    SuggestionCount: {
                        type: "integer"
                    },
                    OnlyAvailable: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuggestionsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                Availability: {}
                            }
                        }
                    }
                }
            }
        },
        GetOperationDetail: {
            input: {
                type: "structure",
                required: [ "OperationId" ],
                members: {
                    OperationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {},
                    Status: {},
                    Message: {},
                    DomainName: {},
                    Type: {},
                    SubmittedDate: {
                        type: "timestamp"
                    },
                    LastUpdatedDate: {
                        type: "timestamp"
                    },
                    StatusFlag: {}
                }
            }
        },
        ListDomains: {
            input: {
                type: "structure",
                members: {
                    FilterConditions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Operator", "Values" ],
                            members: {
                                Name: {},
                                Operator: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    SortCondition: {
                        type: "structure",
                        required: [ "Name", "SortOrder" ],
                        members: {
                            Name: {},
                            SortOrder: {}
                        }
                    },
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                AutoRenew: {
                                    type: "boolean"
                                },
                                TransferLock: {
                                    type: "boolean"
                                },
                                Expiry: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextPageMarker: {}
                }
            }
        },
        ListOperations: {
            input: {
                type: "structure",
                members: {
                    SubmittedSince: {
                        type: "timestamp"
                    },
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    },
                    Status: {
                        type: "list",
                        member: {}
                    },
                    Type: {
                        type: "list",
                        member: {}
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Operations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                OperationId: {},
                                Status: {},
                                Type: {},
                                SubmittedDate: {
                                    type: "timestamp"
                                },
                                DomainName: {},
                                Message: {},
                                StatusFlag: {},
                                LastUpdatedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextPageMarker: {}
                }
            }
        },
        ListPrices: {
            input: {
                type: "structure",
                members: {
                    Tld: {},
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Prices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                RegistrationPrice: {
                                    shape: "S37"
                                },
                                TransferPrice: {
                                    shape: "S37"
                                },
                                RenewalPrice: {
                                    shape: "S37"
                                },
                                ChangeOwnershipPrice: {
                                    shape: "S37"
                                },
                                RestorationPrice: {
                                    shape: "S37"
                                }
                            }
                        }
                    },
                    NextPageMarker: {}
                }
            }
        },
        ListTagsForDomain: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "S3c"
                    }
                }
            }
        },
        PushDomain: {
            input: {
                type: "structure",
                required: [ "DomainName", "Target" ],
                members: {
                    DomainName: {},
                    Target: {}
                }
            }
        },
        RegisterDomain: {
            input: {
                type: "structure",
                required: [ "DomainName", "DurationInYears", "AdminContact", "RegistrantContact", "TechContact" ],
                members: {
                    DomainName: {},
                    IdnLangCode: {},
                    DurationInYears: {
                        type: "integer"
                    },
                    AutoRenew: {
                        type: "boolean"
                    },
                    AdminContact: {
                        shape: "S1f"
                    },
                    RegistrantContact: {
                        shape: "S1f"
                    },
                    TechContact: {
                        shape: "S1f"
                    },
                    PrivacyProtectAdminContact: {
                        type: "boolean"
                    },
                    PrivacyProtectRegistrantContact: {
                        type: "boolean"
                    },
                    PrivacyProtectTechContact: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        RejectDomainTransferFromAnotherAwsAccount: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        RenewDomain: {
            input: {
                type: "structure",
                required: [ "DomainName", "CurrentExpiryYear" ],
                members: {
                    DomainName: {},
                    DurationInYears: {
                        type: "integer"
                    },
                    CurrentExpiryYear: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        ResendContactReachabilityEmail: {
            input: {
                type: "structure",
                members: {
                    domainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domainName: {},
                    emailAddress: {
                        shape: "S1o"
                    },
                    isAlreadyVerified: {
                        type: "boolean"
                    }
                }
            }
        },
        ResendOperationAuthorization: {
            input: {
                type: "structure",
                required: [ "OperationId" ],
                members: {
                    OperationId: {}
                }
            }
        },
        RetrieveDomainAuthCode: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthCode: {
                        shape: "Si"
                    }
                }
            }
        },
        TransferDomain: {
            input: {
                type: "structure",
                required: [ "DomainName", "DurationInYears", "AdminContact", "RegistrantContact", "TechContact" ],
                members: {
                    DomainName: {},
                    IdnLangCode: {},
                    DurationInYears: {
                        type: "integer"
                    },
                    Nameservers: {
                        shape: "S19"
                    },
                    AuthCode: {
                        shape: "Si"
                    },
                    AutoRenew: {
                        type: "boolean"
                    },
                    AdminContact: {
                        shape: "S1f"
                    },
                    RegistrantContact: {
                        shape: "S1f"
                    },
                    TechContact: {
                        shape: "S1f"
                    },
                    PrivacyProtectAdminContact: {
                        type: "boolean"
                    },
                    PrivacyProtectRegistrantContact: {
                        type: "boolean"
                    },
                    PrivacyProtectTechContact: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        TransferDomainToAnotherAwsAccount: {
            input: {
                type: "structure",
                required: [ "DomainName", "AccountId" ],
                members: {
                    DomainName: {},
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {},
                    Password: {
                        shape: "S3"
                    }
                }
            }
        },
        UpdateDomainContact: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    AdminContact: {
                        shape: "S1f"
                    },
                    RegistrantContact: {
                        shape: "S1f"
                    },
                    TechContact: {
                        shape: "S1f"
                    },
                    Consent: {
                        type: "structure",
                        required: [ "MaxPrice", "Currency" ],
                        members: {
                            MaxPrice: {
                                type: "double"
                            },
                            Currency: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        UpdateDomainContactPrivacy: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    AdminPrivacy: {
                        type: "boolean"
                    },
                    RegistrantPrivacy: {
                        type: "boolean"
                    },
                    TechPrivacy: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        UpdateDomainNameservers: {
            input: {
                type: "structure",
                required: [ "DomainName", "Nameservers" ],
                members: {
                    DomainName: {},
                    FIAuthKey: {
                        deprecated: true,
                        type: "string",
                        sensitive: true
                    },
                    Nameservers: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        UpdateTagsForDomain: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    TagsToUpdate: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ViewBilling: {
            input: {
                type: "structure",
                members: {
                    Start: {
                        type: "timestamp"
                    },
                    End: {
                        type: "timestamp"
                    },
                    Marker: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextPageMarker: {},
                    BillingRecords: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                Operation: {},
                                InvoiceId: {},
                                BillDate: {
                                    type: "timestamp"
                                },
                                Price: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        Si: {
            type: "string",
            sensitive: true
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    GlueIps: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                FirstName: {
                    shape: "S1g"
                },
                LastName: {
                    shape: "S1g"
                },
                ContactType: {},
                OrganizationName: {
                    shape: "S1g"
                },
                AddressLine1: {
                    shape: "S1i"
                },
                AddressLine2: {
                    shape: "S1i"
                },
                City: {
                    type: "string",
                    sensitive: true
                },
                State: {
                    type: "string",
                    sensitive: true
                },
                CountryCode: {
                    type: "string",
                    sensitive: true
                },
                ZipCode: {
                    type: "string",
                    sensitive: true
                },
                PhoneNumber: {
                    shape: "S1n"
                },
                Email: {
                    shape: "S1o"
                },
                Fax: {
                    shape: "S1n"
                },
                ExtraParams: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Value" ],
                        members: {
                            Name: {},
                            Value: {
                                type: "string",
                                sensitive: true
                            }
                        }
                    }
                }
            },
            sensitive: true
        },
        S1g: {
            type: "string",
            sensitive: true
        },
        S1i: {
            type: "string",
            sensitive: true
        },
        S1n: {
            type: "string",
            sensitive: true
        },
        S1o: {
            type: "string",
            sensitive: true
        },
        S37: {
            type: "structure",
            required: [ "Price", "Currency" ],
            members: {
                Price: {
                    type: "double"
                },
                Currency: {}
            }
        },
        S3c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListDomains: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextPageMarker",
            result_key: "Domains"
        },
        ListOperations: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextPageMarker",
            result_key: "Operations"
        },
        ListPrices: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextPageMarker",
            result_key: "Prices"
        },
        ViewBilling: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "NextPageMarker",
            result_key: "BillingRecords"
        }
    }
};

AWS.apiLoader.services["s3"] = {};

AWS.S3 = AWS.Service.defineService("s3", [ "2006-03-01" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    115: [ function(require, module, exports) {
        var AWS = require("../core");
        var v4Credentials = require("../signers/v4_credentials");
        var resolveRegionalEndpointsFlag = require("../config_regional_endpoint");
        var s3util = require("./s3util");
        var regionUtil = require("../region_config");
        require("../s3/managed_upload");
        var operationsWith200StatusCodeError = {
            completeMultipartUpload: true,
            copyObject: true,
            uploadPartCopy: true
        };
        var regionRedirectErrorCodes = [ "AuthorizationHeaderMalformed", "BadRequest", "PermanentRedirect", 301 ];
        var OBJECT_LAMBDA_SERVICE = "s3-object-lambda";
        AWS.util.update(AWS.S3.prototype, {
            getSignatureVersion: function getSignatureVersion(request) {
                var defaultApiVersion = this.api.signatureVersion;
                var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;
                var regionDefinedVersion = this.config.signatureVersion;
                var isPresigned = request ? request.isPresigned() : false;
                if (userDefinedVersion) {
                    userDefinedVersion = userDefinedVersion === "v2" ? "s3" : userDefinedVersion;
                    return userDefinedVersion;
                }
                if (isPresigned !== true) {
                    defaultApiVersion = "v4";
                } else if (regionDefinedVersion) {
                    defaultApiVersion = regionDefinedVersion;
                }
                return defaultApiVersion;
            },
            getSigningName: function getSigningName(req) {
                if (req && req.operation === "writeGetObjectResponse") {
                    return OBJECT_LAMBDA_SERVICE;
                }
                var _super = AWS.Service.prototype.getSigningName;
                return req && req._parsedArn && req._parsedArn.service ? req._parsedArn.service : _super.call(this);
            },
            getSignerClass: function getSignerClass(request) {
                var signatureVersion = this.getSignatureVersion(request);
                return AWS.Signers.RequestSigner.getVersion(signatureVersion);
            },
            validateService: function validateService() {
                var msg;
                var messages = [];
                if (!this.config.region) this.config.region = "us-east-1";
                if (!this.config.endpoint && this.config.s3BucketEndpoint) {
                    messages.push("An endpoint must be provided when configuring " + "`s3BucketEndpoint` to true.");
                }
                if (messages.length === 1) {
                    msg = messages[0];
                } else if (messages.length > 1) {
                    msg = "Multiple configuration errors:\n" + messages.join("\n");
                }
                if (msg) {
                    throw AWS.util.error(new Error(), {
                        name: "InvalidEndpoint",
                        message: msg
                    });
                }
            },
            shouldDisableBodySigning: function shouldDisableBodySigning(request) {
                var signerClass = this.getSignerClass();
                if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4 && request.httpRequest.endpoint.protocol === "https:") {
                    return true;
                }
                return false;
            },
            setupRequestListeners: function setupRequestListeners(request) {
                var prependListener = true;
                request.addListener("validate", this.validateScheme);
                request.addListener("validate", this.validateBucketName, prependListener);
                request.addListener("validate", this.optInUsEast1RegionalEndpoint, prependListener);
                request.removeListener("validate", AWS.EventListeners.Core.VALIDATE_REGION);
                request.addListener("build", this.addContentType);
                request.addListener("build", this.computeContentMd5);
                request.addListener("build", this.computeSseCustomerKeyMd5);
                request.addListener("build", this.populateURI);
                request.addListener("afterBuild", this.addExpect100Continue);
                request.addListener("extractError", this.extractError);
                request.addListener("extractData", AWS.util.hoistPayloadMember);
                request.addListener("extractData", this.extractData);
                request.addListener("extractData", this.extractErrorFrom200Response);
                request.addListener("beforePresign", this.prepareSignedUrl);
                if (this.shouldDisableBodySigning(request)) {
                    request.removeListener("afterBuild", AWS.EventListeners.Core.COMPUTE_SHA256);
                    request.addListener("afterBuild", this.disableBodySigning);
                }
                if (request.operation !== "createBucket" && s3util.isArnInParam(request, "Bucket")) {
                    request._parsedArn = AWS.util.ARN.parse(request.params.Bucket);
                    request.removeListener("validate", this.validateBucketName);
                    request.removeListener("build", this.populateURI);
                    if (request._parsedArn.service === "s3") {
                        request.addListener("validate", s3util.validateS3AccessPointArn);
                        request.addListener("validate", this.validateArnResourceType);
                        request.addListener("validate", this.validateArnRegion);
                    } else if (request._parsedArn.service === "s3-outposts") {
                        request.addListener("validate", s3util.validateOutpostsAccessPointArn);
                        request.addListener("validate", s3util.validateOutpostsArn);
                        request.addListener("validate", s3util.validateArnRegion);
                    }
                    request.addListener("validate", s3util.validateArnAccount);
                    request.addListener("validate", s3util.validateArnService);
                    request.addListener("build", this.populateUriFromAccessPointArn);
                    request.addListener("build", s3util.validatePopulateUriFromArn);
                    return;
                }
                request.addListener("validate", this.validateBucketEndpoint);
                request.addListener("validate", this.correctBucketRegionFromCache);
                request.onAsync("extractError", this.requestBucketRegion);
                if (AWS.util.isBrowser()) {
                    request.onAsync("retry", this.reqRegionForNetworkingError);
                }
            },
            validateScheme: function(req) {
                var params = req.params, scheme = req.httpRequest.endpoint.protocol, sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;
                if (sensitive && scheme !== "https:") {
                    var msg = "Cannot send SSE keys over HTTP. Set 'sslEnabled'" + "to 'true' in your configuration";
                    throw AWS.util.error(new Error(), {
                        code: "ConfigError",
                        message: msg
                    });
                }
            },
            validateBucketEndpoint: function(req) {
                if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {
                    var msg = "Cannot send requests to root API with `s3BucketEndpoint` set.";
                    throw AWS.util.error(new Error(), {
                        code: "ConfigError",
                        message: msg
                    });
                }
            },
            validateArnRegion: function validateArnRegion(req) {
                s3util.validateArnRegion(req, {
                    allowFipsEndpoint: true
                });
            },
            validateArnResourceType: function validateArnResourceType(req) {
                var resource = req._parsedArn.resource;
                if (resource.indexOf("accesspoint:") !== 0 && resource.indexOf("accesspoint/") !== 0) {
                    throw AWS.util.error(new Error(), {
                        code: "InvalidARN",
                        message: "ARN resource should begin with 'accesspoint/'"
                    });
                }
            },
            validateBucketName: function validateBucketName(req) {
                var service = req.service;
                var signatureVersion = service.getSignatureVersion(req);
                var bucket = req.params && req.params.Bucket;
                var key = req.params && req.params.Key;
                var slashIndex = bucket && bucket.indexOf("/");
                if (bucket && slashIndex >= 0) {
                    if (typeof key === "string" && slashIndex > 0) {
                        req.params = AWS.util.copy(req.params);
                        var prefix = bucket.substr(slashIndex + 1) || "";
                        req.params.Key = prefix + "/" + key;
                        req.params.Bucket = bucket.substr(0, slashIndex);
                    } else if (signatureVersion === "v4") {
                        var msg = "Bucket names cannot contain forward slashes. Bucket: " + bucket;
                        throw AWS.util.error(new Error(), {
                            code: "InvalidBucket",
                            message: msg
                        });
                    }
                }
            },
            isValidAccelerateOperation: function isValidAccelerateOperation(operation) {
                var invalidOperations = [ "createBucket", "deleteBucket", "listBuckets" ];
                return invalidOperations.indexOf(operation) === -1;
            },
            optInUsEast1RegionalEndpoint: function optInUsEast1RegionalEndpoint(req) {
                var service = req.service;
                var config = service.config;
                config.s3UsEast1RegionalEndpoint = resolveRegionalEndpointsFlag(service._originalConfig, {
                    env: "AWS_S3_US_EAST_1_REGIONAL_ENDPOINT",
                    sharedConfig: "s3_us_east_1_regional_endpoint",
                    clientConfig: "s3UsEast1RegionalEndpoint"
                });
                if (!(service._originalConfig || {}).endpoint && req.httpRequest.region === "us-east-1" && config.s3UsEast1RegionalEndpoint === "regional" && req.httpRequest.endpoint.hostname.indexOf("s3.amazonaws.com") >= 0) {
                    var insertPoint = config.endpoint.indexOf(".amazonaws.com");
                    var regionalEndpoint = config.endpoint.substring(0, insertPoint) + ".us-east-1" + config.endpoint.substring(insertPoint);
                    req.httpRequest.updateEndpoint(regionalEndpoint);
                }
            },
            populateURI: function populateURI(req) {
                var httpRequest = req.httpRequest;
                var b = req.params.Bucket;
                var service = req.service;
                var endpoint = httpRequest.endpoint;
                if (b) {
                    if (!service.pathStyleBucketName(b)) {
                        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {
                            if (service.config.useDualstackEndpoint) {
                                endpoint.hostname = b + ".s3-accelerate.dualstack.amazonaws.com";
                            } else {
                                endpoint.hostname = b + ".s3-accelerate.amazonaws.com";
                            }
                        } else if (!service.config.s3BucketEndpoint) {
                            endpoint.hostname = b + "." + endpoint.hostname;
                        }
                        var port = endpoint.port;
                        if (port !== 80 && port !== 443) {
                            endpoint.host = endpoint.hostname + ":" + endpoint.port;
                        } else {
                            endpoint.host = endpoint.hostname;
                        }
                        httpRequest.virtualHostedBucket = b;
                        service.removeVirtualHostedBucketFromPath(req);
                    }
                }
            },
            removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {
                var httpRequest = req.httpRequest;
                var bucket = httpRequest.virtualHostedBucket;
                if (bucket && httpRequest.path) {
                    if (req.params && req.params.Key) {
                        var encodedS3Key = "/" + AWS.util.uriEscapePath(req.params.Key);
                        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === "?")) {
                            return;
                        }
                    }
                    httpRequest.path = httpRequest.path.replace(new RegExp("/" + bucket), "");
                    if (httpRequest.path[0] !== "/") {
                        httpRequest.path = "/" + httpRequest.path;
                    }
                }
            },
            populateUriFromAccessPointArn: function populateUriFromAccessPointArn(req) {
                var accessPointArn = req._parsedArn;
                var isOutpostArn = accessPointArn.service === "s3-outposts";
                var isObjectLambdaArn = accessPointArn.service === "s3-object-lambda";
                var outpostsSuffix = isOutpostArn ? "." + accessPointArn.outpostId : "";
                var serviceName = isOutpostArn ? "s3-outposts" : "s3-accesspoint";
                var fipsSuffix = !isOutpostArn && req.service.config.useFipsEndpoint ? "-fips" : "";
                var dualStackSuffix = !isOutpostArn && req.service.config.useDualstackEndpoint ? ".dualstack" : "";
                var endpoint = req.httpRequest.endpoint;
                var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);
                var useArnRegion = req.service.config.s3UseArnRegion;
                endpoint.hostname = [ accessPointArn.accessPoint + "-" + accessPointArn.accountId + outpostsSuffix, serviceName + fipsSuffix + dualStackSuffix, useArnRegion ? accessPointArn.region : req.service.config.region, dnsSuffix ].join(".");
                if (isObjectLambdaArn) {
                    var serviceName = "s3-object-lambda";
                    var accesspointName = accessPointArn.resource.split("/")[1];
                    var fipsSuffix = req.service.config.useFipsEndpoint ? "-fips" : "";
                    endpoint.hostname = [ accesspointName + "-" + accessPointArn.accountId, serviceName + fipsSuffix, useArnRegion ? accessPointArn.region : req.service.config.region, dnsSuffix ].join(".");
                }
                endpoint.host = endpoint.hostname;
                var encodedArn = AWS.util.uriEscape(req.params.Bucket);
                var path = req.httpRequest.path;
                req.httpRequest.path = path.replace(new RegExp("/" + encodedArn), "");
                if (req.httpRequest.path[0] !== "/") {
                    req.httpRequest.path = "/" + req.httpRequest.path;
                }
                req.httpRequest.region = accessPointArn.region;
            },
            addExpect100Continue: function addExpect100Continue(req) {
                var len = req.httpRequest.headers["Content-Length"];
                if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {
                    req.httpRequest.headers["Expect"] = "100-continue";
                }
            },
            addContentType: function addContentType(req) {
                var httpRequest = req.httpRequest;
                if (httpRequest.method === "GET" || httpRequest.method === "HEAD") {
                    delete httpRequest.headers["Content-Type"];
                    return;
                }
                if (!httpRequest.headers["Content-Type"]) {
                    httpRequest.headers["Content-Type"] = "application/octet-stream";
                }
                var contentType = httpRequest.headers["Content-Type"];
                if (AWS.util.isBrowser()) {
                    if (typeof httpRequest.body === "string" && !contentType.match(/;\s*charset=/)) {
                        var charset = "; charset=UTF-8";
                        httpRequest.headers["Content-Type"] += charset;
                    } else {
                        var replaceFn = function(_, prefix, charsetName) {
                            return prefix + charsetName.toUpperCase();
                        };
                        httpRequest.headers["Content-Type"] = contentType.replace(/(;\s*charset=)(.+)$/, replaceFn);
                    }
                }
            },
            willComputeChecksums: function willComputeChecksums(req) {
                var rules = req.service.api.operations[req.operation].input.members;
                var body = req.httpRequest.body;
                var needsContentMD5 = req.service.config.computeChecksums && rules.ContentMD5 && !req.params.ContentMD5 && body && (AWS.util.Buffer.isBuffer(req.httpRequest.body) || typeof req.httpRequest.body === "string");
                if (needsContentMD5 && req.service.shouldDisableBodySigning(req) && !req.isPresigned()) {
                    return true;
                }
                if (needsContentMD5 && this.getSignatureVersion(req) === "s3" && req.isPresigned()) {
                    return true;
                }
                return false;
            },
            computeContentMd5: function computeContentMd5(req) {
                if (req.service.willComputeChecksums(req)) {
                    var md5 = AWS.util.crypto.md5(req.httpRequest.body, "base64");
                    req.httpRequest.headers["Content-MD5"] = md5;
                }
            },
            computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {
                var keys = {
                    SSECustomerKey: "x-amz-server-side-encryption-customer-key-MD5",
                    CopySourceSSECustomerKey: "x-amz-copy-source-server-side-encryption-customer-key-MD5"
                };
                AWS.util.each(keys, function(key, header) {
                    if (req.params[key]) {
                        var value = AWS.util.crypto.md5(req.params[key], "base64");
                        req.httpRequest.headers[header] = value;
                    }
                });
            },
            pathStyleBucketName: function pathStyleBucketName(bucketName) {
                if (this.config.s3ForcePathStyle) return true;
                if (this.config.s3BucketEndpoint) return false;
                if (s3util.dnsCompatibleBucketName(bucketName)) {
                    return this.config.sslEnabled && bucketName.match(/\./) ? true : false;
                } else {
                    return true;
                }
            },
            extractErrorFrom200Response: function extractErrorFrom200Response(resp) {
                if (!operationsWith200StatusCodeError[resp.request.operation]) return;
                var httpResponse = resp.httpResponse;
                if (httpResponse.body && httpResponse.body.toString().match("<Error>")) {
                    resp.data = null;
                    var service = this.service ? this.service : this;
                    service.extractError(resp);
                    throw resp.error;
                } else if (!httpResponse.body || !httpResponse.body.toString().match(/<[\w_]/)) {
                    resp.data = null;
                    throw AWS.util.error(new Error(), {
                        code: "InternalError",
                        message: "S3 aborted request"
                    });
                }
            },
            retryableError: function retryableError(error, request) {
                if (operationsWith200StatusCodeError[request.operation] && error.statusCode === 200) {
                    return true;
                } else if (request._requestRegionForBucket && request.service.bucketRegionCache[request._requestRegionForBucket]) {
                    return false;
                } else if (error && error.code === "RequestTimeout") {
                    return true;
                } else if (error && regionRedirectErrorCodes.indexOf(error.code) != -1 && error.region && error.region != request.httpRequest.region) {
                    request.httpRequest.region = error.region;
                    if (error.statusCode === 301) {
                        request.service.updateReqBucketRegion(request);
                    }
                    return true;
                } else {
                    var _super = AWS.Service.prototype.retryableError;
                    return _super.call(this, error, request);
                }
            },
            updateReqBucketRegion: function updateReqBucketRegion(request, region) {
                var httpRequest = request.httpRequest;
                if (typeof region === "string" && region.length) {
                    httpRequest.region = region;
                }
                if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\.amazonaws\.com$/)) {
                    return;
                }
                var service = request.service;
                var s3Config = service.config;
                var s3BucketEndpoint = s3Config.s3BucketEndpoint;
                if (s3BucketEndpoint) {
                    delete s3Config.s3BucketEndpoint;
                }
                var newConfig = AWS.util.copy(s3Config);
                delete newConfig.endpoint;
                newConfig.region = httpRequest.region;
                httpRequest.endpoint = new AWS.S3(newConfig).endpoint;
                service.populateURI(request);
                s3Config.s3BucketEndpoint = s3BucketEndpoint;
                httpRequest.headers.Host = httpRequest.endpoint.host;
                if (request._asm.currentState === "validate") {
                    request.removeListener("build", service.populateURI);
                    request.addListener("build", service.removeVirtualHostedBucketFromPath);
                }
            },
            extractData: function extractData(resp) {
                var req = resp.request;
                if (req.operation === "getBucketLocation") {
                    var match = resp.httpResponse.body.toString().match(/>(.+)<\/Location/);
                    delete resp.data["_"];
                    if (match) {
                        resp.data.LocationConstraint = match[1];
                    } else {
                        resp.data.LocationConstraint = "";
                    }
                }
                var bucket = req.params.Bucket || null;
                if (req.operation === "deleteBucket" && typeof bucket === "string" && !resp.error) {
                    req.service.clearBucketRegionCache(bucket);
                } else {
                    var headers = resp.httpResponse.headers || {};
                    var region = headers["x-amz-bucket-region"] || null;
                    if (!region && req.operation === "createBucket" && !resp.error) {
                        var createBucketConfiguration = req.params.CreateBucketConfiguration;
                        if (!createBucketConfiguration) {
                            region = "us-east-1";
                        } else if (createBucketConfiguration.LocationConstraint === "EU") {
                            region = "eu-west-1";
                        } else {
                            region = createBucketConfiguration.LocationConstraint;
                        }
                    }
                    if (region) {
                        if (bucket && region !== req.service.bucketRegionCache[bucket]) {
                            req.service.bucketRegionCache[bucket] = region;
                        }
                    }
                }
                req.service.extractRequestIds(resp);
            },
            extractError: function extractError(resp) {
                var codes = {
                    304: "NotModified",
                    403: "Forbidden",
                    400: "BadRequest",
                    404: "NotFound"
                };
                var req = resp.request;
                var code = resp.httpResponse.statusCode;
                var body = resp.httpResponse.body || "";
                var headers = resp.httpResponse.headers || {};
                var region = headers["x-amz-bucket-region"] || null;
                var bucket = req.params.Bucket || null;
                var bucketRegionCache = req.service.bucketRegionCache;
                if (region && bucket && region !== bucketRegionCache[bucket]) {
                    bucketRegionCache[bucket] = region;
                }
                var cachedRegion;
                if (codes[code] && body.length === 0) {
                    if (bucket && !region) {
                        cachedRegion = bucketRegionCache[bucket] || null;
                        if (cachedRegion !== req.httpRequest.region) {
                            region = cachedRegion;
                        }
                    }
                    resp.error = AWS.util.error(new Error(), {
                        code: codes[code],
                        message: null,
                        region: region
                    });
                } else {
                    var data = new AWS.XML.Parser().parse(body.toString());
                    if (data.Region && !region) {
                        region = data.Region;
                        if (bucket && region !== bucketRegionCache[bucket]) {
                            bucketRegionCache[bucket] = region;
                        }
                    } else if (bucket && !region && !data.Region) {
                        cachedRegion = bucketRegionCache[bucket] || null;
                        if (cachedRegion !== req.httpRequest.region) {
                            region = cachedRegion;
                        }
                    }
                    resp.error = AWS.util.error(new Error(), {
                        code: data.Code || code,
                        message: data.Message || null,
                        region: region
                    });
                }
                req.service.extractRequestIds(resp);
            },
            requestBucketRegion: function requestBucketRegion(resp, done) {
                var error = resp.error;
                var req = resp.request;
                var bucket = req.params.Bucket || null;
                if (!error || !bucket || error.region || req.operation === "listObjects" || AWS.util.isNode() && req.operation === "headBucket" || error.statusCode === 400 && req.operation !== "headObject" || regionRedirectErrorCodes.indexOf(error.code) === -1) {
                    return done();
                }
                var reqOperation = AWS.util.isNode() ? "headBucket" : "listObjects";
                var reqParams = {
                    Bucket: bucket
                };
                if (reqOperation === "listObjects") reqParams.MaxKeys = 0;
                var regionReq = req.service[reqOperation](reqParams);
                regionReq._requestRegionForBucket = bucket;
                regionReq.send(function() {
                    var region = req.service.bucketRegionCache[bucket] || null;
                    error.region = region;
                    done();
                });
            },
            reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {
                if (!AWS.util.isBrowser()) {
                    return done();
                }
                var error = resp.error;
                var request = resp.request;
                var bucket = request.params.Bucket;
                if (!error || error.code !== "NetworkingError" || !bucket || request.httpRequest.region === "us-east-1") {
                    return done();
                }
                var service = request.service;
                var bucketRegionCache = service.bucketRegionCache;
                var cachedRegion = bucketRegionCache[bucket] || null;
                if (cachedRegion && cachedRegion !== request.httpRequest.region) {
                    service.updateReqBucketRegion(request, cachedRegion);
                    done();
                } else if (!s3util.dnsCompatibleBucketName(bucket)) {
                    service.updateReqBucketRegion(request, "us-east-1");
                    if (bucketRegionCache[bucket] !== "us-east-1") {
                        bucketRegionCache[bucket] = "us-east-1";
                    }
                    done();
                } else if (request.httpRequest.virtualHostedBucket) {
                    var getRegionReq = service.listObjects({
                        Bucket: bucket,
                        MaxKeys: 0
                    });
                    service.updateReqBucketRegion(getRegionReq, "us-east-1");
                    getRegionReq._requestRegionForBucket = bucket;
                    getRegionReq.send(function() {
                        var region = service.bucketRegionCache[bucket] || null;
                        if (region && region !== request.httpRequest.region) {
                            service.updateReqBucketRegion(request, region);
                        }
                        done();
                    });
                } else {
                    done();
                }
            },
            bucketRegionCache: {},
            clearBucketRegionCache: function(buckets) {
                var bucketRegionCache = this.bucketRegionCache;
                if (!buckets) {
                    buckets = Object.keys(bucketRegionCache);
                } else if (typeof buckets === "string") {
                    buckets = [ buckets ];
                }
                for (var i = 0; i < buckets.length; i++) {
                    delete bucketRegionCache[buckets[i]];
                }
                return bucketRegionCache;
            },
            correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {
                var bucket = req.params.Bucket || null;
                if (bucket) {
                    var service = req.service;
                    var requestRegion = req.httpRequest.region;
                    var cachedRegion = service.bucketRegionCache[bucket];
                    if (cachedRegion && cachedRegion !== requestRegion) {
                        service.updateReqBucketRegion(req, cachedRegion);
                    }
                }
            },
            extractRequestIds: function extractRequestIds(resp) {
                var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers["x-amz-id-2"] : null;
                var cfId = resp.httpResponse.headers ? resp.httpResponse.headers["x-amz-cf-id"] : null;
                resp.extendedRequestId = extendedRequestId;
                resp.cfId = cfId;
                if (resp.error) {
                    resp.error.requestId = resp.requestId || null;
                    resp.error.extendedRequestId = extendedRequestId;
                    resp.error.cfId = cfId;
                }
            },
            getSignedUrl: function getSignedUrl(operation, params, callback) {
                params = AWS.util.copy(params || {});
                var expires = params.Expires || 900;
                if (typeof expires !== "number") {
                    throw AWS.util.error(new Error(), {
                        code: "InvalidParameterException",
                        message: "The expiration must be a number, received " + typeof expires
                    });
                }
                delete params.Expires;
                var request = this.makeRequest(operation, params);
                if (callback) {
                    AWS.util.defer(function() {
                        request.presign(expires, callback);
                    });
                } else {
                    return request.presign(expires, callback);
                }
            },
            createPresignedPost: function createPresignedPost(params, callback) {
                if (typeof params === "function" && callback === undefined) {
                    callback = params;
                    params = null;
                }
                params = AWS.util.copy(params || {});
                var boundParams = this.config.params || {};
                var bucket = params.Bucket || boundParams.Bucket, self = this, config = this.config, endpoint = AWS.util.copy(this.endpoint);
                if (!config.s3BucketEndpoint) {
                    endpoint.pathname = "/" + bucket;
                }
                function finalizePost() {
                    return {
                        url: AWS.util.urlFormat(endpoint),
                        fields: self.preparePostFields(config.credentials, config.region, bucket, params.Fields, params.Conditions, params.Expires)
                    };
                }
                if (callback) {
                    config.getCredentials(function(err) {
                        if (err) {
                            callback(err);
                        } else {
                            try {
                                callback(null, finalizePost());
                            } catch (err) {
                                callback(err);
                            }
                        }
                    });
                } else {
                    return finalizePost();
                }
            },
            preparePostFields: function preparePostFields(credentials, region, bucket, fields, conditions, expiresInSeconds) {
                var now = this.getSkewCorrectedDate();
                if (!credentials || !region || !bucket) {
                    throw new Error("Unable to create a POST object policy without a bucket," + " region, and credentials");
                }
                fields = AWS.util.copy(fields || {});
                conditions = (conditions || []).slice(0);
                expiresInSeconds = expiresInSeconds || 3600;
                var signingDate = AWS.util.date.iso8601(now).replace(/[:\-]|\.\d{3}/g, "");
                var shortDate = signingDate.substr(0, 8);
                var scope = v4Credentials.createScope(shortDate, region, "s3");
                var credential = credentials.accessKeyId + "/" + scope;
                fields["bucket"] = bucket;
                fields["X-Amz-Algorithm"] = "AWS4-HMAC-SHA256";
                fields["X-Amz-Credential"] = credential;
                fields["X-Amz-Date"] = signingDate;
                if (credentials.sessionToken) {
                    fields["X-Amz-Security-Token"] = credentials.sessionToken;
                }
                for (var field in fields) {
                    if (fields.hasOwnProperty(field)) {
                        var condition = {};
                        condition[field] = fields[field];
                        conditions.push(condition);
                    }
                }
                fields.Policy = this.preparePostPolicy(new Date(now.valueOf() + expiresInSeconds * 1e3), conditions);
                fields["X-Amz-Signature"] = AWS.util.crypto.hmac(v4Credentials.getSigningKey(credentials, shortDate, region, "s3", true), fields.Policy, "hex");
                return fields;
            },
            preparePostPolicy: function preparePostPolicy(expiration, conditions) {
                return AWS.util.base64.encode(JSON.stringify({
                    expiration: AWS.util.date.iso8601(expiration),
                    conditions: conditions
                }));
            },
            prepareSignedUrl: function prepareSignedUrl(request) {
                request.addListener("validate", request.service.noPresignedContentLength);
                request.removeListener("build", request.service.addContentType);
                if (!request.params.Body) {
                    request.removeListener("build", request.service.computeContentMd5);
                } else {
                    request.addListener("afterBuild", AWS.EventListeners.Core.COMPUTE_SHA256);
                }
            },
            disableBodySigning: function disableBodySigning(request) {
                var headers = request.httpRequest.headers;
                if (!Object.prototype.hasOwnProperty.call(headers, "presigned-expires")) {
                    headers["X-Amz-Content-Sha256"] = "UNSIGNED-PAYLOAD";
                }
            },
            noPresignedContentLength: function noPresignedContentLength(request) {
                if (request.params.ContentLength !== undefined) {
                    throw AWS.util.error(new Error(), {
                        code: "UnexpectedParameter",
                        message: "ContentLength is not supported in pre-signed URLs."
                    });
                }
            },
            createBucket: function createBucket(params, callback) {
                if (typeof params === "function" || !params) {
                    callback = callback || params;
                    params = {};
                }
                var hostname = this.endpoint.hostname;
                var copiedParams = AWS.util.copy(params);
                if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {
                    copiedParams.CreateBucketConfiguration = {
                        LocationConstraint: this.config.region
                    };
                }
                return this.makeRequest("createBucket", copiedParams, callback);
            },
            writeGetObjectResponse: function writeGetObjectResponse(params, callback) {
                var request = this.makeRequest("writeGetObjectResponse", AWS.util.copy(params), callback);
                var hostname = this.endpoint.hostname;
                if (hostname.indexOf(this.config.region) !== -1) {
                    hostname = hostname.replace("s3.", OBJECT_LAMBDA_SERVICE + ".");
                } else {
                    hostname = hostname.replace("s3.", OBJECT_LAMBDA_SERVICE + "." + this.config.region + ".");
                }
                request.httpRequest.endpoint = new AWS.Endpoint(hostname, this.config);
                return request;
            },
            upload: function upload(params, options, callback) {
                if (typeof options === "function" && callback === undefined) {
                    callback = options;
                    options = null;
                }
                options = options || {};
                options = AWS.util.merge(options || {}, {
                    service: this,
                    params: params
                });
                var uploader = new AWS.S3.ManagedUpload(options);
                if (typeof callback === "function") uploader.send(callback);
                return uploader;
            }
        });
        AWS.S3.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
            this.prototype.getSignedUrlPromise = AWS.util.promisifyMethod("getSignedUrl", PromiseDependency);
        };
        AWS.S3.deletePromisesFromClass = function deletePromisesFromClass() {
            delete this.prototype.getSignedUrlPromise;
        };
        AWS.util.addPromises(AWS.S3);
    }, {
        "../config_regional_endpoint": 43,
        "../core": 44,
        "../region_config": 89,
        "../s3/managed_upload": 94,
        "../signers/v4_credentials": 129,
        "./s3util": 117
    } ],
    94: [ function(require, module, exports) {
        var AWS = require("../core");
        var byteLength = AWS.util.string.byteLength;
        var Buffer = AWS.util.Buffer;
        AWS.S3.ManagedUpload = AWS.util.inherit({
            constructor: function ManagedUpload(options) {
                var self = this;
                AWS.SequentialExecutor.call(self);
                self.body = null;
                self.sliceFn = null;
                self.callback = null;
                self.parts = {};
                self.completeInfo = [];
                self.fillQueue = function() {
                    self.callback(new Error("Unsupported body payload " + typeof self.body));
                };
                self.configure(options);
            },
            configure: function configure(options) {
                options = options || {};
                this.partSize = this.minPartSize;
                if (options.queueSize) this.queueSize = options.queueSize;
                if (options.partSize) this.partSize = options.partSize;
                if (options.leavePartsOnError) this.leavePartsOnError = true;
                if (options.tags) {
                    if (!Array.isArray(options.tags)) {
                        throw new Error("Tags must be specified as an array; " + typeof options.tags + " provided.");
                    }
                    this.tags = options.tags;
                }
                if (this.partSize < this.minPartSize) {
                    throw new Error("partSize must be greater than " + this.minPartSize);
                }
                this.service = options.service;
                this.bindServiceObject(options.params);
                this.validateBody();
                this.adjustTotalBytes();
            },
            leavePartsOnError: false,
            queueSize: 4,
            partSize: null,
            minPartSize: 1024 * 1024 * 5,
            maxTotalParts: 1e4,
            send: function(callback) {
                var self = this;
                self.failed = false;
                self.callback = callback || function(err) {
                    if (err) throw err;
                };
                var runFill = true;
                if (self.sliceFn) {
                    self.fillQueue = self.fillBuffer;
                } else if (AWS.util.isNode()) {
                    var Stream = AWS.util.stream.Stream;
                    if (self.body instanceof Stream) {
                        runFill = false;
                        self.fillQueue = self.fillStream;
                        self.partBuffers = [];
                        self.body.on("error", function(err) {
                            self.cleanup(err);
                        }).on("readable", function() {
                            self.fillQueue();
                        }).on("end", function() {
                            self.isDoneChunking = true;
                            self.numParts = self.totalPartNumbers;
                            self.fillQueue.call(self);
                            if (self.isDoneChunking && self.totalPartNumbers >= 1 && self.doneParts === self.numParts) {
                                self.finishMultiPart();
                            }
                        });
                    }
                }
                if (runFill) self.fillQueue.call(self);
            },
            abort: function() {
                var self = this;
                if (self.isDoneChunking === true && self.totalPartNumbers === 1 && self.singlePart) {
                    self.singlePart.abort();
                } else {
                    self.cleanup(AWS.util.error(new Error("Request aborted by user"), {
                        code: "RequestAbortedError",
                        retryable: false
                    }));
                }
            },
            validateBody: function validateBody() {
                var self = this;
                self.body = self.service.config.params.Body;
                if (typeof self.body === "string") {
                    self.body = AWS.util.buffer.toBuffer(self.body);
                } else if (!self.body) {
                    throw new Error("params.Body is required");
                }
                self.sliceFn = AWS.util.arraySliceFn(self.body);
            },
            bindServiceObject: function bindServiceObject(params) {
                params = params || {};
                var self = this;
                if (!self.service) {
                    self.service = new AWS.S3({
                        params: params
                    });
                } else {
                    var service = self.service;
                    var config = AWS.util.copy(service.config);
                    config.signatureVersion = service.getSignatureVersion();
                    self.service = new service.constructor.__super__(config);
                    self.service.config.params = AWS.util.merge(self.service.config.params || {}, params);
                    Object.defineProperty(self.service, "_originalConfig", {
                        get: function() {
                            return service._originalConfig;
                        },
                        enumerable: false,
                        configurable: true
                    });
                }
            },
            adjustTotalBytes: function adjustTotalBytes() {
                var self = this;
                try {
                    self.totalBytes = byteLength(self.body);
                } catch (e) {}
                if (self.totalBytes) {
                    var newPartSize = Math.ceil(self.totalBytes / self.maxTotalParts);
                    if (newPartSize > self.partSize) self.partSize = newPartSize;
                } else {
                    self.totalBytes = undefined;
                }
            },
            isDoneChunking: false,
            partPos: 0,
            totalChunkedBytes: 0,
            totalUploadedBytes: 0,
            totalBytes: undefined,
            numParts: 0,
            totalPartNumbers: 0,
            activeParts: 0,
            doneParts: 0,
            parts: null,
            completeInfo: null,
            failed: false,
            multipartReq: null,
            partBuffers: null,
            partBufferLength: 0,
            fillBuffer: function fillBuffer() {
                var self = this;
                var bodyLen = byteLength(self.body);
                if (bodyLen === 0) {
                    self.isDoneChunking = true;
                    self.numParts = 1;
                    self.nextChunk(self.body);
                    return;
                }
                while (self.activeParts < self.queueSize && self.partPos < bodyLen) {
                    var endPos = Math.min(self.partPos + self.partSize, bodyLen);
                    var buf = self.sliceFn.call(self.body, self.partPos, endPos);
                    self.partPos += self.partSize;
                    if (byteLength(buf) < self.partSize || self.partPos === bodyLen) {
                        self.isDoneChunking = true;
                        self.numParts = self.totalPartNumbers + 1;
                    }
                    self.nextChunk(buf);
                }
            },
            fillStream: function fillStream() {
                var self = this;
                if (self.activeParts >= self.queueSize) return;
                var buf = self.body.read(self.partSize - self.partBufferLength) || self.body.read();
                if (buf) {
                    self.partBuffers.push(buf);
                    self.partBufferLength += buf.length;
                    self.totalChunkedBytes += buf.length;
                }
                if (self.partBufferLength >= self.partSize) {
                    var pbuf = self.partBuffers.length === 1 ? self.partBuffers[0] : Buffer.concat(self.partBuffers);
                    self.partBuffers = [];
                    self.partBufferLength = 0;
                    if (pbuf.length > self.partSize) {
                        var rest = pbuf.slice(self.partSize);
                        self.partBuffers.push(rest);
                        self.partBufferLength += rest.length;
                        pbuf = pbuf.slice(0, self.partSize);
                    }
                    self.nextChunk(pbuf);
                }
                if (self.isDoneChunking && !self.isDoneSending) {
                    pbuf = self.partBuffers.length === 1 ? self.partBuffers[0] : Buffer.concat(self.partBuffers);
                    self.partBuffers = [];
                    self.partBufferLength = 0;
                    self.totalBytes = self.totalChunkedBytes;
                    self.isDoneSending = true;
                    if (self.numParts === 0 || pbuf.length > 0) {
                        self.numParts++;
                        self.nextChunk(pbuf);
                    }
                }
                self.body.read(0);
            },
            nextChunk: function nextChunk(chunk) {
                var self = this;
                if (self.failed) return null;
                var partNumber = ++self.totalPartNumbers;
                if (self.isDoneChunking && partNumber === 1) {
                    var params = {
                        Body: chunk
                    };
                    if (this.tags) {
                        params.Tagging = this.getTaggingHeader();
                    }
                    var req = self.service.putObject(params);
                    req._managedUpload = self;
                    req.on("httpUploadProgress", self.progress).send(self.finishSinglePart);
                    self.singlePart = req;
                    return null;
                } else if (self.service.config.params.ContentMD5) {
                    var err = AWS.util.error(new Error("The Content-MD5 you specified is invalid for multi-part uploads."), {
                        code: "InvalidDigest",
                        retryable: false
                    });
                    self.cleanup(err);
                    return null;
                }
                if (self.completeInfo[partNumber] && self.completeInfo[partNumber].ETag !== null) {
                    return null;
                }
                self.activeParts++;
                if (!self.service.config.params.UploadId) {
                    if (!self.multipartReq) {
                        self.multipartReq = self.service.createMultipartUpload();
                        self.multipartReq.on("success", function(resp) {
                            self.service.config.params.UploadId = resp.data.UploadId;
                            self.multipartReq = null;
                        });
                        self.queueChunks(chunk, partNumber);
                        self.multipartReq.on("error", function(err) {
                            self.cleanup(err);
                        });
                        self.multipartReq.send();
                    } else {
                        self.queueChunks(chunk, partNumber);
                    }
                } else {
                    self.uploadPart(chunk, partNumber);
                }
            },
            getTaggingHeader: function getTaggingHeader() {
                var kvPairStrings = [];
                for (var i = 0; i < this.tags.length; i++) {
                    kvPairStrings.push(AWS.util.uriEscape(this.tags[i].Key) + "=" + AWS.util.uriEscape(this.tags[i].Value));
                }
                return kvPairStrings.join("&");
            },
            uploadPart: function uploadPart(chunk, partNumber) {
                var self = this;
                var partParams = {
                    Body: chunk,
                    ContentLength: AWS.util.string.byteLength(chunk),
                    PartNumber: partNumber
                };
                var partInfo = {
                    ETag: null,
                    PartNumber: partNumber
                };
                self.completeInfo[partNumber] = partInfo;
                var req = self.service.uploadPart(partParams);
                self.parts[partNumber] = req;
                req._lastUploadedBytes = 0;
                req._managedUpload = self;
                req.on("httpUploadProgress", self.progress);
                req.send(function(err, data) {
                    delete self.parts[partParams.PartNumber];
                    self.activeParts--;
                    if (!err && (!data || !data.ETag)) {
                        var message = "No access to ETag property on response.";
                        if (AWS.util.isBrowser()) {
                            message += " Check CORS configuration to expose ETag header.";
                        }
                        err = AWS.util.error(new Error(message), {
                            code: "ETagMissing",
                            retryable: false
                        });
                    }
                    if (err) return self.cleanup(err);
                    if (self.completeInfo[partNumber] && self.completeInfo[partNumber].ETag !== null) return null;
                    partInfo.ETag = data.ETag;
                    self.doneParts++;
                    if (self.isDoneChunking && self.doneParts === self.totalPartNumbers) {
                        self.finishMultiPart();
                    } else {
                        self.fillQueue.call(self);
                    }
                });
            },
            queueChunks: function queueChunks(chunk, partNumber) {
                var self = this;
                self.multipartReq.on("success", function() {
                    self.uploadPart(chunk, partNumber);
                });
            },
            cleanup: function cleanup(err) {
                var self = this;
                if (self.failed) return;
                if (typeof self.body.removeAllListeners === "function" && typeof self.body.resume === "function") {
                    self.body.removeAllListeners("readable");
                    self.body.removeAllListeners("end");
                    self.body.resume();
                }
                if (self.multipartReq) {
                    self.multipartReq.removeAllListeners("success");
                    self.multipartReq.removeAllListeners("error");
                    self.multipartReq.removeAllListeners("complete");
                    delete self.multipartReq;
                }
                if (self.service.config.params.UploadId && !self.leavePartsOnError) {
                    self.service.abortMultipartUpload().send();
                } else if (self.leavePartsOnError) {
                    self.isDoneChunking = false;
                }
                AWS.util.each(self.parts, function(partNumber, part) {
                    part.removeAllListeners("complete");
                    part.abort();
                });
                self.activeParts = 0;
                self.partPos = 0;
                self.numParts = 0;
                self.totalPartNumbers = 0;
                self.parts = {};
                self.failed = true;
                self.callback(err);
            },
            finishMultiPart: function finishMultiPart() {
                var self = this;
                var completeParams = {
                    MultipartUpload: {
                        Parts: self.completeInfo.slice(1)
                    }
                };
                self.service.completeMultipartUpload(completeParams, function(err, data) {
                    if (err) {
                        return self.cleanup(err);
                    }
                    if (data && typeof data.Location === "string") {
                        data.Location = data.Location.replace(/%2F/g, "/");
                    }
                    if (Array.isArray(self.tags)) {
                        for (var i = 0; i < self.tags.length; i++) {
                            self.tags[i].Value = String(self.tags[i].Value);
                        }
                        self.service.putObjectTagging({
                            Tagging: {
                                TagSet: self.tags
                            }
                        }, function(e, d) {
                            if (e) {
                                self.callback(e);
                            } else {
                                self.callback(e, data);
                            }
                        });
                    } else {
                        self.callback(err, data);
                    }
                });
            },
            finishSinglePart: function finishSinglePart(err, data) {
                var upload = this.request._managedUpload;
                var httpReq = this.request.httpRequest;
                var endpoint = httpReq.endpoint;
                if (err) return upload.callback(err);
                data.Location = [ endpoint.protocol, "//", endpoint.host, httpReq.path ].join("");
                data.key = this.request.params.Key;
                data.Key = this.request.params.Key;
                data.Bucket = this.request.params.Bucket;
                upload.callback(err, data);
            },
            progress: function progress(info) {
                var upload = this._managedUpload;
                if (this.operation === "putObject") {
                    info.part = 1;
                    info.key = this.params.Key;
                } else {
                    upload.totalUploadedBytes += info.loaded - this._lastUploadedBytes;
                    this._lastUploadedBytes = info.loaded;
                    info = {
                        loaded: upload.totalUploadedBytes,
                        total: upload.totalBytes,
                        part: this.params.PartNumber,
                        key: this.params.Key
                    };
                }
                upload.emit("httpUploadProgress", [ info ]);
            }
        });
        AWS.util.mixin(AWS.S3.ManagedUpload, AWS.SequentialExecutor);
        AWS.S3.ManagedUpload.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
            this.prototype.promise = AWS.util.promisifyMethod("send", PromiseDependency);
        };
        AWS.S3.ManagedUpload.deletePromisesFromClass = function deletePromisesFromClass() {
            delete this.prototype.promise;
        };
        AWS.util.addPromises(AWS.S3.ManagedUpload);
        module.exports = AWS.S3.ManagedUpload;
    }, {
        "../core": 44
    } ]
}, {}, [ 115 ]);

AWS.apiLoader.services["s3"]["2006-03-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2006-03-01",
        checksumFormat: "md5",
        endpointPrefix: "s3",
        globalEndpoint: "s3.amazonaws.com",
        protocol: "rest-xml",
        serviceAbbreviation: "Amazon S3",
        serviceFullName: "Amazon Simple Storage Service",
        serviceId: "S3",
        signatureVersion: "s3",
        uid: "s3-2006-03-01"
    },
    operations: {
        AbortMultipartUpload: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}/{Key+}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key", "UploadId" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    UploadId: {
                        location: "querystring",
                        locationName: "uploadId"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            }
        },
        CompleteMultipartUpload: {
            http: {
                requestUri: "/{Bucket}/{Key+}"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key", "UploadId" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    MultipartUpload: {
                        locationName: "CompleteMultipartUpload",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        members: {
                            Parts: {
                                locationName: "Part",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ETag: {},
                                        ChecksumCRC32: {},
                                        ChecksumCRC32C: {},
                                        ChecksumSHA1: {},
                                        ChecksumSHA256: {},
                                        PartNumber: {
                                            type: "integer"
                                        }
                                    }
                                },
                                flattened: true
                            }
                        }
                    },
                    UploadId: {
                        location: "querystring",
                        locationName: "uploadId"
                    },
                    ChecksumCRC32: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32"
                    },
                    ChecksumCRC32C: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32c"
                    },
                    ChecksumSHA1: {
                        location: "header",
                        locationName: "x-amz-checksum-sha1"
                    },
                    ChecksumSHA256: {
                        location: "header",
                        locationName: "x-amz-checksum-sha256"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    }
                },
                payload: "MultipartUpload"
            },
            output: {
                type: "structure",
                members: {
                    Location: {},
                    Bucket: {},
                    Key: {},
                    Expiration: {
                        location: "header",
                        locationName: "x-amz-expiration"
                    },
                    ETag: {},
                    ChecksumCRC32: {},
                    ChecksumCRC32C: {},
                    ChecksumSHA1: {},
                    ChecksumSHA256: {},
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            }
        },
        CopyObject: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}/{Key+}"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "CopySource", "Key" ],
                members: {
                    ACL: {
                        location: "header",
                        locationName: "x-amz-acl"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-checksum-algorithm"
                    },
                    ContentDisposition: {
                        location: "header",
                        locationName: "Content-Disposition"
                    },
                    ContentEncoding: {
                        location: "header",
                        locationName: "Content-Encoding"
                    },
                    ContentLanguage: {
                        location: "header",
                        locationName: "Content-Language"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    CopySource: {
                        location: "header",
                        locationName: "x-amz-copy-source"
                    },
                    CopySourceIfMatch: {
                        location: "header",
                        locationName: "x-amz-copy-source-if-match"
                    },
                    CopySourceIfModifiedSince: {
                        location: "header",
                        locationName: "x-amz-copy-source-if-modified-since",
                        type: "timestamp"
                    },
                    CopySourceIfNoneMatch: {
                        location: "header",
                        locationName: "x-amz-copy-source-if-none-match"
                    },
                    CopySourceIfUnmodifiedSince: {
                        location: "header",
                        locationName: "x-amz-copy-source-if-unmodified-since",
                        type: "timestamp"
                    },
                    Expires: {
                        location: "header",
                        locationName: "Expires",
                        type: "timestamp"
                    },
                    GrantFullControl: {
                        location: "header",
                        locationName: "x-amz-grant-full-control"
                    },
                    GrantRead: {
                        location: "header",
                        locationName: "x-amz-grant-read"
                    },
                    GrantReadACP: {
                        location: "header",
                        locationName: "x-amz-grant-read-acp"
                    },
                    GrantWriteACP: {
                        location: "header",
                        locationName: "x-amz-grant-write-acp"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    Metadata: {
                        shape: "S1b",
                        location: "headers",
                        locationName: "x-amz-meta-"
                    },
                    MetadataDirective: {
                        location: "header",
                        locationName: "x-amz-metadata-directive"
                    },
                    TaggingDirective: {
                        location: "header",
                        locationName: "x-amz-tagging-directive"
                    },
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    StorageClass: {
                        location: "header",
                        locationName: "x-amz-storage-class"
                    },
                    WebsiteRedirectLocation: {
                        location: "header",
                        locationName: "x-amz-website-redirect-location"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    SSEKMSEncryptionContext: {
                        shape: "S1i",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-context"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    CopySourceSSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"
                    },
                    CopySourceSSECustomerKey: {
                        shape: "S1k",
                        location: "header",
                        locationName: "x-amz-copy-source-server-side-encryption-customer-key"
                    },
                    CopySourceSSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    Tagging: {
                        location: "header",
                        locationName: "x-amz-tagging"
                    },
                    ObjectLockMode: {
                        location: "header",
                        locationName: "x-amz-object-lock-mode"
                    },
                    ObjectLockRetainUntilDate: {
                        shape: "S1o",
                        location: "header",
                        locationName: "x-amz-object-lock-retain-until-date"
                    },
                    ObjectLockLegalHoldStatus: {
                        location: "header",
                        locationName: "x-amz-object-lock-legal-hold"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    ExpectedSourceBucketOwner: {
                        location: "header",
                        locationName: "x-amz-source-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyObjectResult: {
                        type: "structure",
                        members: {
                            ETag: {},
                            LastModified: {
                                type: "timestamp"
                            },
                            ChecksumCRC32: {},
                            ChecksumCRC32C: {},
                            ChecksumSHA1: {},
                            ChecksumSHA256: {}
                        }
                    },
                    Expiration: {
                        location: "header",
                        locationName: "x-amz-expiration"
                    },
                    CopySourceVersionId: {
                        location: "header",
                        locationName: "x-amz-copy-source-version-id"
                    },
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    },
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    SSEKMSEncryptionContext: {
                        shape: "S1i",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-context"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                },
                payload: "CopyObjectResult"
            },
            alias: "PutObjectCopy",
            staticContextParams: {
                DisableS3ExpressSessionAuth: {
                    value: true
                }
            }
        },
        CreateBucket: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    ACL: {
                        location: "header",
                        locationName: "x-amz-acl"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    CreateBucketConfiguration: {
                        locationName: "CreateBucketConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        members: {
                            LocationConstraint: {},
                            Location: {
                                type: "structure",
                                members: {
                                    Type: {},
                                    Name: {}
                                }
                            },
                            Bucket: {
                                type: "structure",
                                members: {
                                    DataRedundancy: {},
                                    Type: {}
                                }
                            }
                        }
                    },
                    GrantFullControl: {
                        location: "header",
                        locationName: "x-amz-grant-full-control"
                    },
                    GrantRead: {
                        location: "header",
                        locationName: "x-amz-grant-read"
                    },
                    GrantReadACP: {
                        location: "header",
                        locationName: "x-amz-grant-read-acp"
                    },
                    GrantWrite: {
                        location: "header",
                        locationName: "x-amz-grant-write"
                    },
                    GrantWriteACP: {
                        location: "header",
                        locationName: "x-amz-grant-write-acp"
                    },
                    ObjectLockEnabledForBucket: {
                        location: "header",
                        locationName: "x-amz-bucket-object-lock-enabled",
                        type: "boolean"
                    },
                    ObjectOwnership: {
                        location: "header",
                        locationName: "x-amz-object-ownership"
                    }
                },
                payload: "CreateBucketConfiguration"
            },
            output: {
                type: "structure",
                members: {
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                }
            },
            alias: "PutBucket",
            staticContextParams: {
                DisableAccessPoints: {
                    value: true
                },
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        CreateMultipartUpload: {
            http: {
                requestUri: "/{Bucket}/{Key+}?uploads"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    ACL: {
                        location: "header",
                        locationName: "x-amz-acl"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentDisposition: {
                        location: "header",
                        locationName: "Content-Disposition"
                    },
                    ContentEncoding: {
                        location: "header",
                        locationName: "Content-Encoding"
                    },
                    ContentLanguage: {
                        location: "header",
                        locationName: "Content-Language"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Expires: {
                        location: "header",
                        locationName: "Expires",
                        type: "timestamp"
                    },
                    GrantFullControl: {
                        location: "header",
                        locationName: "x-amz-grant-full-control"
                    },
                    GrantRead: {
                        location: "header",
                        locationName: "x-amz-grant-read"
                    },
                    GrantReadACP: {
                        location: "header",
                        locationName: "x-amz-grant-read-acp"
                    },
                    GrantWriteACP: {
                        location: "header",
                        locationName: "x-amz-grant-write-acp"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    Metadata: {
                        shape: "S1b",
                        location: "headers",
                        locationName: "x-amz-meta-"
                    },
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    StorageClass: {
                        location: "header",
                        locationName: "x-amz-storage-class"
                    },
                    WebsiteRedirectLocation: {
                        location: "header",
                        locationName: "x-amz-website-redirect-location"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    SSEKMSEncryptionContext: {
                        shape: "S1i",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-context"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    Tagging: {
                        location: "header",
                        locationName: "x-amz-tagging"
                    },
                    ObjectLockMode: {
                        location: "header",
                        locationName: "x-amz-object-lock-mode"
                    },
                    ObjectLockRetainUntilDate: {
                        shape: "S1o",
                        location: "header",
                        locationName: "x-amz-object-lock-retain-until-date"
                    },
                    ObjectLockLegalHoldStatus: {
                        location: "header",
                        locationName: "x-amz-object-lock-legal-hold"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-checksum-algorithm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AbortDate: {
                        location: "header",
                        locationName: "x-amz-abort-date",
                        type: "timestamp"
                    },
                    AbortRuleId: {
                        location: "header",
                        locationName: "x-amz-abort-rule-id"
                    },
                    Bucket: {
                        locationName: "Bucket"
                    },
                    Key: {},
                    UploadId: {},
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    SSEKMSEncryptionContext: {
                        shape: "S1i",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-context"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-checksum-algorithm"
                    }
                }
            },
            alias: "InitiateMultipartUpload"
        },
        CreateSession: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?session"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    SessionMode: {
                        location: "header",
                        locationName: "x-amz-create-session-mode"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Credentials" ],
                members: {
                    Credentials: {
                        locationName: "Credentials",
                        type: "structure",
                        required: [ "AccessKeyId", "SecretAccessKey", "SessionToken", "Expiration" ],
                        members: {
                            AccessKeyId: {
                                locationName: "AccessKeyId"
                            },
                            SecretAccessKey: {
                                shape: "S2h",
                                locationName: "SecretAccessKey"
                            },
                            SessionToken: {
                                shape: "S2h",
                                locationName: "SessionToken"
                            },
                            Expiration: {
                                locationName: "Expiration",
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            staticContextParams: {
                DisableS3ExpressSessionAuth: {
                    value: true
                }
            }
        },
        DeleteBucket: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketAnalyticsConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?analytics",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketCors: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?cors",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketEncryption: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?encryption",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketIntelligentTieringConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?intelligent-tiering",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketInventoryConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?inventory",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketLifecycle: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?lifecycle",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketMetricsConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?metrics",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketOwnershipControls: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?ownershipControls",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?policy",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketReplication: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?replication",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketTagging: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?tagging",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteBucketWebsite: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?website",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        DeleteObject: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}/{Key+}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    MFA: {
                        location: "header",
                        locationName: "x-amz-mfa"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    BypassGovernanceRetention: {
                        location: "header",
                        locationName: "x-amz-bypass-governance-retention",
                        type: "boolean"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeleteMarker: {
                        location: "header",
                        locationName: "x-amz-delete-marker",
                        type: "boolean"
                    },
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            }
        },
        DeleteObjectTagging: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}/{Key+}?tagging",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    }
                }
            }
        },
        DeleteObjects: {
            http: {
                requestUri: "/{Bucket}?delete"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Delete" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Delete: {
                        locationName: "Delete",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        required: [ "Objects" ],
                        members: {
                            Objects: {
                                locationName: "Object",
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Key" ],
                                    members: {
                                        Key: {},
                                        VersionId: {}
                                    }
                                },
                                flattened: true
                            },
                            Quiet: {
                                type: "boolean"
                            }
                        }
                    },
                    MFA: {
                        location: "header",
                        locationName: "x-amz-mfa"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    BypassGovernanceRetention: {
                        location: "header",
                        locationName: "x-amz-bypass-governance-retention",
                        type: "boolean"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    }
                },
                payload: "Delete"
            },
            output: {
                type: "structure",
                members: {
                    Deleted: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {},
                                VersionId: {},
                                DeleteMarker: {
                                    type: "boolean"
                                },
                                DeleteMarkerVersionId: {}
                            }
                        },
                        flattened: true
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    },
                    Errors: {
                        locationName: "Error",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {},
                                VersionId: {},
                                Code: {},
                                Message: {}
                            }
                        },
                        flattened: true
                    }
                }
            },
            alias: "DeleteMultipleObjects",
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            }
        },
        DeletePublicAccessBlock: {
            http: {
                method: "DELETE",
                requestUri: "/{Bucket}?publicAccessBlock",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketAccelerateConfiguration: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?accelerate"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketAcl: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?acl"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Owner: {
                        shape: "S3q"
                    },
                    Grants: {
                        shape: "S3t",
                        locationName: "AccessControlList"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketAnalyticsConfiguration: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?analytics"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalyticsConfiguration: {
                        shape: "S42"
                    }
                },
                payload: "AnalyticsConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketCors: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?cors"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CORSRules: {
                        shape: "S4h",
                        locationName: "CORSRule"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketEncryption: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?encryption"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServerSideEncryptionConfiguration: {
                        shape: "S4u"
                    }
                },
                payload: "ServerSideEncryptionConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketIntelligentTieringConfiguration: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?intelligent-tiering"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IntelligentTieringConfiguration: {
                        shape: "S50"
                    }
                },
                payload: "IntelligentTieringConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketInventoryConfiguration: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?inventory"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InventoryConfiguration: {
                        shape: "S5a"
                    }
                },
                payload: "InventoryConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketLifecycle: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?lifecycle"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        shape: "S5q",
                        locationName: "Rule"
                    }
                }
            },
            deprecated: true,
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketLifecycleConfiguration: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?lifecycle"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        shape: "S66",
                        locationName: "Rule"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketLocation: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?location"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationConstraint: {}
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketLogging: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?logging"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingEnabled: {
                        shape: "S6i"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketMetricsConfiguration: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?metrics"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricsConfiguration: {
                        shape: "S6u"
                    }
                },
                payload: "MetricsConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketNotification: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?notification"
            },
            input: {
                shape: "S6y"
            },
            output: {
                shape: "S6z"
            },
            deprecated: true,
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketNotificationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?notification"
            },
            input: {
                shape: "S6y"
            },
            output: {
                shape: "S7a"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketOwnershipControls: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?ownershipControls"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OwnershipControls: {
                        shape: "S7r"
                    }
                },
                payload: "OwnershipControls"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketPolicy: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?policy"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                },
                payload: "Policy"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketPolicyStatus: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?policyStatus"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyStatus: {
                        type: "structure",
                        members: {
                            IsPublic: {
                                locationName: "IsPublic",
                                type: "boolean"
                            }
                        }
                    }
                },
                payload: "PolicyStatus"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketReplication: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?replication"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationConfiguration: {
                        shape: "S83"
                    }
                },
                payload: "ReplicationConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketRequestPayment: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?requestPayment"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Payer: {}
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketTagging: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?tagging"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TagSet" ],
                members: {
                    TagSet: {
                        shape: "S48"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketVersioning: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?versioning"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    MFADelete: {
                        locationName: "MfaDelete"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetBucketWebsite: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?website"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RedirectAllRequestsTo: {
                        shape: "S96"
                    },
                    IndexDocument: {
                        shape: "S99"
                    },
                    ErrorDocument: {
                        shape: "S9b"
                    },
                    RoutingRules: {
                        shape: "S9c"
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        GetObject: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}/{Key+}"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    },
                    IfModifiedSince: {
                        location: "header",
                        locationName: "If-Modified-Since",
                        type: "timestamp"
                    },
                    IfNoneMatch: {
                        location: "header",
                        locationName: "If-None-Match"
                    },
                    IfUnmodifiedSince: {
                        location: "header",
                        locationName: "If-Unmodified-Since",
                        type: "timestamp"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    Range: {
                        location: "header",
                        locationName: "Range"
                    },
                    ResponseCacheControl: {
                        location: "querystring",
                        locationName: "response-cache-control"
                    },
                    ResponseContentDisposition: {
                        location: "querystring",
                        locationName: "response-content-disposition"
                    },
                    ResponseContentEncoding: {
                        location: "querystring",
                        locationName: "response-content-encoding"
                    },
                    ResponseContentLanguage: {
                        location: "querystring",
                        locationName: "response-content-language"
                    },
                    ResponseContentType: {
                        location: "querystring",
                        locationName: "response-content-type"
                    },
                    ResponseExpires: {
                        location: "querystring",
                        locationName: "response-expires",
                        type: "timestamp",
                        timestampFormat: "rfc822"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    PartNumber: {
                        location: "querystring",
                        locationName: "partNumber",
                        type: "integer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    ChecksumMode: {
                        location: "header",
                        locationName: "x-amz-checksum-mode"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Body: {
                        streaming: true,
                        type: "blob"
                    },
                    DeleteMarker: {
                        location: "header",
                        locationName: "x-amz-delete-marker",
                        type: "boolean"
                    },
                    AcceptRanges: {
                        location: "header",
                        locationName: "accept-ranges"
                    },
                    Expiration: {
                        location: "header",
                        locationName: "x-amz-expiration"
                    },
                    Restore: {
                        location: "header",
                        locationName: "x-amz-restore"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "Last-Modified",
                        type: "timestamp"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    ChecksumCRC32: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32"
                    },
                    ChecksumCRC32C: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32c"
                    },
                    ChecksumSHA1: {
                        location: "header",
                        locationName: "x-amz-checksum-sha1"
                    },
                    ChecksumSHA256: {
                        location: "header",
                        locationName: "x-amz-checksum-sha256"
                    },
                    MissingMeta: {
                        location: "header",
                        locationName: "x-amz-missing-meta",
                        type: "integer"
                    },
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentDisposition: {
                        location: "header",
                        locationName: "Content-Disposition"
                    },
                    ContentEncoding: {
                        location: "header",
                        locationName: "Content-Encoding"
                    },
                    ContentLanguage: {
                        location: "header",
                        locationName: "Content-Language"
                    },
                    ContentRange: {
                        location: "header",
                        locationName: "Content-Range"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Expires: {
                        location: "header",
                        locationName: "Expires",
                        type: "timestamp"
                    },
                    WebsiteRedirectLocation: {
                        location: "header",
                        locationName: "x-amz-website-redirect-location"
                    },
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    Metadata: {
                        shape: "S1b",
                        location: "headers",
                        locationName: "x-amz-meta-"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    StorageClass: {
                        location: "header",
                        locationName: "x-amz-storage-class"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    },
                    ReplicationStatus: {
                        location: "header",
                        locationName: "x-amz-replication-status"
                    },
                    PartsCount: {
                        location: "header",
                        locationName: "x-amz-mp-parts-count",
                        type: "integer"
                    },
                    TagCount: {
                        location: "header",
                        locationName: "x-amz-tagging-count",
                        type: "integer"
                    },
                    ObjectLockMode: {
                        location: "header",
                        locationName: "x-amz-object-lock-mode"
                    },
                    ObjectLockRetainUntilDate: {
                        shape: "S1o",
                        location: "header",
                        locationName: "x-amz-object-lock-retain-until-date"
                    },
                    ObjectLockLegalHoldStatus: {
                        location: "header",
                        locationName: "x-amz-object-lock-legal-hold"
                    }
                },
                payload: "Body"
            },
            httpChecksum: {
                requestValidationModeMember: "ChecksumMode",
                responseAlgorithms: [ "CRC32", "CRC32C", "SHA256", "SHA1" ]
            }
        },
        GetObjectAcl: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}/{Key+}?acl"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Owner: {
                        shape: "S3q"
                    },
                    Grants: {
                        shape: "S3t",
                        locationName: "AccessControlList"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            }
        },
        GetObjectAttributes: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}/{Key+}?attributes"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key", "ObjectAttributes" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    MaxParts: {
                        location: "header",
                        locationName: "x-amz-max-parts",
                        type: "integer"
                    },
                    PartNumberMarker: {
                        location: "header",
                        locationName: "x-amz-part-number-marker",
                        type: "integer"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    ObjectAttributes: {
                        location: "header",
                        locationName: "x-amz-object-attributes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeleteMarker: {
                        location: "header",
                        locationName: "x-amz-delete-marker",
                        type: "boolean"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "Last-Modified",
                        type: "timestamp"
                    },
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    },
                    ETag: {},
                    Checksum: {
                        type: "structure",
                        members: {
                            ChecksumCRC32: {},
                            ChecksumCRC32C: {},
                            ChecksumSHA1: {},
                            ChecksumSHA256: {}
                        }
                    },
                    ObjectParts: {
                        type: "structure",
                        members: {
                            TotalPartsCount: {
                                locationName: "PartsCount",
                                type: "integer"
                            },
                            PartNumberMarker: {
                                type: "integer"
                            },
                            NextPartNumberMarker: {
                                type: "integer"
                            },
                            MaxParts: {
                                type: "integer"
                            },
                            IsTruncated: {
                                type: "boolean"
                            },
                            Parts: {
                                locationName: "Part",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        PartNumber: {
                                            type: "integer"
                                        },
                                        Size: {
                                            type: "long"
                                        },
                                        ChecksumCRC32: {},
                                        ChecksumCRC32C: {},
                                        ChecksumSHA1: {},
                                        ChecksumSHA256: {}
                                    }
                                },
                                flattened: true
                            }
                        }
                    },
                    StorageClass: {},
                    ObjectSize: {
                        type: "long"
                    }
                }
            }
        },
        GetObjectLegalHold: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}/{Key+}?legal-hold"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LegalHold: {
                        shape: "Saq"
                    }
                },
                payload: "LegalHold"
            }
        },
        GetObjectLockConfiguration: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?object-lock"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ObjectLockConfiguration: {
                        shape: "Sat"
                    }
                },
                payload: "ObjectLockConfiguration"
            }
        },
        GetObjectRetention: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}/{Key+}?retention"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Retention: {
                        shape: "Sb1"
                    }
                },
                payload: "Retention"
            }
        },
        GetObjectTagging: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}/{Key+}?tagging"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TagSet" ],
                members: {
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    },
                    TagSet: {
                        shape: "S48"
                    }
                }
            }
        },
        GetObjectTorrent: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}/{Key+}?torrent"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Body: {
                        streaming: true,
                        type: "blob"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                },
                payload: "Body"
            }
        },
        GetPublicAccessBlock: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?publicAccessBlock"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicAccessBlockConfiguration: {
                        shape: "Sb8"
                    }
                },
                payload: "PublicAccessBlockConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        HeadBucket: {
            http: {
                method: "HEAD",
                requestUri: "/{Bucket}"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BucketLocationType: {
                        location: "header",
                        locationName: "x-amz-bucket-location-type"
                    },
                    BucketLocationName: {
                        location: "header",
                        locationName: "x-amz-bucket-location-name"
                    },
                    BucketRegion: {
                        location: "header",
                        locationName: "x-amz-bucket-region"
                    },
                    AccessPointAlias: {
                        location: "header",
                        locationName: "x-amz-access-point-alias",
                        type: "boolean"
                    }
                }
            }
        },
        HeadObject: {
            http: {
                method: "HEAD",
                requestUri: "/{Bucket}/{Key+}"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    },
                    IfModifiedSince: {
                        location: "header",
                        locationName: "If-Modified-Since",
                        type: "timestamp"
                    },
                    IfNoneMatch: {
                        location: "header",
                        locationName: "If-None-Match"
                    },
                    IfUnmodifiedSince: {
                        location: "header",
                        locationName: "If-Unmodified-Since",
                        type: "timestamp"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    Range: {
                        location: "header",
                        locationName: "Range"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    PartNumber: {
                        location: "querystring",
                        locationName: "partNumber",
                        type: "integer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    ChecksumMode: {
                        location: "header",
                        locationName: "x-amz-checksum-mode"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeleteMarker: {
                        location: "header",
                        locationName: "x-amz-delete-marker",
                        type: "boolean"
                    },
                    AcceptRanges: {
                        location: "header",
                        locationName: "accept-ranges"
                    },
                    Expiration: {
                        location: "header",
                        locationName: "x-amz-expiration"
                    },
                    Restore: {
                        location: "header",
                        locationName: "x-amz-restore"
                    },
                    ArchiveStatus: {
                        location: "header",
                        locationName: "x-amz-archive-status"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "Last-Modified",
                        type: "timestamp"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    ChecksumCRC32: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32"
                    },
                    ChecksumCRC32C: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32c"
                    },
                    ChecksumSHA1: {
                        location: "header",
                        locationName: "x-amz-checksum-sha1"
                    },
                    ChecksumSHA256: {
                        location: "header",
                        locationName: "x-amz-checksum-sha256"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    MissingMeta: {
                        location: "header",
                        locationName: "x-amz-missing-meta",
                        type: "integer"
                    },
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentDisposition: {
                        location: "header",
                        locationName: "Content-Disposition"
                    },
                    ContentEncoding: {
                        location: "header",
                        locationName: "Content-Encoding"
                    },
                    ContentLanguage: {
                        location: "header",
                        locationName: "Content-Language"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Expires: {
                        location: "header",
                        locationName: "Expires",
                        type: "timestamp"
                    },
                    WebsiteRedirectLocation: {
                        location: "header",
                        locationName: "x-amz-website-redirect-location"
                    },
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    Metadata: {
                        shape: "S1b",
                        location: "headers",
                        locationName: "x-amz-meta-"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    StorageClass: {
                        location: "header",
                        locationName: "x-amz-storage-class"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    },
                    ReplicationStatus: {
                        location: "header",
                        locationName: "x-amz-replication-status"
                    },
                    PartsCount: {
                        location: "header",
                        locationName: "x-amz-mp-parts-count",
                        type: "integer"
                    },
                    ObjectLockMode: {
                        location: "header",
                        locationName: "x-amz-object-lock-mode"
                    },
                    ObjectLockRetainUntilDate: {
                        shape: "S1o",
                        location: "header",
                        locationName: "x-amz-object-lock-retain-until-date"
                    },
                    ObjectLockLegalHoldStatus: {
                        location: "header",
                        locationName: "x-amz-object-lock-legal-hold"
                    }
                }
            }
        },
        ListBucketAnalyticsConfigurations: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?analytics"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContinuationToken: {
                        location: "querystring",
                        locationName: "continuation-token"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IsTruncated: {
                        type: "boolean"
                    },
                    ContinuationToken: {},
                    NextContinuationToken: {},
                    AnalyticsConfigurationList: {
                        locationName: "AnalyticsConfiguration",
                        type: "list",
                        member: {
                            shape: "S42"
                        },
                        flattened: true
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        ListBucketIntelligentTieringConfigurations: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?intelligent-tiering"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContinuationToken: {
                        location: "querystring",
                        locationName: "continuation-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IsTruncated: {
                        type: "boolean"
                    },
                    ContinuationToken: {},
                    NextContinuationToken: {},
                    IntelligentTieringConfigurationList: {
                        locationName: "IntelligentTieringConfiguration",
                        type: "list",
                        member: {
                            shape: "S50"
                        },
                        flattened: true
                    }
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        ListBucketInventoryConfigurations: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?inventory"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContinuationToken: {
                        location: "querystring",
                        locationName: "continuation-token"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContinuationToken: {},
                    InventoryConfigurationList: {
                        locationName: "InventoryConfiguration",
                        type: "list",
                        member: {
                            shape: "S5a"
                        },
                        flattened: true
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    NextContinuationToken: {}
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        ListBucketMetricsConfigurations: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?metrics"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContinuationToken: {
                        location: "querystring",
                        locationName: "continuation-token"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IsTruncated: {
                        type: "boolean"
                    },
                    ContinuationToken: {},
                    NextContinuationToken: {},
                    MetricsConfigurationList: {
                        locationName: "MetricsConfiguration",
                        type: "list",
                        member: {
                            shape: "S6u"
                        },
                        flattened: true
                    }
                }
            }
        },
        ListBuckets: {
            http: {
                method: "GET"
            },
            output: {
                type: "structure",
                members: {
                    Buckets: {
                        shape: "Sbx"
                    },
                    Owner: {
                        shape: "S3q"
                    }
                }
            },
            alias: "GetService"
        },
        ListDirectoryBuckets: {
            http: {
                method: "GET"
            },
            input: {
                type: "structure",
                members: {
                    ContinuationToken: {
                        location: "querystring",
                        locationName: "continuation-token"
                    },
                    MaxDirectoryBuckets: {
                        location: "querystring",
                        locationName: "max-directory-buckets",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Buckets: {
                        shape: "Sbx"
                    },
                    ContinuationToken: {}
                }
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        ListMultipartUploads: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?uploads"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Delimiter: {
                        location: "querystring",
                        locationName: "delimiter"
                    },
                    EncodingType: {
                        location: "querystring",
                        locationName: "encoding-type"
                    },
                    KeyMarker: {
                        location: "querystring",
                        locationName: "key-marker"
                    },
                    MaxUploads: {
                        location: "querystring",
                        locationName: "max-uploads",
                        type: "integer"
                    },
                    Prefix: {
                        contextParam: {
                            name: "Prefix"
                        },
                        location: "querystring",
                        locationName: "prefix"
                    },
                    UploadIdMarker: {
                        location: "querystring",
                        locationName: "upload-id-marker"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bucket: {},
                    KeyMarker: {},
                    UploadIdMarker: {},
                    NextKeyMarker: {},
                    Prefix: {},
                    Delimiter: {},
                    NextUploadIdMarker: {},
                    MaxUploads: {
                        type: "integer"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Uploads: {
                        locationName: "Upload",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UploadId: {},
                                Key: {},
                                Initiated: {
                                    type: "timestamp"
                                },
                                StorageClass: {},
                                Owner: {
                                    shape: "S3q"
                                },
                                Initiator: {
                                    shape: "Scg"
                                },
                                ChecksumAlgorithm: {}
                            }
                        },
                        flattened: true
                    },
                    CommonPrefixes: {
                        shape: "Sch"
                    },
                    EncodingType: {},
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            }
        },
        ListObjectVersions: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?versions"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Delimiter: {
                        location: "querystring",
                        locationName: "delimiter"
                    },
                    EncodingType: {
                        location: "querystring",
                        locationName: "encoding-type"
                    },
                    KeyMarker: {
                        location: "querystring",
                        locationName: "key-marker"
                    },
                    MaxKeys: {
                        location: "querystring",
                        locationName: "max-keys",
                        type: "integer"
                    },
                    Prefix: {
                        contextParam: {
                            name: "Prefix"
                        },
                        location: "querystring",
                        locationName: "prefix"
                    },
                    VersionIdMarker: {
                        location: "querystring",
                        locationName: "version-id-marker"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    OptionalObjectAttributes: {
                        shape: "Scm",
                        location: "header",
                        locationName: "x-amz-optional-object-attributes"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IsTruncated: {
                        type: "boolean"
                    },
                    KeyMarker: {},
                    VersionIdMarker: {},
                    NextKeyMarker: {},
                    NextVersionIdMarker: {},
                    Versions: {
                        locationName: "Version",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ETag: {},
                                ChecksumAlgorithm: {
                                    shape: "Scs"
                                },
                                Size: {
                                    type: "long"
                                },
                                StorageClass: {},
                                Key: {},
                                VersionId: {},
                                IsLatest: {
                                    type: "boolean"
                                },
                                LastModified: {
                                    type: "timestamp"
                                },
                                Owner: {
                                    shape: "S3q"
                                },
                                RestoreStatus: {
                                    shape: "Scv"
                                }
                            }
                        },
                        flattened: true
                    },
                    DeleteMarkers: {
                        locationName: "DeleteMarker",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Owner: {
                                    shape: "S3q"
                                },
                                Key: {},
                                VersionId: {},
                                IsLatest: {
                                    type: "boolean"
                                },
                                LastModified: {
                                    type: "timestamp"
                                }
                            }
                        },
                        flattened: true
                    },
                    Name: {},
                    Prefix: {},
                    Delimiter: {},
                    MaxKeys: {
                        type: "integer"
                    },
                    CommonPrefixes: {
                        shape: "Sch"
                    },
                    EncodingType: {},
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            },
            alias: "GetBucketObjectVersions"
        },
        ListObjects: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Delimiter: {
                        location: "querystring",
                        locationName: "delimiter"
                    },
                    EncodingType: {
                        location: "querystring",
                        locationName: "encoding-type"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    MaxKeys: {
                        location: "querystring",
                        locationName: "max-keys",
                        type: "integer"
                    },
                    Prefix: {
                        contextParam: {
                            name: "Prefix"
                        },
                        location: "querystring",
                        locationName: "prefix"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    OptionalObjectAttributes: {
                        shape: "Scm",
                        location: "header",
                        locationName: "x-amz-optional-object-attributes"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IsTruncated: {
                        type: "boolean"
                    },
                    Marker: {},
                    NextMarker: {},
                    Contents: {
                        shape: "Sd4"
                    },
                    Name: {},
                    Prefix: {},
                    Delimiter: {},
                    MaxKeys: {
                        type: "integer"
                    },
                    CommonPrefixes: {
                        shape: "Sch"
                    },
                    EncodingType: {},
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            },
            alias: "GetBucket"
        },
        ListObjectsV2: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}?list-type=2"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Delimiter: {
                        location: "querystring",
                        locationName: "delimiter"
                    },
                    EncodingType: {
                        location: "querystring",
                        locationName: "encoding-type"
                    },
                    MaxKeys: {
                        location: "querystring",
                        locationName: "max-keys",
                        type: "integer"
                    },
                    Prefix: {
                        contextParam: {
                            name: "Prefix"
                        },
                        location: "querystring",
                        locationName: "prefix"
                    },
                    ContinuationToken: {
                        location: "querystring",
                        locationName: "continuation-token"
                    },
                    FetchOwner: {
                        location: "querystring",
                        locationName: "fetch-owner",
                        type: "boolean"
                    },
                    StartAfter: {
                        location: "querystring",
                        locationName: "start-after"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    OptionalObjectAttributes: {
                        shape: "Scm",
                        location: "header",
                        locationName: "x-amz-optional-object-attributes"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IsTruncated: {
                        type: "boolean"
                    },
                    Contents: {
                        shape: "Sd4"
                    },
                    Name: {},
                    Prefix: {},
                    Delimiter: {},
                    MaxKeys: {
                        type: "integer"
                    },
                    CommonPrefixes: {
                        shape: "Sch"
                    },
                    EncodingType: {},
                    KeyCount: {
                        type: "integer"
                    },
                    ContinuationToken: {},
                    NextContinuationToken: {},
                    StartAfter: {},
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            }
        },
        ListParts: {
            http: {
                method: "GET",
                requestUri: "/{Bucket}/{Key+}"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key", "UploadId" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    MaxParts: {
                        location: "querystring",
                        locationName: "max-parts",
                        type: "integer"
                    },
                    PartNumberMarker: {
                        location: "querystring",
                        locationName: "part-number-marker",
                        type: "integer"
                    },
                    UploadId: {
                        location: "querystring",
                        locationName: "uploadId"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AbortDate: {
                        location: "header",
                        locationName: "x-amz-abort-date",
                        type: "timestamp"
                    },
                    AbortRuleId: {
                        location: "header",
                        locationName: "x-amz-abort-rule-id"
                    },
                    Bucket: {},
                    Key: {},
                    UploadId: {},
                    PartNumberMarker: {
                        type: "integer"
                    },
                    NextPartNumberMarker: {
                        type: "integer"
                    },
                    MaxParts: {
                        type: "integer"
                    },
                    IsTruncated: {
                        type: "boolean"
                    },
                    Parts: {
                        locationName: "Part",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PartNumber: {
                                    type: "integer"
                                },
                                LastModified: {
                                    type: "timestamp"
                                },
                                ETag: {},
                                Size: {
                                    type: "long"
                                },
                                ChecksumCRC32: {},
                                ChecksumCRC32C: {},
                                ChecksumSHA1: {},
                                ChecksumSHA256: {}
                            }
                        },
                        flattened: true
                    },
                    Initiator: {
                        shape: "Scg"
                    },
                    Owner: {
                        shape: "S3q"
                    },
                    StorageClass: {},
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    },
                    ChecksumAlgorithm: {}
                }
            }
        },
        PutBucketAccelerateConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?accelerate"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "AccelerateConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    AccelerateConfiguration: {
                        locationName: "AccelerateConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        members: {
                            Status: {}
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    }
                },
                payload: "AccelerateConfiguration"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: false
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketAcl: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?acl"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    ACL: {
                        location: "header",
                        locationName: "x-amz-acl"
                    },
                    AccessControlPolicy: {
                        shape: "Sdj",
                        locationName: "AccessControlPolicy",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    GrantFullControl: {
                        location: "header",
                        locationName: "x-amz-grant-full-control"
                    },
                    GrantRead: {
                        location: "header",
                        locationName: "x-amz-grant-read"
                    },
                    GrantReadACP: {
                        location: "header",
                        locationName: "x-amz-grant-read-acp"
                    },
                    GrantWrite: {
                        location: "header",
                        locationName: "x-amz-grant-write"
                    },
                    GrantWriteACP: {
                        location: "header",
                        locationName: "x-amz-grant-write-acp"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "AccessControlPolicy"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketAnalyticsConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?analytics"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id", "AnalyticsConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    AnalyticsConfiguration: {
                        shape: "S42",
                        locationName: "AnalyticsConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "AnalyticsConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketCors: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?cors"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "CORSConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    CORSConfiguration: {
                        locationName: "CORSConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        required: [ "CORSRules" ],
                        members: {
                            CORSRules: {
                                shape: "S4h",
                                locationName: "CORSRule"
                            }
                        }
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "CORSConfiguration"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketEncryption: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?encryption"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "ServerSideEncryptionConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ServerSideEncryptionConfiguration: {
                        shape: "S4u",
                        locationName: "ServerSideEncryptionConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "ServerSideEncryptionConfiguration"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketIntelligentTieringConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?intelligent-tiering"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id", "IntelligentTieringConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    IntelligentTieringConfiguration: {
                        shape: "S50",
                        locationName: "IntelligentTieringConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    }
                },
                payload: "IntelligentTieringConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketInventoryConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?inventory"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id", "InventoryConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    InventoryConfiguration: {
                        shape: "S5a",
                        locationName: "InventoryConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "InventoryConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketLifecycle: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?lifecycle"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    LifecycleConfiguration: {
                        locationName: "LifecycleConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        required: [ "Rules" ],
                        members: {
                            Rules: {
                                shape: "S5q",
                                locationName: "Rule"
                            }
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "LifecycleConfiguration"
            },
            deprecated: true,
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketLifecycleConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?lifecycle"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    LifecycleConfiguration: {
                        locationName: "LifecycleConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        required: [ "Rules" ],
                        members: {
                            Rules: {
                                shape: "S66",
                                locationName: "Rule"
                            }
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "LifecycleConfiguration"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketLogging: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?logging"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "BucketLoggingStatus" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    BucketLoggingStatus: {
                        locationName: "BucketLoggingStatus",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        members: {
                            LoggingEnabled: {
                                shape: "S6i"
                            }
                        }
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "BucketLoggingStatus"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketMetricsConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?metrics"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Id", "MetricsConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Id: {
                        location: "querystring",
                        locationName: "id"
                    },
                    MetricsConfiguration: {
                        shape: "S6u",
                        locationName: "MetricsConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "MetricsConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketNotification: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?notification"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "NotificationConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    NotificationConfiguration: {
                        shape: "S6z",
                        locationName: "NotificationConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "NotificationConfiguration"
            },
            deprecated: true,
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketNotificationConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?notification"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "NotificationConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    NotificationConfiguration: {
                        shape: "S7a",
                        locationName: "NotificationConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    SkipDestinationValidation: {
                        location: "header",
                        locationName: "x-amz-skip-destination-validation",
                        type: "boolean"
                    }
                },
                payload: "NotificationConfiguration"
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketOwnershipControls: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?ownershipControls"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "OwnershipControls" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    OwnershipControls: {
                        shape: "S7r",
                        locationName: "OwnershipControls",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    }
                },
                payload: "OwnershipControls"
            },
            httpChecksum: {
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketPolicy: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?policy"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Policy" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ConfirmRemoveSelfBucketAccess: {
                        location: "header",
                        locationName: "x-amz-confirm-remove-self-bucket-access",
                        type: "boolean"
                    },
                    Policy: {},
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "Policy"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketReplication: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?replication"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "ReplicationConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ReplicationConfiguration: {
                        shape: "S83",
                        locationName: "ReplicationConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    Token: {
                        location: "header",
                        locationName: "x-amz-bucket-object-lock-token"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "ReplicationConfiguration"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketRequestPayment: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?requestPayment"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "RequestPaymentConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    RequestPaymentConfiguration: {
                        locationName: "RequestPaymentConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        required: [ "Payer" ],
                        members: {
                            Payer: {}
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "RequestPaymentConfiguration"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketTagging: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?tagging"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Tagging" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    Tagging: {
                        shape: "Se9",
                        locationName: "Tagging",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "Tagging"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketVersioning: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?versioning"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "VersioningConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    MFA: {
                        location: "header",
                        locationName: "x-amz-mfa"
                    },
                    VersioningConfiguration: {
                        locationName: "VersioningConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        members: {
                            MFADelete: {
                                locationName: "MfaDelete"
                            },
                            Status: {}
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "VersioningConfiguration"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutBucketWebsite: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?website"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "WebsiteConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    WebsiteConfiguration: {
                        locationName: "WebsiteConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        members: {
                            ErrorDocument: {
                                shape: "S9b"
                            },
                            IndexDocument: {
                                shape: "S99"
                            },
                            RedirectAllRequestsTo: {
                                shape: "S96"
                            },
                            RoutingRules: {
                                shape: "S9c"
                            }
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "WebsiteConfiguration"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        PutObject: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}/{Key+}"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    ACL: {
                        location: "header",
                        locationName: "x-amz-acl"
                    },
                    Body: {
                        streaming: true,
                        type: "blob"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentDisposition: {
                        location: "header",
                        locationName: "Content-Disposition"
                    },
                    ContentEncoding: {
                        location: "header",
                        locationName: "Content-Encoding"
                    },
                    ContentLanguage: {
                        location: "header",
                        locationName: "Content-Language"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ChecksumCRC32: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32"
                    },
                    ChecksumCRC32C: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32c"
                    },
                    ChecksumSHA1: {
                        location: "header",
                        locationName: "x-amz-checksum-sha1"
                    },
                    ChecksumSHA256: {
                        location: "header",
                        locationName: "x-amz-checksum-sha256"
                    },
                    Expires: {
                        location: "header",
                        locationName: "Expires",
                        type: "timestamp"
                    },
                    GrantFullControl: {
                        location: "header",
                        locationName: "x-amz-grant-full-control"
                    },
                    GrantRead: {
                        location: "header",
                        locationName: "x-amz-grant-read"
                    },
                    GrantReadACP: {
                        location: "header",
                        locationName: "x-amz-grant-read-acp"
                    },
                    GrantWriteACP: {
                        location: "header",
                        locationName: "x-amz-grant-write-acp"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    Metadata: {
                        shape: "S1b",
                        location: "headers",
                        locationName: "x-amz-meta-"
                    },
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    StorageClass: {
                        location: "header",
                        locationName: "x-amz-storage-class"
                    },
                    WebsiteRedirectLocation: {
                        location: "header",
                        locationName: "x-amz-website-redirect-location"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    SSEKMSEncryptionContext: {
                        shape: "S1i",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-context"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    Tagging: {
                        location: "header",
                        locationName: "x-amz-tagging"
                    },
                    ObjectLockMode: {
                        location: "header",
                        locationName: "x-amz-object-lock-mode"
                    },
                    ObjectLockRetainUntilDate: {
                        shape: "S1o",
                        location: "header",
                        locationName: "x-amz-object-lock-retain-until-date"
                    },
                    ObjectLockLegalHoldStatus: {
                        location: "header",
                        locationName: "x-amz-object-lock-legal-hold"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                members: {
                    Expiration: {
                        location: "header",
                        locationName: "x-amz-expiration"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    ChecksumCRC32: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32"
                    },
                    ChecksumCRC32C: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32c"
                    },
                    ChecksumSHA1: {
                        location: "header",
                        locationName: "x-amz-checksum-sha1"
                    },
                    ChecksumSHA256: {
                        location: "header",
                        locationName: "x-amz-checksum-sha256"
                    },
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    SSEKMSEncryptionContext: {
                        shape: "S1i",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-context"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: false
            }
        },
        PutObjectAcl: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}/{Key+}?acl"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    ACL: {
                        location: "header",
                        locationName: "x-amz-acl"
                    },
                    AccessControlPolicy: {
                        shape: "Sdj",
                        locationName: "AccessControlPolicy",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    GrantFullControl: {
                        location: "header",
                        locationName: "x-amz-grant-full-control"
                    },
                    GrantRead: {
                        location: "header",
                        locationName: "x-amz-grant-read"
                    },
                    GrantReadACP: {
                        location: "header",
                        locationName: "x-amz-grant-read-acp"
                    },
                    GrantWrite: {
                        location: "header",
                        locationName: "x-amz-grant-write"
                    },
                    GrantWriteACP: {
                        location: "header",
                        locationName: "x-amz-grant-write-acp"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "AccessControlPolicy"
            },
            output: {
                type: "structure",
                members: {
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            }
        },
        PutObjectLegalHold: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}/{Key+}?legal-hold"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    LegalHold: {
                        shape: "Saq",
                        locationName: "LegalHold",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "LegalHold"
            },
            output: {
                type: "structure",
                members: {
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            }
        },
        PutObjectLockConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?object-lock"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ObjectLockConfiguration: {
                        shape: "Sat",
                        locationName: "ObjectLockConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    Token: {
                        location: "header",
                        locationName: "x-amz-bucket-object-lock-token"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "ObjectLockConfiguration"
            },
            output: {
                type: "structure",
                members: {
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            }
        },
        PutObjectRetention: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}/{Key+}?retention"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    Retention: {
                        shape: "Sb1",
                        locationName: "Retention",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    BypassGovernanceRetention: {
                        location: "header",
                        locationName: "x-amz-bypass-governance-retention",
                        type: "boolean"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "Retention"
            },
            output: {
                type: "structure",
                members: {
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            }
        },
        PutObjectTagging: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}/{Key+}?tagging"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key", "Tagging" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    Tagging: {
                        shape: "Se9",
                        locationName: "Tagging",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    }
                },
                payload: "Tagging"
            },
            output: {
                type: "structure",
                members: {
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-version-id"
                    }
                }
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            }
        },
        PutPublicAccessBlock: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}?publicAccessBlock"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "PublicAccessBlockConfiguration" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    PublicAccessBlockConfiguration: {
                        shape: "Sb8",
                        locationName: "PublicAccessBlockConfiguration",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "PublicAccessBlockConfiguration"
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: true
            },
            staticContextParams: {
                UseS3ExpressControlEndpoint: {
                    value: true
                }
            }
        },
        RestoreObject: {
            http: {
                requestUri: "/{Bucket}/{Key+}?restore"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    RestoreRequest: {
                        locationName: "RestoreRequest",
                        xmlNamespace: {
                            uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                        },
                        type: "structure",
                        members: {
                            Days: {
                                type: "integer"
                            },
                            GlacierJobParameters: {
                                type: "structure",
                                required: [ "Tier" ],
                                members: {
                                    Tier: {}
                                }
                            },
                            Type: {},
                            Tier: {},
                            Description: {},
                            SelectParameters: {
                                type: "structure",
                                required: [ "InputSerialization", "ExpressionType", "Expression", "OutputSerialization" ],
                                members: {
                                    InputSerialization: {
                                        shape: "Sez"
                                    },
                                    ExpressionType: {},
                                    Expression: {},
                                    OutputSerialization: {
                                        shape: "Sfe"
                                    }
                                }
                            },
                            OutputLocation: {
                                type: "structure",
                                members: {
                                    S3: {
                                        type: "structure",
                                        required: [ "BucketName", "Prefix" ],
                                        members: {
                                            BucketName: {},
                                            Prefix: {},
                                            Encryption: {
                                                type: "structure",
                                                required: [ "EncryptionType" ],
                                                members: {
                                                    EncryptionType: {},
                                                    KMSKeyId: {
                                                        shape: "Sr"
                                                    },
                                                    KMSContext: {}
                                                }
                                            },
                                            CannedACL: {},
                                            AccessControlList: {
                                                shape: "S3t"
                                            },
                                            Tagging: {
                                                shape: "Se9"
                                            },
                                            UserMetadata: {
                                                type: "list",
                                                member: {
                                                    locationName: "MetadataEntry",
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Value: {}
                                                    }
                                                }
                                            },
                                            StorageClass: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "RestoreRequest"
            },
            output: {
                type: "structure",
                members: {
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    },
                    RestoreOutputPath: {
                        location: "header",
                        locationName: "x-amz-restore-output-path"
                    }
                }
            },
            alias: "PostObjectRestore",
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: false
            }
        },
        SelectObjectContent: {
            http: {
                requestUri: "/{Bucket}/{Key+}?select&select-type=2"
            },
            input: {
                locationName: "SelectObjectContentRequest",
                xmlNamespace: {
                    uri: "http://s3.amazonaws.com/doc/2006-03-01/"
                },
                type: "structure",
                required: [ "Bucket", "Key", "Expression", "ExpressionType", "InputSerialization", "OutputSerialization" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    Expression: {},
                    ExpressionType: {},
                    RequestProgress: {
                        type: "structure",
                        members: {
                            Enabled: {
                                type: "boolean"
                            }
                        }
                    },
                    InputSerialization: {
                        shape: "Sez"
                    },
                    OutputSerialization: {
                        shape: "Sfe"
                    },
                    ScanRange: {
                        type: "structure",
                        members: {
                            Start: {
                                type: "long"
                            },
                            End: {
                                type: "long"
                            }
                        }
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Payload: {
                        type: "structure",
                        members: {
                            Records: {
                                type: "structure",
                                members: {
                                    Payload: {
                                        eventpayload: true,
                                        type: "blob"
                                    }
                                },
                                event: true
                            },
                            Stats: {
                                type: "structure",
                                members: {
                                    Details: {
                                        eventpayload: true,
                                        type: "structure",
                                        members: {
                                            BytesScanned: {
                                                type: "long"
                                            },
                                            BytesProcessed: {
                                                type: "long"
                                            },
                                            BytesReturned: {
                                                type: "long"
                                            }
                                        }
                                    }
                                },
                                event: true
                            },
                            Progress: {
                                type: "structure",
                                members: {
                                    Details: {
                                        eventpayload: true,
                                        type: "structure",
                                        members: {
                                            BytesScanned: {
                                                type: "long"
                                            },
                                            BytesProcessed: {
                                                type: "long"
                                            },
                                            BytesReturned: {
                                                type: "long"
                                            }
                                        }
                                    }
                                },
                                event: true
                            },
                            Cont: {
                                type: "structure",
                                members: {},
                                event: true
                            },
                            End: {
                                type: "structure",
                                members: {},
                                event: true
                            }
                        },
                        eventstream: true
                    }
                },
                payload: "Payload"
            }
        },
        UploadPart: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}/{Key+}"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "Key", "PartNumber", "UploadId" ],
                members: {
                    Body: {
                        streaming: true,
                        type: "blob"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    ContentMD5: {
                        location: "header",
                        locationName: "Content-MD5"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-sdk-checksum-algorithm"
                    },
                    ChecksumCRC32: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32"
                    },
                    ChecksumCRC32C: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32c"
                    },
                    ChecksumSHA1: {
                        location: "header",
                        locationName: "x-amz-checksum-sha1"
                    },
                    ChecksumSHA256: {
                        location: "header",
                        locationName: "x-amz-checksum-sha256"
                    },
                    Key: {
                        contextParam: {
                            name: "Key"
                        },
                        location: "uri",
                        locationName: "Key"
                    },
                    PartNumber: {
                        location: "querystring",
                        locationName: "partNumber",
                        type: "integer"
                    },
                    UploadId: {
                        location: "querystring",
                        locationName: "uploadId"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                members: {
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    ChecksumCRC32: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32"
                    },
                    ChecksumCRC32C: {
                        location: "header",
                        locationName: "x-amz-checksum-crc32c"
                    },
                    ChecksumSHA1: {
                        location: "header",
                        locationName: "x-amz-checksum-sha1"
                    },
                    ChecksumSHA256: {
                        location: "header",
                        locationName: "x-amz-checksum-sha256"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                }
            },
            httpChecksum: {
                requestAlgorithmMember: "ChecksumAlgorithm",
                requestChecksumRequired: false
            }
        },
        UploadPartCopy: {
            http: {
                method: "PUT",
                requestUri: "/{Bucket}/{Key+}"
            },
            input: {
                type: "structure",
                required: [ "Bucket", "CopySource", "Key", "PartNumber", "UploadId" ],
                members: {
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "Bucket"
                    },
                    CopySource: {
                        location: "header",
                        locationName: "x-amz-copy-source"
                    },
                    CopySourceIfMatch: {
                        location: "header",
                        locationName: "x-amz-copy-source-if-match"
                    },
                    CopySourceIfModifiedSince: {
                        location: "header",
                        locationName: "x-amz-copy-source-if-modified-since",
                        type: "timestamp"
                    },
                    CopySourceIfNoneMatch: {
                        location: "header",
                        locationName: "x-amz-copy-source-if-none-match"
                    },
                    CopySourceIfUnmodifiedSince: {
                        location: "header",
                        locationName: "x-amz-copy-source-if-unmodified-since",
                        type: "timestamp"
                    },
                    CopySourceRange: {
                        location: "header",
                        locationName: "x-amz-copy-source-range"
                    },
                    Key: {
                        location: "uri",
                        locationName: "Key"
                    },
                    PartNumber: {
                        location: "querystring",
                        locationName: "partNumber",
                        type: "integer"
                    },
                    UploadId: {
                        location: "querystring",
                        locationName: "uploadId"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKey: {
                        shape: "Sk",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    CopySourceSSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-copy-source-server-side-encryption-customer-algorithm"
                    },
                    CopySourceSSECustomerKey: {
                        shape: "S1k",
                        location: "header",
                        locationName: "x-amz-copy-source-server-side-encryption-customer-key"
                    },
                    CopySourceSSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-copy-source-server-side-encryption-customer-key-MD5"
                    },
                    RequestPayer: {
                        location: "header",
                        locationName: "x-amz-request-payer"
                    },
                    ExpectedBucketOwner: {
                        location: "header",
                        locationName: "x-amz-expected-bucket-owner"
                    },
                    ExpectedSourceBucketOwner: {
                        location: "header",
                        locationName: "x-amz-source-expected-bucket-owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopySourceVersionId: {
                        location: "header",
                        locationName: "x-amz-copy-source-version-id"
                    },
                    CopyPartResult: {
                        type: "structure",
                        members: {
                            ETag: {},
                            LastModified: {
                                type: "timestamp"
                            },
                            ChecksumCRC32: {},
                            ChecksumCRC32C: {},
                            ChecksumSHA1: {},
                            ChecksumSHA256: {}
                        }
                    },
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-customer-key-MD5"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-request-charged"
                    }
                },
                payload: "CopyPartResult"
            },
            staticContextParams: {
                DisableS3ExpressSessionAuth: {
                    value: true
                }
            }
        },
        WriteGetObjectResponse: {
            http: {
                requestUri: "/WriteGetObjectResponse"
            },
            input: {
                type: "structure",
                required: [ "RequestRoute", "RequestToken" ],
                members: {
                    RequestRoute: {
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-request-route"
                    },
                    RequestToken: {
                        location: "header",
                        locationName: "x-amz-request-token"
                    },
                    Body: {
                        streaming: true,
                        type: "blob"
                    },
                    StatusCode: {
                        location: "header",
                        locationName: "x-amz-fwd-status",
                        type: "integer"
                    },
                    ErrorCode: {
                        location: "header",
                        locationName: "x-amz-fwd-error-code"
                    },
                    ErrorMessage: {
                        location: "header",
                        locationName: "x-amz-fwd-error-message"
                    },
                    AcceptRanges: {
                        location: "header",
                        locationName: "x-amz-fwd-header-accept-ranges"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "x-amz-fwd-header-Cache-Control"
                    },
                    ContentDisposition: {
                        location: "header",
                        locationName: "x-amz-fwd-header-Content-Disposition"
                    },
                    ContentEncoding: {
                        location: "header",
                        locationName: "x-amz-fwd-header-Content-Encoding"
                    },
                    ContentLanguage: {
                        location: "header",
                        locationName: "x-amz-fwd-header-Content-Language"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    ContentRange: {
                        location: "header",
                        locationName: "x-amz-fwd-header-Content-Range"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "x-amz-fwd-header-Content-Type"
                    },
                    ChecksumCRC32: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-checksum-crc32"
                    },
                    ChecksumCRC32C: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-checksum-crc32c"
                    },
                    ChecksumSHA1: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-checksum-sha1"
                    },
                    ChecksumSHA256: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-checksum-sha256"
                    },
                    DeleteMarker: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-delete-marker",
                        type: "boolean"
                    },
                    ETag: {
                        location: "header",
                        locationName: "x-amz-fwd-header-ETag"
                    },
                    Expires: {
                        location: "header",
                        locationName: "x-amz-fwd-header-Expires",
                        type: "timestamp"
                    },
                    Expiration: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-expiration"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "x-amz-fwd-header-Last-Modified",
                        type: "timestamp"
                    },
                    MissingMeta: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-missing-meta",
                        type: "integer"
                    },
                    Metadata: {
                        shape: "S1b",
                        location: "headers",
                        locationName: "x-amz-meta-"
                    },
                    ObjectLockMode: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-object-lock-mode"
                    },
                    ObjectLockLegalHoldStatus: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-object-lock-legal-hold"
                    },
                    ObjectLockRetainUntilDate: {
                        shape: "S1o",
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-object-lock-retain-until-date"
                    },
                    PartsCount: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-mp-parts-count",
                        type: "integer"
                    },
                    ReplicationStatus: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-replication-status"
                    },
                    RequestCharged: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-request-charged"
                    },
                    Restore: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-restore"
                    },
                    ServerSideEncryption: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-server-side-encryption"
                    },
                    SSECustomerAlgorithm: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm"
                    },
                    SSEKMSKeyId: {
                        shape: "Sr",
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id"
                    },
                    SSECustomerKeyMD5: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-MD5"
                    },
                    StorageClass: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-storage-class"
                    },
                    TagCount: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-tagging-count",
                        type: "integer"
                    },
                    VersionId: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-version-id"
                    },
                    BucketKeyEnabled: {
                        location: "header",
                        locationName: "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled",
                        type: "boolean"
                    }
                },
                payload: "Body"
            },
            authtype: "v4-unsigned-body",
            endpoint: {
                hostPrefix: "{RequestRoute}."
            },
            staticContextParams: {
                UseObjectLambdaEndpoint: {
                    value: true
                }
            }
        }
    },
    shapes: {
        Sk: {
            type: "blob",
            sensitive: true
        },
        Sr: {
            type: "string",
            sensitive: true
        },
        S1b: {
            type: "map",
            key: {},
            value: {}
        },
        S1i: {
            type: "string",
            sensitive: true
        },
        S1k: {
            type: "blob",
            sensitive: true
        },
        S1o: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S2h: {
            type: "string",
            sensitive: true
        },
        S3q: {
            type: "structure",
            members: {
                DisplayName: {},
                ID: {}
            }
        },
        S3t: {
            type: "list",
            member: {
                locationName: "Grant",
                type: "structure",
                members: {
                    Grantee: {
                        shape: "S3v"
                    },
                    Permission: {}
                }
            }
        },
        S3v: {
            type: "structure",
            required: [ "Type" ],
            members: {
                DisplayName: {},
                EmailAddress: {},
                ID: {},
                Type: {
                    locationName: "xsi:type",
                    xmlAttribute: true
                },
                URI: {}
            },
            xmlNamespace: {
                prefix: "xsi",
                uri: "http://www.w3.org/2001/XMLSchema-instance"
            }
        },
        S42: {
            type: "structure",
            required: [ "Id", "StorageClassAnalysis" ],
            members: {
                Id: {},
                Filter: {
                    type: "structure",
                    members: {
                        Prefix: {},
                        Tag: {
                            shape: "S45"
                        },
                        And: {
                            type: "structure",
                            members: {
                                Prefix: {},
                                Tags: {
                                    shape: "S48",
                                    flattened: true,
                                    locationName: "Tag"
                                }
                            }
                        }
                    }
                },
                StorageClassAnalysis: {
                    type: "structure",
                    members: {
                        DataExport: {
                            type: "structure",
                            required: [ "OutputSchemaVersion", "Destination" ],
                            members: {
                                OutputSchemaVersion: {},
                                Destination: {
                                    type: "structure",
                                    required: [ "S3BucketDestination" ],
                                    members: {
                                        S3BucketDestination: {
                                            type: "structure",
                                            required: [ "Format", "Bucket" ],
                                            members: {
                                                Format: {},
                                                BucketAccountId: {},
                                                Bucket: {},
                                                Prefix: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S45: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        S48: {
            type: "list",
            member: {
                shape: "S45",
                locationName: "Tag"
            }
        },
        S4h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AllowedMethods", "AllowedOrigins" ],
                members: {
                    ID: {},
                    AllowedHeaders: {
                        locationName: "AllowedHeader",
                        type: "list",
                        member: {},
                        flattened: true
                    },
                    AllowedMethods: {
                        locationName: "AllowedMethod",
                        type: "list",
                        member: {},
                        flattened: true
                    },
                    AllowedOrigins: {
                        locationName: "AllowedOrigin",
                        type: "list",
                        member: {},
                        flattened: true
                    },
                    ExposeHeaders: {
                        locationName: "ExposeHeader",
                        type: "list",
                        member: {},
                        flattened: true
                    },
                    MaxAgeSeconds: {
                        type: "integer"
                    }
                }
            },
            flattened: true
        },
        S4u: {
            type: "structure",
            required: [ "Rules" ],
            members: {
                Rules: {
                    locationName: "Rule",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ApplyServerSideEncryptionByDefault: {
                                type: "structure",
                                required: [ "SSEAlgorithm" ],
                                members: {
                                    SSEAlgorithm: {},
                                    KMSMasterKeyID: {
                                        shape: "Sr"
                                    }
                                }
                            },
                            BucketKeyEnabled: {
                                type: "boolean"
                            }
                        }
                    },
                    flattened: true
                }
            }
        },
        S50: {
            type: "structure",
            required: [ "Id", "Status", "Tierings" ],
            members: {
                Id: {},
                Filter: {
                    type: "structure",
                    members: {
                        Prefix: {},
                        Tag: {
                            shape: "S45"
                        },
                        And: {
                            type: "structure",
                            members: {
                                Prefix: {},
                                Tags: {
                                    shape: "S48",
                                    flattened: true,
                                    locationName: "Tag"
                                }
                            }
                        }
                    }
                },
                Status: {},
                Tierings: {
                    locationName: "Tiering",
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Days", "AccessTier" ],
                        members: {
                            Days: {
                                type: "integer"
                            },
                            AccessTier: {}
                        }
                    },
                    flattened: true
                }
            }
        },
        S5a: {
            type: "structure",
            required: [ "Destination", "IsEnabled", "Id", "IncludedObjectVersions", "Schedule" ],
            members: {
                Destination: {
                    type: "structure",
                    required: [ "S3BucketDestination" ],
                    members: {
                        S3BucketDestination: {
                            type: "structure",
                            required: [ "Bucket", "Format" ],
                            members: {
                                AccountId: {},
                                Bucket: {},
                                Format: {},
                                Prefix: {},
                                Encryption: {
                                    type: "structure",
                                    members: {
                                        SSES3: {
                                            locationName: "SSE-S3",
                                            type: "structure",
                                            members: {}
                                        },
                                        SSEKMS: {
                                            locationName: "SSE-KMS",
                                            type: "structure",
                                            required: [ "KeyId" ],
                                            members: {
                                                KeyId: {
                                                    shape: "Sr"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                IsEnabled: {
                    type: "boolean"
                },
                Filter: {
                    type: "structure",
                    required: [ "Prefix" ],
                    members: {
                        Prefix: {}
                    }
                },
                Id: {},
                IncludedObjectVersions: {},
                OptionalFields: {
                    type: "list",
                    member: {
                        locationName: "Field"
                    }
                },
                Schedule: {
                    type: "structure",
                    required: [ "Frequency" ],
                    members: {
                        Frequency: {}
                    }
                }
            }
        },
        S5q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Prefix", "Status" ],
                members: {
                    Expiration: {
                        shape: "S5s"
                    },
                    ID: {},
                    Prefix: {},
                    Status: {},
                    Transition: {
                        shape: "S5x"
                    },
                    NoncurrentVersionTransition: {
                        shape: "S5z"
                    },
                    NoncurrentVersionExpiration: {
                        shape: "S61"
                    },
                    AbortIncompleteMultipartUpload: {
                        shape: "S62"
                    }
                }
            },
            flattened: true
        },
        S5s: {
            type: "structure",
            members: {
                Date: {
                    shape: "S5t"
                },
                Days: {
                    type: "integer"
                },
                ExpiredObjectDeleteMarker: {
                    type: "boolean"
                }
            }
        },
        S5t: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S5x: {
            type: "structure",
            members: {
                Date: {
                    shape: "S5t"
                },
                Days: {
                    type: "integer"
                },
                StorageClass: {}
            }
        },
        S5z: {
            type: "structure",
            members: {
                NoncurrentDays: {
                    type: "integer"
                },
                StorageClass: {},
                NewerNoncurrentVersions: {
                    type: "integer"
                }
            }
        },
        S61: {
            type: "structure",
            members: {
                NoncurrentDays: {
                    type: "integer"
                },
                NewerNoncurrentVersions: {
                    type: "integer"
                }
            }
        },
        S62: {
            type: "structure",
            members: {
                DaysAfterInitiation: {
                    type: "integer"
                }
            }
        },
        S66: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Expiration: {
                        shape: "S5s"
                    },
                    ID: {},
                    Prefix: {
                        deprecated: true
                    },
                    Filter: {
                        type: "structure",
                        members: {
                            Prefix: {},
                            Tag: {
                                shape: "S45"
                            },
                            ObjectSizeGreaterThan: {
                                type: "long"
                            },
                            ObjectSizeLessThan: {
                                type: "long"
                            },
                            And: {
                                type: "structure",
                                members: {
                                    Prefix: {},
                                    Tags: {
                                        shape: "S48",
                                        flattened: true,
                                        locationName: "Tag"
                                    },
                                    ObjectSizeGreaterThan: {
                                        type: "long"
                                    },
                                    ObjectSizeLessThan: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    },
                    Status: {},
                    Transitions: {
                        locationName: "Transition",
                        type: "list",
                        member: {
                            shape: "S5x"
                        },
                        flattened: true
                    },
                    NoncurrentVersionTransitions: {
                        locationName: "NoncurrentVersionTransition",
                        type: "list",
                        member: {
                            shape: "S5z"
                        },
                        flattened: true
                    },
                    NoncurrentVersionExpiration: {
                        shape: "S61"
                    },
                    AbortIncompleteMultipartUpload: {
                        shape: "S62"
                    }
                }
            },
            flattened: true
        },
        S6i: {
            type: "structure",
            required: [ "TargetBucket", "TargetPrefix" ],
            members: {
                TargetBucket: {},
                TargetGrants: {
                    type: "list",
                    member: {
                        locationName: "Grant",
                        type: "structure",
                        members: {
                            Grantee: {
                                shape: "S3v"
                            },
                            Permission: {}
                        }
                    }
                },
                TargetPrefix: {},
                TargetObjectKeyFormat: {
                    type: "structure",
                    members: {
                        SimplePrefix: {
                            locationName: "SimplePrefix",
                            type: "structure",
                            members: {}
                        },
                        PartitionedPrefix: {
                            locationName: "PartitionedPrefix",
                            type: "structure",
                            members: {
                                PartitionDateSource: {}
                            }
                        }
                    }
                }
            }
        },
        S6u: {
            type: "structure",
            required: [ "Id" ],
            members: {
                Id: {},
                Filter: {
                    type: "structure",
                    members: {
                        Prefix: {},
                        Tag: {
                            shape: "S45"
                        },
                        AccessPointArn: {},
                        And: {
                            type: "structure",
                            members: {
                                Prefix: {},
                                Tags: {
                                    shape: "S48",
                                    flattened: true,
                                    locationName: "Tag"
                                },
                                AccessPointArn: {}
                            }
                        }
                    }
                }
            }
        },
        S6y: {
            type: "structure",
            required: [ "Bucket" ],
            members: {
                Bucket: {
                    contextParam: {
                        name: "Bucket"
                    },
                    location: "uri",
                    locationName: "Bucket"
                },
                ExpectedBucketOwner: {
                    location: "header",
                    locationName: "x-amz-expected-bucket-owner"
                }
            }
        },
        S6z: {
            type: "structure",
            members: {
                TopicConfiguration: {
                    type: "structure",
                    members: {
                        Id: {},
                        Events: {
                            shape: "S72",
                            locationName: "Event"
                        },
                        Event: {
                            deprecated: true
                        },
                        Topic: {}
                    }
                },
                QueueConfiguration: {
                    type: "structure",
                    members: {
                        Id: {},
                        Event: {
                            deprecated: true
                        },
                        Events: {
                            shape: "S72",
                            locationName: "Event"
                        },
                        Queue: {}
                    }
                },
                CloudFunctionConfiguration: {
                    type: "structure",
                    members: {
                        Id: {},
                        Event: {
                            deprecated: true
                        },
                        Events: {
                            shape: "S72",
                            locationName: "Event"
                        },
                        CloudFunction: {},
                        InvocationRole: {}
                    }
                }
            }
        },
        S72: {
            type: "list",
            member: {},
            flattened: true
        },
        S7a: {
            type: "structure",
            members: {
                TopicConfigurations: {
                    locationName: "TopicConfiguration",
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "TopicArn", "Events" ],
                        members: {
                            Id: {},
                            TopicArn: {
                                locationName: "Topic"
                            },
                            Events: {
                                shape: "S72",
                                locationName: "Event"
                            },
                            Filter: {
                                shape: "S7d"
                            }
                        }
                    },
                    flattened: true
                },
                QueueConfigurations: {
                    locationName: "QueueConfiguration",
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "QueueArn", "Events" ],
                        members: {
                            Id: {},
                            QueueArn: {
                                locationName: "Queue"
                            },
                            Events: {
                                shape: "S72",
                                locationName: "Event"
                            },
                            Filter: {
                                shape: "S7d"
                            }
                        }
                    },
                    flattened: true
                },
                LambdaFunctionConfigurations: {
                    locationName: "CloudFunctionConfiguration",
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "LambdaFunctionArn", "Events" ],
                        members: {
                            Id: {},
                            LambdaFunctionArn: {
                                locationName: "CloudFunction"
                            },
                            Events: {
                                shape: "S72",
                                locationName: "Event"
                            },
                            Filter: {
                                shape: "S7d"
                            }
                        }
                    },
                    flattened: true
                },
                EventBridgeConfiguration: {
                    type: "structure",
                    members: {}
                }
            }
        },
        S7d: {
            type: "structure",
            members: {
                Key: {
                    locationName: "S3Key",
                    type: "structure",
                    members: {
                        FilterRules: {
                            locationName: "FilterRule",
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Name: {},
                                    Value: {}
                                }
                            },
                            flattened: true
                        }
                    }
                }
            }
        },
        S7r: {
            type: "structure",
            required: [ "Rules" ],
            members: {
                Rules: {
                    locationName: "Rule",
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ObjectOwnership" ],
                        members: {
                            ObjectOwnership: {}
                        }
                    },
                    flattened: true
                }
            }
        },
        S83: {
            type: "structure",
            required: [ "Role", "Rules" ],
            members: {
                Role: {},
                Rules: {
                    locationName: "Rule",
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Status", "Destination" ],
                        members: {
                            ID: {},
                            Priority: {
                                type: "integer"
                            },
                            Prefix: {
                                deprecated: true
                            },
                            Filter: {
                                type: "structure",
                                members: {
                                    Prefix: {},
                                    Tag: {
                                        shape: "S45"
                                    },
                                    And: {
                                        type: "structure",
                                        members: {
                                            Prefix: {},
                                            Tags: {
                                                shape: "S48",
                                                flattened: true,
                                                locationName: "Tag"
                                            }
                                        }
                                    }
                                }
                            },
                            Status: {},
                            SourceSelectionCriteria: {
                                type: "structure",
                                members: {
                                    SseKmsEncryptedObjects: {
                                        type: "structure",
                                        required: [ "Status" ],
                                        members: {
                                            Status: {}
                                        }
                                    },
                                    ReplicaModifications: {
                                        type: "structure",
                                        required: [ "Status" ],
                                        members: {
                                            Status: {}
                                        }
                                    }
                                }
                            },
                            ExistingObjectReplication: {
                                type: "structure",
                                required: [ "Status" ],
                                members: {
                                    Status: {}
                                }
                            },
                            Destination: {
                                type: "structure",
                                required: [ "Bucket" ],
                                members: {
                                    Bucket: {},
                                    Account: {},
                                    StorageClass: {},
                                    AccessControlTranslation: {
                                        type: "structure",
                                        required: [ "Owner" ],
                                        members: {
                                            Owner: {}
                                        }
                                    },
                                    EncryptionConfiguration: {
                                        type: "structure",
                                        members: {
                                            ReplicaKmsKeyID: {}
                                        }
                                    },
                                    ReplicationTime: {
                                        type: "structure",
                                        required: [ "Status", "Time" ],
                                        members: {
                                            Status: {},
                                            Time: {
                                                shape: "S8p"
                                            }
                                        }
                                    },
                                    Metrics: {
                                        type: "structure",
                                        required: [ "Status" ],
                                        members: {
                                            Status: {},
                                            EventThreshold: {
                                                shape: "S8p"
                                            }
                                        }
                                    }
                                }
                            },
                            DeleteMarkerReplication: {
                                type: "structure",
                                members: {
                                    Status: {}
                                }
                            }
                        }
                    },
                    flattened: true
                }
            }
        },
        S8p: {
            type: "structure",
            members: {
                Minutes: {
                    type: "integer"
                }
            }
        },
        S96: {
            type: "structure",
            required: [ "HostName" ],
            members: {
                HostName: {},
                Protocol: {}
            }
        },
        S99: {
            type: "structure",
            required: [ "Suffix" ],
            members: {
                Suffix: {}
            }
        },
        S9b: {
            type: "structure",
            required: [ "Key" ],
            members: {
                Key: {}
            }
        },
        S9c: {
            type: "list",
            member: {
                locationName: "RoutingRule",
                type: "structure",
                required: [ "Redirect" ],
                members: {
                    Condition: {
                        type: "structure",
                        members: {
                            HttpErrorCodeReturnedEquals: {},
                            KeyPrefixEquals: {}
                        }
                    },
                    Redirect: {
                        type: "structure",
                        members: {
                            HostName: {},
                            HttpRedirectCode: {},
                            Protocol: {},
                            ReplaceKeyPrefixWith: {},
                            ReplaceKeyWith: {}
                        }
                    }
                }
            }
        },
        Saq: {
            type: "structure",
            members: {
                Status: {}
            }
        },
        Sat: {
            type: "structure",
            members: {
                ObjectLockEnabled: {},
                Rule: {
                    type: "structure",
                    members: {
                        DefaultRetention: {
                            type: "structure",
                            members: {
                                Mode: {},
                                Days: {
                                    type: "integer"
                                },
                                Years: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sb1: {
            type: "structure",
            members: {
                Mode: {},
                RetainUntilDate: {
                    shape: "S5t"
                }
            }
        },
        Sb8: {
            type: "structure",
            members: {
                BlockPublicAcls: {
                    locationName: "BlockPublicAcls",
                    type: "boolean"
                },
                IgnorePublicAcls: {
                    locationName: "IgnorePublicAcls",
                    type: "boolean"
                },
                BlockPublicPolicy: {
                    locationName: "BlockPublicPolicy",
                    type: "boolean"
                },
                RestrictPublicBuckets: {
                    locationName: "RestrictPublicBuckets",
                    type: "boolean"
                }
            }
        },
        Sbx: {
            type: "list",
            member: {
                locationName: "Bucket",
                type: "structure",
                members: {
                    Name: {},
                    CreationDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        Scg: {
            type: "structure",
            members: {
                ID: {},
                DisplayName: {}
            }
        },
        Sch: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Prefix: {}
                }
            },
            flattened: true
        },
        Scm: {
            type: "list",
            member: {}
        },
        Scs: {
            type: "list",
            member: {},
            flattened: true
        },
        Scv: {
            type: "structure",
            members: {
                IsRestoreInProgress: {
                    type: "boolean"
                },
                RestoreExpiryDate: {
                    type: "timestamp"
                }
            }
        },
        Sd4: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    LastModified: {
                        type: "timestamp"
                    },
                    ETag: {},
                    ChecksumAlgorithm: {
                        shape: "Scs"
                    },
                    Size: {
                        type: "long"
                    },
                    StorageClass: {},
                    Owner: {
                        shape: "S3q"
                    },
                    RestoreStatus: {
                        shape: "Scv"
                    }
                }
            },
            flattened: true
        },
        Sdj: {
            type: "structure",
            members: {
                Grants: {
                    shape: "S3t",
                    locationName: "AccessControlList"
                },
                Owner: {
                    shape: "S3q"
                }
            }
        },
        Se9: {
            type: "structure",
            required: [ "TagSet" ],
            members: {
                TagSet: {
                    shape: "S48"
                }
            }
        },
        Sez: {
            type: "structure",
            members: {
                CSV: {
                    type: "structure",
                    members: {
                        FileHeaderInfo: {},
                        Comments: {},
                        QuoteEscapeCharacter: {},
                        RecordDelimiter: {},
                        FieldDelimiter: {},
                        QuoteCharacter: {},
                        AllowQuotedRecordDelimiter: {
                            type: "boolean"
                        }
                    }
                },
                CompressionType: {},
                JSON: {
                    type: "structure",
                    members: {
                        Type: {}
                    }
                },
                Parquet: {
                    type: "structure",
                    members: {}
                }
            }
        },
        Sfe: {
            type: "structure",
            members: {
                CSV: {
                    type: "structure",
                    members: {
                        QuoteFields: {},
                        QuoteEscapeCharacter: {},
                        RecordDelimiter: {},
                        FieldDelimiter: {},
                        QuoteCharacter: {}
                    }
                },
                JSON: {
                    type: "structure",
                    members: {
                        RecordDelimiter: {}
                    }
                }
            }
        }
    },
    clientContextParams: {
        Accelerate: {
            documentation: "Enables this client to use S3 Transfer Acceleration endpoints.",
            type: "boolean"
        },
        DisableMultiRegionAccessPoints: {
            documentation: "Disables this client's usage of Multi-Region Access Points.",
            type: "boolean"
        },
        DisableS3ExpressSessionAuth: {
            documentation: "Disables this client's usage of Session Auth for S3Express\n      buckets and reverts to using conventional SigV4 for those.",
            type: "boolean"
        },
        ForcePathStyle: {
            documentation: "Forces this client to use path-style addressing for buckets.",
            type: "boolean"
        },
        UseArnRegion: {
            documentation: "Enables this client to use an ARN's region when constructing an endpoint instead of the client's configured region.",
            type: "boolean"
        }
    },
    paginators: {
        ListBuckets: {
            result_key: "Buckets"
        },
        ListDirectoryBuckets: {
            input_token: "ContinuationToken",
            limit_key: "MaxDirectoryBuckets",
            output_token: "ContinuationToken",
            result_key: "Buckets"
        },
        ListMultipartUploads: {
            input_token: [ "KeyMarker", "UploadIdMarker" ],
            limit_key: "MaxUploads",
            more_results: "IsTruncated",
            output_token: [ "NextKeyMarker", "NextUploadIdMarker" ],
            result_key: [ "Uploads", "CommonPrefixes" ]
        },
        ListObjectVersions: {
            input_token: [ "KeyMarker", "VersionIdMarker" ],
            limit_key: "MaxKeys",
            more_results: "IsTruncated",
            output_token: [ "NextKeyMarker", "NextVersionIdMarker" ],
            result_key: [ "Versions", "DeleteMarkers", "CommonPrefixes" ]
        },
        ListObjects: {
            input_token: "Marker",
            limit_key: "MaxKeys",
            more_results: "IsTruncated",
            output_token: "NextMarker || Contents[-1].Key",
            result_key: [ "Contents", "CommonPrefixes" ]
        },
        ListObjectsV2: {
            input_token: "ContinuationToken",
            limit_key: "MaxKeys",
            output_token: "NextContinuationToken",
            result_key: [ "Contents", "CommonPrefixes" ]
        },
        ListParts: {
            input_token: "PartNumberMarker",
            limit_key: "MaxParts",
            more_results: "IsTruncated",
            output_token: "NextPartNumberMarker",
            result_key: "Parts"
        }
    },
    waiters: {
        BucketExists: {
            delay: 5,
            operation: "HeadBucket",
            maxAttempts: 20,
            acceptors: [ {
                expected: 200,
                matcher: "status",
                state: "success"
            }, {
                expected: 301,
                matcher: "status",
                state: "success"
            }, {
                expected: 403,
                matcher: "status",
                state: "success"
            }, {
                expected: 404,
                matcher: "status",
                state: "retry"
            } ]
        },
        BucketNotExists: {
            delay: 5,
            operation: "HeadBucket",
            maxAttempts: 20,
            acceptors: [ {
                expected: 404,
                matcher: "status",
                state: "success"
            } ]
        },
        ObjectExists: {
            delay: 5,
            operation: "HeadObject",
            maxAttempts: 20,
            acceptors: [ {
                expected: 200,
                matcher: "status",
                state: "success"
            }, {
                expected: 404,
                matcher: "status",
                state: "retry"
            } ]
        },
        ObjectNotExists: {
            delay: 5,
            operation: "HeadObject",
            maxAttempts: 20,
            acceptors: [ {
                expected: 404,
                matcher: "status",
                state: "success"
            } ]
        }
    }
};

AWS.apiLoader.services["s3control"] = {};

AWS.S3Control = AWS.Service.defineService("s3control", [ "2018-08-20" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    116: [ function(require, module, exports) {
        var AWS = require("../core");
        var s3util = require("./s3util");
        var regionUtil = require("../region_config");
        AWS.util.update(AWS.S3Control.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                request.addListener("extractError", this.extractHostId);
                request.addListener("extractData", this.extractHostId);
                request.addListener("validate", this.validateAccountId);
                var isArnInBucket = s3util.isArnInParam(request, "Bucket");
                var isArnInName = s3util.isArnInParam(request, "Name");
                if (isArnInBucket) {
                    request._parsedArn = AWS.util.ARN.parse(request.params["Bucket"]);
                    request.addListener("validate", this.validateOutpostsBucketArn);
                    request.addListener("validate", s3util.validateOutpostsArn);
                    request.addListener("afterBuild", this.addOutpostIdHeader);
                } else if (isArnInName) {
                    request._parsedArn = AWS.util.ARN.parse(request.params["Name"]);
                    request.addListener("validate", s3util.validateOutpostsAccessPointArn);
                    request.addListener("validate", s3util.validateOutpostsArn);
                    request.addListener("afterBuild", this.addOutpostIdHeader);
                }
                if (isArnInBucket || isArnInName) {
                    request.addListener("validate", this.validateArnRegion);
                    request.addListener("validate", this.validateArnAccountWithParams, true);
                    request.addListener("validate", s3util.validateArnAccount);
                    request.addListener("validate", s3util.validateArnService);
                    request.addListener("build", this.populateParamFromArn, true);
                    request.addListener("build", this.populateUriFromArn);
                    request.addListener("build", s3util.validatePopulateUriFromArn);
                }
                if (request.params.OutpostId && (request.operation === "createBucket" || request.operation === "listRegionalBuckets")) {
                    request.addListener("build", this.populateEndpointForOutpostId);
                }
            },
            addOutpostIdHeader: function addOutpostIdHeader(req) {
                req.httpRequest.headers["x-amz-outpost-id"] = req._parsedArn.outpostId;
            },
            validateOutpostsBucketArn: function validateOutpostsBucketArn(req) {
                var parsedArn = req._parsedArn;
                var delimiter = parsedArn.resource["outpost".length];
                if (parsedArn.resource.split(delimiter).length !== 4) {
                    throw AWS.util.error(new Error(), {
                        code: "InvalidARN",
                        message: "Bucket ARN should have two resources outpost/{outpostId}/bucket/{accesspointName}"
                    });
                }
                var bucket = parsedArn.resource.split(delimiter)[3];
                if (!s3util.dnsCompatibleBucketName(bucket) || bucket.match(/\./)) {
                    throw AWS.util.error(new Error(), {
                        code: "InvalidARN",
                        message: "Bucket ARN is not DNS compatible. Got " + bucket
                    });
                }
                req._parsedArn.bucket = bucket;
            },
            populateParamFromArn: function populateParamFromArn(req) {
                var parsedArn = req._parsedArn;
                if (s3util.isArnInParam(req, "Bucket")) {
                    req.params.Bucket = parsedArn.bucket;
                } else if (s3util.isArnInParam(req, "Name")) {
                    req.params.Name = parsedArn.accessPoint;
                }
            },
            populateUriFromArn: function populateUriFromArn(req) {
                var parsedArn = req._parsedArn;
                var endpoint = req.httpRequest.endpoint;
                var useArnRegion = req.service.config.s3UseArnRegion;
                var useFipsEndpoint = req.service.config.useFipsEndpoint;
                endpoint.hostname = [ "s3-outposts" + (useFipsEndpoint ? "-fips" : ""), useArnRegion ? parsedArn.region : req.service.config.region, "amazonaws.com" ].join(".");
                endpoint.host = endpoint.hostname;
            },
            populateEndpointForOutpostId: function populateEndpointForOutpostId(req) {
                var endpoint = req.httpRequest.endpoint;
                var useFipsEndpoint = req.service.config.useFipsEndpoint;
                endpoint.hostname = [ "s3-outposts" + (useFipsEndpoint ? "-fips" : ""), req.service.config.region, "amazonaws.com" ].join(".");
                endpoint.host = endpoint.hostname;
            },
            extractHostId: function(response) {
                var hostId = response.httpResponse.headers ? response.httpResponse.headers["x-amz-id-2"] : null;
                response.extendedRequestId = hostId;
                if (response.error) {
                    response.error.extendedRequestId = hostId;
                }
            },
            validateArnRegion: function validateArnRegion(req) {
                s3util.validateArnRegion(req, {
                    allowFipsEndpoint: true
                });
            },
            validateArnAccountWithParams: function validateArnAccountWithParams(req) {
                var params = req.params;
                var inputModel = req.service.api.operations[req.operation].input;
                if (inputModel.members.AccountId) {
                    var parsedArn = req._parsedArn;
                    if (parsedArn.accountId) {
                        if (params.AccountId) {
                            if (params.AccountId !== parsedArn.accountId) {
                                throw AWS.util.error(new Error(), {
                                    code: "ValidationError",
                                    message: "AccountId in ARN and request params should be same."
                                });
                            }
                        } else {
                            params.AccountId = parsedArn.accountId;
                        }
                    }
                }
            },
            validateAccountId: function(request) {
                var params = request.params;
                if (!Object.prototype.hasOwnProperty.call(params, "AccountId")) return;
                var accountId = params.AccountId;
                if (typeof accountId !== "string") {
                    throw AWS.util.error(new Error(), {
                        code: "ValidationError",
                        message: "AccountId must be a string."
                    });
                }
                if (accountId.length < 1 || accountId.length > 63) {
                    throw AWS.util.error(new Error(), {
                        code: "ValidationError",
                        message: "AccountId length should be between 1 to 63 characters, inclusive."
                    });
                }
                var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/;
                if (!hostPattern.test(accountId)) {
                    throw AWS.util.error(new Error(), {
                        code: "ValidationError",
                        message: "AccountId should be hostname compatible. AccountId: " + accountId
                    });
                }
            },
            getSigningName: function getSigningName(req) {
                var _super = AWS.Service.prototype.getSigningName;
                if (req && req._parsedArn && req._parsedArn.service) {
                    return req._parsedArn.service;
                } else if (req.params.OutpostId && (req.operation === "createBucket" || req.operation === "listRegionalBuckets")) {
                    return "s3-outposts";
                } else {
                    return _super.call(this, req);
                }
            }
        });
    }, {
        "../core": 44,
        "../region_config": 89,
        "./s3util": 117
    } ]
}, {}, [ 116 ]);

AWS.apiLoader.services["s3control"]["2018-08-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-08-20",
        endpointPrefix: "s3-control",
        protocol: "rest-xml",
        serviceFullName: "AWS S3 Control",
        serviceId: "S3 Control",
        signatureVersion: "s3v4",
        signingName: "s3",
        uid: "s3control-2018-08-20"
    },
    operations: {
        AssociateAccessGrantsIdentityCenter: {
            http: {
                requestUri: "/v20180820/accessgrantsinstance/identitycenter"
            },
            input: {
                locationName: "AssociateAccessGrantsIdentityCenterRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "IdentityCenterArn" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    IdentityCenterArn: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        CreateAccessGrant: {
            http: {
                requestUri: "/v20180820/accessgrantsinstance/grant"
            },
            input: {
                locationName: "CreateAccessGrantRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "AccessGrantsLocationId", "Grantee", "Permission" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    AccessGrantsLocationId: {},
                    AccessGrantsLocationConfiguration: {
                        shape: "S6"
                    },
                    Grantee: {
                        shape: "S8"
                    },
                    Permission: {},
                    ApplicationArn: {},
                    S3PrefixType: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedAt: {
                        type: "timestamp"
                    },
                    AccessGrantId: {},
                    AccessGrantArn: {},
                    Grantee: {
                        shape: "S8"
                    },
                    AccessGrantsLocationId: {},
                    AccessGrantsLocationConfiguration: {
                        shape: "S6"
                    },
                    Permission: {},
                    ApplicationArn: {},
                    GrantScope: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        CreateAccessGrantsInstance: {
            http: {
                requestUri: "/v20180820/accessgrantsinstance"
            },
            input: {
                locationName: "CreateAccessGrantsInstanceRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    IdentityCenterArn: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedAt: {
                        type: "timestamp"
                    },
                    AccessGrantsInstanceId: {},
                    AccessGrantsInstanceArn: {},
                    IdentityCenterArn: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        CreateAccessGrantsLocation: {
            http: {
                requestUri: "/v20180820/accessgrantsinstance/location"
            },
            input: {
                locationName: "CreateAccessGrantsLocationRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "LocationScope", "IAMRoleArn" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    LocationScope: {},
                    IAMRoleArn: {},
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedAt: {
                        type: "timestamp"
                    },
                    AccessGrantsLocationId: {},
                    AccessGrantsLocationArn: {},
                    LocationScope: {},
                    IAMRoleArn: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        CreateAccessPoint: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/accesspoint/{name}"
            },
            input: {
                locationName: "CreateAccessPointRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "Name", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        }
                    },
                    VpcConfiguration: {
                        shape: "Sx"
                    },
                    PublicAccessBlockConfiguration: {
                        shape: "Sz"
                    },
                    BucketAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessPointArn: {},
                    Alias: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        CreateAccessPointForObjectLambda: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/accesspointforobjectlambda/{name}"
            },
            input: {
                locationName: "CreateAccessPointForObjectLambdaRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "Name", "Configuration" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Configuration: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ObjectLambdaAccessPointArn: {},
                    Alias: {
                        shape: "S1l"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        CreateBucket: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/bucket/{name}"
            },
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    ACL: {
                        location: "header",
                        locationName: "x-amz-acl"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    },
                    CreateBucketConfiguration: {
                        locationName: "CreateBucketConfiguration",
                        xmlNamespace: {
                            uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                        },
                        type: "structure",
                        members: {
                            LocationConstraint: {}
                        }
                    },
                    GrantFullControl: {
                        location: "header",
                        locationName: "x-amz-grant-full-control"
                    },
                    GrantRead: {
                        location: "header",
                        locationName: "x-amz-grant-read"
                    },
                    GrantReadACP: {
                        location: "header",
                        locationName: "x-amz-grant-read-acp"
                    },
                    GrantWrite: {
                        location: "header",
                        locationName: "x-amz-grant-write"
                    },
                    GrantWriteACP: {
                        location: "header",
                        locationName: "x-amz-grant-write-acp"
                    },
                    ObjectLockEnabledForBucket: {
                        location: "header",
                        locationName: "x-amz-bucket-object-lock-enabled",
                        type: "boolean"
                    },
                    OutpostId: {
                        contextParam: {
                            name: "OutpostId"
                        },
                        location: "header",
                        locationName: "x-amz-outpost-id"
                    }
                },
                payload: "CreateBucketConfiguration"
            },
            output: {
                type: "structure",
                members: {
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    BucketArn: {}
                }
            },
            httpChecksumRequired: true
        },
        CreateJob: {
            http: {
                requestUri: "/v20180820/jobs"
            },
            input: {
                locationName: "CreateJobRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "Operation", "Report", "ClientRequestToken", "Priority", "RoleArn" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    ConfirmationRequired: {
                        type: "boolean"
                    },
                    Operation: {
                        shape: "S24"
                    },
                    Report: {
                        shape: "S3a"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Manifest: {
                        shape: "S3f"
                    },
                    Description: {},
                    Priority: {
                        type: "integer"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S2n"
                    },
                    ManifestGenerator: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        CreateMultiRegionAccessPoint: {
            http: {
                requestUri: "/v20180820/async-requests/mrap/create"
            },
            input: {
                locationName: "CreateMultiRegionAccessPointRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "ClientToken", "Details" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Details: {
                        shape: "S4a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestTokenARN: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        CreateStorageLensGroup: {
            http: {
                requestUri: "/v20180820/storagelensgroup",
                responseCode: 204
            },
            input: {
                locationName: "CreateStorageLensGroupRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "StorageLensGroup" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    StorageLensGroup: {
                        shape: "S4h"
                    },
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteAccessGrant: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/accessgrantsinstance/grant/{id}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "AccessGrantId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    AccessGrantId: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteAccessGrantsInstance: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/accessgrantsinstance"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteAccessGrantsInstanceResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/accessgrantsinstance/resourcepolicy"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteAccessGrantsLocation: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/accessgrantsinstance/location/{id}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "AccessGrantsLocationId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    AccessGrantsLocationId: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteAccessPoint: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/accesspoint/{name}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        contextParam: {
                            name: "AccessPointName"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteAccessPointForObjectLambda: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/accesspointforobjectlambda/{name}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteAccessPointPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/accesspoint/{name}/policy"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        contextParam: {
                            name: "AccessPointName"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteAccessPointPolicyForObjectLambda: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/accesspointforobjectlambda/{name}/policy"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteBucket: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/bucket/{name}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteBucketLifecycleConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/bucket/{name}/lifecycleconfiguration"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteBucketPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/bucket/{name}/policy"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteBucketReplication: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/bucket/{name}/replication"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteBucketTagging: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/bucket/{name}/tagging",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteJobTagging: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/jobs/{id}/tagging"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "JobId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteMultiRegionAccessPoint: {
            http: {
                requestUri: "/v20180820/async-requests/mrap/delete"
            },
            input: {
                locationName: "DeleteMultiRegionAccessPointRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "ClientToken", "Details" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Details: {
                        shape: "S5c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestTokenARN: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeletePublicAccessBlock: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/configuration/publicAccessBlock"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteStorageLensConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/storagelens/{storagelensid}"
            },
            input: {
                type: "structure",
                required: [ "ConfigId", "AccountId" ],
                members: {
                    ConfigId: {
                        location: "uri",
                        locationName: "storagelensid"
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteStorageLensConfigurationTagging: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/storagelens/{storagelensid}/tagging"
            },
            input: {
                type: "structure",
                required: [ "ConfigId", "AccountId" ],
                members: {
                    ConfigId: {
                        location: "uri",
                        locationName: "storagelensid"
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DeleteStorageLensGroup: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/storagelensgroup/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Name", "AccountId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DescribeJob: {
            http: {
                method: "GET",
                requestUri: "/v20180820/jobs/{id}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "JobId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        type: "structure",
                        members: {
                            JobId: {},
                            ConfirmationRequired: {
                                type: "boolean"
                            },
                            Description: {},
                            JobArn: {},
                            Status: {},
                            Manifest: {
                                shape: "S3f"
                            },
                            Operation: {
                                shape: "S24"
                            },
                            Priority: {
                                type: "integer"
                            },
                            ProgressSummary: {
                                shape: "S5p"
                            },
                            StatusUpdateReason: {},
                            FailureReasons: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        FailureCode: {},
                                        FailureReason: {}
                                    }
                                }
                            },
                            Report: {
                                shape: "S3a"
                            },
                            CreationTime: {
                                type: "timestamp"
                            },
                            TerminationDate: {
                                type: "timestamp"
                            },
                            RoleArn: {},
                            SuspendedDate: {
                                type: "timestamp"
                            },
                            SuspendedCause: {},
                            ManifestGenerator: {
                                shape: "S3p"
                            },
                            GeneratedManifestDescriptor: {
                                type: "structure",
                                members: {
                                    Format: {},
                                    Location: {
                                        shape: "S3k"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DescribeMultiRegionAccessPointOperation: {
            http: {
                method: "GET",
                requestUri: "/v20180820/async-requests/mrap/{request_token+}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RequestTokenARN" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    RequestTokenARN: {
                        location: "uri",
                        locationName: "request_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AsyncOperation: {
                        type: "structure",
                        members: {
                            CreationTime: {
                                type: "timestamp"
                            },
                            Operation: {},
                            RequestTokenARN: {},
                            RequestParameters: {
                                type: "structure",
                                members: {
                                    CreateMultiRegionAccessPointRequest: {
                                        shape: "S4a"
                                    },
                                    DeleteMultiRegionAccessPointRequest: {
                                        shape: "S5c"
                                    },
                                    PutMultiRegionAccessPointPolicyRequest: {
                                        shape: "S6b"
                                    }
                                }
                            },
                            RequestStatus: {},
                            ResponseDetails: {
                                type: "structure",
                                members: {
                                    MultiRegionAccessPointDetails: {
                                        type: "structure",
                                        members: {
                                            Regions: {
                                                type: "list",
                                                member: {
                                                    locationName: "Region",
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        RequestStatus: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    ErrorDetails: {
                                        type: "structure",
                                        members: {
                                            Code: {},
                                            Message: {},
                                            Resource: {},
                                            RequestId: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        DissociateAccessGrantsIdentityCenter: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/accessgrantsinstance/identitycenter"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessGrant: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accessgrantsinstance/grant/{id}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "AccessGrantId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    AccessGrantId: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedAt: {
                        type: "timestamp"
                    },
                    AccessGrantId: {},
                    AccessGrantArn: {},
                    Grantee: {
                        shape: "S8"
                    },
                    Permission: {},
                    AccessGrantsLocationId: {},
                    AccessGrantsLocationConfiguration: {
                        shape: "S6"
                    },
                    GrantScope: {},
                    ApplicationArn: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessGrantsInstance: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accessgrantsinstance"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessGrantsInstanceArn: {},
                    AccessGrantsInstanceId: {},
                    IdentityCenterArn: {},
                    CreatedAt: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessGrantsInstanceForPrefix: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accessgrantsinstance/prefix"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "S3Prefix" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    S3Prefix: {
                        location: "querystring",
                        locationName: "s3prefix"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessGrantsInstanceArn: {},
                    AccessGrantsInstanceId: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessGrantsInstanceResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accessgrantsinstance/resourcepolicy"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {},
                    Organization: {},
                    CreatedAt: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessGrantsLocation: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accessgrantsinstance/location/{id}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "AccessGrantsLocationId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    AccessGrantsLocationId: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedAt: {
                        type: "timestamp"
                    },
                    AccessGrantsLocationId: {},
                    AccessGrantsLocationArn: {},
                    LocationScope: {},
                    IAMRoleArn: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessPoint: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accesspoint/{name}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        contextParam: {
                            name: "AccessPointName"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Bucket: {},
                    NetworkOrigin: {},
                    VpcConfiguration: {
                        shape: "Sx"
                    },
                    PublicAccessBlockConfiguration: {
                        shape: "Sz"
                    },
                    CreationDate: {
                        type: "timestamp"
                    },
                    Alias: {},
                    AccessPointArn: {},
                    Endpoints: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    BucketAccountId: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessPointConfigurationForObjectLambda: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accesspointforobjectlambda/{name}/configuration"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Configuration: {
                        shape: "S16"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessPointForObjectLambda: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accesspointforobjectlambda/{name}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    PublicAccessBlockConfiguration: {
                        shape: "Sz"
                    },
                    CreationDate: {
                        type: "timestamp"
                    },
                    Alias: {
                        shape: "S1l"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessPointPolicy: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accesspoint/{name}/policy"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        contextParam: {
                            name: "AccessPointName"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessPointPolicyForObjectLambda: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accesspointforobjectlambda/{name}/policy"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessPointPolicyStatus: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accesspoint/{name}/policyStatus"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        contextParam: {
                            name: "AccessPointName"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyStatus: {
                        shape: "S7d"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetAccessPointPolicyStatusForObjectLambda: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accesspointforobjectlambda/{name}/policyStatus"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyStatus: {
                        shape: "S7d"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetBucket: {
            http: {
                method: "GET",
                requestUri: "/v20180820/bucket/{name}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bucket: {},
                    PublicAccessBlockEnabled: {
                        type: "boolean"
                    },
                    CreationDate: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetBucketLifecycleConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v20180820/bucket/{name}/lifecycleconfiguration"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        shape: "S7m"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetBucketPolicy: {
            http: {
                method: "GET",
                requestUri: "/v20180820/bucket/{name}/policy"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetBucketReplication: {
            http: {
                method: "GET",
                requestUri: "/v20180820/bucket/{name}/replication"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationConfiguration: {
                        shape: "S89"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetBucketTagging: {
            http: {
                method: "GET",
                requestUri: "/v20180820/bucket/{name}/tagging"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TagSet" ],
                members: {
                    TagSet: {
                        shape: "S2n"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetBucketVersioning: {
            http: {
                method: "GET",
                requestUri: "/v20180820/bucket/{name}/versioning"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    MFADelete: {
                        locationName: "MfaDelete"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetDataAccess: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accessgrantsinstance/dataaccess"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Target", "Permission" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Target: {
                        location: "querystring",
                        locationName: "target"
                    },
                    Permission: {
                        location: "querystring",
                        locationName: "permission"
                    },
                    DurationSeconds: {
                        location: "querystring",
                        locationName: "durationSeconds",
                        type: "integer"
                    },
                    Privilege: {
                        location: "querystring",
                        locationName: "privilege"
                    },
                    TargetType: {
                        location: "querystring",
                        locationName: "targetType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Credentials: {
                        type: "structure",
                        members: {
                            AccessKeyId: {
                                type: "string",
                                sensitive: true
                            },
                            SecretAccessKey: {
                                type: "string",
                                sensitive: true
                            },
                            SessionToken: {
                                type: "string",
                                sensitive: true
                            },
                            Expiration: {
                                type: "timestamp"
                            }
                        },
                        sensitive: true
                    },
                    MatchedGrantTarget: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetJobTagging: {
            http: {
                method: "GET",
                requestUri: "/v20180820/jobs/{id}/tagging"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "JobId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2n"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetMultiRegionAccessPoint: {
            http: {
                method: "GET",
                requestUri: "/v20180820/mrap/instances/{name+}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessPoint: {
                        shape: "S9m"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetMultiRegionAccessPointPolicy: {
            http: {
                method: "GET",
                requestUri: "/v20180820/mrap/instances/{name+}/policy"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        type: "structure",
                        members: {
                            Established: {
                                type: "structure",
                                members: {
                                    Policy: {}
                                }
                            },
                            Proposed: {
                                type: "structure",
                                members: {
                                    Policy: {}
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetMultiRegionAccessPointPolicyStatus: {
            http: {
                method: "GET",
                requestUri: "/v20180820/mrap/instances/{name+}/policystatus"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Established: {
                        shape: "S7d"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetMultiRegionAccessPointRoutes: {
            http: {
                method: "GET",
                requestUri: "/v20180820/mrap/instances/{mrap+}/routes"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Mrap" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Mrap: {
                        location: "uri",
                        locationName: "mrap"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Mrap: {},
                    Routes: {
                        shape: "Sa1"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetPublicAccessBlock: {
            http: {
                method: "GET",
                requestUri: "/v20180820/configuration/publicAccessBlock"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicAccessBlockConfiguration: {
                        shape: "Sz"
                    }
                },
                payload: "PublicAccessBlockConfiguration"
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetStorageLensConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v20180820/storagelens/{storagelensid}"
            },
            input: {
                type: "structure",
                required: [ "ConfigId", "AccountId" ],
                members: {
                    ConfigId: {
                        location: "uri",
                        locationName: "storagelensid"
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageLensConfiguration: {
                        shape: "Sa8"
                    }
                },
                payload: "StorageLensConfiguration"
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetStorageLensConfigurationTagging: {
            http: {
                method: "GET",
                requestUri: "/v20180820/storagelens/{storagelensid}/tagging"
            },
            input: {
                type: "structure",
                required: [ "ConfigId", "AccountId" ],
                members: {
                    ConfigId: {
                        location: "uri",
                        locationName: "storagelensid"
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb9"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        GetStorageLensGroup: {
            http: {
                method: "GET",
                requestUri: "/v20180820/storagelensgroup/{name}"
            },
            input: {
                type: "structure",
                required: [ "Name", "AccountId" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageLensGroup: {
                        shape: "S4h"
                    }
                },
                payload: "StorageLensGroup"
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListAccessGrants: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accessgrantsinstance/grants"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    GranteeType: {
                        location: "querystring",
                        locationName: "granteetype"
                    },
                    GranteeIdentifier: {
                        location: "querystring",
                        locationName: "granteeidentifier"
                    },
                    Permission: {
                        location: "querystring",
                        locationName: "permission"
                    },
                    GrantScope: {
                        location: "querystring",
                        locationName: "grantscope"
                    },
                    ApplicationArn: {
                        location: "querystring",
                        locationName: "application_arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    AccessGrantsList: {
                        type: "list",
                        member: {
                            locationName: "AccessGrant",
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                AccessGrantId: {},
                                AccessGrantArn: {},
                                Grantee: {
                                    shape: "S8"
                                },
                                Permission: {},
                                AccessGrantsLocationId: {},
                                AccessGrantsLocationConfiguration: {
                                    shape: "S6"
                                },
                                GrantScope: {},
                                ApplicationArn: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListAccessGrantsInstances: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accessgrantsinstances"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    AccessGrantsInstancesList: {
                        type: "list",
                        member: {
                            locationName: "AccessGrantsInstance",
                            type: "structure",
                            members: {
                                AccessGrantsInstanceId: {},
                                AccessGrantsInstanceArn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                IdentityCenterArn: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListAccessGrantsLocations: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accessgrantsinstance/locations"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    LocationScope: {
                        location: "querystring",
                        locationName: "locationscope"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    AccessGrantsLocationsList: {
                        type: "list",
                        member: {
                            locationName: "AccessGrantsLocation",
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                AccessGrantsLocationId: {},
                                AccessGrantsLocationArn: {},
                                LocationScope: {},
                                IAMRoleArn: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListAccessPoints: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accesspoint"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "querystring",
                        locationName: "bucket"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessPointList: {
                        type: "list",
                        member: {
                            locationName: "AccessPoint",
                            type: "structure",
                            required: [ "Name", "NetworkOrigin", "Bucket" ],
                            members: {
                                Name: {},
                                NetworkOrigin: {},
                                VpcConfiguration: {
                                    shape: "Sx"
                                },
                                Bucket: {},
                                AccessPointArn: {},
                                Alias: {},
                                BucketAccountId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListAccessPointsForObjectLambda: {
            http: {
                method: "GET",
                requestUri: "/v20180820/accesspointforobjectlambda"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ObjectLambdaAccessPointList: {
                        type: "list",
                        member: {
                            locationName: "ObjectLambdaAccessPoint",
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                Name: {},
                                ObjectLambdaAccessPointArn: {},
                                Alias: {
                                    shape: "S1l"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/v20180820/jobs"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    JobStatuses: {
                        location: "querystring",
                        locationName: "jobStatuses",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                Description: {},
                                Operation: {},
                                Priority: {
                                    type: "integer"
                                },
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                TerminationDate: {
                                    type: "timestamp"
                                },
                                ProgressSummary: {
                                    shape: "S5p"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListMultiRegionAccessPoints: {
            http: {
                method: "GET",
                requestUri: "/v20180820/mrap/instances"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessPoints: {
                        type: "list",
                        member: {
                            shape: "S9m",
                            locationName: "AccessPoint"
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListRegionalBuckets: {
            http: {
                method: "GET",
                requestUri: "/v20180820/bucket"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    OutpostId: {
                        contextParam: {
                            name: "OutpostId"
                        },
                        location: "header",
                        locationName: "x-amz-outpost-id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegionalBucketList: {
                        type: "list",
                        member: {
                            locationName: "RegionalBucket",
                            type: "structure",
                            required: [ "Bucket", "PublicAccessBlockEnabled", "CreationDate" ],
                            members: {
                                Bucket: {},
                                BucketArn: {},
                                PublicAccessBlockEnabled: {
                                    type: "boolean"
                                },
                                CreationDate: {
                                    type: "timestamp"
                                },
                                OutpostId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListStorageLensConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v20180820/storagelens"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    StorageLensConfigurationList: {
                        type: "list",
                        member: {
                            locationName: "StorageLensConfiguration",
                            type: "structure",
                            required: [ "Id", "StorageLensArn", "HomeRegion" ],
                            members: {
                                Id: {},
                                StorageLensArn: {},
                                HomeRegion: {},
                                IsEnabled: {
                                    type: "boolean"
                                }
                            }
                        },
                        flattened: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListStorageLensGroups: {
            http: {
                method: "GET",
                requestUri: "/v20180820/storagelensgroup"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    StorageLensGroupList: {
                        type: "list",
                        member: {
                            locationName: "StorageLensGroup",
                            type: "structure",
                            required: [ "Name", "StorageLensGroupArn", "HomeRegion" ],
                            members: {
                                Name: {},
                                StorageLensGroupArn: {},
                                HomeRegion: {}
                            }
                        },
                        flattened: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v20180820/tags/{resourceArn+}"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "ResourceArn" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutAccessGrantsInstanceResourcePolicy: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/accessgrantsinstance/resourcepolicy"
            },
            input: {
                locationName: "PutAccessGrantsInstanceResourcePolicyRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "Policy" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Policy: {},
                    Organization: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {},
                    Organization: {},
                    CreatedAt: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutAccessPointConfigurationForObjectLambda: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/accesspointforobjectlambda/{name}/configuration"
            },
            input: {
                locationName: "PutAccessPointConfigurationForObjectLambdaRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "Name", "Configuration" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Configuration: {
                        shape: "S16"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutAccessPointPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/accesspoint/{name}/policy"
            },
            input: {
                locationName: "PutAccessPointPolicyRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "Name", "Policy" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        contextParam: {
                            name: "AccessPointName"
                        },
                        location: "uri",
                        locationName: "name"
                    },
                    Policy: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutAccessPointPolicyForObjectLambda: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/accesspointforobjectlambda/{name}/policy"
            },
            input: {
                locationName: "PutAccessPointPolicyForObjectLambdaRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "Name", "Policy" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    Policy: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutBucketLifecycleConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/bucket/{name}/lifecycleconfiguration"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    },
                    LifecycleConfiguration: {
                        locationName: "LifecycleConfiguration",
                        xmlNamespace: {
                            uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                        },
                        type: "structure",
                        members: {
                            Rules: {
                                shape: "S7m"
                            }
                        }
                    }
                },
                payload: "LifecycleConfiguration"
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutBucketPolicy: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/bucket/{name}/policy"
            },
            input: {
                locationName: "PutBucketPolicyRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "Bucket", "Policy" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    },
                    ConfirmRemoveSelfBucketAccess: {
                        location: "header",
                        locationName: "x-amz-confirm-remove-self-bucket-access",
                        type: "boolean"
                    },
                    Policy: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutBucketReplication: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/bucket/{name}/replication"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket", "ReplicationConfiguration" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    },
                    ReplicationConfiguration: {
                        shape: "S89",
                        locationName: "ReplicationConfiguration",
                        xmlNamespace: {
                            uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                        }
                    }
                },
                payload: "ReplicationConfiguration"
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutBucketTagging: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/bucket/{name}/tagging"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket", "Tagging" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    },
                    Tagging: {
                        locationName: "Tagging",
                        xmlNamespace: {
                            uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                        },
                        type: "structure",
                        required: [ "TagSet" ],
                        members: {
                            TagSet: {
                                shape: "S2n"
                            }
                        }
                    }
                },
                payload: "Tagging"
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutBucketVersioning: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/bucket/{name}/versioning"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Bucket", "VersioningConfiguration" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Bucket: {
                        contextParam: {
                            name: "Bucket"
                        },
                        location: "uri",
                        locationName: "name"
                    },
                    MFA: {
                        location: "header",
                        locationName: "x-amz-mfa"
                    },
                    VersioningConfiguration: {
                        locationName: "VersioningConfiguration",
                        xmlNamespace: {
                            uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                        },
                        type: "structure",
                        members: {
                            MFADelete: {
                                locationName: "MfaDelete"
                            },
                            Status: {}
                        }
                    }
                },
                payload: "VersioningConfiguration"
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutJobTagging: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/jobs/{id}/tagging"
            },
            input: {
                locationName: "PutJobTaggingRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "JobId", "Tags" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "id"
                    },
                    Tags: {
                        shape: "S2n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutMultiRegionAccessPointPolicy: {
            http: {
                requestUri: "/v20180820/async-requests/mrap/put-policy"
            },
            input: {
                locationName: "PutMultiRegionAccessPointPolicyRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "ClientToken", "Details" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Details: {
                        shape: "S6b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestTokenARN: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutPublicAccessBlock: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/configuration/publicAccessBlock"
            },
            input: {
                type: "structure",
                required: [ "PublicAccessBlockConfiguration", "AccountId" ],
                members: {
                    PublicAccessBlockConfiguration: {
                        shape: "Sz",
                        locationName: "PublicAccessBlockConfiguration",
                        xmlNamespace: {
                            uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                        }
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    }
                },
                payload: "PublicAccessBlockConfiguration"
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutStorageLensConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/storagelens/{storagelensid}"
            },
            input: {
                locationName: "PutStorageLensConfigurationRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "ConfigId", "AccountId", "StorageLensConfiguration" ],
                members: {
                    ConfigId: {
                        location: "uri",
                        locationName: "storagelensid"
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    StorageLensConfiguration: {
                        shape: "Sa8"
                    },
                    Tags: {
                        shape: "Sb9"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        PutStorageLensConfigurationTagging: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/storagelens/{storagelensid}/tagging"
            },
            input: {
                locationName: "PutStorageLensConfigurationTaggingRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "ConfigId", "AccountId", "Tags" ],
                members: {
                    ConfigId: {
                        location: "uri",
                        locationName: "storagelensid"
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Tags: {
                        shape: "Sb9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        SubmitMultiRegionAccessPointRoutes: {
            http: {
                method: "PATCH",
                requestUri: "/v20180820/mrap/instances/{mrap+}/routes"
            },
            input: {
                locationName: "SubmitMultiRegionAccessPointRoutesRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "Mrap", "RouteUpdates" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    Mrap: {
                        location: "uri",
                        locationName: "mrap"
                    },
                    RouteUpdates: {
                        shape: "Sa1"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v20180820/tags/{resourceArn+}",
                responseCode: 204
            },
            input: {
                locationName: "TagResourceRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "ResourceArn", "Tags" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v20180820/tags/{resourceArn+}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "ResourceArn", "TagKeys" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        UpdateAccessGrantsLocation: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/accessgrantsinstance/location/{id}"
            },
            input: {
                locationName: "UpdateAccessGrantsLocationRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "AccountId", "AccessGrantsLocationId", "IAMRoleArn" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    AccessGrantsLocationId: {
                        location: "uri",
                        locationName: "id"
                    },
                    IAMRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedAt: {
                        type: "timestamp"
                    },
                    AccessGrantsLocationId: {},
                    AccessGrantsLocationArn: {},
                    LocationScope: {},
                    IAMRoleArn: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            httpChecksumRequired: true,
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        UpdateJobPriority: {
            http: {
                requestUri: "/v20180820/jobs/{id}/priority"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "JobId", "Priority" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "id"
                    },
                    Priority: {
                        location: "querystring",
                        locationName: "priority",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId", "Priority" ],
                members: {
                    JobId: {},
                    Priority: {
                        type: "integer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        UpdateJobStatus: {
            http: {
                requestUri: "/v20180820/jobs/{id}/status"
            },
            input: {
                type: "structure",
                required: [ "AccountId", "JobId", "RequestedJobStatus" ],
                members: {
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "id"
                    },
                    RequestedJobStatus: {
                        location: "querystring",
                        locationName: "requestedJobStatus"
                    },
                    StatusUpdateReason: {
                        location: "querystring",
                        locationName: "statusUpdateReason"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    Status: {},
                    StatusUpdateReason: {}
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        },
        UpdateStorageLensGroup: {
            http: {
                method: "PUT",
                requestUri: "/v20180820/storagelensgroup/{name}",
                responseCode: 204
            },
            input: {
                locationName: "UpdateStorageLensGroupRequest",
                xmlNamespace: {
                    uri: "http://awss3control.amazonaws.com/doc/2018-08-20/"
                },
                type: "structure",
                required: [ "Name", "AccountId", "StorageLensGroup" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "name"
                    },
                    AccountId: {
                        contextParam: {
                            name: "AccountId"
                        },
                        hostLabel: true,
                        location: "header",
                        locationName: "x-amz-account-id"
                    },
                    StorageLensGroup: {
                        shape: "S4h"
                    }
                }
            },
            endpoint: {
                hostPrefix: "{AccountId}."
            },
            staticContextParams: {
                RequiresAccountId: {
                    value: true
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                S3SubPrefix: {}
            }
        },
        S8: {
            type: "structure",
            members: {
                GranteeType: {},
                GranteeIdentifier: {}
            }
        },
        Se: {
            type: "list",
            member: {
                locationName: "Tag",
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sx: {
            type: "structure",
            required: [ "VpcId" ],
            members: {
                VpcId: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                BlockPublicAcls: {
                    locationName: "BlockPublicAcls",
                    type: "boolean"
                },
                IgnorePublicAcls: {
                    locationName: "IgnorePublicAcls",
                    type: "boolean"
                },
                BlockPublicPolicy: {
                    locationName: "BlockPublicPolicy",
                    type: "boolean"
                },
                RestrictPublicBuckets: {
                    locationName: "RestrictPublicBuckets",
                    type: "boolean"
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "SupportingAccessPoint", "TransformationConfigurations" ],
            members: {
                SupportingAccessPoint: {},
                CloudWatchMetricsEnabled: {
                    type: "boolean"
                },
                AllowedFeatures: {
                    type: "list",
                    member: {
                        locationName: "AllowedFeature"
                    }
                },
                TransformationConfigurations: {
                    type: "list",
                    member: {
                        locationName: "TransformationConfiguration",
                        type: "structure",
                        required: [ "Actions", "ContentTransformation" ],
                        members: {
                            Actions: {
                                type: "list",
                                member: {
                                    locationName: "Action"
                                }
                            },
                            ContentTransformation: {
                                type: "structure",
                                members: {
                                    AwsLambda: {
                                        type: "structure",
                                        required: [ "FunctionArn" ],
                                        members: {
                                            FunctionArn: {},
                                            FunctionPayload: {}
                                        }
                                    }
                                },
                                union: true
                            }
                        }
                    }
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                Value: {},
                Status: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                LambdaInvoke: {
                    type: "structure",
                    members: {
                        FunctionArn: {},
                        InvocationSchemaVersion: {},
                        UserArguments: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    }
                },
                S3PutObjectCopy: {
                    type: "structure",
                    members: {
                        TargetResource: {},
                        CannedAccessControlList: {},
                        AccessControlGrants: {
                            shape: "S2b"
                        },
                        MetadataDirective: {},
                        ModifiedSinceConstraint: {
                            type: "timestamp"
                        },
                        NewObjectMetadata: {
                            type: "structure",
                            members: {
                                CacheControl: {},
                                ContentDisposition: {},
                                ContentEncoding: {},
                                ContentLanguage: {},
                                UserMetadata: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                },
                                ContentLength: {
                                    type: "long"
                                },
                                ContentMD5: {},
                                ContentType: {},
                                HttpExpiresDate: {
                                    type: "timestamp"
                                },
                                RequesterCharged: {
                                    type: "boolean"
                                },
                                SSEAlgorithm: {}
                            }
                        },
                        NewObjectTagging: {
                            shape: "S2n"
                        },
                        RedirectLocation: {},
                        RequesterPays: {
                            type: "boolean"
                        },
                        StorageClass: {},
                        UnModifiedSinceConstraint: {
                            type: "timestamp"
                        },
                        SSEAwsKmsKeyId: {},
                        TargetKeyPrefix: {},
                        ObjectLockLegalHoldStatus: {},
                        ObjectLockMode: {},
                        ObjectLockRetainUntilDate: {
                            type: "timestamp"
                        },
                        BucketKeyEnabled: {
                            type: "boolean"
                        },
                        ChecksumAlgorithm: {}
                    }
                },
                S3PutObjectAcl: {
                    type: "structure",
                    members: {
                        AccessControlPolicy: {
                            type: "structure",
                            members: {
                                AccessControlList: {
                                    type: "structure",
                                    required: [ "Owner" ],
                                    members: {
                                        Owner: {
                                            type: "structure",
                                            members: {
                                                ID: {},
                                                DisplayName: {}
                                            }
                                        },
                                        Grants: {
                                            shape: "S2b"
                                        }
                                    }
                                },
                                CannedAccessControlList: {}
                            }
                        }
                    }
                },
                S3PutObjectTagging: {
                    type: "structure",
                    members: {
                        TagSet: {
                            shape: "S2n"
                        }
                    }
                },
                S3DeleteObjectTagging: {
                    type: "structure",
                    members: {}
                },
                S3InitiateRestoreObject: {
                    type: "structure",
                    members: {
                        ExpirationInDays: {
                            type: "integer"
                        },
                        GlacierJobTier: {}
                    }
                },
                S3PutObjectLegalHold: {
                    type: "structure",
                    required: [ "LegalHold" ],
                    members: {
                        LegalHold: {
                            type: "structure",
                            required: [ "Status" ],
                            members: {
                                Status: {}
                            }
                        }
                    }
                },
                S3PutObjectRetention: {
                    type: "structure",
                    required: [ "Retention" ],
                    members: {
                        BypassGovernanceRetention: {
                            type: "boolean"
                        },
                        Retention: {
                            type: "structure",
                            members: {
                                RetainUntilDate: {
                                    type: "timestamp"
                                },
                                Mode: {}
                            }
                        }
                    }
                },
                S3ReplicateObject: {
                    type: "structure",
                    members: {}
                }
            }
        },
        S2b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Grantee: {
                        type: "structure",
                        members: {
                            TypeIdentifier: {},
                            Identifier: {},
                            DisplayName: {}
                        }
                    },
                    Permission: {}
                }
            }
        },
        S2n: {
            type: "list",
            member: {
                shape: "S2o"
            }
        },
        S2o: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        S3a: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Bucket: {},
                Format: {},
                Enabled: {
                    type: "boolean"
                },
                Prefix: {},
                ReportScope: {}
            }
        },
        S3f: {
            type: "structure",
            required: [ "Spec", "Location" ],
            members: {
                Spec: {
                    type: "structure",
                    required: [ "Format" ],
                    members: {
                        Format: {},
                        Fields: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                Location: {
                    shape: "S3k"
                }
            }
        },
        S3k: {
            type: "structure",
            required: [ "ObjectArn", "ETag" ],
            members: {
                ObjectArn: {},
                ObjectVersionId: {},
                ETag: {}
            }
        },
        S3p: {
            type: "structure",
            members: {
                S3JobManifestGenerator: {
                    type: "structure",
                    required: [ "SourceBucket", "EnableManifestOutput" ],
                    members: {
                        ExpectedBucketOwner: {},
                        SourceBucket: {},
                        ManifestOutputLocation: {
                            type: "structure",
                            required: [ "Bucket", "ManifestFormat" ],
                            members: {
                                ExpectedManifestBucketOwner: {},
                                Bucket: {},
                                ManifestPrefix: {},
                                ManifestEncryption: {
                                    type: "structure",
                                    members: {
                                        SSES3: {
                                            locationName: "SSE-S3",
                                            type: "structure",
                                            members: {}
                                        },
                                        SSEKMS: {
                                            locationName: "SSE-KMS",
                                            type: "structure",
                                            required: [ "KeyId" ],
                                            members: {
                                                KeyId: {}
                                            }
                                        }
                                    }
                                },
                                ManifestFormat: {}
                            }
                        },
                        Filter: {
                            type: "structure",
                            members: {
                                EligibleForReplication: {
                                    type: "boolean"
                                },
                                CreatedAfter: {
                                    type: "timestamp"
                                },
                                CreatedBefore: {
                                    type: "timestamp"
                                },
                                ObjectReplicationStatuses: {
                                    type: "list",
                                    member: {}
                                },
                                KeyNameConstraint: {
                                    type: "structure",
                                    members: {
                                        MatchAnyPrefix: {
                                            shape: "S42"
                                        },
                                        MatchAnySuffix: {
                                            shape: "S42"
                                        },
                                        MatchAnySubstring: {
                                            shape: "S42"
                                        }
                                    }
                                },
                                ObjectSizeGreaterThanBytes: {
                                    type: "long"
                                },
                                ObjectSizeLessThanBytes: {
                                    type: "long"
                                },
                                MatchAnyStorageClass: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        EnableManifestOutput: {
                            type: "boolean"
                        }
                    }
                }
            },
            union: true
        },
        S42: {
            type: "list",
            member: {}
        },
        S4a: {
            type: "structure",
            required: [ "Name", "Regions" ],
            members: {
                Name: {},
                PublicAccessBlock: {
                    shape: "Sz"
                },
                Regions: {
                    type: "list",
                    member: {
                        locationName: "Region",
                        type: "structure",
                        required: [ "Bucket" ],
                        members: {
                            Bucket: {},
                            BucketAccountId: {}
                        }
                    }
                }
            }
        },
        S4h: {
            type: "structure",
            required: [ "Name", "Filter" ],
            members: {
                Name: {},
                Filter: {
                    type: "structure",
                    members: {
                        MatchAnyPrefix: {
                            shape: "S4k"
                        },
                        MatchAnySuffix: {
                            shape: "S4m"
                        },
                        MatchAnyTag: {
                            shape: "S4o"
                        },
                        MatchObjectAge: {
                            shape: "S4p"
                        },
                        MatchObjectSize: {
                            shape: "S4r"
                        },
                        And: {
                            type: "structure",
                            members: {
                                MatchAnyPrefix: {
                                    shape: "S4k"
                                },
                                MatchAnySuffix: {
                                    shape: "S4m"
                                },
                                MatchAnyTag: {
                                    shape: "S4o"
                                },
                                MatchObjectAge: {
                                    shape: "S4p"
                                },
                                MatchObjectSize: {
                                    shape: "S4r"
                                }
                            }
                        },
                        Or: {
                            type: "structure",
                            members: {
                                MatchAnyPrefix: {
                                    shape: "S4k"
                                },
                                MatchAnySuffix: {
                                    shape: "S4m"
                                },
                                MatchAnyTag: {
                                    shape: "S4o"
                                },
                                MatchObjectAge: {
                                    shape: "S4p"
                                },
                                MatchObjectSize: {
                                    shape: "S4r"
                                }
                            }
                        }
                    }
                },
                StorageLensGroupArn: {}
            }
        },
        S4k: {
            type: "list",
            member: {
                locationName: "Prefix"
            }
        },
        S4m: {
            type: "list",
            member: {
                locationName: "Suffix"
            }
        },
        S4o: {
            type: "list",
            member: {
                shape: "S2o",
                locationName: "Tag"
            }
        },
        S4p: {
            type: "structure",
            members: {
                DaysGreaterThan: {
                    type: "integer"
                },
                DaysLessThan: {
                    type: "integer"
                }
            }
        },
        S4r: {
            type: "structure",
            members: {
                BytesGreaterThan: {
                    type: "long"
                },
                BytesLessThan: {
                    type: "long"
                }
            }
        },
        S5c: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {}
            }
        },
        S5p: {
            type: "structure",
            members: {
                TotalNumberOfTasks: {
                    type: "long"
                },
                NumberOfTasksSucceeded: {
                    type: "long"
                },
                NumberOfTasksFailed: {
                    type: "long"
                },
                Timers: {
                    type: "structure",
                    members: {
                        ElapsedTimeInActiveSeconds: {
                            type: "long"
                        }
                    }
                }
            }
        },
        S6b: {
            type: "structure",
            required: [ "Name", "Policy" ],
            members: {
                Name: {},
                Policy: {}
            }
        },
        S7d: {
            type: "structure",
            members: {
                IsPublic: {
                    locationName: "IsPublic",
                    type: "boolean"
                }
            }
        },
        S7m: {
            type: "list",
            member: {
                locationName: "Rule",
                type: "structure",
                required: [ "Status" ],
                members: {
                    Expiration: {
                        type: "structure",
                        members: {
                            Date: {
                                type: "timestamp"
                            },
                            Days: {
                                type: "integer"
                            },
                            ExpiredObjectDeleteMarker: {
                                type: "boolean"
                            }
                        }
                    },
                    ID: {},
                    Filter: {
                        type: "structure",
                        members: {
                            Prefix: {},
                            Tag: {
                                shape: "S2o"
                            },
                            And: {
                                type: "structure",
                                members: {
                                    Prefix: {},
                                    Tags: {
                                        shape: "S2n"
                                    },
                                    ObjectSizeGreaterThan: {
                                        type: "long"
                                    },
                                    ObjectSizeLessThan: {
                                        type: "long"
                                    }
                                }
                            },
                            ObjectSizeGreaterThan: {
                                type: "long"
                            },
                            ObjectSizeLessThan: {
                                type: "long"
                            }
                        }
                    },
                    Status: {},
                    Transitions: {
                        type: "list",
                        member: {
                            locationName: "Transition",
                            type: "structure",
                            members: {
                                Date: {
                                    type: "timestamp"
                                },
                                Days: {
                                    type: "integer"
                                },
                                StorageClass: {}
                            }
                        }
                    },
                    NoncurrentVersionTransitions: {
                        type: "list",
                        member: {
                            locationName: "NoncurrentVersionTransition",
                            type: "structure",
                            members: {
                                NoncurrentDays: {
                                    type: "integer"
                                },
                                StorageClass: {}
                            }
                        }
                    },
                    NoncurrentVersionExpiration: {
                        type: "structure",
                        members: {
                            NoncurrentDays: {
                                type: "integer"
                            },
                            NewerNoncurrentVersions: {
                                type: "integer"
                            }
                        }
                    },
                    AbortIncompleteMultipartUpload: {
                        type: "structure",
                        members: {
                            DaysAfterInitiation: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S89: {
            type: "structure",
            required: [ "Role", "Rules" ],
            members: {
                Role: {},
                Rules: {
                    type: "list",
                    member: {
                        locationName: "Rule",
                        type: "structure",
                        required: [ "Status", "Destination", "Bucket" ],
                        members: {
                            ID: {},
                            Priority: {
                                type: "integer"
                            },
                            Prefix: {
                                deprecated: true,
                                deprecatedMessage: "Prefix has been deprecated"
                            },
                            Filter: {
                                type: "structure",
                                members: {
                                    Prefix: {},
                                    Tag: {
                                        shape: "S2o"
                                    },
                                    And: {
                                        type: "structure",
                                        members: {
                                            Prefix: {},
                                            Tags: {
                                                shape: "S2n"
                                            }
                                        }
                                    }
                                }
                            },
                            Status: {},
                            SourceSelectionCriteria: {
                                type: "structure",
                                members: {
                                    SseKmsEncryptedObjects: {
                                        type: "structure",
                                        required: [ "Status" ],
                                        members: {
                                            Status: {}
                                        }
                                    },
                                    ReplicaModifications: {
                                        type: "structure",
                                        required: [ "Status" ],
                                        members: {
                                            Status: {}
                                        }
                                    }
                                }
                            },
                            ExistingObjectReplication: {
                                type: "structure",
                                required: [ "Status" ],
                                members: {
                                    Status: {}
                                }
                            },
                            Destination: {
                                type: "structure",
                                required: [ "Bucket" ],
                                members: {
                                    Account: {},
                                    Bucket: {},
                                    ReplicationTime: {
                                        type: "structure",
                                        required: [ "Status", "Time" ],
                                        members: {
                                            Status: {},
                                            Time: {
                                                shape: "S8s"
                                            }
                                        }
                                    },
                                    AccessControlTranslation: {
                                        type: "structure",
                                        required: [ "Owner" ],
                                        members: {
                                            Owner: {}
                                        }
                                    },
                                    EncryptionConfiguration: {
                                        type: "structure",
                                        members: {
                                            ReplicaKmsKeyID: {}
                                        }
                                    },
                                    Metrics: {
                                        type: "structure",
                                        required: [ "Status" ],
                                        members: {
                                            Status: {},
                                            EventThreshold: {
                                                shape: "S8s"
                                            }
                                        }
                                    },
                                    StorageClass: {}
                                }
                            },
                            DeleteMarkerReplication: {
                                type: "structure",
                                required: [ "Status" ],
                                members: {
                                    Status: {}
                                }
                            },
                            Bucket: {}
                        }
                    }
                }
            }
        },
        S8s: {
            type: "structure",
            members: {
                Minutes: {
                    type: "integer"
                }
            }
        },
        S9m: {
            type: "structure",
            members: {
                Name: {},
                Alias: {},
                CreatedAt: {
                    type: "timestamp"
                },
                PublicAccessBlock: {
                    shape: "Sz"
                },
                Status: {},
                Regions: {
                    type: "list",
                    member: {
                        locationName: "Region",
                        type: "structure",
                        members: {
                            Bucket: {},
                            Region: {},
                            BucketAccountId: {}
                        }
                    }
                }
            }
        },
        Sa1: {
            type: "list",
            member: {
                locationName: "Route",
                type: "structure",
                required: [ "TrafficDialPercentage" ],
                members: {
                    Bucket: {},
                    Region: {},
                    TrafficDialPercentage: {
                        type: "integer"
                    }
                }
            }
        },
        Sa8: {
            type: "structure",
            required: [ "Id", "AccountLevel", "IsEnabled" ],
            members: {
                Id: {},
                AccountLevel: {
                    type: "structure",
                    required: [ "BucketLevel" ],
                    members: {
                        ActivityMetrics: {
                            shape: "Saa"
                        },
                        BucketLevel: {
                            type: "structure",
                            members: {
                                ActivityMetrics: {
                                    shape: "Saa"
                                },
                                PrefixLevel: {
                                    type: "structure",
                                    required: [ "StorageMetrics" ],
                                    members: {
                                        StorageMetrics: {
                                            type: "structure",
                                            members: {
                                                IsEnabled: {
                                                    type: "boolean"
                                                },
                                                SelectionCriteria: {
                                                    type: "structure",
                                                    members: {
                                                        Delimiter: {},
                                                        MaxDepth: {
                                                            type: "integer"
                                                        },
                                                        MinStorageBytesPercentage: {
                                                            type: "double"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                AdvancedCostOptimizationMetrics: {
                                    shape: "Saj"
                                },
                                AdvancedDataProtectionMetrics: {
                                    shape: "Sak"
                                },
                                DetailedStatusCodesMetrics: {
                                    shape: "Sal"
                                }
                            }
                        },
                        AdvancedCostOptimizationMetrics: {
                            shape: "Saj"
                        },
                        AdvancedDataProtectionMetrics: {
                            shape: "Sak"
                        },
                        DetailedStatusCodesMetrics: {
                            shape: "Sal"
                        },
                        StorageLensGroupLevel: {
                            type: "structure",
                            members: {
                                SelectionCriteria: {
                                    type: "structure",
                                    members: {
                                        Include: {
                                            type: "list",
                                            member: {
                                                locationName: "Arn"
                                            }
                                        },
                                        Exclude: {
                                            type: "list",
                                            member: {
                                                locationName: "Arn"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Include: {
                    type: "structure",
                    members: {
                        Buckets: {
                            shape: "Sar"
                        },
                        Regions: {
                            shape: "Sas"
                        }
                    }
                },
                Exclude: {
                    type: "structure",
                    members: {
                        Buckets: {
                            shape: "Sar"
                        },
                        Regions: {
                            shape: "Sas"
                        }
                    }
                },
                DataExport: {
                    type: "structure",
                    members: {
                        S3BucketDestination: {
                            type: "structure",
                            required: [ "Format", "OutputSchemaVersion", "AccountId", "Arn" ],
                            members: {
                                Format: {},
                                OutputSchemaVersion: {},
                                AccountId: {},
                                Arn: {},
                                Prefix: {},
                                Encryption: {
                                    type: "structure",
                                    members: {
                                        SSES3: {
                                            locationName: "SSE-S3",
                                            type: "structure",
                                            members: {}
                                        },
                                        SSEKMS: {
                                            locationName: "SSE-KMS",
                                            type: "structure",
                                            required: [ "KeyId" ],
                                            members: {
                                                KeyId: {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        CloudWatchMetrics: {
                            type: "structure",
                            required: [ "IsEnabled" ],
                            members: {
                                IsEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                IsEnabled: {
                    type: "boolean"
                },
                AwsOrg: {
                    type: "structure",
                    required: [ "Arn" ],
                    members: {
                        Arn: {}
                    }
                },
                StorageLensArn: {}
            }
        },
        Saa: {
            type: "structure",
            members: {
                IsEnabled: {
                    type: "boolean"
                }
            }
        },
        Saj: {
            type: "structure",
            members: {
                IsEnabled: {
                    type: "boolean"
                }
            }
        },
        Sak: {
            type: "structure",
            members: {
                IsEnabled: {
                    type: "boolean"
                }
            }
        },
        Sal: {
            type: "structure",
            members: {
                IsEnabled: {
                    type: "boolean"
                }
            }
        },
        Sar: {
            type: "list",
            member: {
                locationName: "Arn"
            }
        },
        Sas: {
            type: "list",
            member: {
                locationName: "Region"
            }
        },
        Sb9: {
            type: "list",
            member: {
                locationName: "Tag",
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    clientContextParams: {
        UseArnRegion: {
            documentation: "Enables this client to use an ARN's region when constructing an endpoint instead of the client's configured region.",
            type: "boolean"
        }
    },
    paginators: {
        ListAccessGrants: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAccessGrantsInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAccessGrantsLocations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAccessPoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAccessPointsForObjectLambda: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ObjectLambdaAccessPointList"
        },
        ListJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMultiRegionAccessPoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRegionalBuckets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListStorageLensConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken"
        },
        ListStorageLensGroups: {
            input_token: "NextToken",
            output_token: "NextToken"
        }
    }
};

