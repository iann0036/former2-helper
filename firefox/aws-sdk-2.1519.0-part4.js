AWS.apiLoader.services["translate"] = {};

AWS.Translate = AWS.Service.defineService("translate", [ "2017-07-01" ]);

AWS.apiLoader.services["translate"]["2017-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-01",
        endpointPrefix: "translate",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Translate",
        serviceId: "Translate",
        signatureVersion: "v4",
        signingName: "translate",
        targetPrefix: "AWSShineFrontendService_20170701",
        uid: "translate-2017-07-01"
    },
    operations: {
        CreateParallelData: {
            input: {
                type: "structure",
                required: [ "Name", "ParallelDataConfig", "ClientToken" ],
                members: {
                    Name: {},
                    Description: {},
                    ParallelDataConfig: {
                        shape: "S4"
                    },
                    EncryptionKey: {
                        shape: "S7"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Status: {}
                }
            }
        },
        DeleteParallelData: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Status: {}
                }
            }
        },
        DeleteTerminology: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DescribeTextTranslationJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TextTranslationJobProperties: {
                        shape: "Sn"
                    }
                }
            }
        },
        GetParallelData: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ParallelDataProperties: {
                        shape: "S17"
                    },
                    DataLocation: {
                        shape: "S1b"
                    },
                    AuxiliaryDataLocation: {
                        shape: "S1b"
                    },
                    LatestUpdateAttemptAuxiliaryDataLocation: {
                        shape: "S1b"
                    }
                }
            }
        },
        GetTerminology: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    TerminologyDataFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminologyProperties: {
                        shape: "S1g"
                    },
                    TerminologyDataLocation: {
                        shape: "S1j"
                    },
                    AuxiliaryDataLocation: {
                        shape: "S1j"
                    }
                }
            }
        },
        ImportTerminology: {
            input: {
                type: "structure",
                required: [ "Name", "MergeStrategy", "TerminologyData" ],
                members: {
                    Name: {},
                    MergeStrategy: {},
                    Description: {},
                    TerminologyData: {
                        type: "structure",
                        required: [ "File", "Format" ],
                        members: {
                            File: {
                                type: "blob",
                                sensitive: true
                            },
                            Format: {},
                            Directionality: {}
                        }
                    },
                    EncryptionKey: {
                        shape: "S7"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminologyProperties: {
                        shape: "S1g"
                    },
                    AuxiliaryDataLocation: {
                        shape: "S1j"
                    }
                }
            }
        },
        ListLanguages: {
            input: {
                type: "structure",
                members: {
                    DisplayLanguageCode: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Languages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "LanguageName", "LanguageCode" ],
                            members: {
                                LanguageName: {},
                                LanguageCode: {}
                            }
                        }
                    },
                    DisplayLanguageCode: {},
                    NextToken: {}
                }
            }
        },
        ListParallelData: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParallelDataPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S17"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ListTerminologies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminologyPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S1g"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTextTranslationJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmittedBeforeTime: {
                                type: "timestamp"
                            },
                            SubmittedAfterTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TextTranslationJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        StartTextTranslationJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "SourceLanguageCode", "TargetLanguageCodes", "ClientToken" ],
                members: {
                    JobName: {},
                    InputDataConfig: {
                        shape: "Sx"
                    },
                    OutputDataConfig: {
                        shape: "Sz"
                    },
                    DataAccessRoleArn: {},
                    SourceLanguageCode: {},
                    TargetLanguageCodes: {
                        shape: "St"
                    },
                    TerminologyNames: {
                        shape: "Su"
                    },
                    ParallelDataNames: {
                        shape: "Su"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Settings: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopTextTranslationJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TranslateDocument: {
            input: {
                type: "structure",
                required: [ "Document", "SourceLanguageCode", "TargetLanguageCode" ],
                members: {
                    Document: {
                        type: "structure",
                        required: [ "Content", "ContentType" ],
                        members: {
                            Content: {
                                type: "blob",
                                sensitive: true
                            },
                            ContentType: {}
                        }
                    },
                    TerminologyNames: {
                        shape: "Su"
                    },
                    SourceLanguageCode: {},
                    TargetLanguageCode: {},
                    Settings: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TranslatedDocument", "SourceLanguageCode", "TargetLanguageCode" ],
                members: {
                    TranslatedDocument: {
                        type: "structure",
                        required: [ "Content" ],
                        members: {
                            Content: {
                                type: "blob",
                                sensitive: true
                            }
                        }
                    },
                    SourceLanguageCode: {},
                    TargetLanguageCode: {},
                    AppliedTerminologies: {
                        shape: "S2m"
                    },
                    AppliedSettings: {
                        shape: "S11"
                    }
                }
            }
        },
        TranslateText: {
            input: {
                type: "structure",
                required: [ "Text", "SourceLanguageCode", "TargetLanguageCode" ],
                members: {
                    Text: {},
                    TerminologyNames: {
                        shape: "Su"
                    },
                    SourceLanguageCode: {},
                    TargetLanguageCode: {},
                    Settings: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TranslatedText", "SourceLanguageCode", "TargetLanguageCode" ],
                members: {
                    TranslatedText: {},
                    SourceLanguageCode: {},
                    TargetLanguageCode: {},
                    AppliedTerminologies: {
                        shape: "S2m"
                    },
                    AppliedSettings: {
                        shape: "S11"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateParallelData: {
            input: {
                type: "structure",
                required: [ "Name", "ParallelDataConfig", "ClientToken" ],
                members: {
                    Name: {},
                    Description: {},
                    ParallelDataConfig: {
                        shape: "S4"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Status: {},
                    LatestUpdateAttemptStatus: {},
                    LatestUpdateAttemptAt: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                S3Uri: {},
                Format: {}
            }
        },
        S7: {
            type: "structure",
            required: [ "Type", "Id" ],
            members: {
                Type: {},
                Id: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sn: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                JobDetails: {
                    type: "structure",
                    members: {
                        TranslatedDocumentsCount: {
                            type: "integer"
                        },
                        DocumentsWithErrorsCount: {
                            type: "integer"
                        },
                        InputDocumentsCount: {
                            type: "integer"
                        }
                    }
                },
                SourceLanguageCode: {},
                TargetLanguageCodes: {
                    shape: "St"
                },
                TerminologyNames: {
                    shape: "Su"
                },
                ParallelDataNames: {
                    shape: "Su"
                },
                Message: {},
                SubmittedTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "Sx"
                },
                OutputDataConfig: {
                    shape: "Sz"
                },
                DataAccessRoleArn: {},
                Settings: {
                    shape: "S11"
                }
            }
        },
        St: {
            type: "list",
            member: {}
        },
        Su: {
            type: "list",
            member: {}
        },
        Sx: {
            type: "structure",
            required: [ "S3Uri", "ContentType" ],
            members: {
                S3Uri: {},
                ContentType: {}
            }
        },
        Sz: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {},
                EncryptionKey: {
                    shape: "S7"
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                Formality: {},
                Profanity: {},
                Brevity: {}
            }
        },
        S17: {
            type: "structure",
            members: {
                Name: {},
                Arn: {},
                Description: {},
                Status: {},
                SourceLanguageCode: {},
                TargetLanguageCodes: {
                    shape: "S19"
                },
                ParallelDataConfig: {
                    shape: "S4"
                },
                Message: {},
                ImportedDataSize: {
                    type: "long"
                },
                ImportedRecordCount: {
                    type: "long"
                },
                FailedRecordCount: {
                    type: "long"
                },
                SkippedRecordCount: {
                    type: "long"
                },
                EncryptionKey: {
                    shape: "S7"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                LastUpdatedAt: {
                    type: "timestamp"
                },
                LatestUpdateAttemptStatus: {},
                LatestUpdateAttemptAt: {
                    type: "timestamp"
                }
            }
        },
        S19: {
            type: "list",
            member: {}
        },
        S1b: {
            type: "structure",
            required: [ "RepositoryType", "Location" ],
            members: {
                RepositoryType: {},
                Location: {}
            }
        },
        S1g: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                Arn: {},
                SourceLanguageCode: {},
                TargetLanguageCodes: {
                    shape: "S19"
                },
                EncryptionKey: {
                    shape: "S7"
                },
                SizeBytes: {
                    type: "integer"
                },
                TermCount: {
                    type: "integer"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                LastUpdatedAt: {
                    type: "timestamp"
                },
                Directionality: {},
                Message: {},
                SkippedTermCount: {
                    type: "integer"
                },
                Format: {}
            }
        },
        S1j: {
            type: "structure",
            required: [ "RepositoryType", "Location" ],
            members: {
                RepositoryType: {},
                Location: {}
            }
        },
        S2m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Terms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceText: {},
                                TargetText: {}
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListLanguages: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListParallelData: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTerminologies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTextTranslationJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["resourcegroups"] = {};

AWS.ResourceGroups = AWS.Service.defineService("resourcegroups", [ "2017-11-27" ]);

AWS.apiLoader.services["resourcegroups"]["2017-11-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-27",
        endpointPrefix: "resource-groups",
        protocol: "rest-json",
        serviceAbbreviation: "Resource Groups",
        serviceFullName: "AWS Resource Groups",
        serviceId: "Resource Groups",
        signatureVersion: "v4",
        signingName: "resource-groups",
        uid: "resource-groups-2017-11-27"
    },
    operations: {
        CreateGroup: {
            http: {
                requestUri: "/groups"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    ResourceQuery: {
                        shape: "S4"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    Configuration: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Sj"
                    },
                    ResourceQuery: {
                        shape: "S4"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    GroupConfiguration: {
                        shape: "Sl"
                    }
                }
            }
        },
        DeleteGroup: {
            http: {
                requestUri: "/delete-group"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Sj"
                    }
                }
            }
        },
        GetAccountSettings: {
            http: {
                requestUri: "/get-account-settings"
            },
            output: {
                type: "structure",
                members: {
                    AccountSettings: {
                        shape: "Ss"
                    }
                }
            }
        },
        GetGroup: {
            http: {
                requestUri: "/get-group"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Sj"
                    }
                }
            }
        },
        GetGroupConfiguration: {
            http: {
                requestUri: "/get-group-configuration"
            },
            input: {
                type: "structure",
                members: {
                    Group: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupConfiguration: {
                        shape: "Sl"
                    }
                }
            }
        },
        GetGroupQuery: {
            http: {
                requestUri: "/get-group-query"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupQuery: {
                        shape: "S12"
                    }
                }
            }
        },
        GetTags: {
            http: {
                method: "GET",
                requestUri: "/resources/{Arn}/tags"
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        GroupResources: {
            http: {
                requestUri: "/group-resources"
            },
            input: {
                type: "structure",
                required: [ "Group", "ResourceArns" ],
                members: {
                    Group: {},
                    ResourceArns: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Succeeded: {
                        shape: "S16"
                    },
                    Failed: {
                        shape: "S19"
                    },
                    Pending: {
                        shape: "S1d"
                    }
                }
            }
        },
        ListGroupResources: {
            http: {
                requestUri: "/list-group-resources"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Identifier: {
                                    shape: "S1q"
                                },
                                Status: {
                                    type: "structure",
                                    members: {
                                        Name: {}
                                    }
                                }
                            }
                        }
                    },
                    ResourceIdentifiers: {
                        shape: "S1u",
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Resources instead."
                    },
                    NextToken: {},
                    QueryErrors: {
                        shape: "S1v"
                    }
                }
            }
        },
        ListGroups: {
            http: {
                requestUri: "/groups-list"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupIdentifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupName: {},
                                GroupArn: {}
                            }
                        }
                    },
                    Groups: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use GroupIdentifiers instead.",
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutGroupConfiguration: {
            http: {
                requestUri: "/put-group-configuration",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Group: {},
                    Configuration: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchResources: {
            http: {
                requestUri: "/resources/search"
            },
            input: {
                type: "structure",
                required: [ "ResourceQuery" ],
                members: {
                    ResourceQuery: {
                        shape: "S4"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceIdentifiers: {
                        shape: "S1u"
                    },
                    NextToken: {},
                    QueryErrors: {
                        shape: "S1v"
                    }
                }
            }
        },
        Tag: {
            http: {
                method: "PUT",
                requestUri: "/resources/{Arn}/tags"
            },
            input: {
                type: "structure",
                required: [ "Arn", "Tags" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        UngroupResources: {
            http: {
                requestUri: "/ungroup-resources"
            },
            input: {
                type: "structure",
                required: [ "Group", "ResourceArns" ],
                members: {
                    Group: {},
                    ResourceArns: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Succeeded: {
                        shape: "S16"
                    },
                    Failed: {
                        shape: "S19"
                    },
                    Pending: {
                        shape: "S1d"
                    }
                }
            }
        },
        Untag: {
            http: {
                method: "PATCH",
                requestUri: "/resources/{Arn}/tags"
            },
            input: {
                type: "structure",
                required: [ "Arn", "Keys" ],
                members: {
                    Arn: {
                        location: "uri",
                        locationName: "Arn"
                    },
                    Keys: {
                        shape: "S2i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Keys: {
                        shape: "S2i"
                    }
                }
            }
        },
        UpdateAccountSettings: {
            http: {
                requestUri: "/update-account-settings"
            },
            input: {
                type: "structure",
                members: {
                    GroupLifecycleEventsDesiredStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountSettings: {
                        shape: "Ss"
                    }
                }
            }
        },
        UpdateGroup: {
            http: {
                requestUri: "/update-group"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Sj"
                    }
                }
            }
        },
        UpdateGroupQuery: {
            http: {
                requestUri: "/update-group-query"
            },
            input: {
                type: "structure",
                required: [ "ResourceQuery" ],
                members: {
                    GroupName: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use Group instead."
                    },
                    Group: {},
                    ResourceQuery: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupQuery: {
                        shape: "S12"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "Type", "Query" ],
            members: {
                Type: {},
                Query: {}
            }
        },
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    Type: {},
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "GroupArn", "Name" ],
            members: {
                GroupArn: {},
                Name: {},
                Description: {}
            }
        },
        Sl: {
            type: "structure",
            members: {
                Configuration: {
                    shape: "Sa"
                },
                ProposedConfiguration: {
                    shape: "Sa"
                },
                Status: {},
                FailureReason: {}
            }
        },
        Ss: {
            type: "structure",
            members: {
                GroupLifecycleEventsDesiredStatus: {},
                GroupLifecycleEventsStatus: {},
                GroupLifecycleEventsStatusMessage: {}
            }
        },
        S12: {
            type: "structure",
            required: [ "GroupName", "ResourceQuery" ],
            members: {
                GroupName: {},
                ResourceQuery: {
                    shape: "S4"
                }
            }
        },
        S16: {
            type: "list",
            member: {}
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    ErrorMessage: {},
                    ErrorCode: {}
                }
            }
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceArn: {}
                }
            }
        },
        S1q: {
            type: "structure",
            members: {
                ResourceArn: {},
                ResourceType: {}
            }
        },
        S1u: {
            type: "list",
            member: {
                shape: "S1q"
            }
        },
        S1v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ErrorCode: {},
                    Message: {}
                }
            }
        },
        S2i: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListGroupResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: [ "ResourceIdentifiers", "Resources" ]
        },
        ListGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GroupIdentifiers"
        },
        SearchResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceIdentifiers"
        }
    }
};

AWS.apiLoader.services["alexaforbusiness"] = {};

AWS.AlexaForBusiness = AWS.Service.defineService("alexaforbusiness", [ "2017-11-09" ]);

AWS.apiLoader.services["alexaforbusiness"]["2017-11-09"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-09",
        endpointPrefix: "a4b",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Alexa For Business",
        serviceId: "Alexa For Business",
        signatureVersion: "v4",
        targetPrefix: "AlexaForBusiness",
        uid: "alexaforbusiness-2017-11-09"
    },
    operations: {
        ApproveSkill: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        AssociateContactWithAddressBook: {
            input: {
                type: "structure",
                required: [ "ContactArn", "AddressBookArn" ],
                members: {
                    ContactArn: {},
                    AddressBookArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        AssociateDeviceWithNetworkProfile: {
            input: {
                type: "structure",
                required: [ "DeviceArn", "NetworkProfileArn" ],
                members: {
                    DeviceArn: {},
                    NetworkProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        AssociateDeviceWithRoom: {
            input: {
                type: "structure",
                members: {
                    DeviceArn: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        AssociateSkillGroupWithRoom: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        AssociateSkillWithSkillGroup: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillGroupArn: {},
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        AssociateSkillWithUsers: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateAddressBook: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressBookArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateBusinessReportSchedule: {
            input: {
                type: "structure",
                required: [ "Format", "ContentRange" ],
                members: {
                    ScheduleName: {},
                    S3BucketName: {},
                    S3KeyPrefix: {},
                    Format: {},
                    ContentRange: {
                        shape: "Sv"
                    },
                    Recurrence: {
                        shape: "Sx"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ScheduleArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateConferenceProvider: {
            input: {
                type: "structure",
                required: [ "ConferenceProviderName", "ConferenceProviderType", "MeetingSetting" ],
                members: {
                    ConferenceProviderName: {},
                    ConferenceProviderType: {},
                    IPDialIn: {
                        shape: "S13"
                    },
                    PSTNDialIn: {
                        shape: "S16"
                    },
                    MeetingSetting: {
                        shape: "S1b"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConferenceProviderArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateContact: {
            input: {
                type: "structure",
                required: [ "FirstName" ],
                members: {
                    DisplayName: {},
                    FirstName: {},
                    LastName: {},
                    PhoneNumber: {
                        shape: "S1g"
                    },
                    PhoneNumbers: {
                        shape: "S1h"
                    },
                    SipAddresses: {
                        shape: "S1k"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateGatewayGroup: {
            input: {
                type: "structure",
                required: [ "Name", "ClientRequestToken" ],
                members: {
                    Name: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayGroupArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateNetworkProfile: {
            input: {
                type: "structure",
                required: [ "NetworkProfileName", "Ssid", "SecurityType", "ClientRequestToken" ],
                members: {
                    NetworkProfileName: {},
                    Description: {},
                    Ssid: {},
                    SecurityType: {},
                    EapMethod: {},
                    CurrentPassword: {
                        shape: "S1z"
                    },
                    NextPassword: {
                        shape: "S20"
                    },
                    CertificateAuthorityArn: {},
                    TrustAnchors: {
                        shape: "S21"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkProfileArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateProfile: {
            input: {
                type: "structure",
                required: [ "ProfileName", "Timezone", "Address", "DistanceUnit", "TemperatureUnit", "WakeWord" ],
                members: {
                    ProfileName: {},
                    Timezone: {},
                    Address: {},
                    DistanceUnit: {},
                    TemperatureUnit: {},
                    WakeWord: {},
                    Locale: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    SetupModeDisabled: {
                        type: "boolean"
                    },
                    MaxVolumeLimit: {
                        type: "integer"
                    },
                    PSTNEnabled: {
                        type: "boolean"
                    },
                    DataRetentionOptIn: {
                        type: "boolean"
                    },
                    MeetingRoomConfiguration: {
                        type: "structure",
                        members: {
                            RoomUtilizationMetricsEnabled: {
                                type: "boolean"
                            },
                            EndOfMeetingReminder: {
                                type: "structure",
                                required: [ "ReminderAtMinutes", "ReminderType", "Enabled" ],
                                members: {
                                    ReminderAtMinutes: {
                                        shape: "S2g"
                                    },
                                    ReminderType: {},
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            InstantBooking: {
                                type: "structure",
                                required: [ "DurationInMinutes", "Enabled" ],
                                members: {
                                    DurationInMinutes: {
                                        type: "integer"
                                    },
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            RequireCheckIn: {
                                type: "structure",
                                required: [ "ReleaseAfterMinutes", "Enabled" ],
                                members: {
                                    ReleaseAfterMinutes: {
                                        type: "integer"
                                    },
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            ProactiveJoin: {
                                type: "structure",
                                required: [ "EnabledByMotion" ],
                                members: {
                                    EnabledByMotion: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProfileArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateRoom: {
            input: {
                type: "structure",
                required: [ "RoomName" ],
                members: {
                    RoomName: {},
                    Description: {},
                    ProfileArn: {},
                    ProviderCalendarId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateSkillGroup: {
            input: {
                type: "structure",
                required: [ "SkillGroupName" ],
                members: {
                    SkillGroupName: {},
                    Description: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillGroupArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    UserId: {},
                    FirstName: {},
                    LastName: {},
                    Email: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteAddressBook: {
            input: {
                type: "structure",
                required: [ "AddressBookArn" ],
                members: {
                    AddressBookArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteBusinessReportSchedule: {
            input: {
                type: "structure",
                required: [ "ScheduleArn" ],
                members: {
                    ScheduleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteConferenceProvider: {
            input: {
                type: "structure",
                required: [ "ConferenceProviderArn" ],
                members: {
                    ConferenceProviderArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteContact: {
            input: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteDevice: {
            input: {
                type: "structure",
                required: [ "DeviceArn" ],
                members: {
                    DeviceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteDeviceUsageData: {
            input: {
                type: "structure",
                required: [ "DeviceArn", "DeviceUsageType" ],
                members: {
                    DeviceArn: {},
                    DeviceUsageType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteGatewayGroup: {
            input: {
                type: "structure",
                required: [ "GatewayGroupArn" ],
                members: {
                    GatewayGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteNetworkProfile: {
            input: {
                type: "structure",
                required: [ "NetworkProfileArn" ],
                members: {
                    NetworkProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteProfile: {
            input: {
                type: "structure",
                members: {
                    ProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteRoom: {
            input: {
                type: "structure",
                members: {
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteRoomSkillParameter: {
            input: {
                type: "structure",
                required: [ "SkillId", "ParameterKey" ],
                members: {
                    RoomArn: {},
                    SkillId: {},
                    ParameterKey: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteSkillAuthorization: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteSkillGroup: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "EnrollmentId" ],
                members: {
                    UserArn: {},
                    EnrollmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DisassociateContactFromAddressBook: {
            input: {
                type: "structure",
                required: [ "ContactArn", "AddressBookArn" ],
                members: {
                    ContactArn: {},
                    AddressBookArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DisassociateDeviceFromRoom: {
            input: {
                type: "structure",
                members: {
                    DeviceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DisassociateSkillFromSkillGroup: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillGroupArn: {},
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DisassociateSkillFromUsers: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        DisassociateSkillGroupFromRoom: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ForgetSmartHomeAppliances: {
            input: {
                type: "structure",
                required: [ "RoomArn" ],
                members: {
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetAddressBook: {
            input: {
                type: "structure",
                required: [ "AddressBookArn" ],
                members: {
                    AddressBookArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressBook: {
                        type: "structure",
                        members: {
                            AddressBookArn: {},
                            Name: {},
                            Description: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetConferencePreference: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Preference: {
                        shape: "S4e"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetConferenceProvider: {
            input: {
                type: "structure",
                required: [ "ConferenceProviderArn" ],
                members: {
                    ConferenceProviderArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConferenceProvider: {
                        shape: "S4h"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetContact: {
            input: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Contact: {
                        type: "structure",
                        members: {
                            ContactArn: {},
                            DisplayName: {},
                            FirstName: {},
                            LastName: {},
                            PhoneNumber: {
                                shape: "S1g"
                            },
                            PhoneNumbers: {
                                shape: "S1h"
                            },
                            SipAddresses: {
                                shape: "S1k"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetDevice: {
            input: {
                type: "structure",
                members: {
                    DeviceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Device: {
                        type: "structure",
                        members: {
                            DeviceArn: {},
                            DeviceSerialNumber: {},
                            DeviceType: {},
                            DeviceName: {},
                            SoftwareVersion: {},
                            MacAddress: {},
                            RoomArn: {},
                            DeviceStatus: {},
                            DeviceStatusInfo: {
                                shape: "S4u"
                            },
                            NetworkProfileInfo: {
                                type: "structure",
                                members: {
                                    NetworkProfileArn: {},
                                    CertificateArn: {},
                                    CertificateExpirationTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetGateway: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateway: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            Description: {},
                            GatewayGroupArn: {},
                            SoftwareVersion: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetGatewayGroup: {
            input: {
                type: "structure",
                required: [ "GatewayGroupArn" ],
                members: {
                    GatewayGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayGroup: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            Description: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetInvitationConfiguration: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    OrganizationName: {},
                    ContactEmail: {},
                    PrivateSkillIds: {
                        shape: "S5f"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetNetworkProfile: {
            input: {
                type: "structure",
                required: [ "NetworkProfileArn" ],
                members: {
                    NetworkProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkProfile: {
                        type: "structure",
                        members: {
                            NetworkProfileArn: {},
                            NetworkProfileName: {},
                            Description: {},
                            Ssid: {},
                            SecurityType: {},
                            EapMethod: {},
                            CurrentPassword: {
                                shape: "S1z"
                            },
                            NextPassword: {
                                shape: "S20"
                            },
                            CertificateAuthorityArn: {},
                            TrustAnchors: {
                                shape: "S21"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetProfile: {
            input: {
                type: "structure",
                members: {
                    ProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Profile: {
                        type: "structure",
                        members: {
                            ProfileArn: {},
                            ProfileName: {},
                            IsDefault: {
                                type: "boolean"
                            },
                            Address: {},
                            Timezone: {},
                            DistanceUnit: {},
                            TemperatureUnit: {},
                            WakeWord: {},
                            Locale: {},
                            SetupModeDisabled: {
                                type: "boolean"
                            },
                            MaxVolumeLimit: {
                                type: "integer"
                            },
                            PSTNEnabled: {
                                type: "boolean"
                            },
                            DataRetentionOptIn: {
                                type: "boolean"
                            },
                            AddressBookArn: {},
                            MeetingRoomConfiguration: {
                                type: "structure",
                                members: {
                                    RoomUtilizationMetricsEnabled: {
                                        type: "boolean"
                                    },
                                    EndOfMeetingReminder: {
                                        type: "structure",
                                        members: {
                                            ReminderAtMinutes: {
                                                shape: "S2g"
                                            },
                                            ReminderType: {},
                                            Enabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    InstantBooking: {
                                        type: "structure",
                                        members: {
                                            DurationInMinutes: {
                                                type: "integer"
                                            },
                                            Enabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    RequireCheckIn: {
                                        type: "structure",
                                        members: {
                                            ReleaseAfterMinutes: {
                                                type: "integer"
                                            },
                                            Enabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    ProactiveJoin: {
                                        type: "structure",
                                        members: {
                                            EnabledByMotion: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetRoom: {
            input: {
                type: "structure",
                members: {
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Room: {
                        type: "structure",
                        members: {
                            RoomArn: {},
                            RoomName: {},
                            Description: {},
                            ProviderCalendarId: {},
                            ProfileArn: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetRoomSkillParameter: {
            input: {
                type: "structure",
                required: [ "SkillId", "ParameterKey" ],
                members: {
                    RoomArn: {},
                    SkillId: {},
                    ParameterKey: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomSkillParameter: {
                        shape: "S5w"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        GetSkillGroup: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillGroup: {
                        type: "structure",
                        members: {
                            SkillGroupArn: {},
                            SkillGroupName: {},
                            Description: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListBusinessReportSchedules: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BusinessReportSchedules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ScheduleArn: {},
                                ScheduleName: {},
                                S3BucketName: {},
                                S3KeyPrefix: {},
                                Format: {},
                                ContentRange: {
                                    shape: "Sv"
                                },
                                Recurrence: {
                                    shape: "Sx"
                                },
                                LastBusinessReport: {
                                    type: "structure",
                                    members: {
                                        Status: {},
                                        FailureCode: {},
                                        S3Location: {
                                            type: "structure",
                                            members: {
                                                Path: {},
                                                BucketName: {}
                                            }
                                        },
                                        DeliveryTime: {
                                            type: "timestamp"
                                        },
                                        DownloadUrl: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListConferenceProviders: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConferenceProviders: {
                        type: "list",
                        member: {
                            shape: "S4h"
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListDeviceEvents: {
            input: {
                type: "structure",
                required: [ "DeviceArn" ],
                members: {
                    DeviceArn: {},
                    EventType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Value: {},
                                Timestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListGatewayGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListGateways: {
            input: {
                type: "structure",
                members: {
                    GatewayGroupArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateways: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                Description: {},
                                GatewayGroupArn: {},
                                SoftwareVersion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListSkills: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {},
                    EnablementType: {},
                    SkillType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SkillId: {},
                                SkillName: {},
                                SupportsLinking: {
                                    type: "boolean"
                                },
                                EnablementType: {},
                                SkillType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListSkillsStoreCategories: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CategoryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CategoryId: {
                                    type: "long"
                                },
                                CategoryName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListSkillsStoreSkillsByCategory: {
            input: {
                type: "structure",
                required: [ "CategoryId" ],
                members: {
                    CategoryId: {
                        type: "long"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillsStoreSkills: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SkillId: {},
                                SkillName: {},
                                ShortDescription: {},
                                IconUrl: {},
                                SampleUtterances: {
                                    type: "list",
                                    member: {}
                                },
                                SkillDetails: {
                                    type: "structure",
                                    members: {
                                        ProductDescription: {},
                                        InvocationPhrase: {},
                                        ReleaseDate: {},
                                        EndUserLicenseAgreement: {},
                                        GenericKeywords: {
                                            type: "list",
                                            member: {}
                                        },
                                        BulletPoints: {
                                            type: "list",
                                            member: {}
                                        },
                                        NewInThisVersionBulletPoints: {
                                            type: "list",
                                            member: {}
                                        },
                                        SkillTypes: {
                                            type: "list",
                                            member: {}
                                        },
                                        Reviews: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        },
                                        DeveloperInfo: {
                                            type: "structure",
                                            members: {
                                                DeveloperName: {},
                                                PrivacyPolicy: {},
                                                Email: {},
                                                Url: {}
                                            }
                                        }
                                    }
                                },
                                SupportsLinking: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListSmartHomeAppliances: {
            input: {
                type: "structure",
                required: [ "RoomArn" ],
                members: {
                    RoomArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SmartHomeAppliances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FriendlyName: {},
                                Description: {},
                                ManufacturerName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sl"
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        PutConferencePreference: {
            input: {
                type: "structure",
                required: [ "ConferencePreference" ],
                members: {
                    ConferencePreference: {
                        shape: "S4e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        PutInvitationConfiguration: {
            input: {
                type: "structure",
                required: [ "OrganizationName" ],
                members: {
                    OrganizationName: {},
                    ContactEmail: {},
                    PrivateSkillIds: {
                        shape: "S5f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        PutRoomSkillParameter: {
            input: {
                type: "structure",
                required: [ "SkillId", "RoomSkillParameter" ],
                members: {
                    RoomArn: {},
                    SkillId: {},
                    RoomSkillParameter: {
                        shape: "S5w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        PutSkillAuthorization: {
            input: {
                type: "structure",
                required: [ "AuthorizationResult", "SkillId" ],
                members: {
                    AuthorizationResult: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    SkillId: {},
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        RegisterAVSDevice: {
            input: {
                type: "structure",
                required: [ "ClientId", "UserCode", "ProductId", "AmazonId" ],
                members: {
                    ClientId: {},
                    UserCode: {},
                    ProductId: {},
                    DeviceSerialNumber: {},
                    AmazonId: {},
                    RoomArn: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        RejectSkill: {
            input: {
                type: "structure",
                required: [ "SkillId" ],
                members: {
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        ResolveRoom: {
            input: {
                type: "structure",
                required: [ "UserId", "SkillId" ],
                members: {
                    UserId: {},
                    SkillId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomArn: {},
                    RoomName: {},
                    RoomSkillParameters: {
                        type: "list",
                        member: {
                            shape: "S5w"
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        RevokeInvitation: {
            input: {
                type: "structure",
                members: {
                    UserArn: {},
                    EnrollmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        SearchAddressBooks: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S94"
                    },
                    SortCriteria: {
                        shape: "S99"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressBooks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AddressBookArn: {},
                                Name: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        SearchContacts: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S94"
                    },
                    SortCriteria: {
                        shape: "S99"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Contacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContactArn: {},
                                DisplayName: {},
                                FirstName: {},
                                LastName: {},
                                PhoneNumber: {
                                    shape: "S1g"
                                },
                                PhoneNumbers: {
                                    shape: "S1h"
                                },
                                SipAddresses: {
                                    shape: "S1k"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        SearchDevices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S94"
                    },
                    SortCriteria: {
                        shape: "S99"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeviceArn: {},
                                DeviceSerialNumber: {},
                                DeviceType: {},
                                DeviceName: {},
                                SoftwareVersion: {},
                                MacAddress: {},
                                DeviceStatus: {},
                                NetworkProfileArn: {},
                                NetworkProfileName: {},
                                RoomArn: {},
                                RoomName: {},
                                DeviceStatusInfo: {
                                    shape: "S4u"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        SearchNetworkProfiles: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S94"
                    },
                    SortCriteria: {
                        shape: "S99"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NetworkProfileArn: {},
                                NetworkProfileName: {},
                                Description: {},
                                Ssid: {},
                                SecurityType: {},
                                EapMethod: {},
                                CertificateAuthorityArn: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        SearchProfiles: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S94"
                    },
                    SortCriteria: {
                        shape: "S99"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Profiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProfileArn: {},
                                ProfileName: {},
                                IsDefault: {
                                    type: "boolean"
                                },
                                Address: {},
                                Timezone: {},
                                DistanceUnit: {},
                                TemperatureUnit: {},
                                WakeWord: {},
                                Locale: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        SearchRooms: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S94"
                    },
                    SortCriteria: {
                        shape: "S99"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rooms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RoomArn: {},
                                RoomName: {},
                                Description: {},
                                ProviderCalendarId: {},
                                ProfileArn: {},
                                ProfileName: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        SearchSkillGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S94"
                    },
                    SortCriteria: {
                        shape: "S99"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SkillGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SkillGroupArn: {},
                                SkillGroupName: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        SearchUsers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S94"
                    },
                    SortCriteria: {
                        shape: "S99"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UserArn: {},
                                FirstName: {},
                                LastName: {},
                                Email: {},
                                EnrollmentStatus: {},
                                EnrollmentId: {}
                            }
                        }
                    },
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        SendAnnouncement: {
            input: {
                type: "structure",
                required: [ "RoomFilters", "Content", "ClientRequestToken" ],
                members: {
                    RoomFilters: {
                        shape: "S94"
                    },
                    Content: {
                        type: "structure",
                        members: {
                            TextList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Locale", "Value" ],
                                    members: {
                                        Locale: {},
                                        Value: {}
                                    }
                                }
                            },
                            SsmlList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Locale", "Value" ],
                                    members: {
                                        Locale: {},
                                        Value: {}
                                    }
                                }
                            },
                            AudioList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Locale", "Location" ],
                                    members: {
                                        Locale: {},
                                        Location: {}
                                    }
                                }
                            }
                        }
                    },
                    TimeToLiveInSeconds: {
                        type: "integer"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnnouncementArn: {}
                }
            }
        },
        SendInvitation: {
            input: {
                type: "structure",
                members: {
                    UserArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        StartDeviceSync: {
            input: {
                type: "structure",
                required: [ "Features" ],
                members: {
                    RoomArn: {},
                    DeviceArn: {},
                    Features: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        StartSmartHomeApplianceDiscovery: {
            input: {
                type: "structure",
                required: [ "RoomArn" ],
                members: {
                    RoomArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "Arn", "Tags" ],
                members: {
                    Arn: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "Arn", "TagKeys" ],
                members: {
                    Arn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateAddressBook: {
            input: {
                type: "structure",
                required: [ "AddressBookArn" ],
                members: {
                    AddressBookArn: {},
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateBusinessReportSchedule: {
            input: {
                type: "structure",
                required: [ "ScheduleArn" ],
                members: {
                    ScheduleArn: {},
                    S3BucketName: {},
                    S3KeyPrefix: {},
                    Format: {},
                    ScheduleName: {},
                    Recurrence: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateConferenceProvider: {
            input: {
                type: "structure",
                required: [ "ConferenceProviderArn", "ConferenceProviderType", "MeetingSetting" ],
                members: {
                    ConferenceProviderArn: {},
                    ConferenceProviderType: {},
                    IPDialIn: {
                        shape: "S13"
                    },
                    PSTNDialIn: {
                        shape: "S16"
                    },
                    MeetingSetting: {
                        shape: "S1b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateContact: {
            input: {
                type: "structure",
                required: [ "ContactArn" ],
                members: {
                    ContactArn: {},
                    DisplayName: {},
                    FirstName: {},
                    LastName: {},
                    PhoneNumber: {
                        shape: "S1g"
                    },
                    PhoneNumbers: {
                        shape: "S1h"
                    },
                    SipAddresses: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateDevice: {
            input: {
                type: "structure",
                members: {
                    DeviceArn: {},
                    DeviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateGateway: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {},
                    Name: {},
                    Description: {},
                    SoftwareVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateGatewayGroup: {
            input: {
                type: "structure",
                required: [ "GatewayGroupArn" ],
                members: {
                    GatewayGroupArn: {},
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateNetworkProfile: {
            input: {
                type: "structure",
                required: [ "NetworkProfileArn" ],
                members: {
                    NetworkProfileArn: {},
                    NetworkProfileName: {},
                    Description: {},
                    CurrentPassword: {
                        shape: "S1z"
                    },
                    NextPassword: {
                        shape: "S20"
                    },
                    CertificateAuthorityArn: {},
                    TrustAnchors: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateProfile: {
            input: {
                type: "structure",
                members: {
                    ProfileArn: {},
                    ProfileName: {},
                    IsDefault: {
                        type: "boolean"
                    },
                    Timezone: {},
                    Address: {},
                    DistanceUnit: {},
                    TemperatureUnit: {},
                    WakeWord: {},
                    Locale: {},
                    SetupModeDisabled: {
                        type: "boolean"
                    },
                    MaxVolumeLimit: {
                        type: "integer"
                    },
                    PSTNEnabled: {
                        type: "boolean"
                    },
                    DataRetentionOptIn: {
                        type: "boolean"
                    },
                    MeetingRoomConfiguration: {
                        type: "structure",
                        members: {
                            RoomUtilizationMetricsEnabled: {
                                type: "boolean"
                            },
                            EndOfMeetingReminder: {
                                type: "structure",
                                members: {
                                    ReminderAtMinutes: {
                                        shape: "S2g"
                                    },
                                    ReminderType: {},
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            InstantBooking: {
                                type: "structure",
                                members: {
                                    DurationInMinutes: {
                                        type: "integer"
                                    },
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            RequireCheckIn: {
                                type: "structure",
                                members: {
                                    ReleaseAfterMinutes: {
                                        type: "integer"
                                    },
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            ProactiveJoin: {
                                type: "structure",
                                required: [ "EnabledByMotion" ],
                                members: {
                                    EnabledByMotion: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateRoom: {
            input: {
                type: "structure",
                members: {
                    RoomArn: {},
                    RoomName: {},
                    Description: {},
                    ProviderCalendarId: {},
                    ProfileArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        },
        UpdateSkillGroup: {
            input: {
                type: "structure",
                members: {
                    SkillGroupArn: {},
                    SkillGroupName: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Alexa For Business is no longer supported"
        }
    },
    shapes: {
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sv: {
            type: "structure",
            required: [ "Interval" ],
            members: {
                Interval: {}
            }
        },
        Sx: {
            type: "structure",
            members: {
                StartDate: {}
            }
        },
        S13: {
            type: "structure",
            required: [ "Endpoint", "CommsProtocol" ],
            members: {
                Endpoint: {},
                CommsProtocol: {}
            }
        },
        S16: {
            type: "structure",
            required: [ "CountryCode", "PhoneNumber", "OneClickIdDelay", "OneClickPinDelay" ],
            members: {
                CountryCode: {},
                PhoneNumber: {},
                OneClickIdDelay: {},
                OneClickPinDelay: {}
            }
        },
        S1b: {
            type: "structure",
            required: [ "RequirePin" ],
            members: {
                RequirePin: {}
            }
        },
        S1g: {
            type: "string",
            sensitive: true
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Number", "Type" ],
                members: {
                    Number: {
                        shape: "S1g"
                    },
                    Type: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Uri", "Type" ],
                members: {
                    Uri: {
                        type: "string",
                        sensitive: true
                    },
                    Type: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S1z: {
            type: "string",
            sensitive: true
        },
        S20: {
            type: "string",
            sensitive: true
        },
        S21: {
            type: "list",
            member: {}
        },
        S2g: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S4e: {
            type: "structure",
            members: {
                DefaultConferenceProviderArn: {}
            }
        },
        S4h: {
            type: "structure",
            members: {
                Arn: {},
                Name: {},
                Type: {},
                IPDialIn: {
                    shape: "S13"
                },
                PSTNDialIn: {
                    shape: "S16"
                },
                MeetingSetting: {
                    shape: "S1b"
                }
            }
        },
        S4u: {
            type: "structure",
            members: {
                DeviceStatusDetails: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Feature: {},
                            Code: {}
                        }
                    }
                },
                ConnectionStatus: {},
                ConnectionStatusUpdatedTime: {
                    type: "timestamp"
                }
            }
        },
        S5f: {
            type: "list",
            member: {}
        },
        S5w: {
            type: "structure",
            required: [ "ParameterKey", "ParameterValue" ],
            members: {
                ParameterKey: {},
                ParameterValue: {}
            }
        },
        S94: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Values" ],
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S99: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    deprecated: true,
    deprecatedMessage: "Alexa For Business is no longer supported",
    paginators: {
        ListBusinessReportSchedules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListConferenceProviders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDeviceEvents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGatewayGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGateways: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSkills: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSkillsStoreCategories: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSkillsStoreSkillsByCategory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSmartHomeAppliances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchAddressBooks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchContacts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchNetworkProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchRooms: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchSkillGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["cloud9"] = {};

AWS.Cloud9 = AWS.Service.defineService("cloud9", [ "2017-09-23" ]);

AWS.apiLoader.services["cloud9"]["2017-09-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-23",
        endpointPrefix: "cloud9",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Cloud9",
        serviceId: "Cloud9",
        signatureVersion: "v4",
        targetPrefix: "AWSCloud9WorkspaceManagementService",
        uid: "cloud9-2017-09-23"
    },
    operations: {
        CreateEnvironmentEC2: {
            input: {
                type: "structure",
                required: [ "name", "instanceType", "imageId" ],
                members: {
                    name: {},
                    description: {
                        shape: "S3"
                    },
                    clientRequestToken: {},
                    instanceType: {},
                    subnetId: {},
                    imageId: {},
                    automaticStopTimeMinutes: {
                        type: "integer"
                    },
                    ownerArn: {},
                    tags: {
                        shape: "Sa"
                    },
                    connectionType: {},
                    dryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environmentId: {}
                }
            },
            idempotent: true
        },
        CreateEnvironmentMembership: {
            input: {
                type: "structure",
                required: [ "environmentId", "userArn", "permissions" ],
                members: {
                    environmentId: {},
                    userArn: {},
                    permissions: {}
                }
            },
            output: {
                type: "structure",
                required: [ "membership" ],
                members: {
                    membership: {
                        shape: "Sl"
                    }
                }
            },
            idempotent: true
        },
        DeleteEnvironment: {
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteEnvironmentMembership: {
            input: {
                type: "structure",
                required: [ "environmentId", "userArn" ],
                members: {
                    environmentId: {},
                    userArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeEnvironmentMemberships: {
            input: {
                type: "structure",
                members: {
                    userArn: {},
                    environmentId: {},
                    permissions: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    memberships: {
                        type: "list",
                        member: {
                            shape: "Sl"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeEnvironmentStatus: {
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "status", "message" ],
                members: {
                    status: {},
                    message: {}
                }
            }
        },
        DescribeEnvironments: {
            input: {
                type: "structure",
                required: [ "environmentIds" ],
                members: {
                    environmentIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    environments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "type", "arn", "ownerArn" ],
                            members: {
                                id: {},
                                name: {},
                                description: {
                                    shape: "S3"
                                },
                                type: {},
                                connectionType: {},
                                arn: {},
                                ownerArn: {},
                                lifecycle: {
                                    type: "structure",
                                    members: {
                                        status: {},
                                        reason: {},
                                        failureResource: {}
                                    }
                                },
                                managedCredentialsStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListEnvironments: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    environmentIds: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        },
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEnvironment: {
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {},
                    name: {},
                    description: {
                        shape: "S3"
                    },
                    managedCredentialsAction: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateEnvironmentMembership: {
            input: {
                type: "structure",
                required: [ "environmentId", "userArn", "permissions" ],
                members: {
                    environmentId: {},
                    userArn: {},
                    permissions: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    membership: {
                        shape: "Sl"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "Sc"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                },
                sensitive: true
            },
            sensitive: true
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "structure",
            required: [ "permissions", "userId", "userArn", "environmentId" ],
            members: {
                permissions: {},
                userId: {},
                userArn: {},
                environmentId: {},
                lastAccess: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        DescribeEnvironmentMemberships: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["serverlessapplicationrepository"] = {};

AWS.ServerlessApplicationRepository = AWS.Service.defineService("serverlessapplicationrepository", [ "2017-09-08" ]);

AWS.apiLoader.services["serverlessapplicationrepository"]["2017-09-08"] = {
    metadata: {
        apiVersion: "2017-09-08",
        endpointPrefix: "serverlessrepo",
        signingName: "serverlessrepo",
        serviceFullName: "AWSServerlessApplicationRepository",
        serviceId: "ServerlessApplicationRepository",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "serverlessrepo-2017-09-08",
        signatureVersion: "v4"
    },
    operations: {
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Author: {
                        locationName: "author"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    LicenseBody: {
                        locationName: "licenseBody"
                    },
                    LicenseUrl: {
                        locationName: "licenseUrl"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ReadmeBody: {
                        locationName: "readmeBody"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    SourceCodeArchiveUrl: {
                        locationName: "sourceCodeArchiveUrl"
                    },
                    SourceCodeUrl: {
                        locationName: "sourceCodeUrl"
                    },
                    SpdxLicenseId: {
                        locationName: "spdxLicenseId"
                    },
                    TemplateBody: {
                        locationName: "templateBody"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                },
                required: [ "Description", "Name", "Author" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    Author: {
                        locationName: "author"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    IsVerifiedAuthor: {
                        locationName: "isVerifiedAuthor",
                        type: "boolean"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    LicenseUrl: {
                        locationName: "licenseUrl"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    },
                    SpdxLicenseId: {
                        locationName: "spdxLicenseId"
                    },
                    VerifiedAuthorUrl: {
                        locationName: "verifiedAuthorUrl"
                    },
                    Version: {
                        shape: "S6",
                        locationName: "version"
                    }
                }
            }
        },
        CreateApplicationVersion: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/versions/{semanticVersion}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    SemanticVersion: {
                        location: "uri",
                        locationName: "semanticVersion"
                    },
                    SourceCodeArchiveUrl: {
                        locationName: "sourceCodeArchiveUrl"
                    },
                    SourceCodeUrl: {
                        locationName: "sourceCodeUrl"
                    },
                    TemplateBody: {
                        locationName: "templateBody"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                },
                required: [ "ApplicationId", "SemanticVersion" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    ParameterDefinitions: {
                        shape: "S7",
                        locationName: "parameterDefinitions"
                    },
                    RequiredCapabilities: {
                        shape: "Sa",
                        locationName: "requiredCapabilities"
                    },
                    ResourcesSupported: {
                        locationName: "resourcesSupported",
                        type: "boolean"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    SourceCodeArchiveUrl: {
                        locationName: "sourceCodeArchiveUrl"
                    },
                    SourceCodeUrl: {
                        locationName: "sourceCodeUrl"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                }
            }
        },
        CreateCloudFormationChangeSet: {
            http: {
                requestUri: "/applications/{applicationId}/changesets",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    Capabilities: {
                        shape: "S3",
                        locationName: "capabilities"
                    },
                    ChangeSetName: {
                        locationName: "changeSetName"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    Description: {
                        locationName: "description"
                    },
                    NotificationArns: {
                        shape: "S3",
                        locationName: "notificationArns"
                    },
                    ParameterOverrides: {
                        locationName: "parameterOverrides",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    locationName: "name"
                                },
                                Value: {
                                    locationName: "value"
                                }
                            },
                            required: [ "Value", "Name" ]
                        }
                    },
                    ResourceTypes: {
                        shape: "S3",
                        locationName: "resourceTypes"
                    },
                    RollbackConfiguration: {
                        locationName: "rollbackConfiguration",
                        type: "structure",
                        members: {
                            MonitoringTimeInMinutes: {
                                locationName: "monitoringTimeInMinutes",
                                type: "integer"
                            },
                            RollbackTriggers: {
                                locationName: "rollbackTriggers",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Arn: {
                                            locationName: "arn"
                                        },
                                        Type: {
                                            locationName: "type"
                                        }
                                    },
                                    required: [ "Type", "Arn" ]
                                }
                            }
                        }
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    StackName: {
                        locationName: "stackName"
                    },
                    Tags: {
                        locationName: "tags",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {
                                    locationName: "key"
                                },
                                Value: {
                                    locationName: "value"
                                }
                            },
                            required: [ "Value", "Key" ]
                        }
                    },
                    TemplateId: {
                        locationName: "templateId"
                    }
                },
                required: [ "ApplicationId", "StackName" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    ChangeSetId: {
                        locationName: "changeSetId"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    StackId: {
                        locationName: "stackId"
                    }
                }
            }
        },
        CreateCloudFormationTemplate: {
            http: {
                requestUri: "/applications/{applicationId}/templates",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    ExpirationTime: {
                        locationName: "expirationTime"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    Status: {
                        locationName: "status"
                    },
                    TemplateId: {
                        locationName: "templateId"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                }
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                },
                required: [ "ApplicationId" ]
            }
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    SemanticVersion: {
                        location: "querystring",
                        locationName: "semanticVersion"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    Author: {
                        locationName: "author"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    IsVerifiedAuthor: {
                        locationName: "isVerifiedAuthor",
                        type: "boolean"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    LicenseUrl: {
                        locationName: "licenseUrl"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    },
                    SpdxLicenseId: {
                        locationName: "spdxLicenseId"
                    },
                    VerifiedAuthorUrl: {
                        locationName: "verifiedAuthorUrl"
                    },
                    Version: {
                        shape: "S6",
                        locationName: "version"
                    }
                }
            }
        },
        GetApplicationPolicy: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Statements: {
                        shape: "Sv",
                        locationName: "statements"
                    }
                }
            }
        },
        GetCloudFormationTemplate: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/templates/{templateId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                },
                required: [ "ApplicationId", "TemplateId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    ExpirationTime: {
                        locationName: "expirationTime"
                    },
                    SemanticVersion: {
                        locationName: "semanticVersion"
                    },
                    Status: {
                        locationName: "status"
                    },
                    TemplateId: {
                        locationName: "templateId"
                    },
                    TemplateUrl: {
                        locationName: "templateUrl"
                    }
                }
            }
        },
        ListApplicationDependencies: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/dependencies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    SemanticVersion: {
                        location: "querystring",
                        locationName: "semanticVersion"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Dependencies: {
                        locationName: "dependencies",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {
                                    locationName: "applicationId"
                                },
                                SemanticVersion: {
                                    locationName: "semanticVersion"
                                }
                            },
                            required: [ "ApplicationId", "SemanticVersion" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListApplicationVersions: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Versions: {
                        locationName: "versions",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {
                                    locationName: "applicationId"
                                },
                                CreationTime: {
                                    locationName: "creationTime"
                                },
                                SemanticVersion: {
                                    locationName: "semanticVersion"
                                },
                                SourceCodeUrl: {
                                    locationName: "sourceCodeUrl"
                                }
                            },
                            required: [ "CreationTime", "ApplicationId", "SemanticVersion" ]
                        }
                    }
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxItems: {
                        location: "querystring",
                        locationName: "maxItems",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Applications: {
                        locationName: "applications",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {
                                    locationName: "applicationId"
                                },
                                Author: {
                                    locationName: "author"
                                },
                                CreationTime: {
                                    locationName: "creationTime"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                HomePageUrl: {
                                    locationName: "homePageUrl"
                                },
                                Labels: {
                                    shape: "S3",
                                    locationName: "labels"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                SpdxLicenseId: {
                                    locationName: "spdxLicenseId"
                                }
                            },
                            required: [ "Description", "Author", "ApplicationId", "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        PutApplicationPolicy: {
            http: {
                method: "PUT",
                requestUri: "/applications/{applicationId}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    Statements: {
                        shape: "Sv",
                        locationName: "statements"
                    }
                },
                required: [ "ApplicationId", "Statements" ]
            },
            output: {
                type: "structure",
                members: {
                    Statements: {
                        shape: "Sv",
                        locationName: "statements"
                    }
                }
            }
        },
        UnshareApplication: {
            http: {
                requestUri: "/applications/{applicationId}/unshare",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    OrganizationId: {
                        locationName: "organizationId"
                    }
                },
                required: [ "ApplicationId", "OrganizationId" ]
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ApplicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    Author: {
                        locationName: "author"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    ReadmeBody: {
                        locationName: "readmeBody"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    }
                },
                required: [ "ApplicationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {
                        locationName: "applicationId"
                    },
                    Author: {
                        locationName: "author"
                    },
                    CreationTime: {
                        locationName: "creationTime"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HomePageUrl: {
                        locationName: "homePageUrl"
                    },
                    IsVerifiedAuthor: {
                        locationName: "isVerifiedAuthor",
                        type: "boolean"
                    },
                    Labels: {
                        shape: "S3",
                        locationName: "labels"
                    },
                    LicenseUrl: {
                        locationName: "licenseUrl"
                    },
                    Name: {
                        locationName: "name"
                    },
                    ReadmeUrl: {
                        locationName: "readmeUrl"
                    },
                    SpdxLicenseId: {
                        locationName: "spdxLicenseId"
                    },
                    VerifiedAuthorUrl: {
                        locationName: "verifiedAuthorUrl"
                    },
                    Version: {
                        shape: "S6",
                        locationName: "version"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S6: {
            type: "structure",
            members: {
                ApplicationId: {
                    locationName: "applicationId"
                },
                CreationTime: {
                    locationName: "creationTime"
                },
                ParameterDefinitions: {
                    shape: "S7",
                    locationName: "parameterDefinitions"
                },
                RequiredCapabilities: {
                    shape: "Sa",
                    locationName: "requiredCapabilities"
                },
                ResourcesSupported: {
                    locationName: "resourcesSupported",
                    type: "boolean"
                },
                SemanticVersion: {
                    locationName: "semanticVersion"
                },
                SourceCodeArchiveUrl: {
                    locationName: "sourceCodeArchiveUrl"
                },
                SourceCodeUrl: {
                    locationName: "sourceCodeUrl"
                },
                TemplateUrl: {
                    locationName: "templateUrl"
                }
            },
            required: [ "TemplateUrl", "ParameterDefinitions", "ResourcesSupported", "CreationTime", "RequiredCapabilities", "ApplicationId", "SemanticVersion" ]
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AllowedPattern: {
                        locationName: "allowedPattern"
                    },
                    AllowedValues: {
                        shape: "S3",
                        locationName: "allowedValues"
                    },
                    ConstraintDescription: {
                        locationName: "constraintDescription"
                    },
                    DefaultValue: {
                        locationName: "defaultValue"
                    },
                    Description: {
                        locationName: "description"
                    },
                    MaxLength: {
                        locationName: "maxLength",
                        type: "integer"
                    },
                    MaxValue: {
                        locationName: "maxValue",
                        type: "integer"
                    },
                    MinLength: {
                        locationName: "minLength",
                        type: "integer"
                    },
                    MinValue: {
                        locationName: "minValue",
                        type: "integer"
                    },
                    Name: {
                        locationName: "name"
                    },
                    NoEcho: {
                        locationName: "noEcho",
                        type: "boolean"
                    },
                    ReferencedByResources: {
                        shape: "S3",
                        locationName: "referencedByResources"
                    },
                    Type: {
                        locationName: "type"
                    }
                },
                required: [ "ReferencedByResources", "Name" ]
            }
        },
        Sa: {
            type: "list",
            member: {}
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Actions: {
                        shape: "S3",
                        locationName: "actions"
                    },
                    PrincipalOrgIDs: {
                        shape: "S3",
                        locationName: "principalOrgIDs"
                    },
                    Principals: {
                        shape: "S3",
                        locationName: "principals"
                    },
                    StatementId: {
                        locationName: "statementId"
                    }
                },
                required: [ "Principals", "Actions" ]
            }
        }
    },
    paginators: {
        ListApplicationVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxItems"
        },
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxItems"
        },
        ListApplicationDependencies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxItems"
        }
    }
};

AWS.apiLoader.services["servicediscovery"] = {};

AWS.ServiceDiscovery = AWS.Service.defineService("servicediscovery", [ "2017-03-14" ]);

AWS.apiLoader.services["servicediscovery"]["2017-03-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-03-14",
        endpointPrefix: "servicediscovery",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "ServiceDiscovery",
        serviceFullName: "AWS Cloud Map",
        serviceId: "ServiceDiscovery",
        signatureVersion: "v4",
        targetPrefix: "Route53AutoNaming_v20170314",
        uid: "servicediscovery-2017-03-14"
    },
    operations: {
        CreateHttpNamespace: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Description: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        CreatePrivateDnsNamespace: {
            input: {
                type: "structure",
                required: [ "Name", "Vpc" ],
                members: {
                    Name: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Description: {},
                    Vpc: {},
                    Tags: {
                        shape: "S5"
                    },
                    Properties: {
                        type: "structure",
                        required: [ "DnsProperties" ],
                        members: {
                            DnsProperties: {
                                type: "structure",
                                required: [ "SOA" ],
                                members: {
                                    SOA: {
                                        shape: "Sf"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        CreatePublicDnsNamespace: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Description: {},
                    Tags: {
                        shape: "S5"
                    },
                    Properties: {
                        type: "structure",
                        required: [ "DnsProperties" ],
                        members: {
                            DnsProperties: {
                                type: "structure",
                                required: [ "SOA" ],
                                members: {
                                    SOA: {
                                        shape: "Sf"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        CreateService: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    NamespaceId: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Description: {},
                    DnsConfig: {
                        shape: "Sp"
                    },
                    HealthCheckConfig: {
                        shape: "Su"
                    },
                    HealthCheckCustomConfig: {
                        shape: "Sy"
                    },
                    Tags: {
                        shape: "S5"
                    },
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Service: {
                        shape: "S11"
                    }
                }
            }
        },
        DeleteNamespace: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        DeleteService: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterInstance: {
            input: {
                type: "structure",
                required: [ "ServiceId", "InstanceId" ],
                members: {
                    ServiceId: {},
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        DiscoverInstances: {
            input: {
                type: "structure",
                required: [ "NamespaceName", "ServiceName" ],
                members: {
                    NamespaceName: {},
                    ServiceName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    QueryParameters: {
                        shape: "S1f"
                    },
                    OptionalParameters: {
                        shape: "S1f"
                    },
                    HealthStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceId: {},
                                NamespaceName: {},
                                ServiceName: {},
                                HealthStatus: {},
                                Attributes: {
                                    shape: "S1f"
                                }
                            }
                        }
                    },
                    InstancesRevision: {
                        type: "long"
                    }
                }
            },
            endpoint: {
                hostPrefix: "data-"
            }
        },
        DiscoverInstancesRevision: {
            input: {
                type: "structure",
                required: [ "NamespaceName", "ServiceName" ],
                members: {
                    NamespaceName: {},
                    ServiceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstancesRevision: {
                        type: "long"
                    }
                }
            },
            endpoint: {
                hostPrefix: "data-"
            }
        },
        GetInstance: {
            input: {
                type: "structure",
                required: [ "ServiceId", "InstanceId" ],
                members: {
                    ServiceId: {},
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instance: {
                        type: "structure",
                        required: [ "Id" ],
                        members: {
                            Id: {},
                            CreatorRequestId: {},
                            Attributes: {
                                shape: "S1f"
                            }
                        }
                    }
                }
            }
        },
        GetInstancesHealthStatus: {
            input: {
                type: "structure",
                required: [ "ServiceId" ],
                members: {
                    ServiceId: {},
                    Instances: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    NextToken: {}
                }
            }
        },
        GetNamespace: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespace: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            Name: {},
                            Type: {},
                            Description: {},
                            ServiceCount: {
                                type: "integer"
                            },
                            Properties: {
                                shape: "S23"
                            },
                            CreateDate: {
                                type: "timestamp"
                            },
                            CreatorRequestId: {}
                        }
                    }
                }
            }
        },
        GetOperation: {
            input: {
                type: "structure",
                required: [ "OperationId" ],
                members: {
                    OperationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Operation: {
                        type: "structure",
                        members: {
                            Id: {},
                            Type: {},
                            Status: {},
                            ErrorMessage: {},
                            ErrorCode: {},
                            CreateDate: {
                                type: "timestamp"
                            },
                            UpdateDate: {
                                type: "timestamp"
                            },
                            Targets: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        },
        GetService: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Service: {
                        shape: "S11"
                    }
                }
            }
        },
        ListInstances: {
            input: {
                type: "structure",
                required: [ "ServiceId" ],
                members: {
                    ServiceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Attributes: {
                                    shape: "S1f"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNamespaces: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2p"
                                },
                                Condition: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                Type: {},
                                Description: {},
                                ServiceCount: {
                                    type: "integer"
                                },
                                Properties: {
                                    shape: "S23"
                                },
                                CreateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOperations: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2p"
                                },
                                Condition: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Operations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListServices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2p"
                                },
                                Condition: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                Type: {},
                                Description: {},
                                InstanceCount: {
                                    type: "integer"
                                },
                                DnsConfig: {
                                    shape: "Sp"
                                },
                                HealthCheckConfig: {
                                    shape: "Su"
                                },
                                HealthCheckCustomConfig: {
                                    shape: "Sy"
                                },
                                CreateDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        RegisterInstance: {
            input: {
                type: "structure",
                required: [ "ServiceId", "InstanceId", "Attributes" ],
                members: {
                    ServiceId: {},
                    InstanceId: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Attributes: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateHttpNamespace: {
            input: {
                type: "structure",
                required: [ "Id", "Namespace" ],
                members: {
                    Id: {},
                    UpdaterRequestId: {
                        idempotencyToken: true
                    },
                    Namespace: {
                        type: "structure",
                        required: [ "Description" ],
                        members: {
                            Description: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        UpdateInstanceCustomHealthStatus: {
            input: {
                type: "structure",
                required: [ "ServiceId", "InstanceId", "Status" ],
                members: {
                    ServiceId: {},
                    InstanceId: {},
                    Status: {}
                }
            }
        },
        UpdatePrivateDnsNamespace: {
            input: {
                type: "structure",
                required: [ "Id", "Namespace" ],
                members: {
                    Id: {},
                    UpdaterRequestId: {
                        idempotencyToken: true
                    },
                    Namespace: {
                        type: "structure",
                        members: {
                            Description: {},
                            Properties: {
                                type: "structure",
                                required: [ "DnsProperties" ],
                                members: {
                                    DnsProperties: {
                                        type: "structure",
                                        required: [ "SOA" ],
                                        members: {
                                            SOA: {
                                                shape: "S3t"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        UpdatePublicDnsNamespace: {
            input: {
                type: "structure",
                required: [ "Id", "Namespace" ],
                members: {
                    Id: {},
                    UpdaterRequestId: {
                        idempotencyToken: true
                    },
                    Namespace: {
                        type: "structure",
                        members: {
                            Description: {},
                            Properties: {
                                type: "structure",
                                required: [ "DnsProperties" ],
                                members: {
                                    DnsProperties: {
                                        type: "structure",
                                        required: [ "SOA" ],
                                        members: {
                                            SOA: {
                                                shape: "S3t"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        UpdateService: {
            input: {
                type: "structure",
                required: [ "Id", "Service" ],
                members: {
                    Id: {},
                    Service: {
                        type: "structure",
                        members: {
                            Description: {},
                            DnsConfig: {
                                type: "structure",
                                required: [ "DnsRecords" ],
                                members: {
                                    DnsRecords: {
                                        shape: "Sr"
                                    }
                                }
                            },
                            HealthCheckConfig: {
                                shape: "Su"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sf: {
            type: "structure",
            required: [ "TTL" ],
            members: {
                TTL: {
                    type: "long"
                }
            }
        },
        Sp: {
            type: "structure",
            required: [ "DnsRecords" ],
            members: {
                NamespaceId: {
                    deprecated: true,
                    deprecatedMessage: "Top level attribute in request should be used to reference namespace-id"
                },
                RoutingPolicy: {},
                DnsRecords: {
                    shape: "Sr"
                }
            }
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "TTL" ],
                members: {
                    Type: {},
                    TTL: {
                        type: "long"
                    }
                }
            }
        },
        Su: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                ResourcePath: {},
                FailureThreshold: {
                    type: "integer"
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                FailureThreshold: {
                    deprecated: true,
                    deprecatedMessage: "Configurable FailureThreshold of HealthCheckCustomConfig is deprecated.  It will always have value 1.",
                    type: "integer"
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                NamespaceId: {},
                Description: {},
                InstanceCount: {
                    type: "integer"
                },
                DnsConfig: {
                    shape: "Sp"
                },
                Type: {},
                HealthCheckConfig: {
                    shape: "Su"
                },
                HealthCheckCustomConfig: {
                    shape: "Sy"
                },
                CreateDate: {
                    type: "timestamp"
                },
                CreatorRequestId: {}
            }
        },
        S1f: {
            type: "map",
            key: {},
            value: {}
        },
        S23: {
            type: "structure",
            members: {
                DnsProperties: {
                    type: "structure",
                    members: {
                        HostedZoneId: {},
                        SOA: {
                            shape: "Sf"
                        }
                    }
                },
                HttpProperties: {
                    type: "structure",
                    members: {
                        HttpName: {}
                    }
                }
            }
        },
        S2p: {
            type: "list",
            member: {}
        },
        S3t: {
            type: "structure",
            required: [ "TTL" ],
            members: {
                TTL: {
                    type: "long"
                }
            }
        }
    },
    paginators: {
        GetInstancesHealthStatus: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNamespaces: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListOperations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListServices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["workmail"] = {};

AWS.WorkMail = AWS.Service.defineService("workmail", [ "2017-10-01" ]);

AWS.apiLoader.services["workmail"]["2017-10-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-01",
        endpointPrefix: "workmail",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon WorkMail",
        serviceId: "WorkMail",
        signatureVersion: "v4",
        targetPrefix: "WorkMailService",
        uid: "workmail-2017-10-01"
    },
    operations: {
        AssociateDelegateToResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {},
                    EntityId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        AssociateMemberToGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId", "MemberId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {},
                    MemberId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        AssumeImpersonationRole: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ImpersonationRoleId" ],
                members: {
                    OrganizationId: {},
                    ImpersonationRoleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Token: {},
                    ExpiresIn: {
                        type: "long"
                    }
                }
            }
        },
        CancelMailboxExportJob: {
            input: {
                type: "structure",
                required: [ "ClientToken", "JobId", "OrganizationId" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    JobId: {},
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateAlias: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "Alias" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    Alias: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateAvailabilityConfiguration: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "DomainName" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    OrganizationId: {},
                    DomainName: {},
                    EwsProvider: {
                        shape: "Sm"
                    },
                    LambdaProvider: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name" ],
                members: {
                    OrganizationId: {},
                    Name: {},
                    HiddenFromGlobalAddressList: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupId: {}
                }
            },
            idempotent: true
        },
        CreateImpersonationRole: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name", "Type", "Rules" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    OrganizationId: {},
                    Name: {},
                    Type: {},
                    Description: {},
                    Rules: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImpersonationRoleId: {}
                }
            }
        },
        CreateMobileDeviceAccessRule: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name", "Effect" ],
                members: {
                    OrganizationId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Description: {},
                    Effect: {},
                    DeviceTypes: {
                        shape: "S1d"
                    },
                    NotDeviceTypes: {
                        shape: "S1d"
                    },
                    DeviceModels: {
                        shape: "S1f"
                    },
                    NotDeviceModels: {
                        shape: "S1f"
                    },
                    DeviceOperatingSystems: {
                        shape: "S1h"
                    },
                    NotDeviceOperatingSystems: {
                        shape: "S1h"
                    },
                    DeviceUserAgents: {
                        shape: "S1j"
                    },
                    NotDeviceUserAgents: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MobileDeviceAccessRuleId: {}
                }
            }
        },
        CreateOrganization: {
            input: {
                type: "structure",
                required: [ "Alias" ],
                members: {
                    DirectoryId: {},
                    Alias: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DomainName" ],
                            members: {
                                DomainName: {},
                                HostedZoneId: {}
                            }
                        }
                    },
                    KmsKeyArn: {},
                    EnableInteroperability: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationId: {}
                }
            },
            idempotent: true
        },
        CreateResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name", "Type" ],
                members: {
                    OrganizationId: {},
                    Name: {},
                    Type: {},
                    Description: {},
                    HiddenFromGlobalAddressList: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceId: {}
                }
            },
            idempotent: true
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name", "DisplayName" ],
                members: {
                    OrganizationId: {},
                    Name: {},
                    DisplayName: {
                        shape: "S23"
                    },
                    Password: {
                        shape: "Sp"
                    },
                    Role: {},
                    FirstName: {
                        shape: "S23"
                    },
                    LastName: {
                        shape: "S23"
                    },
                    HiddenFromGlobalAddressList: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserId: {}
                }
            },
            idempotent: true
        },
        DeleteAccessControlRule: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name" ],
                members: {
                    OrganizationId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAlias: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "Alias" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    Alias: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAvailabilityConfiguration: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "DomainName" ],
                members: {
                    OrganizationId: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteEmailMonitoringConfiguration: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteImpersonationRole: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ImpersonationRoleId" ],
                members: {
                    OrganizationId: {},
                    ImpersonationRoleId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMailboxPermissions: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "GranteeId" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    GranteeId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteMobileDeviceAccessOverride: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId", "DeviceId" ],
                members: {
                    OrganizationId: {},
                    UserId: {},
                    DeviceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMobileDeviceAccessRule: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "MobileDeviceAccessRuleId" ],
                members: {
                    OrganizationId: {},
                    MobileDeviceAccessRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteOrganization: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "DeleteDirectory" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    OrganizationId: {},
                    DeleteDirectory: {
                        type: "boolean"
                    },
                    ForceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationId: {},
                    State: {}
                }
            },
            idempotent: true
        },
        DeleteResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteRetentionPolicy: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Id" ],
                members: {
                    OrganizationId: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId" ],
                members: {
                    OrganizationId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeregisterFromWorkMail: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    EntityId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeregisterMailDomain: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "DomainName" ],
                members: {
                    OrganizationId: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeEmailMonitoringConfiguration: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoleArn: {},
                    LogGroupArn: {}
                }
            },
            idempotent: true
        },
        DescribeEntity: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Email" ],
                members: {
                    OrganizationId: {},
                    Email: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityId: {},
                    Name: {},
                    Type: {}
                }
            },
            idempotent: true
        },
        DescribeGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupId: {},
                    Name: {},
                    Email: {},
                    State: {},
                    EnabledDate: {
                        type: "timestamp"
                    },
                    DisabledDate: {
                        type: "timestamp"
                    },
                    HiddenFromGlobalAddressList: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        DescribeInboundDmarcSettings: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Enforced: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        DescribeMailboxExportJob: {
            input: {
                type: "structure",
                required: [ "JobId", "OrganizationId" ],
                members: {
                    JobId: {},
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityId: {},
                    Description: {},
                    RoleArn: {},
                    KmsKeyArn: {},
                    S3BucketName: {},
                    S3Prefix: {},
                    S3Path: {},
                    EstimatedProgress: {
                        type: "integer"
                    },
                    State: {},
                    ErrorInfo: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        DescribeOrganization: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationId: {},
                    Alias: {},
                    State: {},
                    DirectoryId: {},
                    DirectoryType: {},
                    DefaultMailDomain: {},
                    CompletedDate: {
                        type: "timestamp"
                    },
                    ErrorMessage: {},
                    ARN: {},
                    MigrationAdmin: {},
                    InteroperabilityEnabled: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        DescribeResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceId: {},
                    Email: {},
                    Name: {},
                    Type: {},
                    BookingOptions: {
                        shape: "S3v"
                    },
                    State: {},
                    EnabledDate: {
                        type: "timestamp"
                    },
                    DisabledDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    HiddenFromGlobalAddressList: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        DescribeUser: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId" ],
                members: {
                    OrganizationId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserId: {},
                    Name: {},
                    Email: {},
                    DisplayName: {
                        shape: "S23"
                    },
                    State: {},
                    UserRole: {},
                    EnabledDate: {
                        type: "timestamp"
                    },
                    DisabledDate: {
                        type: "timestamp"
                    },
                    MailboxProvisionedDate: {
                        type: "timestamp"
                    },
                    MailboxDeprovisionedDate: {
                        type: "timestamp"
                    },
                    FirstName: {
                        shape: "S23"
                    },
                    LastName: {
                        shape: "S23"
                    },
                    HiddenFromGlobalAddressList: {
                        type: "boolean"
                    },
                    Initials: {
                        shape: "S23"
                    },
                    Telephone: {
                        shape: "S23"
                    },
                    Street: {
                        shape: "S23"
                    },
                    JobTitle: {
                        shape: "S23"
                    },
                    City: {
                        shape: "S23"
                    },
                    Company: {
                        shape: "S23"
                    },
                    ZipCode: {
                        shape: "S23"
                    },
                    Department: {
                        shape: "S23"
                    },
                    Country: {
                        shape: "S23"
                    },
                    Office: {
                        shape: "S23"
                    }
                }
            },
            idempotent: true
        },
        DisassociateDelegateFromResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {},
                    EntityId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateMemberFromGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId", "MemberId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {},
                    MemberId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAccessControlEffect: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "IpAddress", "Action" ],
                members: {
                    OrganizationId: {},
                    IpAddress: {},
                    Action: {},
                    UserId: {},
                    ImpersonationRoleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Effect: {},
                    MatchedRules: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        GetDefaultRetentionPolicy: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Description: {},
                    FolderConfigurations: {
                        shape: "S4a"
                    }
                }
            },
            idempotent: true
        },
        GetImpersonationRole: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ImpersonationRoleId" ],
                members: {
                    OrganizationId: {},
                    ImpersonationRoleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImpersonationRoleId: {},
                    Name: {},
                    Type: {},
                    Description: {},
                    Rules: {
                        shape: "S11"
                    },
                    DateCreated: {
                        type: "timestamp"
                    },
                    DateModified: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetImpersonationRoleEffect: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ImpersonationRoleId", "TargetUser" ],
                members: {
                    OrganizationId: {},
                    ImpersonationRoleId: {},
                    TargetUser: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Type: {},
                    Effect: {},
                    MatchedRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ImpersonationRuleId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        GetMailDomain: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "DomainName" ],
                members: {
                    OrganizationId: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Records: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Hostname: {},
                                Value: {}
                            }
                        }
                    },
                    IsTestDomain: {
                        type: "boolean"
                    },
                    IsDefault: {
                        type: "boolean"
                    },
                    OwnershipVerificationStatus: {},
                    DkimVerificationStatus: {}
                }
            },
            idempotent: true
        },
        GetMailboxDetails: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId" ],
                members: {
                    OrganizationId: {},
                    UserId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MailboxQuota: {
                        type: "integer"
                    },
                    MailboxSize: {
                        type: "double"
                    }
                }
            },
            idempotent: true
        },
        GetMobileDeviceAccessEffect: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    DeviceType: {},
                    DeviceModel: {},
                    DeviceOperatingSystem: {},
                    DeviceUserAgent: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Effect: {},
                    MatchedRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MobileDeviceAccessRuleId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        GetMobileDeviceAccessOverride: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId", "DeviceId" ],
                members: {
                    OrganizationId: {},
                    UserId: {},
                    DeviceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserId: {},
                    DeviceId: {},
                    Effect: {},
                    Description: {},
                    DateCreated: {
                        type: "timestamp"
                    },
                    DateModified: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListAccessControlRules: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Effect: {},
                                Description: {},
                                IpRanges: {
                                    shape: "S55"
                                },
                                NotIpRanges: {
                                    shape: "S55"
                                },
                                Actions: {
                                    shape: "S57"
                                },
                                NotActions: {
                                    shape: "S57"
                                },
                                UserIds: {
                                    shape: "S58"
                                },
                                NotUserIds: {
                                    shape: "S58"
                                },
                                DateCreated: {
                                    type: "timestamp"
                                },
                                DateModified: {
                                    type: "timestamp"
                                },
                                ImpersonationRoleIds: {
                                    shape: "S59"
                                },
                                NotImpersonationRoleIds: {
                                    shape: "S59"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListAliases: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListAvailabilityConfigurations: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AvailabilityConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                ProviderType: {},
                                EwsProvider: {
                                    type: "structure",
                                    members: {
                                        EwsEndpoint: {},
                                        EwsUsername: {}
                                    }
                                },
                                LambdaProvider: {
                                    shape: "Sq"
                                },
                                DateCreated: {
                                    type: "timestamp"
                                },
                                DateModified: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListGroupMembers: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Type: {},
                                State: {},
                                EnabledDate: {
                                    type: "timestamp"
                                },
                                DisabledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListGroups: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            NamePrefix: {},
                            PrimaryEmailPrefix: {},
                            State: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Email: {},
                                Name: {},
                                State: {},
                                EnabledDate: {
                                    type: "timestamp"
                                },
                                DisabledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListGroupsForEntity: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    Filters: {
                        type: "structure",
                        members: {
                            GroupNamePrefix: {}
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupId: {},
                                GroupName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListImpersonationRoles: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Roles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ImpersonationRoleId: {},
                                Name: {},
                                Type: {},
                                DateCreated: {
                                    type: "timestamp"
                                },
                                DateModified: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMailDomains: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MailDomains: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainName: {},
                                DefaultDomain: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListMailboxExportJobs: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobId: {},
                                EntityId: {},
                                Description: {},
                                S3BucketName: {},
                                S3Path: {},
                                EstimatedProgress: {
                                    type: "integer"
                                },
                                State: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListMailboxPermissions: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GranteeId", "GranteeType", "PermissionValues" ],
                            members: {
                                GranteeId: {},
                                GranteeType: {},
                                PermissionValues: {
                                    shape: "S6g"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListMobileDeviceAccessOverrides: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    UserId: {},
                    DeviceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Overrides: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UserId: {},
                                DeviceId: {},
                                Effect: {},
                                Description: {},
                                DateCreated: {
                                    type: "timestamp"
                                },
                                DateModified: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMobileDeviceAccessRules: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MobileDeviceAccessRuleId: {},
                                Name: {},
                                Description: {},
                                Effect: {},
                                DeviceTypes: {
                                    shape: "S1d"
                                },
                                NotDeviceTypes: {
                                    shape: "S1d"
                                },
                                DeviceModels: {
                                    shape: "S1f"
                                },
                                NotDeviceModels: {
                                    shape: "S1f"
                                },
                                DeviceOperatingSystems: {
                                    shape: "S1h"
                                },
                                NotDeviceOperatingSystems: {
                                    shape: "S1h"
                                },
                                DeviceUserAgents: {
                                    shape: "S1j"
                                },
                                NotDeviceUserAgents: {
                                    shape: "S1j"
                                },
                                DateCreated: {
                                    type: "timestamp"
                                },
                                DateModified: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListOrganizations: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                OrganizationId: {},
                                Alias: {},
                                DefaultMailDomain: {},
                                ErrorMessage: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListResourceDelegates: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Delegates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "Type" ],
                            members: {
                                Id: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListResources: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            NamePrefix: {},
                            PrimaryEmailPrefix: {},
                            State: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Email: {},
                                Name: {},
                                Type: {},
                                State: {},
                                EnabledDate: {
                                    type: "timestamp"
                                },
                                DisabledDate: {
                                    type: "timestamp"
                                },
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S75"
                    }
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            UsernamePrefix: {},
                            DisplayNamePrefix: {
                                shape: "S23"
                            },
                            PrimaryEmailPrefix: {},
                            State: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Email: {},
                                Name: {},
                                DisplayName: {},
                                State: {},
                                UserRole: {},
                                EnabledDate: {
                                    type: "timestamp"
                                },
                                DisabledDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        PutAccessControlRule: {
            input: {
                type: "structure",
                required: [ "Name", "Effect", "Description", "OrganizationId" ],
                members: {
                    Name: {},
                    Effect: {},
                    Description: {},
                    IpRanges: {
                        shape: "S55"
                    },
                    NotIpRanges: {
                        shape: "S55"
                    },
                    Actions: {
                        shape: "S57"
                    },
                    NotActions: {
                        shape: "S57"
                    },
                    UserIds: {
                        shape: "S58"
                    },
                    NotUserIds: {
                        shape: "S58"
                    },
                    OrganizationId: {},
                    ImpersonationRoleIds: {
                        shape: "S59"
                    },
                    NotImpersonationRoleIds: {
                        shape: "S59"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailMonitoringConfiguration: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "RoleArn", "LogGroupArn" ],
                members: {
                    OrganizationId: {},
                    RoleArn: {},
                    LogGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        PutInboundDmarcSettings: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Enforced" ],
                members: {
                    OrganizationId: {},
                    Enforced: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        PutMailboxPermissions: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "GranteeId", "PermissionValues" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    GranteeId: {},
                    PermissionValues: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        PutMobileDeviceAccessOverride: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId", "DeviceId", "Effect" ],
                members: {
                    OrganizationId: {},
                    UserId: {},
                    DeviceId: {},
                    Effect: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutRetentionPolicy: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "Name", "FolderConfigurations" ],
                members: {
                    OrganizationId: {},
                    Id: {},
                    Name: {},
                    Description: {
                        type: "string",
                        sensitive: true
                    },
                    FolderConfigurations: {
                        shape: "S4a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RegisterMailDomain: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "DomainName" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    OrganizationId: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RegisterToWorkMail: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "Email" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    Email: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        ResetPassword: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId", "Password" ],
                members: {
                    OrganizationId: {},
                    UserId: {},
                    Password: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        StartMailboxExportJob: {
            input: {
                type: "structure",
                required: [ "ClientToken", "OrganizationId", "EntityId", "RoleArn", "KmsKeyArn", "S3BucketName", "S3Prefix" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    OrganizationId: {},
                    EntityId: {},
                    Description: {},
                    RoleArn: {},
                    KmsKeyArn: {},
                    S3BucketName: {},
                    S3Prefix: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S75"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestAvailabilityConfiguration: {
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {},
                    DomainName: {},
                    EwsProvider: {
                        shape: "Sm"
                    },
                    LambdaProvider: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TestPassed: {
                        type: "boolean"
                    },
                    FailureReason: {}
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAvailabilityConfiguration: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "DomainName" ],
                members: {
                    OrganizationId: {},
                    DomainName: {},
                    EwsProvider: {
                        shape: "Sm"
                    },
                    LambdaProvider: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateDefaultMailDomain: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "DomainName" ],
                members: {
                    OrganizationId: {},
                    DomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateGroup: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "GroupId" ],
                members: {
                    OrganizationId: {},
                    GroupId: {},
                    HiddenFromGlobalAddressList: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateImpersonationRole: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ImpersonationRoleId", "Name", "Type", "Rules" ],
                members: {
                    OrganizationId: {},
                    ImpersonationRoleId: {},
                    Name: {},
                    Type: {},
                    Description: {},
                    Rules: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMailboxQuota: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId", "MailboxQuota" ],
                members: {
                    OrganizationId: {},
                    UserId: {},
                    MailboxQuota: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateMobileDeviceAccessRule: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "MobileDeviceAccessRuleId", "Name", "Effect" ],
                members: {
                    OrganizationId: {},
                    MobileDeviceAccessRuleId: {},
                    Name: {},
                    Description: {},
                    Effect: {},
                    DeviceTypes: {
                        shape: "S1d"
                    },
                    NotDeviceTypes: {
                        shape: "S1d"
                    },
                    DeviceModels: {
                        shape: "S1f"
                    },
                    NotDeviceModels: {
                        shape: "S1f"
                    },
                    DeviceOperatingSystems: {
                        shape: "S1h"
                    },
                    NotDeviceOperatingSystems: {
                        shape: "S1h"
                    },
                    DeviceUserAgents: {
                        shape: "S1j"
                    },
                    NotDeviceUserAgents: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePrimaryEmailAddress: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "EntityId", "Email" ],
                members: {
                    OrganizationId: {},
                    EntityId: {},
                    Email: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateResource: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "ResourceId" ],
                members: {
                    OrganizationId: {},
                    ResourceId: {},
                    Name: {},
                    BookingOptions: {
                        shape: "S3v"
                    },
                    Description: {},
                    Type: {},
                    HiddenFromGlobalAddressList: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateUser: {
            input: {
                type: "structure",
                required: [ "OrganizationId", "UserId" ],
                members: {
                    OrganizationId: {},
                    UserId: {},
                    Role: {},
                    DisplayName: {
                        shape: "S23"
                    },
                    FirstName: {
                        shape: "S23"
                    },
                    LastName: {
                        shape: "S23"
                    },
                    HiddenFromGlobalAddressList: {
                        type: "boolean"
                    },
                    Initials: {
                        shape: "S23"
                    },
                    Telephone: {
                        shape: "S23"
                    },
                    Street: {
                        shape: "S23"
                    },
                    JobTitle: {
                        shape: "S23"
                    },
                    City: {
                        shape: "S23"
                    },
                    Company: {
                        shape: "S23"
                    },
                    ZipCode: {
                        shape: "S23"
                    },
                    Department: {
                        shape: "S23"
                    },
                    Country: {
                        shape: "S23"
                    },
                    Office: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        Sm: {
            type: "structure",
            required: [ "EwsEndpoint", "EwsUsername", "EwsPassword" ],
            members: {
                EwsEndpoint: {},
                EwsUsername: {},
                EwsPassword: {
                    shape: "Sp"
                }
            }
        },
        Sp: {
            type: "string",
            sensitive: true
        },
        Sq: {
            type: "structure",
            required: [ "LambdaArn" ],
            members: {
                LambdaArn: {}
            }
        },
        S11: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ImpersonationRuleId", "Effect" ],
                members: {
                    ImpersonationRuleId: {},
                    Name: {},
                    Description: {},
                    Effect: {},
                    TargetUsers: {
                        shape: "S17"
                    },
                    NotTargetUsers: {
                        shape: "S17"
                    }
                }
            }
        },
        S17: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "list",
            member: {}
        },
        S1f: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1j: {
            type: "list",
            member: {}
        },
        S23: {
            type: "string",
            sensitive: true
        },
        S3v: {
            type: "structure",
            members: {
                AutoAcceptRequests: {
                    type: "boolean"
                },
                AutoDeclineRecurringRequests: {
                    type: "boolean"
                },
                AutoDeclineConflictingRequests: {
                    type: "boolean"
                }
            }
        },
        S4a: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Action" ],
                members: {
                    Name: {},
                    Action: {},
                    Period: {
                        type: "integer"
                    }
                }
            }
        },
        S55: {
            type: "list",
            member: {}
        },
        S57: {
            type: "list",
            member: {}
        },
        S58: {
            type: "list",
            member: {}
        },
        S59: {
            type: "list",
            member: {}
        },
        S6g: {
            type: "list",
            member: {}
        },
        S75: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAvailabilityConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AvailabilityConfigurations"
        },
        ListGroupMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListGroupsForEntity: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListImpersonationRoles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMailDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMailboxExportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMailboxPermissions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMobileDeviceAccessOverrides: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListOrganizations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListResourceDelegates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["autoscalingplans"] = {};

AWS.AutoScalingPlans = AWS.Service.defineService("autoscalingplans", [ "2018-01-06" ]);

AWS.apiLoader.services["autoscalingplans"]["2018-01-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-01-06",
        endpointPrefix: "autoscaling-plans",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Auto Scaling Plans",
        serviceId: "Auto Scaling Plans",
        signatureVersion: "v4",
        signingName: "autoscaling-plans",
        targetPrefix: "AnyScaleScalingPlannerFrontendService",
        uid: "autoscaling-plans-2018-01-06"
    },
    operations: {
        CreateScalingPlan: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ApplicationSource", "ScalingInstructions" ],
                members: {
                    ScalingPlanName: {},
                    ApplicationSource: {
                        shape: "S3"
                    },
                    ScalingInstructions: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ScalingPlanVersion" ],
                members: {
                    ScalingPlanVersion: {
                        type: "long"
                    }
                }
            }
        },
        DeleteScalingPlan: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ScalingPlanVersion" ],
                members: {
                    ScalingPlanName: {},
                    ScalingPlanVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeScalingPlanResources: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ScalingPlanVersion" ],
                members: {
                    ScalingPlanName: {},
                    ScalingPlanVersion: {
                        type: "long"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScalingPlanResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ScalingPlanName", "ScalingPlanVersion", "ServiceNamespace", "ResourceId", "ScalableDimension", "ScalingStatusCode" ],
                            members: {
                                ScalingPlanName: {},
                                ScalingPlanVersion: {
                                    type: "long"
                                },
                                ServiceNamespace: {},
                                ResourceId: {},
                                ScalableDimension: {},
                                ScalingPolicies: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "PolicyName", "PolicyType" ],
                                        members: {
                                            PolicyName: {},
                                            PolicyType: {},
                                            TargetTrackingConfiguration: {
                                                shape: "Sh"
                                            }
                                        }
                                    }
                                },
                                ScalingStatusCode: {},
                                ScalingStatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeScalingPlans: {
            input: {
                type: "structure",
                members: {
                    ScalingPlanNames: {
                        type: "list",
                        member: {}
                    },
                    ScalingPlanVersion: {
                        type: "long"
                    },
                    ApplicationSources: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScalingPlans: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ScalingPlanName", "ScalingPlanVersion", "ApplicationSource", "ScalingInstructions", "StatusCode" ],
                            members: {
                                ScalingPlanName: {},
                                ScalingPlanVersion: {
                                    type: "long"
                                },
                                ApplicationSource: {
                                    shape: "S3"
                                },
                                ScalingInstructions: {
                                    shape: "Sa"
                                },
                                StatusCode: {},
                                StatusMessage: {},
                                StatusStartTime: {
                                    type: "timestamp"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetScalingPlanResourceForecastData: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ScalingPlanVersion", "ServiceNamespace", "ResourceId", "ScalableDimension", "ForecastDataType", "StartTime", "EndTime" ],
                members: {
                    ScalingPlanName: {},
                    ScalingPlanVersion: {
                        type: "long"
                    },
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    ForecastDataType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Datapoints" ],
                members: {
                    Datapoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Value: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        UpdateScalingPlan: {
            input: {
                type: "structure",
                required: [ "ScalingPlanName", "ScalingPlanVersion" ],
                members: {
                    ScalingPlanName: {},
                    ScalingPlanVersion: {
                        type: "long"
                    },
                    ApplicationSource: {
                        shape: "S3"
                    },
                    ScalingInstructions: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                CloudFormationStackARN: {},
                TagFilters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Values: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ServiceNamespace", "ResourceId", "ScalableDimension", "MinCapacity", "MaxCapacity", "TargetTrackingConfigurations" ],
                members: {
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    MinCapacity: {
                        type: "integer"
                    },
                    MaxCapacity: {
                        type: "integer"
                    },
                    TargetTrackingConfigurations: {
                        type: "list",
                        member: {
                            shape: "Sh"
                        }
                    },
                    PredefinedLoadMetricSpecification: {
                        type: "structure",
                        required: [ "PredefinedLoadMetricType" ],
                        members: {
                            PredefinedLoadMetricType: {},
                            ResourceLabel: {}
                        }
                    },
                    CustomizedLoadMetricSpecification: {
                        type: "structure",
                        required: [ "MetricName", "Namespace", "Statistic" ],
                        members: {
                            MetricName: {},
                            Namespace: {},
                            Dimensions: {
                                shape: "So"
                            },
                            Statistic: {},
                            Unit: {}
                        }
                    },
                    ScheduledActionBufferTime: {
                        type: "integer"
                    },
                    PredictiveScalingMaxCapacityBehavior: {},
                    PredictiveScalingMaxCapacityBuffer: {
                        type: "integer"
                    },
                    PredictiveScalingMode: {},
                    ScalingPolicyUpdateBehavior: {},
                    DisableDynamicScaling: {
                        type: "boolean"
                    }
                }
            }
        },
        Sh: {
            type: "structure",
            required: [ "TargetValue" ],
            members: {
                PredefinedScalingMetricSpecification: {
                    type: "structure",
                    required: [ "PredefinedScalingMetricType" ],
                    members: {
                        PredefinedScalingMetricType: {},
                        ResourceLabel: {}
                    }
                },
                CustomizedScalingMetricSpecification: {
                    type: "structure",
                    required: [ "MetricName", "Namespace", "Statistic" ],
                    members: {
                        MetricName: {},
                        Namespace: {},
                        Dimensions: {
                            shape: "So"
                        },
                        Statistic: {},
                        Unit: {}
                    }
                },
                TargetValue: {
                    type: "double"
                },
                DisableScaleIn: {
                    type: "boolean"
                },
                ScaleOutCooldown: {
                    type: "integer"
                },
                ScaleInCooldown: {
                    type: "integer"
                },
                EstimatedInstanceWarmup: {
                    type: "integer"
                }
            }
        },
        So: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["transcribeservice"] = {};

AWS.TranscribeService = AWS.Service.defineService("transcribeservice", [ "2017-10-26" ]);

AWS.apiLoader.services["transcribeservice"]["2017-10-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-26",
        endpointPrefix: "transcribe",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Transcribe Service",
        serviceId: "Transcribe",
        signatureVersion: "v4",
        signingName: "transcribe",
        targetPrefix: "Transcribe",
        uid: "transcribe-2017-10-26"
    },
    operations: {
        CreateCallAnalyticsCategory: {
            input: {
                type: "structure",
                required: [ "CategoryName", "Rules" ],
                members: {
                    CategoryName: {},
                    Rules: {
                        shape: "S3"
                    },
                    InputType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CategoryProperties: {
                        shape: "Sm"
                    }
                }
            }
        },
        CreateLanguageModel: {
            input: {
                type: "structure",
                required: [ "LanguageCode", "BaseModelName", "ModelName", "InputDataConfig" ],
                members: {
                    LanguageCode: {},
                    BaseModelName: {},
                    ModelName: {},
                    InputDataConfig: {
                        shape: "Ss"
                    },
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LanguageCode: {},
                    BaseModelName: {},
                    ModelName: {},
                    InputDataConfig: {
                        shape: "Ss"
                    },
                    ModelStatus: {}
                }
            }
        },
        CreateMedicalVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName", "LanguageCode", "VocabularyFileUri" ],
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyFileUri: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {}
                }
            }
        },
        CreateVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName", "LanguageCode" ],
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    Phrases: {
                        shape: "S18"
                    },
                    VocabularyFileUri: {},
                    Tags: {
                        shape: "Sv"
                    },
                    DataAccessRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {}
                }
            }
        },
        CreateVocabularyFilter: {
            input: {
                type: "structure",
                required: [ "VocabularyFilterName", "LanguageCode" ],
                members: {
                    VocabularyFilterName: {},
                    LanguageCode: {},
                    Words: {
                        shape: "S1d"
                    },
                    VocabularyFilterFileUri: {},
                    Tags: {
                        shape: "Sv"
                    },
                    DataAccessRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyFilterName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteCallAnalyticsCategory: {
            input: {
                type: "structure",
                required: [ "CategoryName" ],
                members: {
                    CategoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCallAnalyticsJob: {
            input: {
                type: "structure",
                required: [ "CallAnalyticsJobName" ],
                members: {
                    CallAnalyticsJobName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLanguageModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            }
        },
        DeleteMedicalScribeJob: {
            input: {
                type: "structure",
                required: [ "MedicalScribeJobName" ],
                members: {
                    MedicalScribeJobName: {}
                }
            }
        },
        DeleteMedicalTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "MedicalTranscriptionJobName" ],
                members: {
                    MedicalTranscriptionJobName: {}
                }
            }
        },
        DeleteMedicalVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName" ],
                members: {
                    VocabularyName: {}
                }
            }
        },
        DeleteTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "TranscriptionJobName" ],
                members: {
                    TranscriptionJobName: {}
                }
            }
        },
        DeleteVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName" ],
                members: {
                    VocabularyName: {}
                }
            }
        },
        DeleteVocabularyFilter: {
            input: {
                type: "structure",
                required: [ "VocabularyFilterName" ],
                members: {
                    VocabularyFilterName: {}
                }
            }
        },
        DescribeLanguageModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LanguageModel: {
                        shape: "S1v"
                    }
                }
            }
        },
        GetCallAnalyticsCategory: {
            input: {
                type: "structure",
                required: [ "CategoryName" ],
                members: {
                    CategoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CategoryProperties: {
                        shape: "Sm"
                    }
                }
            }
        },
        GetCallAnalyticsJob: {
            input: {
                type: "structure",
                required: [ "CallAnalyticsJobName" ],
                members: {
                    CallAnalyticsJobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CallAnalyticsJob: {
                        shape: "S20"
                    }
                }
            }
        },
        GetMedicalScribeJob: {
            input: {
                type: "structure",
                required: [ "MedicalScribeJobName" ],
                members: {
                    MedicalScribeJobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MedicalScribeJob: {
                        shape: "S2n"
                    }
                }
            }
        },
        GetMedicalTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "MedicalTranscriptionJobName" ],
                members: {
                    MedicalTranscriptionJobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MedicalTranscriptionJob: {
                        shape: "S2z"
                    }
                }
            }
        },
        GetMedicalVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName" ],
                members: {
                    VocabularyName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    DownloadUri: {}
                }
            }
        },
        GetTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "TranscriptionJobName" ],
                members: {
                    TranscriptionJobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TranscriptionJob: {
                        shape: "S3c"
                    }
                }
            }
        },
        GetVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName" ],
                members: {
                    VocabularyName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyState: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    DownloadUri: {}
                }
            }
        },
        GetVocabularyFilter: {
            input: {
                type: "structure",
                required: [ "VocabularyFilterName" ],
                members: {
                    VocabularyFilterName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyFilterName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    DownloadUri: {}
                }
            }
        },
        ListCallAnalyticsCategories: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Categories: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    }
                }
            }
        },
        ListCallAnalyticsJobs: {
            input: {
                type: "structure",
                members: {
                    Status: {},
                    JobNameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    CallAnalyticsJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CallAnalyticsJobName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                CompletionTime: {
                                    type: "timestamp"
                                },
                                LanguageCode: {},
                                CallAnalyticsJobStatus: {},
                                FailureReason: {}
                            }
                        }
                    }
                }
            }
        },
        ListLanguageModels: {
            input: {
                type: "structure",
                members: {
                    StatusEquals: {},
                    NameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Models: {
                        type: "list",
                        member: {
                            shape: "S1v"
                        }
                    }
                }
            }
        },
        ListMedicalScribeJobs: {
            input: {
                type: "structure",
                members: {
                    Status: {},
                    JobNameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    MedicalScribeJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MedicalScribeJobName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                CompletionTime: {
                                    type: "timestamp"
                                },
                                LanguageCode: {},
                                MedicalScribeJobStatus: {},
                                FailureReason: {}
                            }
                        }
                    }
                }
            }
        },
        ListMedicalTranscriptionJobs: {
            input: {
                type: "structure",
                members: {
                    Status: {},
                    JobNameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    MedicalTranscriptionJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MedicalTranscriptionJobName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                CompletionTime: {
                                    type: "timestamp"
                                },
                                LanguageCode: {},
                                TranscriptionJobStatus: {},
                                FailureReason: {},
                                OutputLocationType: {},
                                Specialty: {},
                                ContentIdentificationType: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        ListMedicalVocabularies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StateEquals: {},
                    NameContains: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    Vocabularies: {
                        shape: "S4j"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            }
        },
        ListTranscriptionJobs: {
            input: {
                type: "structure",
                members: {
                    Status: {},
                    JobNameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    TranscriptionJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TranscriptionJobName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                CompletionTime: {
                                    type: "timestamp"
                                },
                                LanguageCode: {},
                                TranscriptionJobStatus: {},
                                FailureReason: {},
                                OutputLocationType: {},
                                ContentRedaction: {
                                    shape: "S29"
                                },
                                ModelSettings: {
                                    shape: "S3e"
                                },
                                IdentifyLanguage: {
                                    type: "boolean"
                                },
                                IdentifyMultipleLanguages: {
                                    type: "boolean"
                                },
                                IdentifiedLanguageScore: {
                                    type: "float"
                                },
                                LanguageCodes: {
                                    shape: "S3g"
                                },
                                ToxicityDetection: {
                                    shape: "S3o"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListVocabularies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StateEquals: {},
                    NameContains: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    NextToken: {},
                    Vocabularies: {
                        shape: "S4j"
                    }
                }
            }
        },
        ListVocabularyFilters: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    VocabularyFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VocabularyFilterName: {},
                                LanguageCode: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        StartCallAnalyticsJob: {
            input: {
                type: "structure",
                required: [ "CallAnalyticsJobName", "Media" ],
                members: {
                    CallAnalyticsJobName: {},
                    Media: {
                        shape: "S24"
                    },
                    OutputLocation: {},
                    OutputEncryptionKMSKeyId: {},
                    DataAccessRoleArn: {},
                    Settings: {
                        shape: "S27"
                    },
                    ChannelDefinitions: {
                        shape: "S2i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CallAnalyticsJob: {
                        shape: "S20"
                    }
                }
            }
        },
        StartMedicalScribeJob: {
            input: {
                type: "structure",
                required: [ "MedicalScribeJobName", "Media", "OutputBucketName", "DataAccessRoleArn", "Settings" ],
                members: {
                    MedicalScribeJobName: {},
                    Media: {
                        shape: "S24"
                    },
                    OutputBucketName: {},
                    OutputEncryptionKMSKeyId: {},
                    KMSEncryptionContext: {
                        shape: "S53"
                    },
                    DataAccessRoleArn: {},
                    Settings: {
                        shape: "S2r"
                    },
                    ChannelDefinitions: {
                        shape: "S2t"
                    },
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MedicalScribeJob: {
                        shape: "S2n"
                    }
                }
            }
        },
        StartMedicalTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "MedicalTranscriptionJobName", "LanguageCode", "Media", "OutputBucketName", "Specialty", "Type" ],
                members: {
                    MedicalTranscriptionJobName: {},
                    LanguageCode: {},
                    MediaSampleRateHertz: {
                        type: "integer"
                    },
                    MediaFormat: {},
                    Media: {
                        shape: "S24"
                    },
                    OutputBucketName: {},
                    OutputKey: {},
                    OutputEncryptionKMSKeyId: {},
                    KMSEncryptionContext: {
                        shape: "S53"
                    },
                    Settings: {
                        shape: "S33"
                    },
                    ContentIdentificationType: {},
                    Specialty: {},
                    Type: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MedicalTranscriptionJob: {
                        shape: "S2z"
                    }
                }
            }
        },
        StartTranscriptionJob: {
            input: {
                type: "structure",
                required: [ "TranscriptionJobName", "Media" ],
                members: {
                    TranscriptionJobName: {},
                    LanguageCode: {},
                    MediaSampleRateHertz: {
                        type: "integer"
                    },
                    MediaFormat: {},
                    Media: {
                        shape: "S24"
                    },
                    OutputBucketName: {},
                    OutputKey: {},
                    OutputEncryptionKMSKeyId: {},
                    KMSEncryptionContext: {
                        shape: "S53"
                    },
                    Settings: {
                        shape: "S3d"
                    },
                    ModelSettings: {
                        shape: "S3e"
                    },
                    JobExecutionSettings: {
                        shape: "S3f"
                    },
                    ContentRedaction: {
                        shape: "S29"
                    },
                    IdentifyLanguage: {
                        type: "boolean"
                    },
                    IdentifyMultipleLanguages: {
                        type: "boolean"
                    },
                    LanguageOptions: {
                        shape: "S2e"
                    },
                    Subtitles: {
                        type: "structure",
                        members: {
                            Formats: {
                                shape: "S3k"
                            },
                            OutputStartIndex: {
                                type: "integer"
                            }
                        }
                    },
                    Tags: {
                        shape: "Sv"
                    },
                    LanguageIdSettings: {
                        shape: "S2f"
                    },
                    ToxicityDetection: {
                        shape: "S3o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TranscriptionJob: {
                        shape: "S3c"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCallAnalyticsCategory: {
            input: {
                type: "structure",
                required: [ "CategoryName", "Rules" ],
                members: {
                    CategoryName: {},
                    Rules: {
                        shape: "S3"
                    },
                    InputType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CategoryProperties: {
                        shape: "Sm"
                    }
                }
            }
        },
        UpdateMedicalVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName", "LanguageCode", "VocabularyFileUri" ],
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    VocabularyFileUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    VocabularyState: {}
                }
            }
        },
        UpdateVocabulary: {
            input: {
                type: "structure",
                required: [ "VocabularyName", "LanguageCode" ],
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    Phrases: {
                        shape: "S18"
                    },
                    VocabularyFileUri: {},
                    DataAccessRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    VocabularyState: {}
                }
            }
        },
        UpdateVocabularyFilter: {
            input: {
                type: "structure",
                required: [ "VocabularyFilterName" ],
                members: {
                    VocabularyFilterName: {},
                    Words: {
                        shape: "S1d"
                    },
                    VocabularyFilterFileUri: {},
                    DataAccessRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularyFilterName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    NonTalkTimeFilter: {
                        type: "structure",
                        members: {
                            Threshold: {
                                type: "long"
                            },
                            AbsoluteTimeRange: {
                                shape: "S7"
                            },
                            RelativeTimeRange: {
                                shape: "S8"
                            },
                            Negate: {
                                type: "boolean"
                            }
                        }
                    },
                    InterruptionFilter: {
                        type: "structure",
                        members: {
                            Threshold: {
                                type: "long"
                            },
                            ParticipantRole: {},
                            AbsoluteTimeRange: {
                                shape: "S7"
                            },
                            RelativeTimeRange: {
                                shape: "S8"
                            },
                            Negate: {
                                type: "boolean"
                            }
                        }
                    },
                    TranscriptFilter: {
                        type: "structure",
                        required: [ "TranscriptFilterType", "Targets" ],
                        members: {
                            TranscriptFilterType: {},
                            AbsoluteTimeRange: {
                                shape: "S7"
                            },
                            RelativeTimeRange: {
                                shape: "S8"
                            },
                            ParticipantRole: {},
                            Negate: {
                                type: "boolean"
                            },
                            Targets: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    SentimentFilter: {
                        type: "structure",
                        required: [ "Sentiments" ],
                        members: {
                            Sentiments: {
                                type: "list",
                                member: {}
                            },
                            AbsoluteTimeRange: {
                                shape: "S7"
                            },
                            RelativeTimeRange: {
                                shape: "S8"
                            },
                            ParticipantRole: {},
                            Negate: {
                                type: "boolean"
                            }
                        }
                    }
                },
                union: true
            }
        },
        S7: {
            type: "structure",
            members: {
                StartTime: {
                    type: "long"
                },
                EndTime: {
                    type: "long"
                },
                First: {
                    type: "long"
                },
                Last: {
                    type: "long"
                }
            }
        },
        S8: {
            type: "structure",
            members: {
                StartPercentage: {
                    type: "integer"
                },
                EndPercentage: {
                    type: "integer"
                },
                First: {
                    type: "integer"
                },
                Last: {
                    type: "integer"
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                CategoryName: {},
                Rules: {
                    shape: "S3"
                },
                CreateTime: {
                    type: "timestamp"
                },
                LastUpdateTime: {
                    type: "timestamp"
                },
                InputType: {}
            }
        },
        Ss: {
            type: "structure",
            required: [ "S3Uri", "DataAccessRoleArn" ],
            members: {
                S3Uri: {},
                TuningDataS3Uri: {},
                DataAccessRoleArn: {}
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S18: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "list",
            member: {}
        },
        S1v: {
            type: "structure",
            members: {
                ModelName: {},
                CreateTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                LanguageCode: {},
                BaseModelName: {},
                ModelStatus: {},
                UpgradeAvailability: {
                    type: "boolean"
                },
                FailureReason: {},
                InputDataConfig: {
                    shape: "Ss"
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                CallAnalyticsJobName: {},
                CallAnalyticsJobStatus: {},
                LanguageCode: {},
                MediaSampleRateHertz: {
                    type: "integer"
                },
                MediaFormat: {},
                Media: {
                    shape: "S24"
                },
                Transcript: {
                    shape: "S25"
                },
                StartTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                },
                CompletionTime: {
                    type: "timestamp"
                },
                FailureReason: {},
                DataAccessRoleArn: {},
                IdentifiedLanguageScore: {
                    type: "float"
                },
                Settings: {
                    shape: "S27"
                },
                ChannelDefinitions: {
                    shape: "S2i"
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                MediaFileUri: {},
                RedactedMediaFileUri: {}
            }
        },
        S25: {
            type: "structure",
            members: {
                TranscriptFileUri: {},
                RedactedTranscriptFileUri: {}
            }
        },
        S27: {
            type: "structure",
            members: {
                VocabularyName: {},
                VocabularyFilterName: {},
                VocabularyFilterMethod: {},
                LanguageModelName: {},
                ContentRedaction: {
                    shape: "S29"
                },
                LanguageOptions: {
                    shape: "S2e"
                },
                LanguageIdSettings: {
                    shape: "S2f"
                },
                Summarization: {
                    type: "structure",
                    required: [ "GenerateAbstractiveSummary" ],
                    members: {
                        GenerateAbstractiveSummary: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S29: {
            type: "structure",
            required: [ "RedactionType", "RedactionOutput" ],
            members: {
                RedactionType: {},
                RedactionOutput: {},
                PiiEntityTypes: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2e: {
            type: "list",
            member: {}
        },
        S2f: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    VocabularyFilterName: {},
                    LanguageModelName: {}
                }
            }
        },
        S2i: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ChannelId: {
                        type: "integer"
                    },
                    ParticipantRole: {}
                }
            }
        },
        S2n: {
            type: "structure",
            members: {
                MedicalScribeJobName: {},
                MedicalScribeJobStatus: {},
                LanguageCode: {},
                Media: {
                    shape: "S24"
                },
                MedicalScribeOutput: {
                    type: "structure",
                    required: [ "TranscriptFileUri", "ClinicalDocumentUri" ],
                    members: {
                        TranscriptFileUri: {},
                        ClinicalDocumentUri: {}
                    }
                },
                StartTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                },
                CompletionTime: {
                    type: "timestamp"
                },
                FailureReason: {},
                Settings: {
                    shape: "S2r"
                },
                DataAccessRoleArn: {},
                ChannelDefinitions: {
                    shape: "S2t"
                },
                Tags: {
                    shape: "Sv"
                }
            }
        },
        S2r: {
            type: "structure",
            members: {
                ShowSpeakerLabels: {
                    type: "boolean"
                },
                MaxSpeakerLabels: {
                    type: "integer"
                },
                ChannelIdentification: {
                    type: "boolean"
                },
                VocabularyName: {},
                VocabularyFilterName: {},
                VocabularyFilterMethod: {}
            }
        },
        S2t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ChannelId", "ParticipantRole" ],
                members: {
                    ChannelId: {
                        type: "integer"
                    },
                    ParticipantRole: {}
                }
            }
        },
        S2z: {
            type: "structure",
            members: {
                MedicalTranscriptionJobName: {},
                TranscriptionJobStatus: {},
                LanguageCode: {},
                MediaSampleRateHertz: {
                    type: "integer"
                },
                MediaFormat: {},
                Media: {
                    shape: "S24"
                },
                Transcript: {
                    type: "structure",
                    members: {
                        TranscriptFileUri: {}
                    }
                },
                StartTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                },
                CompletionTime: {
                    type: "timestamp"
                },
                FailureReason: {},
                Settings: {
                    shape: "S33"
                },
                ContentIdentificationType: {},
                Specialty: {},
                Type: {},
                Tags: {
                    shape: "Sv"
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                ShowSpeakerLabels: {
                    type: "boolean"
                },
                MaxSpeakerLabels: {
                    type: "integer"
                },
                ChannelIdentification: {
                    type: "boolean"
                },
                ShowAlternatives: {
                    type: "boolean"
                },
                MaxAlternatives: {
                    type: "integer"
                },
                VocabularyName: {}
            }
        },
        S3c: {
            type: "structure",
            members: {
                TranscriptionJobName: {},
                TranscriptionJobStatus: {},
                LanguageCode: {},
                MediaSampleRateHertz: {
                    type: "integer"
                },
                MediaFormat: {},
                Media: {
                    shape: "S24"
                },
                Transcript: {
                    shape: "S25"
                },
                StartTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                },
                CompletionTime: {
                    type: "timestamp"
                },
                FailureReason: {},
                Settings: {
                    shape: "S3d"
                },
                ModelSettings: {
                    shape: "S3e"
                },
                JobExecutionSettings: {
                    shape: "S3f"
                },
                ContentRedaction: {
                    shape: "S29"
                },
                IdentifyLanguage: {
                    type: "boolean"
                },
                IdentifyMultipleLanguages: {
                    type: "boolean"
                },
                LanguageOptions: {
                    shape: "S2e"
                },
                IdentifiedLanguageScore: {
                    type: "float"
                },
                LanguageCodes: {
                    shape: "S3g"
                },
                Tags: {
                    shape: "Sv"
                },
                Subtitles: {
                    type: "structure",
                    members: {
                        Formats: {
                            shape: "S3k"
                        },
                        SubtitleFileUris: {
                            type: "list",
                            member: {}
                        },
                        OutputStartIndex: {
                            type: "integer"
                        }
                    }
                },
                LanguageIdSettings: {
                    shape: "S2f"
                },
                ToxicityDetection: {
                    shape: "S3o"
                }
            }
        },
        S3d: {
            type: "structure",
            members: {
                VocabularyName: {},
                ShowSpeakerLabels: {
                    type: "boolean"
                },
                MaxSpeakerLabels: {
                    type: "integer"
                },
                ChannelIdentification: {
                    type: "boolean"
                },
                ShowAlternatives: {
                    type: "boolean"
                },
                MaxAlternatives: {
                    type: "integer"
                },
                VocabularyFilterName: {},
                VocabularyFilterMethod: {}
            }
        },
        S3e: {
            type: "structure",
            members: {
                LanguageModelName: {}
            }
        },
        S3f: {
            type: "structure",
            members: {
                AllowDeferredExecution: {
                    type: "boolean"
                },
                DataAccessRoleArn: {}
            }
        },
        S3g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LanguageCode: {},
                    DurationInSeconds: {
                        type: "float"
                    }
                }
            }
        },
        S3k: {
            type: "list",
            member: {}
        },
        S3o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ToxicityCategories" ],
                members: {
                    ToxicityCategories: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S4j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    VocabularyName: {},
                    LanguageCode: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    VocabularyState: {}
                }
            }
        },
        S53: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListCallAnalyticsCategories: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCallAnalyticsJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListLanguageModels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMedicalScribeJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMedicalTranscriptionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMedicalVocabularies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTranscriptionJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVocabularies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVocabularyFilters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["connect"] = {};

AWS.Connect = AWS.Service.defineService("connect", [ "2017-08-08" ]);

AWS.apiLoader.services["connect"]["2017-08-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-08-08",
        endpointPrefix: "connect",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon Connect",
        serviceFullName: "Amazon Connect Service",
        serviceId: "Connect",
        signatureVersion: "v4",
        signingName: "connect",
        uid: "connect-2017-08-08"
    },
    operations: {
        ActivateEvaluationForm: {
            http: {
                requestUri: "/evaluation-forms/{InstanceId}/{EvaluationFormId}/activate"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationFormId", "EvaluationFormVersion" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationFormId: {
                        location: "uri",
                        locationName: "EvaluationFormId"
                    },
                    EvaluationFormVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationFormId", "EvaluationFormArn", "EvaluationFormVersion" ],
                members: {
                    EvaluationFormId: {},
                    EvaluationFormArn: {},
                    EvaluationFormVersion: {
                        type: "integer"
                    }
                }
            }
        },
        AssociateAnalyticsDataSet: {
            http: {
                method: "PUT",
                requestUri: "/analytics-data/instance/{InstanceId}/association"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "DataSetId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    DataSetId: {},
                    TargetAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetId: {},
                    TargetAccountId: {},
                    ResourceShareId: {},
                    ResourceShareArn: {}
                }
            }
        },
        AssociateApprovedOrigin: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/approved-origin"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Origin" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Origin: {}
                }
            }
        },
        AssociateBot: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/bot"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    LexBot: {
                        shape: "Sf"
                    },
                    LexV2Bot: {
                        shape: "Si"
                    }
                }
            }
        },
        AssociateDefaultVocabulary: {
            http: {
                method: "PUT",
                requestUri: "/default-vocabulary/{InstanceId}/{LanguageCode}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "LanguageCode" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    LanguageCode: {
                        location: "uri",
                        locationName: "LanguageCode"
                    },
                    VocabularyId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateFlow: {
            http: {
                method: "PUT",
                requestUri: "/flow-associations/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ResourceId", "FlowId", "ResourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ResourceId: {},
                    FlowId: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateInstanceStorageConfig: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/storage-config"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ResourceType", "StorageConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ResourceType: {},
                    StorageConfig: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {}
                }
            }
        },
        AssociateLambdaFunction: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/lambda-function"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "FunctionArn" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    FunctionArn: {}
                }
            }
        },
        AssociateLexBot: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/lex-bot"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "LexBot" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    LexBot: {
                        shape: "Sf"
                    }
                }
            }
        },
        AssociatePhoneNumberContactFlow: {
            http: {
                method: "PUT",
                requestUri: "/phone-number/{PhoneNumberId}/contact-flow"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId", "InstanceId", "ContactFlowId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "PhoneNumberId"
                    },
                    InstanceId: {},
                    ContactFlowId: {}
                }
            }
        },
        AssociateQueueQuickConnects: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/associate-quick-connects"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "QuickConnectIds" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    QuickConnectIds: {
                        shape: "S1f"
                    }
                }
            }
        },
        AssociateRoutingProfileQueues: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/associate-queues"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "QueueConfigs" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    QueueConfigs: {
                        shape: "S1j"
                    }
                }
            }
        },
        AssociateSecurityKey: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/security-key"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Key" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Key: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {}
                }
            }
        },
        AssociateTrafficDistributionGroupUser: {
            http: {
                method: "PUT",
                requestUri: "/traffic-distribution-group/{TrafficDistributionGroupId}/user"
            },
            input: {
                type: "structure",
                required: [ "TrafficDistributionGroupId", "UserId", "InstanceId" ],
                members: {
                    TrafficDistributionGroupId: {
                        location: "uri",
                        locationName: "TrafficDistributionGroupId"
                    },
                    UserId: {},
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        BatchAssociateAnalyticsDataSet: {
            http: {
                method: "PUT",
                requestUri: "/analytics-data/instance/{InstanceId}/associations"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "DataSetIds" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    DataSetIds: {
                        shape: "S1x"
                    },
                    TargetAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Created: {
                        shape: "S1z"
                    },
                    Errors: {
                        shape: "S21"
                    }
                }
            }
        },
        BatchDisassociateAnalyticsDataSet: {
            http: {
                requestUri: "/analytics-data/instance/{InstanceId}/associations"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "DataSetIds" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    DataSetIds: {
                        shape: "S1x"
                    },
                    TargetAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Deleted: {
                        shape: "S1x"
                    },
                    Errors: {
                        shape: "S21"
                    }
                }
            }
        },
        BatchGetFlowAssociation: {
            http: {
                requestUri: "/flow-associations-batch/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ResourceIds" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ResourceIds: {
                        type: "list",
                        member: {}
                    },
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FlowAssociationSummaryList: {
                        shape: "S29"
                    }
                }
            }
        },
        BatchPutContact: {
            http: {
                method: "PUT",
                requestUri: "/contact/batch/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactDataRequestList" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactDataRequestList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SystemEndpoint: {
                                    shape: "S2f"
                                },
                                CustomerEndpoint: {
                                    shape: "S2f"
                                },
                                RequestIdentifier: {},
                                QueueId: {},
                                Attributes: {
                                    shape: "S2j"
                                },
                                Campaign: {
                                    type: "structure",
                                    members: {
                                        CampaignId: {}
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfulRequestList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RequestIdentifier: {},
                                ContactId: {}
                            }
                        }
                    },
                    FailedRequestList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RequestIdentifier: {},
                                FailureReasonCode: {},
                                FailureReasonMessage: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ClaimPhoneNumber: {
            http: {
                requestUri: "/phone-number/claim"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumber" ],
                members: {
                    TargetArn: {},
                    InstanceId: {},
                    PhoneNumber: {},
                    PhoneNumberDescription: {},
                    Tags: {
                        shape: "S2y"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberId: {},
                    PhoneNumberArn: {}
                }
            }
        },
        CreateAgentStatus: {
            http: {
                method: "PUT",
                requestUri: "/agent-status/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "State" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    State: {},
                    DisplayOrder: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AgentStatusARN: {},
                    AgentStatusId: {}
                }
            }
        },
        CreateContactFlow: {
            http: {
                method: "PUT",
                requestUri: "/contact-flows/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "Type", "Content" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Type: {},
                    Description: {},
                    Content: {},
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactFlowId: {},
                    ContactFlowArn: {}
                }
            }
        },
        CreateContactFlowModule: {
            http: {
                method: "PUT",
                requestUri: "/contact-flow-modules/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "Content" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    Content: {},
                    Tags: {
                        shape: "S2y"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        CreateEvaluationForm: {
            http: {
                method: "PUT",
                requestUri: "/evaluation-forms/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Title", "Items" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Title: {},
                    Description: {},
                    Items: {
                        shape: "S3o"
                    },
                    ScoringStrategy: {
                        shape: "S4j"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationFormId", "EvaluationFormArn" ],
                members: {
                    EvaluationFormId: {},
                    EvaluationFormArn: {}
                }
            },
            idempotent: true
        },
        CreateHoursOfOperation: {
            http: {
                method: "PUT",
                requestUri: "/hours-of-operations/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "TimeZone", "Config" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    TimeZone: {},
                    Config: {
                        shape: "S4r"
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HoursOfOperationId: {},
                    HoursOfOperationArn: {}
                }
            }
        },
        CreateInstance: {
            http: {
                method: "PUT",
                requestUri: "/instance"
            },
            input: {
                type: "structure",
                required: [ "IdentityManagementType", "InboundCallsEnabled", "OutboundCallsEnabled" ],
                members: {
                    ClientToken: {},
                    IdentityManagementType: {},
                    InstanceAlias: {
                        shape: "S51"
                    },
                    DirectoryId: {},
                    InboundCallsEnabled: {
                        type: "boolean"
                    },
                    OutboundCallsEnabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        CreateIntegrationAssociation: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/integration-associations"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationType", "IntegrationArn" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationType: {},
                    IntegrationArn: {},
                    SourceApplicationUrl: {},
                    SourceApplicationName: {},
                    SourceType: {},
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IntegrationAssociationId: {},
                    IntegrationAssociationArn: {}
                }
            }
        },
        CreateParticipant: {
            http: {
                requestUri: "/contact/create-participant"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "ParticipantDetails" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ParticipantDetails: {
                        type: "structure",
                        members: {
                            ParticipantRole: {},
                            DisplayName: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParticipantCredentials: {
                        type: "structure",
                        members: {
                            ParticipantToken: {},
                            Expiry: {}
                        }
                    },
                    ParticipantId: {}
                }
            }
        },
        CreatePersistentContactAssociation: {
            http: {
                requestUri: "/contact/persistent-contact-association/{InstanceId}/{InitialContactId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "InitialContactId", "RehydrationType", "SourceContactId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    InitialContactId: {
                        location: "uri",
                        locationName: "InitialContactId"
                    },
                    RehydrationType: {},
                    SourceContactId: {},
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContinuedFromContactId: {}
                }
            }
        },
        CreatePrompt: {
            http: {
                method: "PUT",
                requestUri: "/prompts/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "S3Uri" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    S3Uri: {},
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PromptARN: {},
                    PromptId: {}
                }
            }
        },
        CreateQueue: {
            http: {
                method: "PUT",
                requestUri: "/queues/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "HoursOfOperationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    OutboundCallerConfig: {
                        shape: "S5w"
                    },
                    HoursOfOperationId: {},
                    MaxContacts: {
                        type: "integer"
                    },
                    QuickConnectIds: {
                        shape: "S1f"
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueueArn: {},
                    QueueId: {}
                }
            }
        },
        CreateQuickConnect: {
            http: {
                method: "PUT",
                requestUri: "/quick-connects/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "QuickConnectConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    QuickConnectConfig: {
                        shape: "S63"
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QuickConnectARN: {},
                    QuickConnectId: {}
                }
            }
        },
        CreateRoutingProfile: {
            http: {
                method: "PUT",
                requestUri: "/routing-profiles/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "Description", "DefaultOutboundQueueId", "MediaConcurrencies" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    DefaultOutboundQueueId: {},
                    QueueConfigs: {
                        shape: "S1j"
                    },
                    MediaConcurrencies: {
                        shape: "S6c"
                    },
                    Tags: {
                        shape: "S2y"
                    },
                    AgentAvailabilityTimer: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoutingProfileArn: {},
                    RoutingProfileId: {}
                }
            }
        },
        CreateRule: {
            http: {
                requestUri: "/rules/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "TriggerEventSource", "Function", "Actions", "PublishStatus" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    TriggerEventSource: {
                        shape: "S6l"
                    },
                    Function: {},
                    Actions: {
                        shape: "S6o"
                    },
                    PublishStatus: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RuleArn", "RuleId" ],
                members: {
                    RuleArn: {},
                    RuleId: {}
                }
            }
        },
        CreateSecurityProfile: {
            http: {
                method: "PUT",
                requestUri: "/security-profiles/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "SecurityProfileName", "InstanceId" ],
                members: {
                    SecurityProfileName: {},
                    Description: {},
                    Permissions: {
                        shape: "S7g"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Tags: {
                        shape: "S2y"
                    },
                    AllowedAccessControlTags: {
                        shape: "S7i"
                    },
                    TagRestrictedResources: {
                        shape: "S7l"
                    },
                    Applications: {
                        shape: "S7n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityProfileId: {},
                    SecurityProfileArn: {}
                }
            }
        },
        CreateTaskTemplate: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/task/template"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name", "Fields" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    ContactFlowId: {},
                    Constraints: {
                        shape: "S7x"
                    },
                    Defaults: {
                        shape: "S86"
                    },
                    Status: {},
                    Fields: {
                        shape: "S8b"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id", "Arn" ],
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        CreateTrafficDistributionGroup: {
            http: {
                method: "PUT",
                requestUri: "/traffic-distribution-group"
            },
            input: {
                type: "structure",
                required: [ "Name", "InstanceId" ],
                members: {
                    Name: {},
                    Description: {},
                    InstanceId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        CreateUseCase: {
            http: {
                method: "PUT",
                requestUri: "/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationAssociationId", "UseCaseType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationAssociationId: {
                        location: "uri",
                        locationName: "IntegrationAssociationId"
                    },
                    UseCaseType: {},
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UseCaseId: {},
                    UseCaseArn: {}
                }
            }
        },
        CreateUser: {
            http: {
                method: "PUT",
                requestUri: "/users/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "Username", "PhoneConfig", "SecurityProfileIds", "RoutingProfileId", "InstanceId" ],
                members: {
                    Username: {},
                    Password: {},
                    IdentityInfo: {
                        shape: "S8y"
                    },
                    PhoneConfig: {
                        shape: "S92"
                    },
                    DirectoryUserId: {},
                    SecurityProfileIds: {
                        shape: "S97"
                    },
                    RoutingProfileId: {},
                    HierarchyGroupId: {},
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserId: {},
                    UserArn: {}
                }
            }
        },
        CreateUserHierarchyGroup: {
            http: {
                method: "PUT",
                requestUri: "/user-hierarchy-groups/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "Name", "InstanceId" ],
                members: {
                    Name: {},
                    ParentGroupId: {},
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HierarchyGroupId: {},
                    HierarchyGroupArn: {}
                }
            }
        },
        CreateView: {
            http: {
                method: "PUT",
                requestUri: "/views/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Status", "Content", "Name" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ClientToken: {},
                    Status: {},
                    Content: {
                        shape: "S9h"
                    },
                    Description: {},
                    Name: {
                        shape: "S9m"
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    View: {
                        shape: "S9o"
                    }
                }
            },
            idempotent: true
        },
        CreateViewVersion: {
            http: {
                method: "PUT",
                requestUri: "/views/{InstanceId}/{ViewId}/versions"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ViewId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ViewId: {
                        location: "uri",
                        locationName: "ViewId"
                    },
                    VersionDescription: {},
                    ViewContentSha256: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    View: {
                        shape: "S9o"
                    }
                }
            },
            idempotent: true
        },
        CreateVocabulary: {
            http: {
                requestUri: "/vocabulary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "VocabularyName", "LanguageCode", "Content" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    VocabularyName: {},
                    LanguageCode: {},
                    Content: {},
                    Tags: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VocabularyArn", "VocabularyId", "State" ],
                members: {
                    VocabularyArn: {},
                    VocabularyId: {},
                    State: {}
                }
            }
        },
        DeactivateEvaluationForm: {
            http: {
                requestUri: "/evaluation-forms/{InstanceId}/{EvaluationFormId}/deactivate"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationFormId", "EvaluationFormVersion" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationFormId: {
                        location: "uri",
                        locationName: "EvaluationFormId"
                    },
                    EvaluationFormVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationFormId", "EvaluationFormArn", "EvaluationFormVersion" ],
                members: {
                    EvaluationFormId: {},
                    EvaluationFormArn: {},
                    EvaluationFormVersion: {
                        type: "integer"
                    }
                }
            }
        },
        DeleteContactEvaluation: {
            http: {
                method: "DELETE",
                requestUri: "/contact-evaluations/{InstanceId}/{EvaluationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationId: {
                        location: "uri",
                        locationName: "EvaluationId"
                    }
                }
            },
            idempotent: true
        },
        DeleteContactFlow: {
            http: {
                method: "DELETE",
                requestUri: "/contact-flows/{InstanceId}/{ContactFlowId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowId: {
                        location: "uri",
                        locationName: "ContactFlowId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContactFlowModule: {
            http: {
                method: "DELETE",
                requestUri: "/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowModuleId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowModuleId: {
                        location: "uri",
                        locationName: "ContactFlowModuleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEvaluationForm: {
            http: {
                method: "DELETE",
                requestUri: "/evaluation-forms/{InstanceId}/{EvaluationFormId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationFormId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationFormId: {
                        location: "uri",
                        locationName: "EvaluationFormId"
                    },
                    EvaluationFormVersion: {
                        location: "querystring",
                        locationName: "version",
                        type: "integer"
                    }
                }
            },
            idempotent: true
        },
        DeleteHoursOfOperation: {
            http: {
                method: "DELETE",
                requestUri: "/hours-of-operations/{InstanceId}/{HoursOfOperationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "HoursOfOperationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    HoursOfOperationId: {
                        location: "uri",
                        locationName: "HoursOfOperationId"
                    }
                }
            }
        },
        DeleteInstance: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        DeleteIntegrationAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationAssociationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationAssociationId: {
                        location: "uri",
                        locationName: "IntegrationAssociationId"
                    }
                }
            }
        },
        DeletePrompt: {
            http: {
                method: "DELETE",
                requestUri: "/prompts/{InstanceId}/{PromptId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "PromptId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    PromptId: {
                        location: "uri",
                        locationName: "PromptId"
                    }
                }
            }
        },
        DeleteQueue: {
            http: {
                method: "DELETE",
                requestUri: "/queues/{InstanceId}/{QueueId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    }
                }
            }
        },
        DeleteQuickConnect: {
            http: {
                method: "DELETE",
                requestUri: "/quick-connects/{InstanceId}/{QuickConnectId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QuickConnectId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QuickConnectId: {
                        location: "uri",
                        locationName: "QuickConnectId"
                    }
                }
            }
        },
        DeleteRoutingProfile: {
            http: {
                method: "DELETE",
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    }
                }
            }
        },
        DeleteRule: {
            http: {
                method: "DELETE",
                requestUri: "/rules/{InstanceId}/{RuleId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RuleId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RuleId: {
                        location: "uri",
                        locationName: "RuleId"
                    }
                }
            }
        },
        DeleteSecurityProfile: {
            http: {
                method: "DELETE",
                requestUri: "/security-profiles/{InstanceId}/{SecurityProfileId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "SecurityProfileId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    SecurityProfileId: {
                        location: "uri",
                        locationName: "SecurityProfileId"
                    }
                }
            }
        },
        DeleteTaskTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/task/template/{TaskTemplateId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "TaskTemplateId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    TaskTemplateId: {
                        location: "uri",
                        locationName: "TaskTemplateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTrafficDistributionGroup: {
            http: {
                method: "DELETE",
                requestUri: "/traffic-distribution-group/{TrafficDistributionGroupId}"
            },
            input: {
                type: "structure",
                required: [ "TrafficDistributionGroupId" ],
                members: {
                    TrafficDistributionGroupId: {
                        location: "uri",
                        locationName: "TrafficDistributionGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteUseCase: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases/{UseCaseId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationAssociationId", "UseCaseId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationAssociationId: {
                        location: "uri",
                        locationName: "IntegrationAssociationId"
                    },
                    UseCaseId: {
                        location: "uri",
                        locationName: "UseCaseId"
                    }
                }
            }
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/users/{InstanceId}/{UserId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "UserId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    }
                }
            }
        },
        DeleteUserHierarchyGroup: {
            http: {
                method: "DELETE",
                requestUri: "/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}"
            },
            input: {
                type: "structure",
                required: [ "HierarchyGroupId", "InstanceId" ],
                members: {
                    HierarchyGroupId: {
                        location: "uri",
                        locationName: "HierarchyGroupId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        DeleteView: {
            http: {
                method: "DELETE",
                requestUri: "/views/{InstanceId}/{ViewId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ViewId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ViewId: {
                        location: "uri",
                        locationName: "ViewId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteViewVersion: {
            http: {
                method: "DELETE",
                requestUri: "/views/{InstanceId}/{ViewId}/versions/{ViewVersion}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ViewId", "ViewVersion" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ViewId: {
                        location: "uri",
                        locationName: "ViewId"
                    },
                    ViewVersion: {
                        location: "uri",
                        locationName: "ViewVersion",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteVocabulary: {
            http: {
                requestUri: "/vocabulary-remove/{InstanceId}/{VocabularyId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "VocabularyId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    VocabularyId: {
                        location: "uri",
                        locationName: "VocabularyId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "VocabularyArn", "VocabularyId", "State" ],
                members: {
                    VocabularyArn: {},
                    VocabularyId: {},
                    State: {}
                }
            }
        },
        DescribeAgentStatus: {
            http: {
                method: "GET",
                requestUri: "/agent-status/{InstanceId}/{AgentStatusId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AgentStatusId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AgentStatusId: {
                        location: "uri",
                        locationName: "AgentStatusId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AgentStatus: {
                        type: "structure",
                        members: {
                            AgentStatusARN: {},
                            AgentStatusId: {},
                            Name: {},
                            Description: {},
                            Type: {},
                            DisplayOrder: {
                                type: "integer"
                            },
                            State: {},
                            Tags: {
                                shape: "S2y"
                            },
                            LastModifiedTime: {
                                type: "timestamp"
                            },
                            LastModifiedRegion: {}
                        }
                    }
                }
            }
        },
        DescribeContact: {
            http: {
                method: "GET",
                requestUri: "/contacts/{InstanceId}/{ContactId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactId: {
                        location: "uri",
                        locationName: "ContactId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Contact: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Id: {},
                            InitialContactId: {},
                            PreviousContactId: {},
                            InitiationMethod: {},
                            Name: {},
                            Description: {},
                            Channel: {},
                            QueueInfo: {
                                type: "structure",
                                members: {
                                    Id: {},
                                    EnqueueTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            },
                            AgentInfo: {
                                type: "structure",
                                members: {
                                    Id: {},
                                    ConnectedToAgentTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            },
                            InitiationTimestamp: {
                                type: "timestamp"
                            },
                            DisconnectTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdateTimestamp: {
                                type: "timestamp"
                            },
                            ScheduledTimestamp: {
                                type: "timestamp"
                            },
                            RelatedContactId: {},
                            WisdomInfo: {
                                type: "structure",
                                members: {
                                    SessionArn: {}
                                }
                            },
                            Tags: {
                                shape: "Sbd"
                            }
                        }
                    }
                }
            }
        },
        DescribeContactEvaluation: {
            http: {
                method: "GET",
                requestUri: "/contact-evaluations/{InstanceId}/{EvaluationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationId: {
                        location: "uri",
                        locationName: "EvaluationId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Evaluation", "EvaluationForm" ],
                members: {
                    Evaluation: {
                        type: "structure",
                        required: [ "EvaluationId", "EvaluationArn", "Metadata", "Answers", "Notes", "Status", "CreatedTime", "LastModifiedTime" ],
                        members: {
                            EvaluationId: {},
                            EvaluationArn: {},
                            Metadata: {
                                type: "structure",
                                required: [ "ContactId", "EvaluatorArn" ],
                                members: {
                                    ContactId: {},
                                    EvaluatorArn: {},
                                    ContactAgentId: {},
                                    Score: {
                                        shape: "Sbk"
                                    }
                                }
                            },
                            Answers: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "structure",
                                    members: {
                                        Value: {
                                            shape: "Sbo"
                                        },
                                        SystemSuggestedValue: {
                                            shape: "Sbo"
                                        }
                                    }
                                }
                            },
                            Notes: {
                                shape: "Sbr"
                            },
                            Status: {},
                            Scores: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "Sbk"
                                }
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastModifiedTime: {
                                type: "timestamp"
                            },
                            Tags: {
                                shape: "S2y"
                            }
                        }
                    },
                    EvaluationForm: {
                        type: "structure",
                        required: [ "EvaluationFormVersion", "EvaluationFormId", "EvaluationFormArn", "Title", "Items" ],
                        members: {
                            EvaluationFormVersion: {
                                type: "integer"
                            },
                            EvaluationFormId: {},
                            EvaluationFormArn: {},
                            Title: {},
                            Description: {},
                            Items: {
                                shape: "S3o"
                            },
                            ScoringStrategy: {
                                shape: "S4j"
                            }
                        }
                    }
                }
            }
        },
        DescribeContactFlow: {
            http: {
                method: "GET",
                requestUri: "/contact-flows/{InstanceId}/{ContactFlowId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowId: {
                        location: "uri",
                        locationName: "ContactFlowId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactFlow: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Id: {},
                            Name: {},
                            Type: {},
                            State: {},
                            Description: {},
                            Content: {},
                            Tags: {
                                shape: "S2y"
                            }
                        }
                    }
                }
            }
        },
        DescribeContactFlowModule: {
            http: {
                method: "GET",
                requestUri: "/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowModuleId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowModuleId: {
                        location: "uri",
                        locationName: "ContactFlowModuleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactFlowModule: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Id: {},
                            Name: {},
                            Content: {},
                            Description: {},
                            State: {},
                            Status: {},
                            Tags: {
                                shape: "S2y"
                            }
                        }
                    }
                }
            }
        },
        DescribeEvaluationForm: {
            http: {
                method: "GET",
                requestUri: "/evaluation-forms/{InstanceId}/{EvaluationFormId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationFormId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationFormId: {
                        location: "uri",
                        locationName: "EvaluationFormId"
                    },
                    EvaluationFormVersion: {
                        location: "querystring",
                        locationName: "version",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationForm" ],
                members: {
                    EvaluationForm: {
                        type: "structure",
                        required: [ "EvaluationFormId", "EvaluationFormVersion", "Locked", "EvaluationFormArn", "Title", "Status", "Items", "CreatedTime", "CreatedBy", "LastModifiedTime", "LastModifiedBy" ],
                        members: {
                            EvaluationFormId: {},
                            EvaluationFormVersion: {
                                type: "integer"
                            },
                            Locked: {
                                type: "boolean"
                            },
                            EvaluationFormArn: {},
                            Title: {},
                            Description: {},
                            Status: {},
                            Items: {
                                shape: "S3o"
                            },
                            ScoringStrategy: {
                                shape: "S4j"
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            CreatedBy: {},
                            LastModifiedTime: {
                                type: "timestamp"
                            },
                            LastModifiedBy: {},
                            Tags: {
                                shape: "S2y"
                            }
                        }
                    }
                }
            }
        },
        DescribeHoursOfOperation: {
            http: {
                method: "GET",
                requestUri: "/hours-of-operations/{InstanceId}/{HoursOfOperationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "HoursOfOperationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    HoursOfOperationId: {
                        location: "uri",
                        locationName: "HoursOfOperationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HoursOfOperation: {
                        shape: "Scd"
                    }
                }
            }
        },
        DescribeInstance: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Instance: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            IdentityManagementType: {},
                            InstanceAlias: {
                                shape: "S51"
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            ServiceRole: {},
                            InstanceStatus: {},
                            StatusReason: {
                                type: "structure",
                                members: {
                                    Message: {}
                                }
                            },
                            InboundCallsEnabled: {
                                type: "boolean"
                            },
                            OutboundCallsEnabled: {
                                type: "boolean"
                            },
                            InstanceAccessUrl: {},
                            Tags: {
                                shape: "S2y"
                            }
                        }
                    }
                }
            }
        },
        DescribeInstanceAttribute: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/attribute/{AttributeType}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AttributeType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AttributeType: {
                        location: "uri",
                        locationName: "AttributeType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attribute: {
                        shape: "Scn"
                    }
                }
            }
        },
        DescribeInstanceStorageConfig: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/storage-config/{AssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AssociationId", "ResourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AssociationId: {
                        location: "uri",
                        locationName: "AssociationId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageConfig: {
                        shape: "St"
                    }
                }
            }
        },
        DescribePhoneNumber: {
            http: {
                method: "GET",
                requestUri: "/phone-number/{PhoneNumberId}"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "PhoneNumberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClaimedPhoneNumberSummary: {
                        type: "structure",
                        members: {
                            PhoneNumberId: {},
                            PhoneNumberArn: {},
                            PhoneNumber: {},
                            PhoneNumberCountryCode: {},
                            PhoneNumberType: {},
                            PhoneNumberDescription: {},
                            TargetArn: {},
                            InstanceId: {},
                            Tags: {
                                shape: "S2y"
                            },
                            PhoneNumberStatus: {
                                type: "structure",
                                members: {
                                    Status: {},
                                    Message: {}
                                }
                            },
                            SourcePhoneNumberArn: {}
                        }
                    }
                }
            }
        },
        DescribePrompt: {
            http: {
                method: "GET",
                requestUri: "/prompts/{InstanceId}/{PromptId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "PromptId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    PromptId: {
                        location: "uri",
                        locationName: "PromptId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Prompt: {
                        shape: "Sd1"
                    }
                }
            }
        },
        DescribeQueue: {
            http: {
                method: "GET",
                requestUri: "/queues/{InstanceId}/{QueueId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Queue: {
                        shape: "Sd4"
                    }
                }
            }
        },
        DescribeQuickConnect: {
            http: {
                method: "GET",
                requestUri: "/quick-connects/{InstanceId}/{QuickConnectId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QuickConnectId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QuickConnectId: {
                        location: "uri",
                        locationName: "QuickConnectId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QuickConnect: {
                        shape: "Sd8"
                    }
                }
            }
        },
        DescribeRoutingProfile: {
            http: {
                method: "GET",
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoutingProfile: {
                        shape: "Sdb"
                    }
                }
            }
        },
        DescribeRule: {
            http: {
                method: "GET",
                requestUri: "/rules/{InstanceId}/{RuleId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RuleId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RuleId: {
                        location: "uri",
                        locationName: "RuleId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Rule" ],
                members: {
                    Rule: {
                        type: "structure",
                        required: [ "Name", "RuleId", "RuleArn", "TriggerEventSource", "Function", "Actions", "PublishStatus", "CreatedTime", "LastUpdatedTime", "LastUpdatedBy" ],
                        members: {
                            Name: {},
                            RuleId: {},
                            RuleArn: {},
                            TriggerEventSource: {
                                shape: "S6l"
                            },
                            Function: {},
                            Actions: {
                                shape: "S6o"
                            },
                            PublishStatus: {},
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedBy: {},
                            Tags: {
                                shape: "S2y"
                            }
                        }
                    }
                }
            }
        },
        DescribeSecurityProfile: {
            http: {
                method: "GET",
                requestUri: "/security-profiles/{InstanceId}/{SecurityProfileId}"
            },
            input: {
                type: "structure",
                required: [ "SecurityProfileId", "InstanceId" ],
                members: {
                    SecurityProfileId: {
                        location: "uri",
                        locationName: "SecurityProfileId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityProfile: {
                        type: "structure",
                        members: {
                            Id: {},
                            OrganizationResourceId: {},
                            Arn: {},
                            SecurityProfileName: {},
                            Description: {},
                            Tags: {
                                shape: "S2y"
                            },
                            AllowedAccessControlTags: {
                                shape: "S7i"
                            },
                            TagRestrictedResources: {
                                shape: "S7l"
                            },
                            LastModifiedTime: {
                                type: "timestamp"
                            },
                            LastModifiedRegion: {}
                        }
                    }
                }
            }
        },
        DescribeTrafficDistributionGroup: {
            http: {
                method: "GET",
                requestUri: "/traffic-distribution-group/{TrafficDistributionGroupId}"
            },
            input: {
                type: "structure",
                required: [ "TrafficDistributionGroupId" ],
                members: {
                    TrafficDistributionGroupId: {
                        location: "uri",
                        locationName: "TrafficDistributionGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficDistributionGroup: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            Name: {},
                            Description: {},
                            InstanceArn: {},
                            Status: {},
                            Tags: {
                                shape: "S2y"
                            },
                            IsDefault: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        DescribeUser: {
            http: {
                method: "GET",
                requestUri: "/users/{InstanceId}/{UserId}"
            },
            input: {
                type: "structure",
                required: [ "UserId", "InstanceId" ],
                members: {
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            Username: {},
                            IdentityInfo: {
                                shape: "S8y"
                            },
                            PhoneConfig: {
                                shape: "S92"
                            },
                            DirectoryUserId: {},
                            SecurityProfileIds: {
                                shape: "S97"
                            },
                            RoutingProfileId: {},
                            HierarchyGroupId: {},
                            Tags: {
                                shape: "S2y"
                            },
                            LastModifiedTime: {
                                type: "timestamp"
                            },
                            LastModifiedRegion: {}
                        }
                    }
                }
            }
        },
        DescribeUserHierarchyGroup: {
            http: {
                method: "GET",
                requestUri: "/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}"
            },
            input: {
                type: "structure",
                required: [ "HierarchyGroupId", "InstanceId" ],
                members: {
                    HierarchyGroupId: {
                        location: "uri",
                        locationName: "HierarchyGroupId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HierarchyGroup: {
                        type: "structure",
                        members: {
                            Id: {},
                            Arn: {},
                            Name: {},
                            LevelId: {},
                            HierarchyPath: {
                                type: "structure",
                                members: {
                                    LevelOne: {
                                        shape: "Sdx"
                                    },
                                    LevelTwo: {
                                        shape: "Sdx"
                                    },
                                    LevelThree: {
                                        shape: "Sdx"
                                    },
                                    LevelFour: {
                                        shape: "Sdx"
                                    },
                                    LevelFive: {
                                        shape: "Sdx"
                                    }
                                }
                            },
                            Tags: {
                                shape: "S2y"
                            },
                            LastModifiedTime: {
                                type: "timestamp"
                            },
                            LastModifiedRegion: {}
                        }
                    }
                }
            }
        },
        DescribeUserHierarchyStructure: {
            http: {
                method: "GET",
                requestUri: "/user-hierarchy-structure/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HierarchyStructure: {
                        type: "structure",
                        members: {
                            LevelOne: {
                                shape: "Se1"
                            },
                            LevelTwo: {
                                shape: "Se1"
                            },
                            LevelThree: {
                                shape: "Se1"
                            },
                            LevelFour: {
                                shape: "Se1"
                            },
                            LevelFive: {
                                shape: "Se1"
                            }
                        }
                    }
                }
            }
        },
        DescribeView: {
            http: {
                method: "GET",
                requestUri: "/views/{InstanceId}/{ViewId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ViewId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ViewId: {
                        location: "uri",
                        locationName: "ViewId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    View: {
                        shape: "S9o"
                    }
                }
            }
        },
        DescribeVocabulary: {
            http: {
                method: "GET",
                requestUri: "/vocabulary/{InstanceId}/{VocabularyId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "VocabularyId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    VocabularyId: {
                        location: "uri",
                        locationName: "VocabularyId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Vocabulary" ],
                members: {
                    Vocabulary: {
                        type: "structure",
                        required: [ "Name", "Id", "Arn", "LanguageCode", "State", "LastModifiedTime" ],
                        members: {
                            Name: {},
                            Id: {},
                            Arn: {},
                            LanguageCode: {},
                            State: {},
                            LastModifiedTime: {
                                type: "timestamp"
                            },
                            FailureReason: {},
                            Content: {},
                            Tags: {
                                shape: "S2y"
                            }
                        }
                    }
                }
            }
        },
        DisassociateAnalyticsDataSet: {
            http: {
                requestUri: "/analytics-data/instance/{InstanceId}/association"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "DataSetId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    DataSetId: {},
                    TargetAccountId: {}
                }
            }
        },
        DisassociateApprovedOrigin: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/approved-origin"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Origin" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Origin: {
                        location: "querystring",
                        locationName: "origin"
                    }
                }
            }
        },
        DisassociateBot: {
            http: {
                requestUri: "/instance/{InstanceId}/bot"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    LexBot: {
                        shape: "Sf"
                    },
                    LexV2Bot: {
                        shape: "Si"
                    }
                }
            }
        },
        DisassociateFlow: {
            http: {
                method: "DELETE",
                requestUri: "/flow-associations/{InstanceId}/{ResourceId}/{ResourceType}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ResourceId", "ResourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    ResourceType: {
                        location: "uri",
                        locationName: "ResourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateInstanceStorageConfig: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/storage-config/{AssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AssociationId", "ResourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AssociationId: {
                        location: "uri",
                        locationName: "AssociationId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    }
                }
            }
        },
        DisassociateLambdaFunction: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/lambda-function"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "FunctionArn" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    FunctionArn: {
                        location: "querystring",
                        locationName: "functionArn"
                    }
                }
            }
        },
        DisassociateLexBot: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/lex-bot"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "BotName", "LexRegion" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    BotName: {
                        location: "querystring",
                        locationName: "botName"
                    },
                    LexRegion: {
                        location: "querystring",
                        locationName: "lexRegion"
                    }
                }
            }
        },
        DisassociatePhoneNumberContactFlow: {
            http: {
                method: "DELETE",
                requestUri: "/phone-number/{PhoneNumberId}/contact-flow"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId", "InstanceId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "PhoneNumberId"
                    },
                    InstanceId: {
                        location: "querystring",
                        locationName: "instanceId"
                    }
                }
            }
        },
        DisassociateQueueQuickConnects: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/disassociate-quick-connects"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "QuickConnectIds" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    QuickConnectIds: {
                        shape: "S1f"
                    }
                }
            }
        },
        DisassociateRoutingProfileQueues: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/disassociate-queues"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "QueueReferences" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    QueueReferences: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    }
                }
            }
        },
        DisassociateSecurityKey: {
            http: {
                method: "DELETE",
                requestUri: "/instance/{InstanceId}/security-key/{AssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AssociationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AssociationId: {
                        location: "uri",
                        locationName: "AssociationId"
                    }
                }
            }
        },
        DisassociateTrafficDistributionGroupUser: {
            http: {
                method: "DELETE",
                requestUri: "/traffic-distribution-group/{TrafficDistributionGroupId}/user"
            },
            input: {
                type: "structure",
                required: [ "TrafficDistributionGroupId", "UserId", "InstanceId" ],
                members: {
                    TrafficDistributionGroupId: {
                        location: "uri",
                        locationName: "TrafficDistributionGroupId"
                    },
                    UserId: {
                        location: "querystring",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "querystring",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DismissUserContact: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/contact"
            },
            input: {
                type: "structure",
                required: [ "UserId", "InstanceId", "ContactId" ],
                members: {
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetContactAttributes: {
            http: {
                method: "GET",
                requestUri: "/contact/attributes/{InstanceId}/{InitialContactId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "InitialContactId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    InitialContactId: {
                        location: "uri",
                        locationName: "InitialContactId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S2j"
                    }
                }
            }
        },
        GetCurrentMetricData: {
            http: {
                requestUri: "/metrics/current/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Filters", "CurrentMetrics" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Filters: {
                        shape: "Seu"
                    },
                    Groupings: {
                        shape: "Sey"
                    },
                    CurrentMetrics: {
                        type: "list",
                        member: {
                            shape: "Sf1"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortCriteria: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SortByMetric: {},
                                SortOrder: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MetricResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Dimensions: {
                                    shape: "Sfc"
                                },
                                Collections: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Metric: {
                                                shape: "Sf1"
                                            },
                                            Value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    DataSnapshotTime: {
                        type: "timestamp"
                    },
                    ApproximateTotalCount: {
                        type: "long"
                    }
                }
            }
        },
        GetCurrentUserData: {
            http: {
                requestUri: "/metrics/userdata/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Filters" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            Queues: {
                                shape: "Sev"
                            },
                            ContactFilter: {
                                type: "structure",
                                members: {
                                    ContactStates: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            },
                            RoutingProfiles: {
                                shape: "Sex"
                            },
                            Agents: {
                                type: "list",
                                member: {}
                            },
                            UserHierarchyGroups: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    UserDataList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                User: {
                                    type: "structure",
                                    members: {
                                        Id: {},
                                        Arn: {}
                                    }
                                },
                                RoutingProfile: {
                                    shape: "Sfe"
                                },
                                HierarchyPath: {
                                    type: "structure",
                                    members: {
                                        LevelOne: {
                                            shape: "Sfv"
                                        },
                                        LevelTwo: {
                                            shape: "Sfv"
                                        },
                                        LevelThree: {
                                            shape: "Sfv"
                                        },
                                        LevelFour: {
                                            shape: "Sfv"
                                        },
                                        LevelFive: {
                                            shape: "Sfv"
                                        }
                                    }
                                },
                                Status: {
                                    type: "structure",
                                    members: {
                                        StatusStartTimestamp: {
                                            type: "timestamp"
                                        },
                                        StatusArn: {},
                                        StatusName: {}
                                    }
                                },
                                AvailableSlotsByChannel: {
                                    shape: "Sfx"
                                },
                                MaxSlotsByChannel: {
                                    shape: "Sfx"
                                },
                                ActiveSlotsByChannel: {
                                    shape: "Sfx"
                                },
                                Contacts: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ContactId: {},
                                            Channel: {},
                                            InitiationMethod: {},
                                            AgentContactState: {},
                                            StateStartTimestamp: {
                                                type: "timestamp"
                                            },
                                            ConnectedToAgentTimestamp: {
                                                type: "timestamp"
                                            },
                                            Queue: {
                                                shape: "Sfd"
                                            }
                                        }
                                    }
                                },
                                NextStatus: {}
                            }
                        }
                    },
                    ApproximateTotalCount: {
                        type: "long"
                    }
                }
            }
        },
        GetFederationToken: {
            http: {
                method: "GET",
                requestUri: "/user/federate/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Credentials: {
                        type: "structure",
                        members: {
                            AccessToken: {
                                shape: "Sg4"
                            },
                            AccessTokenExpiration: {
                                type: "timestamp"
                            },
                            RefreshToken: {
                                shape: "Sg4"
                            },
                            RefreshTokenExpiration: {
                                type: "timestamp"
                            }
                        }
                    },
                    SignInUrl: {},
                    UserArn: {},
                    UserId: {}
                }
            }
        },
        GetFlowAssociation: {
            http: {
                method: "GET",
                requestUri: "/flow-associations/{InstanceId}/{ResourceId}/{ResourceType}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ResourceId", "ResourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    ResourceType: {
                        location: "uri",
                        locationName: "ResourceType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceId: {},
                    FlowId: {},
                    ResourceType: {}
                }
            }
        },
        GetMetricData: {
            http: {
                requestUri: "/metrics/historical/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "StartTime", "EndTime", "Filters", "HistoricalMetrics" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Filters: {
                        shape: "Seu"
                    },
                    Groupings: {
                        shape: "Sey"
                    },
                    HistoricalMetrics: {
                        type: "list",
                        member: {
                            shape: "Sg9"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MetricResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Dimensions: {
                                    shape: "Sfc"
                                },
                                Collections: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Metric: {
                                                shape: "Sg9"
                                            },
                                            Value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetMetricDataV2: {
            http: {
                requestUri: "/metrics/data"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "StartTime", "EndTime", "Filters", "Metrics" ],
                members: {
                    ResourceArn: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Interval: {
                        type: "structure",
                        members: {
                            TimeZone: {},
                            IntervalPeriod: {}
                        }
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FilterKey: {},
                                FilterValues: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    Groupings: {
                        type: "list",
                        member: {}
                    },
                    Metrics: {
                        type: "list",
                        member: {
                            shape: "Sgu"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MetricResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Dimensions: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                },
                                MetricInterval: {
                                    type: "structure",
                                    members: {
                                        Interval: {},
                                        StartTime: {
                                            type: "timestamp"
                                        },
                                        EndTime: {
                                            type: "timestamp"
                                        }
                                    }
                                },
                                Collections: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Metric: {
                                                shape: "Sgu"
                                            },
                                            Value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetPromptFile: {
            http: {
                method: "GET",
                requestUri: "/prompts/{InstanceId}/{PromptId}/file"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "PromptId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    PromptId: {
                        location: "uri",
                        locationName: "PromptId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PromptPresignedUrl: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedRegion: {}
                }
            }
        },
        GetTaskTemplate: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/task/template/{TaskTemplateId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "TaskTemplateId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    TaskTemplateId: {
                        location: "uri",
                        locationName: "TaskTemplateId"
                    },
                    SnapshotVersion: {
                        location: "querystring",
                        locationName: "snapshotVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Id", "Arn", "Name" ],
                members: {
                    InstanceId: {},
                    Id: {},
                    Arn: {},
                    Name: {},
                    Description: {},
                    ContactFlowId: {},
                    Constraints: {
                        shape: "S7x"
                    },
                    Defaults: {
                        shape: "S86"
                    },
                    Fields: {
                        shape: "S8b"
                    },
                    Status: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "S2y"
                    }
                }
            }
        },
        GetTrafficDistribution: {
            http: {
                method: "GET",
                requestUri: "/traffic-distribution/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TelephonyConfig: {
                        shape: "Shj"
                    },
                    Id: {},
                    Arn: {},
                    SignInConfig: {
                        shape: "Sho"
                    },
                    AgentConfig: {
                        shape: "Shr"
                    }
                }
            }
        },
        ImportPhoneNumber: {
            http: {
                requestUri: "/phone-number/import"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "SourcePhoneNumberArn" ],
                members: {
                    InstanceId: {},
                    SourcePhoneNumberArn: {},
                    PhoneNumberDescription: {},
                    Tags: {
                        shape: "S2y"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberId: {},
                    PhoneNumberArn: {}
                }
            }
        },
        ListAgentStatuses: {
            http: {
                method: "GET",
                requestUri: "/agent-status/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    AgentStatusTypes: {
                        location: "querystring",
                        locationName: "AgentStatusTypes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    AgentStatusSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                Type: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedRegion: {}
                            }
                        }
                    }
                }
            }
        },
        ListAnalyticsDataAssociations: {
            http: {
                method: "GET",
                requestUri: "/analytics-data/instance/{InstanceId}/association"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    DataSetId: {
                        location: "querystring",
                        locationName: "DataSetId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        shape: "S1z"
                    },
                    NextToken: {}
                }
            }
        },
        ListApprovedOrigins: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/approved-origins"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Origins: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListBots: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/bots"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "LexVersion" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    LexVersion: {
                        location: "querystring",
                        locationName: "lexVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LexBots: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LexBot: {
                                    shape: "Sf"
                                },
                                LexV2Bot: {
                                    shape: "Si"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListContactEvaluations: {
            http: {
                method: "GET",
                requestUri: "/contact-evaluations/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactId: {
                        location: "querystring",
                        locationName: "contactId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationSummaryList" ],
                members: {
                    EvaluationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EvaluationId", "EvaluationArn", "EvaluationFormTitle", "EvaluationFormId", "Status", "EvaluatorArn", "CreatedTime", "LastModifiedTime" ],
                            members: {
                                EvaluationId: {},
                                EvaluationArn: {},
                                EvaluationFormTitle: {},
                                EvaluationFormId: {},
                                Status: {},
                                EvaluatorArn: {},
                                Score: {
                                    shape: "Sbk"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListContactFlowModules: {
            http: {
                method: "GET",
                requestUri: "/contact-flow-modules-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    ContactFlowModuleState: {
                        location: "querystring",
                        locationName: "state"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactFlowModulesSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListContactFlows: {
            http: {
                method: "GET",
                requestUri: "/contact-flows-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowTypes: {
                        location: "querystring",
                        locationName: "contactFlowTypes",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactFlowSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                ContactFlowType: {},
                                ContactFlowState: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListContactReferences: {
            http: {
                method: "GET",
                requestUri: "/contact/references/{InstanceId}/{ContactId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "ReferenceTypes" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactId: {
                        location: "uri",
                        locationName: "ContactId"
                    },
                    ReferenceTypes: {
                        location: "querystring",
                        locationName: "referenceTypes",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReferenceSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Url: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                },
                                Attachment: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Value: {},
                                        Status: {}
                                    }
                                },
                                String: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                },
                                Number: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                },
                                Date: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                },
                                Email: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDefaultVocabularies: {
            http: {
                requestUri: "/default-vocabulary-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    LanguageCode: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DefaultVocabularyList" ],
                members: {
                    DefaultVocabularyList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "InstanceId", "LanguageCode", "VocabularyId", "VocabularyName" ],
                            members: {
                                InstanceId: {},
                                LanguageCode: {},
                                VocabularyId: {},
                                VocabularyName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEvaluationFormVersions: {
            http: {
                method: "GET",
                requestUri: "/evaluation-forms/{InstanceId}/{EvaluationFormId}/versions"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationFormId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationFormId: {
                        location: "uri",
                        locationName: "EvaluationFormId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationFormVersionSummaryList" ],
                members: {
                    EvaluationFormVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EvaluationFormArn", "EvaluationFormId", "EvaluationFormVersion", "Locked", "Status", "CreatedTime", "CreatedBy", "LastModifiedTime", "LastModifiedBy" ],
                            members: {
                                EvaluationFormArn: {},
                                EvaluationFormId: {},
                                EvaluationFormVersion: {
                                    type: "integer"
                                },
                                Locked: {
                                    type: "boolean"
                                },
                                Status: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                CreatedBy: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEvaluationForms: {
            http: {
                method: "GET",
                requestUri: "/evaluation-forms/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationFormSummaryList" ],
                members: {
                    EvaluationFormSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EvaluationFormId", "EvaluationFormArn", "Title", "CreatedTime", "CreatedBy", "LastModifiedTime", "LastModifiedBy", "LatestVersion" ],
                            members: {
                                EvaluationFormId: {},
                                EvaluationFormArn: {},
                                Title: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                CreatedBy: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {},
                                LastActivatedTime: {
                                    type: "timestamp"
                                },
                                LastActivatedBy: {},
                                LatestVersion: {
                                    type: "integer"
                                },
                                ActiveVersion: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFlowAssociations: {
            http: {
                method: "GET",
                requestUri: "/flow-associations-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "ResourceType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FlowAssociationSummaryList: {
                        shape: "S29"
                    },
                    NextToken: {}
                }
            }
        },
        ListHoursOfOperations: {
            http: {
                method: "GET",
                requestUri: "/hours-of-operations-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HoursOfOperationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInstanceAttributes: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/attributes"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        type: "list",
                        member: {
                            shape: "Scn"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInstanceStorageConfigs: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/storage-configs"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ResourceType" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageConfigs: {
                        type: "list",
                        member: {
                            shape: "St"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInstances: {
            http: {
                method: "GET",
                requestUri: "/instance"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                IdentityManagementType: {},
                                InstanceAlias: {
                                    shape: "S51"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                ServiceRole: {},
                                InstanceStatus: {},
                                InboundCallsEnabled: {
                                    type: "boolean"
                                },
                                OutboundCallsEnabled: {
                                    type: "boolean"
                                },
                                InstanceAccessUrl: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIntegrationAssociations: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/integration-associations"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationType: {
                        location: "querystring",
                        locationName: "integrationType"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    IntegrationArn: {
                        location: "querystring",
                        locationName: "integrationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IntegrationAssociationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IntegrationAssociationId: {},
                                IntegrationAssociationArn: {},
                                InstanceId: {},
                                IntegrationType: {},
                                IntegrationArn: {},
                                SourceApplicationUrl: {},
                                SourceApplicationName: {},
                                SourceType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLambdaFunctions: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/lambda-functions"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LambdaFunctions: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListLexBots: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/lex-bots"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LexBots: {
                        type: "list",
                        member: {
                            shape: "Sf"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPhoneNumbers: {
            http: {
                method: "GET",
                requestUri: "/phone-numbers-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    PhoneNumberTypes: {
                        shape: "Sk7",
                        location: "querystring",
                        locationName: "phoneNumberTypes"
                    },
                    PhoneNumberCountryCodes: {
                        shape: "Sk8",
                        location: "querystring",
                        locationName: "phoneNumberCountryCodes"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                PhoneNumber: {},
                                PhoneNumberType: {},
                                PhoneNumberCountryCode: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPhoneNumbersV2: {
            http: {
                requestUri: "/phone-number/list"
            },
            input: {
                type: "structure",
                members: {
                    TargetArn: {},
                    InstanceId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PhoneNumberCountryCodes: {
                        shape: "Sk8"
                    },
                    PhoneNumberTypes: {
                        shape: "Sk7"
                    },
                    PhoneNumberPrefix: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ListPhoneNumbersSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PhoneNumberId: {},
                                PhoneNumberArn: {},
                                PhoneNumber: {},
                                PhoneNumberCountryCode: {},
                                PhoneNumberType: {},
                                TargetArn: {},
                                InstanceId: {},
                                PhoneNumberDescription: {},
                                SourcePhoneNumberArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListPrompts: {
            http: {
                method: "GET",
                requestUri: "/prompts-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PromptSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListQueueQuickConnects: {
            http: {
                method: "GET",
                requestUri: "/queues/{InstanceId}/{QueueId}/quick-connects"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    QuickConnectSummaryList: {
                        shape: "Skp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedRegion: {}
                }
            }
        },
        ListQueues: {
            http: {
                method: "GET",
                requestUri: "/queues-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueTypes: {
                        location: "querystring",
                        locationName: "queueTypes",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueueSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                QueueType: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListQuickConnects: {
            http: {
                method: "GET",
                requestUri: "/quick-connects/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    QuickConnectTypes: {
                        location: "querystring",
                        locationName: "QuickConnectTypes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QuickConnectSummaryList: {
                        shape: "Skp"
                    },
                    NextToken: {}
                }
            }
        },
        ListRealtimeContactAnalysisSegmentsV2: {
            http: {
                requestUri: "/contact/list-real-time-analysis-segments-v2/{InstanceId}/{ContactId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "OutputType", "SegmentTypes" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactId: {
                        location: "uri",
                        locationName: "ContactId"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    OutputType: {},
                    SegmentTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Channel", "Status", "Segments" ],
                members: {
                    Channel: {},
                    Status: {},
                    Segments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Transcript: {
                                    type: "structure",
                                    required: [ "Id", "ParticipantId", "ParticipantRole", "Content", "Time" ],
                                    members: {
                                        Id: {},
                                        ParticipantId: {},
                                        ParticipantRole: {},
                                        DisplayName: {},
                                        Content: {},
                                        ContentType: {},
                                        Time: {
                                            shape: "Sle"
                                        },
                                        Redaction: {
                                            type: "structure",
                                            members: {
                                                CharacterOffsets: {
                                                    type: "list",
                                                    member: {
                                                        shape: "Sli"
                                                    }
                                                }
                                            }
                                        },
                                        Sentiment: {}
                                    }
                                },
                                Categories: {
                                    type: "structure",
                                    required: [ "MatchedDetails" ],
                                    members: {
                                        MatchedDetails: {
                                            type: "map",
                                            key: {},
                                            value: {
                                                type: "structure",
                                                required: [ "PointsOfInterest" ],
                                                members: {
                                                    PointsOfInterest: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                TranscriptItems: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        required: [ "Id" ],
                                                                        members: {
                                                                            Id: {},
                                                                            CharacterOffsets: {
                                                                                shape: "Sli"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                Issues: {
                                    type: "structure",
                                    required: [ "IssuesDetected" ],
                                    members: {
                                        IssuesDetected: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "TranscriptItems" ],
                                                members: {
                                                    TranscriptItems: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            required: [ "Id" ],
                                                            members: {
                                                                Content: {},
                                                                Id: {},
                                                                CharacterOffsets: {
                                                                    shape: "Sli"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                Event: {
                                    type: "structure",
                                    required: [ "Id", "EventType", "Time" ],
                                    members: {
                                        Id: {},
                                        ParticipantId: {},
                                        ParticipantRole: {},
                                        DisplayName: {},
                                        EventType: {},
                                        Time: {
                                            shape: "Sle"
                                        }
                                    }
                                },
                                Attachments: {
                                    type: "structure",
                                    required: [ "Id", "ParticipantId", "ParticipantRole", "Attachments", "Time" ],
                                    members: {
                                        Id: {},
                                        ParticipantId: {},
                                        ParticipantRole: {},
                                        DisplayName: {},
                                        Attachments: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "AttachmentName", "AttachmentId" ],
                                                members: {
                                                    AttachmentName: {},
                                                    ContentType: {},
                                                    AttachmentId: {},
                                                    Status: {}
                                                }
                                            }
                                        },
                                        Time: {
                                            shape: "Sle"
                                        }
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRoutingProfileQueues: {
            http: {
                method: "GET",
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/queues"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RoutingProfileQueueConfigSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "QueueId", "QueueArn", "QueueName", "Priority", "Delay", "Channel" ],
                            members: {
                                QueueId: {},
                                QueueArn: {},
                                QueueName: {},
                                Priority: {
                                    type: "integer"
                                },
                                Delay: {
                                    type: "integer"
                                },
                                Channel: {}
                            }
                        }
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedRegion: {}
                }
            }
        },
        ListRoutingProfiles: {
            http: {
                method: "GET",
                requestUri: "/routing-profiles-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoutingProfileSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRules: {
            http: {
                method: "GET",
                requestUri: "/rules/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    PublishStatus: {
                        location: "querystring",
                        locationName: "publishStatus"
                    },
                    EventSourceName: {
                        location: "querystring",
                        locationName: "eventSourceName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RuleSummaryList" ],
                members: {
                    RuleSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "RuleId", "RuleArn", "EventSourceName", "PublishStatus", "ActionSummaries", "CreatedTime", "LastUpdatedTime" ],
                            members: {
                                Name: {},
                                RuleId: {},
                                RuleArn: {},
                                EventSourceName: {},
                                PublishStatus: {},
                                ActionSummaries: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "ActionType" ],
                                        members: {
                                            ActionType: {}
                                        }
                                    }
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSecurityKeys: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/security-keys"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociationId: {},
                                Key: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSecurityProfileApplications: {
            http: {
                method: "GET",
                requestUri: "/security-profiles-applications/{InstanceId}/{SecurityProfileId}"
            },
            input: {
                type: "structure",
                required: [ "SecurityProfileId", "InstanceId" ],
                members: {
                    SecurityProfileId: {
                        location: "uri",
                        locationName: "SecurityProfileId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Applications: {
                        shape: "S7n"
                    },
                    NextToken: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedRegion: {}
                }
            }
        },
        ListSecurityProfilePermissions: {
            http: {
                method: "GET",
                requestUri: "/security-profiles-permissions/{InstanceId}/{SecurityProfileId}"
            },
            input: {
                type: "structure",
                required: [ "SecurityProfileId", "InstanceId" ],
                members: {
                    SecurityProfileId: {
                        location: "uri",
                        locationName: "SecurityProfileId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Permissions: {
                        shape: "S7g"
                    },
                    NextToken: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedRegion: {}
                }
            }
        },
        ListSecurityProfiles: {
            http: {
                method: "GET",
                requestUri: "/security-profiles-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityProfileSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S2y"
                    }
                }
            }
        },
        ListTaskTemplates: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/task/template"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                Description: {},
                                Status: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTrafficDistributionGroupUsers: {
            http: {
                method: "GET",
                requestUri: "/traffic-distribution-group/{TrafficDistributionGroupId}/user"
            },
            input: {
                type: "structure",
                required: [ "TrafficDistributionGroupId" ],
                members: {
                    TrafficDistributionGroupId: {
                        location: "uri",
                        locationName: "TrafficDistributionGroupId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TrafficDistributionGroupUserSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UserId: {}
                            }
                        }
                    }
                }
            }
        },
        ListTrafficDistributionGroups: {
            http: {
                method: "GET",
                requestUri: "/traffic-distribution-groups"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    InstanceId: {
                        location: "querystring",
                        locationName: "instanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TrafficDistributionGroupSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                InstanceArn: {},
                                Status: {},
                                IsDefault: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListUseCases: {
            http: {
                method: "GET",
                requestUri: "/instance/{InstanceId}/integration-associations/{IntegrationAssociationId}/use-cases"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "IntegrationAssociationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    IntegrationAssociationId: {
                        location: "uri",
                        locationName: "IntegrationAssociationId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UseCaseSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UseCaseId: {},
                                UseCaseArn: {},
                                UseCaseType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUserHierarchyGroups: {
            http: {
                method: "GET",
                requestUri: "/user-hierarchy-groups-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserHierarchyGroupSummaryList: {
                        type: "list",
                        member: {
                            shape: "Sdx"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/users-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Username: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListViewVersions: {
            http: {
                method: "GET",
                requestUri: "/views/{InstanceId}/{ViewId}/versions"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ViewId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ViewId: {
                        location: "uri",
                        locationName: "ViewId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ViewVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Description: {},
                                Name: {
                                    shape: "S9m"
                                },
                                Type: {},
                                Version: {
                                    type: "integer"
                                },
                                VersionDescription: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListViews: {
            http: {
                method: "GET",
                requestUri: "/views/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ViewsSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {
                                    shape: "S9m"
                                },
                                Type: {},
                                Status: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        MonitorContact: {
            http: {
                requestUri: "/contact/monitor"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "UserId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    UserId: {},
                    AllowedMonitorCapabilities: {
                        type: "list",
                        member: {}
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactId: {},
                    ContactArn: {}
                }
            }
        },
        PutUserStatus: {
            http: {
                method: "PUT",
                requestUri: "/users/{InstanceId}/{UserId}/status"
            },
            input: {
                type: "structure",
                required: [ "UserId", "InstanceId", "AgentStatusId" ],
                members: {
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AgentStatusId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ReleasePhoneNumber: {
            http: {
                method: "DELETE",
                requestUri: "/phone-number/{PhoneNumberId}"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "PhoneNumberId"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            }
        },
        ReplicateInstance: {
            http: {
                requestUri: "/instance/{InstanceId}/replicate"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ReplicaRegion", "ReplicaAlias" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ReplicaRegion: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ReplicaAlias: {
                        shape: "S51"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {}
                }
            }
        },
        ResumeContactRecording: {
            http: {
                requestUri: "/contact/resume-recording"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "InitialContactId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    InitialContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchAvailablePhoneNumbers: {
            http: {
                requestUri: "/phone-number/search-available"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberCountryCode", "PhoneNumberType" ],
                members: {
                    TargetArn: {},
                    InstanceId: {},
                    PhoneNumberCountryCode: {},
                    PhoneNumberType: {},
                    PhoneNumberPrefix: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    AvailableNumbersList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PhoneNumber: {},
                                PhoneNumberCountryCode: {},
                                PhoneNumberType: {}
                            }
                        }
                    }
                }
            }
        },
        SearchHoursOfOperations: {
            http: {
                requestUri: "/search-hours-of-operations"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SearchFilter: {
                        type: "structure",
                        members: {
                            TagFilter: {
                                shape: "Sof"
                            }
                        }
                    },
                    SearchCriteria: {
                        shape: "Soj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HoursOfOperations: {
                        type: "list",
                        member: {
                            shape: "Scd"
                        }
                    },
                    NextToken: {},
                    ApproximateTotalCount: {
                        type: "long"
                    }
                }
            }
        },
        SearchPrompts: {
            http: {
                requestUri: "/search-prompts"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SearchFilter: {
                        type: "structure",
                        members: {
                            TagFilter: {
                                shape: "Sof"
                            }
                        }
                    },
                    SearchCriteria: {
                        shape: "Sor"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Prompts: {
                        type: "list",
                        member: {
                            shape: "Sd1"
                        }
                    },
                    NextToken: {},
                    ApproximateTotalCount: {
                        type: "long"
                    }
                }
            }
        },
        SearchQueues: {
            http: {
                requestUri: "/search-queues"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SearchFilter: {
                        type: "structure",
                        members: {
                            TagFilter: {
                                shape: "Sof"
                            }
                        }
                    },
                    SearchCriteria: {
                        shape: "Sox"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Queues: {
                        type: "list",
                        member: {
                            shape: "Sd4"
                        }
                    },
                    NextToken: {},
                    ApproximateTotalCount: {
                        type: "long"
                    }
                }
            }
        },
        SearchQuickConnects: {
            http: {
                requestUri: "/search-quick-connects"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SearchFilter: {
                        type: "structure",
                        members: {
                            TagFilter: {
                                shape: "Sof"
                            }
                        }
                    },
                    SearchCriteria: {
                        shape: "Sp4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QuickConnects: {
                        type: "list",
                        member: {
                            shape: "Sd8"
                        }
                    },
                    NextToken: {},
                    ApproximateTotalCount: {
                        type: "long"
                    }
                }
            }
        },
        SearchResourceTags: {
            http: {
                requestUri: "/search-resource-tags"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    ResourceTypes: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SearchCriteria: {
                        type: "structure",
                        members: {
                            TagSearchCondition: {
                                type: "structure",
                                members: {
                                    tagKey: {},
                                    tagValue: {},
                                    tagKeyComparisonType: {},
                                    tagValueComparisonType: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                key: {},
                                value: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        SearchRoutingProfiles: {
            http: {
                requestUri: "/search-routing-profiles"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SearchFilter: {
                        type: "structure",
                        members: {
                            TagFilter: {
                                shape: "Sof"
                            }
                        }
                    },
                    SearchCriteria: {
                        shape: "Spj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoutingProfiles: {
                        type: "list",
                        member: {
                            shape: "Sdb"
                        }
                    },
                    NextToken: {},
                    ApproximateTotalCount: {
                        type: "long"
                    }
                }
            }
        },
        SearchSecurityProfiles: {
            http: {
                requestUri: "/search-security-profiles"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SearchCriteria: {
                        shape: "Spo"
                    },
                    SearchFilter: {
                        type: "structure",
                        members: {
                            TagFilter: {
                                shape: "Sof"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                OrganizationResourceId: {},
                                Arn: {},
                                SecurityProfileName: {},
                                Description: {},
                                Tags: {
                                    shape: "S2y"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    ApproximateTotalCount: {
                        type: "long"
                    }
                }
            }
        },
        SearchUsers: {
            http: {
                requestUri: "/search-users"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SearchFilter: {
                        type: "structure",
                        members: {
                            TagFilter: {
                                shape: "Sof"
                            }
                        }
                    },
                    SearchCriteria: {
                        shape: "Spw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                DirectoryUserId: {},
                                HierarchyGroupId: {},
                                Id: {},
                                IdentityInfo: {
                                    type: "structure",
                                    members: {
                                        FirstName: {},
                                        LastName: {}
                                    }
                                },
                                PhoneConfig: {
                                    shape: "S92"
                                },
                                RoutingProfileId: {},
                                SecurityProfileIds: {
                                    shape: "S97"
                                },
                                Tags: {
                                    shape: "S2y"
                                },
                                Username: {}
                            }
                        }
                    },
                    NextToken: {},
                    ApproximateTotalCount: {
                        type: "long"
                    }
                }
            }
        },
        SearchVocabularies: {
            http: {
                requestUri: "/vocabulary-summary/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    State: {},
                    NameStartsWith: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VocabularySummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Id", "Arn", "LanguageCode", "State", "LastModifiedTime" ],
                            members: {
                                Name: {},
                                Id: {},
                                Arn: {},
                                LanguageCode: {},
                                State: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                FailureReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        SendChatIntegrationEvent: {
            http: {
                requestUri: "/chat-integration-event"
            },
            input: {
                type: "structure",
                required: [ "SourceId", "DestinationId", "Event" ],
                members: {
                    SourceId: {},
                    DestinationId: {},
                    Subtype: {},
                    Event: {
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Type: {},
                            ContentType: {},
                            Content: {}
                        }
                    },
                    NewSessionDetails: {
                        type: "structure",
                        members: {
                            SupportedMessagingContentTypes: {
                                shape: "Sqh"
                            },
                            ParticipantDetails: {
                                shape: "Sqj"
                            },
                            Attributes: {
                                shape: "S2j"
                            },
                            StreamingConfiguration: {
                                shape: "Sqk"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InitialContactId: {},
                    NewChatCreated: {
                        type: "boolean"
                    }
                }
            }
        },
        StartChatContact: {
            http: {
                method: "PUT",
                requestUri: "/contact/chat"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId", "ParticipantDetails" ],
                members: {
                    InstanceId: {},
                    ContactFlowId: {},
                    Attributes: {
                        shape: "S2j"
                    },
                    ParticipantDetails: {
                        shape: "Sqj"
                    },
                    InitialMessage: {
                        type: "structure",
                        required: [ "ContentType", "Content" ],
                        members: {
                            ContentType: {},
                            Content: {}
                        }
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ChatDurationInMinutes: {
                        type: "integer"
                    },
                    SupportedMessagingContentTypes: {
                        shape: "Sqh"
                    },
                    PersistentChat: {
                        type: "structure",
                        members: {
                            RehydrationType: {},
                            SourceContactId: {}
                        }
                    },
                    RelatedContactId: {},
                    SegmentAttributes: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                ValueString: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactId: {},
                    ParticipantId: {},
                    ParticipantToken: {},
                    ContinuedFromContactId: {}
                }
            }
        },
        StartContactEvaluation: {
            http: {
                method: "PUT",
                requestUri: "/contact-evaluations/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "EvaluationFormId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactId: {},
                    EvaluationFormId: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationId", "EvaluationArn" ],
                members: {
                    EvaluationId: {},
                    EvaluationArn: {}
                }
            },
            idempotent: true
        },
        StartContactRecording: {
            http: {
                requestUri: "/contact/start-recording"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "InitialContactId", "VoiceRecordingConfiguration" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    InitialContactId: {},
                    VoiceRecordingConfiguration: {
                        type: "structure",
                        members: {
                            VoiceRecordingTrack: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartContactStreaming: {
            http: {
                requestUri: "/contact/start-streaming"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "ChatStreamingConfiguration", "ClientToken" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    ChatStreamingConfiguration: {
                        shape: "Sqk"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StreamingId" ],
                members: {
                    StreamingId: {}
                }
            }
        },
        StartOutboundVoiceContact: {
            http: {
                method: "PUT",
                requestUri: "/contact/outbound-voice"
            },
            input: {
                type: "structure",
                required: [ "DestinationPhoneNumber", "ContactFlowId", "InstanceId" ],
                members: {
                    DestinationPhoneNumber: {},
                    ContactFlowId: {},
                    InstanceId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    SourcePhoneNumber: {},
                    QueueId: {},
                    Attributes: {
                        shape: "S2j"
                    },
                    AnswerMachineDetectionConfig: {
                        type: "structure",
                        members: {
                            EnableAnswerMachineDetection: {
                                type: "boolean"
                            },
                            AwaitAnswerMachinePrompt: {
                                type: "boolean"
                            }
                        }
                    },
                    CampaignId: {},
                    TrafficType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactId: {}
                }
            }
        },
        StartTaskContact: {
            http: {
                method: "PUT",
                requestUri: "/contact/task"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "Name" ],
                members: {
                    InstanceId: {},
                    PreviousContactId: {},
                    ContactFlowId: {},
                    Attributes: {
                        shape: "S2j"
                    },
                    Name: {},
                    References: {
                        shape: "S6u"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ScheduledTime: {
                        type: "timestamp"
                    },
                    TaskTemplateId: {},
                    QuickConnectId: {},
                    RelatedContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactId: {}
                }
            }
        },
        StartWebRTCContact: {
            http: {
                method: "PUT",
                requestUri: "/contact/webrtc"
            },
            input: {
                type: "structure",
                required: [ "ContactFlowId", "InstanceId", "ParticipantDetails" ],
                members: {
                    Attributes: {
                        shape: "S2j"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ContactFlowId: {},
                    InstanceId: {},
                    AllowedCapabilities: {
                        type: "structure",
                        members: {
                            Customer: {
                                shape: "Sre"
                            },
                            Agent: {
                                shape: "Sre"
                            }
                        }
                    },
                    ParticipantDetails: {
                        shape: "Sqj"
                    },
                    RelatedContactId: {},
                    References: {
                        shape: "S6u"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionData: {
                        type: "structure",
                        members: {
                            Attendee: {
                                type: "structure",
                                members: {
                                    AttendeeId: {},
                                    JoinToken: {
                                        type: "string",
                                        sensitive: true
                                    }
                                }
                            },
                            Meeting: {
                                type: "structure",
                                members: {
                                    MediaRegion: {},
                                    MediaPlacement: {
                                        type: "structure",
                                        members: {
                                            AudioHostUrl: {},
                                            AudioFallbackUrl: {},
                                            SignalingUrl: {},
                                            TurnControlUrl: {},
                                            EventIngestionUrl: {}
                                        }
                                    },
                                    MeetingFeatures: {
                                        type: "structure",
                                        members: {
                                            Audio: {
                                                type: "structure",
                                                members: {
                                                    EchoReduction: {}
                                                }
                                            }
                                        }
                                    },
                                    MeetingId: {}
                                }
                            }
                        }
                    },
                    ContactId: {},
                    ParticipantId: {},
                    ParticipantToken: {}
                }
            }
        },
        StopContact: {
            http: {
                requestUri: "/contact/stop"
            },
            input: {
                type: "structure",
                required: [ "ContactId", "InstanceId" ],
                members: {
                    ContactId: {},
                    InstanceId: {},
                    DisconnectReason: {
                        type: "structure",
                        members: {
                            Code: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopContactRecording: {
            http: {
                requestUri: "/contact/stop-recording"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "InitialContactId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    InitialContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopContactStreaming: {
            http: {
                requestUri: "/contact/stop-streaming"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "StreamingId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    StreamingId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SubmitContactEvaluation: {
            http: {
                requestUri: "/contact-evaluations/{InstanceId}/{EvaluationId}/submit"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationId: {
                        location: "uri",
                        locationName: "EvaluationId"
                    },
                    Answers: {
                        shape: "Ss1"
                    },
                    Notes: {
                        shape: "Sbr"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationId", "EvaluationArn" ],
                members: {
                    EvaluationId: {},
                    EvaluationArn: {}
                }
            }
        },
        SuspendContactRecording: {
            http: {
                requestUri: "/contact/suspend-recording"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "InitialContactId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    InitialContactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagContact: {
            http: {
                requestUri: "/contact/tags"
            },
            input: {
                type: "structure",
                required: [ "ContactId", "InstanceId", "Tags" ],
                members: {
                    ContactId: {},
                    InstanceId: {},
                    Tags: {
                        shape: "Sbd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S2y"
                    }
                }
            }
        },
        TransferContact: {
            http: {
                requestUri: "/contact/transfer"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "ContactFlowId" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    QueueId: {},
                    UserId: {},
                    ContactFlowId: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactId: {},
                    ContactArn: {}
                }
            }
        },
        UntagContact: {
            http: {
                method: "DELETE",
                requestUri: "/contact/tags/{InstanceId}/{ContactId}"
            },
            input: {
                type: "structure",
                required: [ "ContactId", "InstanceId", "TagKeys" ],
                members: {
                    ContactId: {
                        location: "uri",
                        locationName: "ContactId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "TagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateAgentStatus: {
            http: {
                requestUri: "/agent-status/{InstanceId}/{AgentStatusId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AgentStatusId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AgentStatusId: {
                        location: "uri",
                        locationName: "AgentStatusId"
                    },
                    Name: {},
                    Description: {},
                    State: {},
                    DisplayOrder: {
                        type: "integer"
                    },
                    ResetOrderNumber: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateContact: {
            http: {
                requestUri: "/contacts/{InstanceId}/{ContactId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactId: {
                        location: "uri",
                        locationName: "ContactId"
                    },
                    Name: {},
                    Description: {},
                    References: {
                        shape: "S6u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactAttributes: {
            http: {
                requestUri: "/contact/attributes"
            },
            input: {
                type: "structure",
                required: [ "InitialContactId", "InstanceId", "Attributes" ],
                members: {
                    InitialContactId: {},
                    InstanceId: {},
                    Attributes: {
                        shape: "S2j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactEvaluation: {
            http: {
                requestUri: "/contact-evaluations/{InstanceId}/{EvaluationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationId: {
                        location: "uri",
                        locationName: "EvaluationId"
                    },
                    Answers: {
                        shape: "Ss1"
                    },
                    Notes: {
                        shape: "Sbr"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationId", "EvaluationArn" ],
                members: {
                    EvaluationId: {},
                    EvaluationArn: {}
                }
            }
        },
        UpdateContactFlowContent: {
            http: {
                requestUri: "/contact-flows/{InstanceId}/{ContactFlowId}/content"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId", "Content" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowId: {
                        location: "uri",
                        locationName: "ContactFlowId"
                    },
                    Content: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactFlowMetadata: {
            http: {
                requestUri: "/contact-flows/{InstanceId}/{ContactFlowId}/metadata"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowId: {
                        location: "uri",
                        locationName: "ContactFlowId"
                    },
                    Name: {},
                    Description: {},
                    ContactFlowState: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactFlowModuleContent: {
            http: {
                requestUri: "/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}/content"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowModuleId", "Content" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowModuleId: {
                        location: "uri",
                        locationName: "ContactFlowModuleId"
                    },
                    Content: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactFlowModuleMetadata: {
            http: {
                requestUri: "/contact-flow-modules/{InstanceId}/{ContactFlowModuleId}/metadata"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowModuleId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowModuleId: {
                        location: "uri",
                        locationName: "ContactFlowModuleId"
                    },
                    Name: {},
                    Description: {},
                    State: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactFlowName: {
            http: {
                requestUri: "/contact-flows/{InstanceId}/{ContactFlowId}/name"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactFlowId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactFlowId: {
                        location: "uri",
                        locationName: "ContactFlowId"
                    },
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateContactSchedule: {
            http: {
                requestUri: "/contact/schedule"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "ScheduledTime" ],
                members: {
                    InstanceId: {},
                    ContactId: {},
                    ScheduledTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEvaluationForm: {
            http: {
                method: "PUT",
                requestUri: "/evaluation-forms/{InstanceId}/{EvaluationFormId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "EvaluationFormId", "EvaluationFormVersion", "Title", "Items" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    EvaluationFormId: {
                        location: "uri",
                        locationName: "EvaluationFormId"
                    },
                    EvaluationFormVersion: {
                        type: "integer"
                    },
                    CreateNewVersion: {
                        type: "boolean"
                    },
                    Title: {},
                    Description: {},
                    Items: {
                        shape: "S3o"
                    },
                    ScoringStrategy: {
                        shape: "S4j"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EvaluationFormId", "EvaluationFormArn", "EvaluationFormVersion" ],
                members: {
                    EvaluationFormId: {},
                    EvaluationFormArn: {},
                    EvaluationFormVersion: {
                        type: "integer"
                    }
                }
            },
            idempotent: true
        },
        UpdateHoursOfOperation: {
            http: {
                requestUri: "/hours-of-operations/{InstanceId}/{HoursOfOperationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "HoursOfOperationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    HoursOfOperationId: {
                        location: "uri",
                        locationName: "HoursOfOperationId"
                    },
                    Name: {},
                    Description: {},
                    TimeZone: {},
                    Config: {
                        shape: "S4r"
                    }
                }
            }
        },
        UpdateInstanceAttribute: {
            http: {
                requestUri: "/instance/{InstanceId}/attribute/{AttributeType}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AttributeType", "Value" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AttributeType: {
                        location: "uri",
                        locationName: "AttributeType"
                    },
                    Value: {}
                }
            }
        },
        UpdateInstanceStorageConfig: {
            http: {
                requestUri: "/instance/{InstanceId}/storage-config/{AssociationId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "AssociationId", "ResourceType", "StorageConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AssociationId: {
                        location: "uri",
                        locationName: "AssociationId"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    StorageConfig: {
                        shape: "St"
                    }
                }
            }
        },
        UpdateParticipantRoleConfig: {
            http: {
                method: "PUT",
                requestUri: "/contact/participant-role-config/{InstanceId}/{ContactId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ContactId", "ChannelConfiguration" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ContactId: {
                        location: "uri",
                        locationName: "ContactId"
                    },
                    ChannelConfiguration: {
                        type: "structure",
                        members: {
                            Chat: {
                                type: "structure",
                                required: [ "ParticipantTimerConfigList" ],
                                members: {
                                    ParticipantTimerConfigList: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "ParticipantRole", "TimerType", "TimerValue" ],
                                            members: {
                                                ParticipantRole: {},
                                                TimerType: {},
                                                TimerValue: {
                                                    type: "structure",
                                                    members: {
                                                        ParticipantTimerAction: {},
                                                        ParticipantTimerDurationInMinutes: {
                                                            type: "integer"
                                                        }
                                                    },
                                                    union: true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePhoneNumber: {
            http: {
                method: "PUT",
                requestUri: "/phone-number/{PhoneNumberId}"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "PhoneNumberId"
                    },
                    TargetArn: {},
                    InstanceId: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberId: {},
                    PhoneNumberArn: {}
                }
            }
        },
        UpdatePhoneNumberMetadata: {
            http: {
                method: "PUT",
                requestUri: "/phone-number/{PhoneNumberId}/metadata"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "PhoneNumberId"
                    },
                    PhoneNumberDescription: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            }
        },
        UpdatePrompt: {
            http: {
                requestUri: "/prompts/{InstanceId}/{PromptId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "PromptId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    PromptId: {
                        location: "uri",
                        locationName: "PromptId"
                    },
                    Name: {},
                    Description: {},
                    S3Uri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PromptARN: {},
                    PromptId: {}
                }
            }
        },
        UpdateQueueHoursOfOperation: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/hours-of-operation"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "HoursOfOperationId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    HoursOfOperationId: {}
                }
            }
        },
        UpdateQueueMaxContacts: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/max-contacts"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    MaxContacts: {
                        type: "integer"
                    }
                }
            }
        },
        UpdateQueueName: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/name"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    Name: {},
                    Description: {}
                }
            }
        },
        UpdateQueueOutboundCallerConfig: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/outbound-caller-config"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "OutboundCallerConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    OutboundCallerConfig: {
                        shape: "S5w"
                    }
                }
            }
        },
        UpdateQueueStatus: {
            http: {
                requestUri: "/queues/{InstanceId}/{QueueId}/status"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QueueId", "Status" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QueueId: {
                        location: "uri",
                        locationName: "QueueId"
                    },
                    Status: {}
                }
            }
        },
        UpdateQuickConnectConfig: {
            http: {
                requestUri: "/quick-connects/{InstanceId}/{QuickConnectId}/config"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QuickConnectId", "QuickConnectConfig" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QuickConnectId: {
                        location: "uri",
                        locationName: "QuickConnectId"
                    },
                    QuickConnectConfig: {
                        shape: "S63"
                    }
                }
            }
        },
        UpdateQuickConnectName: {
            http: {
                requestUri: "/quick-connects/{InstanceId}/{QuickConnectId}/name"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "QuickConnectId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    QuickConnectId: {
                        location: "uri",
                        locationName: "QuickConnectId"
                    },
                    Name: {},
                    Description: {}
                }
            }
        },
        UpdateRoutingProfileAgentAvailabilityTimer: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/agent-availability-timer"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "AgentAvailabilityTimer" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    AgentAvailabilityTimer: {}
                }
            }
        },
        UpdateRoutingProfileConcurrency: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/concurrency"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "MediaConcurrencies" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    MediaConcurrencies: {
                        shape: "S6c"
                    }
                }
            }
        },
        UpdateRoutingProfileDefaultOutboundQueue: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/default-outbound-queue"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "DefaultOutboundQueueId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    DefaultOutboundQueueId: {}
                }
            }
        },
        UpdateRoutingProfileName: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/name"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    Name: {},
                    Description: {}
                }
            }
        },
        UpdateRoutingProfileQueues: {
            http: {
                requestUri: "/routing-profiles/{InstanceId}/{RoutingProfileId}/queues"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "RoutingProfileId", "QueueConfigs" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    RoutingProfileId: {
                        location: "uri",
                        locationName: "RoutingProfileId"
                    },
                    QueueConfigs: {
                        shape: "S1j"
                    }
                }
            }
        },
        UpdateRule: {
            http: {
                method: "PUT",
                requestUri: "/rules/{InstanceId}/{RuleId}"
            },
            input: {
                type: "structure",
                required: [ "RuleId", "InstanceId", "Name", "Function", "Actions", "PublishStatus" ],
                members: {
                    RuleId: {
                        location: "uri",
                        locationName: "RuleId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Function: {},
                    Actions: {
                        shape: "S6o"
                    },
                    PublishStatus: {}
                }
            }
        },
        UpdateSecurityProfile: {
            http: {
                requestUri: "/security-profiles/{InstanceId}/{SecurityProfileId}"
            },
            input: {
                type: "structure",
                required: [ "SecurityProfileId", "InstanceId" ],
                members: {
                    Description: {},
                    Permissions: {
                        shape: "S7g"
                    },
                    SecurityProfileId: {
                        location: "uri",
                        locationName: "SecurityProfileId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    AllowedAccessControlTags: {
                        shape: "S7i"
                    },
                    TagRestrictedResources: {
                        shape: "S7l"
                    },
                    Applications: {
                        shape: "S7n"
                    }
                }
            }
        },
        UpdateTaskTemplate: {
            http: {
                requestUri: "/instance/{InstanceId}/task/template/{TaskTemplateId}"
            },
            input: {
                type: "structure",
                required: [ "TaskTemplateId", "InstanceId" ],
                members: {
                    TaskTemplateId: {
                        location: "uri",
                        locationName: "TaskTemplateId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    Name: {},
                    Description: {},
                    ContactFlowId: {},
                    Constraints: {
                        shape: "S7x"
                    },
                    Defaults: {
                        shape: "S86"
                    },
                    Status: {},
                    Fields: {
                        shape: "S8b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceId: {},
                    Id: {},
                    Arn: {},
                    Name: {},
                    Description: {},
                    ContactFlowId: {},
                    Constraints: {
                        shape: "S7x"
                    },
                    Defaults: {
                        shape: "S86"
                    },
                    Fields: {
                        shape: "S8b"
                    },
                    Status: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateTrafficDistribution: {
            http: {
                method: "PUT",
                requestUri: "/traffic-distribution/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    TelephonyConfig: {
                        shape: "Shj"
                    },
                    SignInConfig: {
                        shape: "Sho"
                    },
                    AgentConfig: {
                        shape: "Shr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateUserHierarchy: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/hierarchy"
            },
            input: {
                type: "structure",
                required: [ "UserId", "InstanceId" ],
                members: {
                    HierarchyGroupId: {},
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserHierarchyGroupName: {
            http: {
                requestUri: "/user-hierarchy-groups/{InstanceId}/{HierarchyGroupId}/name"
            },
            input: {
                type: "structure",
                required: [ "Name", "HierarchyGroupId", "InstanceId" ],
                members: {
                    Name: {},
                    HierarchyGroupId: {
                        location: "uri",
                        locationName: "HierarchyGroupId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserHierarchyStructure: {
            http: {
                requestUri: "/user-hierarchy-structure/{InstanceId}"
            },
            input: {
                type: "structure",
                required: [ "HierarchyStructure", "InstanceId" ],
                members: {
                    HierarchyStructure: {
                        type: "structure",
                        members: {
                            LevelOne: {
                                shape: "Sua"
                            },
                            LevelTwo: {
                                shape: "Sua"
                            },
                            LevelThree: {
                                shape: "Sua"
                            },
                            LevelFour: {
                                shape: "Sua"
                            },
                            LevelFive: {
                                shape: "Sua"
                            }
                        }
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserIdentityInfo: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/identity-info"
            },
            input: {
                type: "structure",
                required: [ "IdentityInfo", "UserId", "InstanceId" ],
                members: {
                    IdentityInfo: {
                        shape: "S8y"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserPhoneConfig: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/phone-config"
            },
            input: {
                type: "structure",
                required: [ "PhoneConfig", "UserId", "InstanceId" ],
                members: {
                    PhoneConfig: {
                        shape: "S92"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserRoutingProfile: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/routing-profile"
            },
            input: {
                type: "structure",
                required: [ "RoutingProfileId", "UserId", "InstanceId" ],
                members: {
                    RoutingProfileId: {},
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateUserSecurityProfiles: {
            http: {
                requestUri: "/users/{InstanceId}/{UserId}/security-profiles"
            },
            input: {
                type: "structure",
                required: [ "SecurityProfileIds", "UserId", "InstanceId" ],
                members: {
                    SecurityProfileIds: {
                        shape: "S97"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    }
                }
            }
        },
        UpdateViewContent: {
            http: {
                requestUri: "/views/{InstanceId}/{ViewId}"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ViewId", "Status", "Content" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ViewId: {
                        location: "uri",
                        locationName: "ViewId"
                    },
                    Status: {},
                    Content: {
                        shape: "S9h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    View: {
                        shape: "S9o"
                    }
                }
            }
        },
        UpdateViewMetadata: {
            http: {
                requestUri: "/views/{InstanceId}/{ViewId}/metadata"
            },
            input: {
                type: "structure",
                required: [ "InstanceId", "ViewId" ],
                members: {
                    InstanceId: {
                        location: "uri",
                        locationName: "InstanceId"
                    },
                    ViewId: {
                        location: "uri",
                        locationName: "ViewId"
                    },
                    Name: {
                        shape: "S9m"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sf: {
            type: "structure",
            required: [ "Name", "LexRegion" ],
            members: {
                Name: {},
                LexRegion: {}
            }
        },
        Si: {
            type: "structure",
            members: {
                AliasArn: {}
            }
        },
        St: {
            type: "structure",
            required: [ "StorageType" ],
            members: {
                AssociationId: {},
                StorageType: {},
                S3Config: {
                    type: "structure",
                    required: [ "BucketName", "BucketPrefix" ],
                    members: {
                        BucketName: {},
                        BucketPrefix: {},
                        EncryptionConfig: {
                            shape: "Sz"
                        }
                    }
                },
                KinesisVideoStreamConfig: {
                    type: "structure",
                    required: [ "Prefix", "RetentionPeriodHours", "EncryptionConfig" ],
                    members: {
                        Prefix: {},
                        RetentionPeriodHours: {
                            type: "integer"
                        },
                        EncryptionConfig: {
                            shape: "Sz"
                        }
                    }
                },
                KinesisStreamConfig: {
                    type: "structure",
                    required: [ "StreamArn" ],
                    members: {
                        StreamArn: {}
                    }
                },
                KinesisFirehoseConfig: {
                    type: "structure",
                    required: [ "FirehoseArn" ],
                    members: {
                        FirehoseArn: {}
                    }
                }
            }
        },
        Sz: {
            type: "structure",
            required: [ "EncryptionType", "KeyId" ],
            members: {
                EncryptionType: {},
                KeyId: {}
            }
        },
        S1f: {
            type: "list",
            member: {}
        },
        S1j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "QueueReference", "Priority", "Delay" ],
                members: {
                    QueueReference: {
                        shape: "S1l"
                    },
                    Priority: {
                        type: "integer"
                    },
                    Delay: {
                        type: "integer"
                    }
                }
            }
        },
        S1l: {
            type: "structure",
            required: [ "QueueId", "Channel" ],
            members: {
                QueueId: {},
                Channel: {}
            }
        },
        S1x: {
            type: "list",
            member: {}
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DataSetId: {},
                    TargetAccountId: {},
                    ResourceShareId: {},
                    ResourceShareArn: {}
                }
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        S29: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceId: {},
                    FlowId: {},
                    ResourceType: {}
                }
            }
        },
        S2f: {
            type: "structure",
            members: {
                Type: {},
                Address: {}
            }
        },
        S2j: {
            type: "map",
            key: {},
            value: {}
        },
        S2y: {
            type: "map",
            key: {},
            value: {}
        },
        S3o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Section: {
                        type: "structure",
                        required: [ "Title", "RefId", "Items" ],
                        members: {
                            Title: {},
                            RefId: {},
                            Instructions: {},
                            Items: {
                                shape: "S3o"
                            },
                            Weight: {
                                type: "double"
                            }
                        }
                    },
                    Question: {
                        type: "structure",
                        required: [ "Title", "RefId", "QuestionType" ],
                        members: {
                            Title: {},
                            Instructions: {},
                            RefId: {},
                            NotApplicableEnabled: {
                                type: "boolean"
                            },
                            QuestionType: {},
                            QuestionTypeProperties: {
                                type: "structure",
                                members: {
                                    Numeric: {
                                        type: "structure",
                                        required: [ "MinValue", "MaxValue" ],
                                        members: {
                                            MinValue: {
                                                type: "integer"
                                            },
                                            MaxValue: {
                                                type: "integer"
                                            },
                                            Options: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    required: [ "MinValue", "MaxValue" ],
                                                    members: {
                                                        MinValue: {
                                                            type: "integer"
                                                        },
                                                        MaxValue: {
                                                            type: "integer"
                                                        },
                                                        Score: {
                                                            type: "integer"
                                                        },
                                                        AutomaticFail: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            Automation: {
                                                type: "structure",
                                                members: {
                                                    PropertyValue: {
                                                        type: "structure",
                                                        required: [ "Label" ],
                                                        members: {
                                                            Label: {}
                                                        }
                                                    }
                                                },
                                                union: true
                                            }
                                        }
                                    },
                                    SingleSelect: {
                                        type: "structure",
                                        required: [ "Options" ],
                                        members: {
                                            Options: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    required: [ "RefId", "Text" ],
                                                    members: {
                                                        RefId: {},
                                                        Text: {},
                                                        Score: {
                                                            type: "integer"
                                                        },
                                                        AutomaticFail: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            DisplayAs: {},
                                            Automation: {
                                                type: "structure",
                                                required: [ "Options" ],
                                                members: {
                                                    Options: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                RuleCategory: {
                                                                    type: "structure",
                                                                    required: [ "Category", "Condition", "OptionRefId" ],
                                                                    members: {
                                                                        Category: {},
                                                                        Condition: {},
                                                                        OptionRefId: {}
                                                                    }
                                                                }
                                                            },
                                                            union: true
                                                        }
                                                    },
                                                    DefaultOptionRefId: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                union: true
                            },
                            Weight: {
                                type: "double"
                            }
                        }
                    }
                },
                union: true
            }
        },
        S4j: {
            type: "structure",
            required: [ "Mode", "Status" ],
            members: {
                Mode: {},
                Status: {}
            }
        },
        S4r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Day", "StartTime", "EndTime" ],
                members: {
                    Day: {},
                    StartTime: {
                        shape: "S4u"
                    },
                    EndTime: {
                        shape: "S4u"
                    }
                }
            }
        },
        S4u: {
            type: "structure",
            required: [ "Hours", "Minutes" ],
            members: {
                Hours: {
                    type: "integer"
                },
                Minutes: {
                    type: "integer"
                }
            }
        },
        S51: {
            type: "string",
            sensitive: true
        },
        S5w: {
            type: "structure",
            members: {
                OutboundCallerIdName: {},
                OutboundCallerIdNumberId: {},
                OutboundFlowId: {}
            }
        },
        S63: {
            type: "structure",
            required: [ "QuickConnectType" ],
            members: {
                QuickConnectType: {},
                UserConfig: {
                    type: "structure",
                    required: [ "UserId", "ContactFlowId" ],
                    members: {
                        UserId: {},
                        ContactFlowId: {}
                    }
                },
                QueueConfig: {
                    type: "structure",
                    required: [ "QueueId", "ContactFlowId" ],
                    members: {
                        QueueId: {},
                        ContactFlowId: {}
                    }
                },
                PhoneConfig: {
                    type: "structure",
                    required: [ "PhoneNumber" ],
                    members: {
                        PhoneNumber: {}
                    }
                }
            }
        },
        S6c: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Channel", "Concurrency" ],
                members: {
                    Channel: {},
                    Concurrency: {
                        type: "integer"
                    },
                    CrossChannelBehavior: {
                        type: "structure",
                        required: [ "BehaviorType" ],
                        members: {
                            BehaviorType: {}
                        }
                    }
                }
            }
        },
        S6l: {
            type: "structure",
            required: [ "EventSourceName" ],
            members: {
                EventSourceName: {},
                IntegrationAssociationId: {}
            }
        },
        S6o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ActionType" ],
                members: {
                    ActionType: {},
                    TaskAction: {
                        type: "structure",
                        required: [ "Name", "ContactFlowId" ],
                        members: {
                            Name: {},
                            Description: {},
                            ContactFlowId: {},
                            References: {
                                shape: "S6u"
                            }
                        }
                    },
                    EventBridgeAction: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {}
                        }
                    },
                    AssignContactCategoryAction: {
                        type: "structure",
                        members: {}
                    },
                    SendNotificationAction: {
                        type: "structure",
                        required: [ "DeliveryMethod", "Content", "ContentType", "Recipient" ],
                        members: {
                            DeliveryMethod: {},
                            Subject: {},
                            Content: {},
                            ContentType: {},
                            Recipient: {
                                type: "structure",
                                members: {
                                    UserTags: {
                                        type: "map",
                                        key: {},
                                        value: {}
                                    },
                                    UserIds: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S6u: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Value", "Type" ],
                members: {
                    Value: {},
                    Type: {}
                }
            }
        },
        S7g: {
            type: "list",
            member: {}
        },
        S7i: {
            type: "map",
            key: {},
            value: {}
        },
        S7l: {
            type: "list",
            member: {}
        },
        S7n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Namespace: {},
                    ApplicationPermissions: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S7x: {
            type: "structure",
            members: {
                RequiredFields: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Id: {
                                shape: "S80"
                            }
                        }
                    }
                },
                ReadOnlyFields: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Id: {
                                shape: "S80"
                            }
                        }
                    }
                },
                InvisibleFields: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Id: {
                                shape: "S80"
                            }
                        }
                    }
                }
            }
        },
        S80: {
            type: "structure",
            members: {
                Name: {}
            }
        },
        S86: {
            type: "structure",
            members: {
                DefaultFieldValues: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Id: {
                                shape: "S80"
                            },
                            DefaultValue: {}
                        }
                    }
                }
            }
        },
        S8b: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        shape: "S80"
                    },
                    Description: {},
                    Type: {},
                    SingleSelectOptions: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S8y: {
            type: "structure",
            members: {
                FirstName: {},
                LastName: {},
                Email: {},
                SecondaryEmail: {},
                Mobile: {}
            }
        },
        S92: {
            type: "structure",
            required: [ "PhoneType" ],
            members: {
                PhoneType: {},
                AutoAccept: {
                    type: "boolean"
                },
                AfterContactWorkTimeLimit: {
                    type: "integer"
                },
                DeskPhoneNumber: {}
            }
        },
        S97: {
            type: "list",
            member: {}
        },
        S9h: {
            type: "structure",
            members: {
                Template: {},
                Actions: {
                    shape: "S9j"
                }
            }
        },
        S9j: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            }
        },
        S9m: {
            type: "string",
            sensitive: true
        },
        S9o: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {
                    shape: "S9m"
                },
                Status: {},
                Type: {},
                Description: {},
                Version: {
                    type: "integer"
                },
                VersionDescription: {},
                Content: {
                    type: "structure",
                    members: {
                        InputSchema: {
                            type: "string",
                            sensitive: true
                        },
                        Template: {},
                        Actions: {
                            shape: "S9j"
                        }
                    }
                },
                Tags: {
                    shape: "S2y"
                },
                CreatedTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                ViewContentSha256: {}
            }
        },
        Sbd: {
            type: "map",
            key: {},
            value: {}
        },
        Sbk: {
            type: "structure",
            members: {
                Percentage: {
                    type: "double"
                },
                NotApplicable: {
                    type: "boolean"
                },
                AutomaticFail: {
                    type: "boolean"
                }
            }
        },
        Sbo: {
            type: "structure",
            members: {
                StringValue: {},
                NumericValue: {
                    type: "double"
                },
                NotApplicable: {
                    type: "boolean"
                }
            },
            union: true
        },
        Sbr: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Value: {}
                }
            }
        },
        Scd: {
            type: "structure",
            members: {
                HoursOfOperationId: {},
                HoursOfOperationArn: {},
                Name: {},
                Description: {},
                TimeZone: {},
                Config: {
                    shape: "S4r"
                },
                Tags: {
                    shape: "S2y"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                LastModifiedRegion: {}
            }
        },
        Scn: {
            type: "structure",
            members: {
                AttributeType: {},
                Value: {}
            }
        },
        Sd1: {
            type: "structure",
            members: {
                PromptARN: {},
                PromptId: {},
                Name: {},
                Description: {},
                Tags: {
                    shape: "S2y"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                LastModifiedRegion: {}
            }
        },
        Sd4: {
            type: "structure",
            members: {
                Name: {},
                QueueArn: {},
                QueueId: {},
                Description: {},
                OutboundCallerConfig: {
                    shape: "S5w"
                },
                HoursOfOperationId: {},
                MaxContacts: {
                    type: "integer"
                },
                Status: {},
                Tags: {
                    shape: "S2y"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                LastModifiedRegion: {}
            }
        },
        Sd8: {
            type: "structure",
            members: {
                QuickConnectARN: {},
                QuickConnectId: {},
                Name: {},
                Description: {},
                QuickConnectConfig: {
                    shape: "S63"
                },
                Tags: {
                    shape: "S2y"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                LastModifiedRegion: {}
            }
        },
        Sdb: {
            type: "structure",
            members: {
                InstanceId: {},
                Name: {},
                RoutingProfileArn: {},
                RoutingProfileId: {},
                Description: {},
                MediaConcurrencies: {
                    shape: "S6c"
                },
                DefaultOutboundQueueId: {},
                Tags: {
                    shape: "S2y"
                },
                NumberOfAssociatedQueues: {
                    type: "long"
                },
                NumberOfAssociatedUsers: {
                    type: "long"
                },
                AgentAvailabilityTimer: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                LastModifiedRegion: {},
                IsDefault: {
                    type: "boolean"
                }
            }
        },
        Sdx: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                LastModifiedRegion: {}
            }
        },
        Se1: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                LastModifiedRegion: {}
            }
        },
        Seu: {
            type: "structure",
            members: {
                Queues: {
                    shape: "Sev"
                },
                Channels: {
                    type: "list",
                    member: {}
                },
                RoutingProfiles: {
                    shape: "Sex"
                }
            }
        },
        Sev: {
            type: "list",
            member: {}
        },
        Sex: {
            type: "list",
            member: {}
        },
        Sey: {
            type: "list",
            member: {}
        },
        Sf1: {
            type: "structure",
            members: {
                Name: {},
                Unit: {}
            }
        },
        Sfc: {
            type: "structure",
            members: {
                Queue: {
                    shape: "Sfd"
                },
                Channel: {},
                RoutingProfile: {
                    shape: "Sfe"
                }
            }
        },
        Sfd: {
            type: "structure",
            members: {
                Id: {},
                Arn: {}
            }
        },
        Sfe: {
            type: "structure",
            members: {
                Id: {},
                Arn: {}
            }
        },
        Sfv: {
            type: "structure",
            members: {
                Id: {},
                Arn: {}
            }
        },
        Sfx: {
            type: "map",
            key: {},
            value: {
                type: "integer"
            }
        },
        Sg4: {
            type: "string",
            sensitive: true
        },
        Sg9: {
            type: "structure",
            members: {
                Name: {},
                Threshold: {
                    type: "structure",
                    members: {
                        Comparison: {},
                        ThresholdValue: {
                            type: "double"
                        }
                    }
                },
                Statistic: {},
                Unit: {}
            }
        },
        Sgu: {
            type: "structure",
            members: {
                Name: {},
                Threshold: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Comparison: {},
                            ThresholdValue: {
                                type: "double"
                            }
                        }
                    }
                },
                MetricFilters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            MetricFilterKey: {},
                            MetricFilterValues: {
                                type: "list",
                                member: {}
                            },
                            Negate: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        Shj: {
            type: "structure",
            required: [ "Distributions" ],
            members: {
                Distributions: {
                    shape: "Shk"
                }
            }
        },
        Shk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Region", "Percentage" ],
                members: {
                    Region: {},
                    Percentage: {
                        type: "integer"
                    }
                }
            }
        },
        Sho: {
            type: "structure",
            required: [ "Distributions" ],
            members: {
                Distributions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Region", "Enabled" ],
                        members: {
                            Region: {},
                            Enabled: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        Shr: {
            type: "structure",
            required: [ "Distributions" ],
            members: {
                Distributions: {
                    shape: "Shk"
                }
            }
        },
        Sk7: {
            type: "list",
            member: {}
        },
        Sk8: {
            type: "list",
            member: {}
        },
        Skp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Arn: {},
                    Name: {},
                    QuickConnectType: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedRegion: {}
                }
            }
        },
        Sle: {
            type: "structure",
            members: {
                AbsoluteTime: {
                    type: "timestamp",
                    timestampFormat: "iso8601"
                }
            },
            union: true
        },
        Sli: {
            type: "structure",
            required: [ "BeginOffsetChar", "EndOffsetChar" ],
            members: {
                BeginOffsetChar: {
                    type: "integer"
                },
                EndOffsetChar: {
                    type: "integer"
                }
            }
        },
        Sof: {
            type: "structure",
            members: {
                OrConditions: {
                    type: "list",
                    member: {
                        shape: "Soh"
                    }
                },
                AndConditions: {
                    shape: "Soh"
                },
                TagCondition: {
                    shape: "Soi"
                }
            }
        },
        Soh: {
            type: "list",
            member: {
                shape: "Soi"
            }
        },
        Soi: {
            type: "structure",
            members: {
                TagKey: {},
                TagValue: {}
            }
        },
        Soj: {
            type: "structure",
            members: {
                OrConditions: {
                    shape: "Sok"
                },
                AndConditions: {
                    shape: "Sok"
                },
                StringCondition: {
                    shape: "Sol"
                }
            }
        },
        Sok: {
            type: "list",
            member: {
                shape: "Soj"
            }
        },
        Sol: {
            type: "structure",
            members: {
                FieldName: {},
                Value: {},
                ComparisonType: {}
            }
        },
        Sor: {
            type: "structure",
            members: {
                OrConditions: {
                    shape: "Sos"
                },
                AndConditions: {
                    shape: "Sos"
                },
                StringCondition: {
                    shape: "Sol"
                }
            }
        },
        Sos: {
            type: "list",
            member: {
                shape: "Sor"
            }
        },
        Sox: {
            type: "structure",
            members: {
                OrConditions: {
                    shape: "Soy"
                },
                AndConditions: {
                    shape: "Soy"
                },
                StringCondition: {
                    shape: "Sol"
                },
                QueueTypeCondition: {}
            }
        },
        Soy: {
            type: "list",
            member: {
                shape: "Sox"
            }
        },
        Sp4: {
            type: "structure",
            members: {
                OrConditions: {
                    shape: "Sp5"
                },
                AndConditions: {
                    shape: "Sp5"
                },
                StringCondition: {
                    shape: "Sol"
                }
            }
        },
        Sp5: {
            type: "list",
            member: {
                shape: "Sp4"
            }
        },
        Spj: {
            type: "structure",
            members: {
                OrConditions: {
                    shape: "Spk"
                },
                AndConditions: {
                    shape: "Spk"
                },
                StringCondition: {
                    shape: "Sol"
                }
            }
        },
        Spk: {
            type: "list",
            member: {
                shape: "Spj"
            }
        },
        Spo: {
            type: "structure",
            members: {
                OrConditions: {
                    shape: "Spp"
                },
                AndConditions: {
                    shape: "Spp"
                },
                StringCondition: {
                    shape: "Sol"
                }
            }
        },
        Spp: {
            type: "list",
            member: {
                shape: "Spo"
            }
        },
        Spw: {
            type: "structure",
            members: {
                OrConditions: {
                    shape: "Spx"
                },
                AndConditions: {
                    shape: "Spx"
                },
                StringCondition: {
                    shape: "Sol"
                },
                HierarchyGroupCondition: {
                    type: "structure",
                    members: {
                        Value: {},
                        HierarchyGroupMatchType: {}
                    }
                }
            }
        },
        Spx: {
            type: "list",
            member: {
                shape: "Spw"
            }
        },
        Sqh: {
            type: "list",
            member: {}
        },
        Sqj: {
            type: "structure",
            required: [ "DisplayName" ],
            members: {
                DisplayName: {}
            }
        },
        Sqk: {
            type: "structure",
            required: [ "StreamingEndpointArn" ],
            members: {
                StreamingEndpointArn: {}
            }
        },
        Sre: {
            type: "structure",
            members: {
                Video: {}
            }
        },
        Ss1: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Value: {
                        shape: "Sbo"
                    }
                }
            }
        },
        Sua: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {}
            }
        }
    },
    paginators: {
        GetCurrentMetricData: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetCurrentUserData: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetMetricData: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetMetricDataV2: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListAgentStatuses: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AgentStatusSummaryList"
        },
        ListApprovedOrigins: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Origins"
        },
        ListBots: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LexBots"
        },
        ListContactEvaluations: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "EvaluationSummaryList"
        },
        ListContactFlowModules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ContactFlowModulesSummaryList"
        },
        ListContactFlows: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ContactFlowSummaryList"
        },
        ListContactReferences: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "ReferenceSummaryList"
        },
        ListDefaultVocabularies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DefaultVocabularyList"
        },
        ListEvaluationFormVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EvaluationFormVersionSummaryList"
        },
        ListEvaluationForms: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EvaluationFormSummaryList"
        },
        ListFlowAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "FlowAssociationSummaryList"
        },
        ListHoursOfOperations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "HoursOfOperationSummaryList"
        },
        ListInstanceAttributes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Attributes"
        },
        ListInstanceStorageConfigs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "StorageConfigs"
        },
        ListInstances: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceSummaryList"
        },
        ListIntegrationAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IntegrationAssociationSummaryList"
        },
        ListLambdaFunctions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LambdaFunctions"
        },
        ListLexBots: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LexBots"
        },
        ListPhoneNumbers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PhoneNumberSummaryList"
        },
        ListPhoneNumbersV2: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ListPhoneNumbersSummaryList"
        },
        ListPrompts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PromptSummaryList"
        },
        ListQueueQuickConnects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "LastModifiedRegion", "LastModifiedTime" ],
            output_token: "NextToken",
            result_key: "QuickConnectSummaryList"
        },
        ListQueues: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "QueueSummaryList"
        },
        ListQuickConnects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "QuickConnectSummaryList"
        },
        ListRealtimeContactAnalysisSegmentsV2: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListRoutingProfileQueues: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "LastModifiedRegion", "LastModifiedTime" ],
            output_token: "NextToken",
            result_key: "RoutingProfileQueueConfigSummaryList"
        },
        ListRoutingProfiles: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RoutingProfileSummaryList"
        },
        ListRules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RuleSummaryList"
        },
        ListSecurityKeys: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SecurityKeys"
        },
        ListSecurityProfileApplications: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "LastModifiedRegion", "LastModifiedTime" ],
            output_token: "NextToken",
            result_key: "Applications"
        },
        ListSecurityProfilePermissions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "LastModifiedRegion", "LastModifiedTime" ],
            output_token: "NextToken",
            result_key: "Permissions"
        },
        ListSecurityProfiles: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SecurityProfileSummaryList"
        },
        ListTaskTemplates: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TaskTemplates"
        },
        ListTrafficDistributionGroupUsers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TrafficDistributionGroupUserSummaryList"
        },
        ListTrafficDistributionGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TrafficDistributionGroupSummaryList"
        },
        ListUseCases: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "UseCaseSummaryList"
        },
        ListUserHierarchyGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "UserHierarchyGroupSummaryList"
        },
        ListUsers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "UserSummaryList"
        },
        ListViewVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ViewVersionSummaryList"
        },
        ListViews: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ViewsSummaryList"
        },
        SearchAvailablePhoneNumbers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AvailableNumbersList"
        },
        SearchHoursOfOperations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "ApproximateTotalCount" ],
            output_token: "NextToken",
            result_key: "HoursOfOperations"
        },
        SearchPrompts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "ApproximateTotalCount" ],
            output_token: "NextToken",
            result_key: "Prompts"
        },
        SearchQueues: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "ApproximateTotalCount" ],
            output_token: "NextToken",
            result_key: "Queues"
        },
        SearchQuickConnects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "ApproximateTotalCount" ],
            output_token: "NextToken",
            result_key: "QuickConnects"
        },
        SearchResourceTags: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Tags"
        },
        SearchRoutingProfiles: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "ApproximateTotalCount" ],
            output_token: "NextToken",
            result_key: "RoutingProfiles"
        },
        SearchSecurityProfiles: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "ApproximateTotalCount" ],
            output_token: "NextToken",
            result_key: "SecurityProfiles"
        },
        SearchUsers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "ApproximateTotalCount" ],
            output_token: "NextToken",
            result_key: "Users"
        },
        SearchVocabularies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VocabularySummaryList"
        }
    }
};

AWS.apiLoader.services["acmpca"] = {};

AWS.ACMPCA = AWS.Service.defineService("acmpca", [ "2017-08-22" ]);

AWS.apiLoader.services["acmpca"]["2017-08-22"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-08-22",
        endpointPrefix: "acm-pca",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "ACM-PCA",
        serviceFullName: "AWS Certificate Manager Private Certificate Authority",
        serviceId: "ACM PCA",
        signatureVersion: "v4",
        targetPrefix: "ACMPrivateCA",
        uid: "acm-pca-2017-08-22"
    },
    operations: {
        CreateCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityConfiguration", "CertificateAuthorityType" ],
                members: {
                    CertificateAuthorityConfiguration: {
                        shape: "S2"
                    },
                    RevocationConfiguration: {
                        shape: "Sv"
                    },
                    CertificateAuthorityType: {},
                    IdempotencyToken: {},
                    KeyStorageSecurityStandard: {},
                    Tags: {
                        shape: "S15"
                    },
                    UsageMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthorityArn: {}
                }
            },
            idempotent: true
        },
        CreateCertificateAuthorityAuditReport: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "S3BucketName", "AuditReportResponseFormat" ],
                members: {
                    CertificateAuthorityArn: {},
                    S3BucketName: {},
                    AuditReportResponseFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuditReportId: {},
                    S3Key: {}
                }
            },
            idempotent: true
        },
        CreatePermission: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Principal", "Actions" ],
                members: {
                    CertificateAuthorityArn: {},
                    Principal: {},
                    SourceAccount: {},
                    Actions: {
                        shape: "S1l"
                    }
                }
            }
        },
        DeleteCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    PermanentDeletionTimeInDays: {
                        type: "integer"
                    }
                }
            }
        },
        DeletePermission: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Principal" ],
                members: {
                    CertificateAuthorityArn: {},
                    Principal: {},
                    SourceAccount: {}
                }
            }
        },
        DeletePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            }
        },
        DescribeCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthority: {
                        shape: "S1t"
                    }
                }
            }
        },
        DescribeCertificateAuthorityAuditReport: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "AuditReportId" ],
                members: {
                    CertificateAuthorityArn: {},
                    AuditReportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuditReportStatus: {},
                    S3BucketName: {},
                    S3Key: {},
                    CreatedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "CertificateArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    CertificateArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {},
                    CertificateChain: {}
                }
            }
        },
        GetCertificateAuthorityCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {},
                    CertificateChain: {}
                }
            }
        },
        GetCertificateAuthorityCsr: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Csr: {}
                }
            }
        },
        GetPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        ImportCertificateAuthorityCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Certificate" ],
                members: {
                    CertificateAuthorityArn: {},
                    Certificate: {
                        type: "blob"
                    },
                    CertificateChain: {
                        type: "blob"
                    }
                }
            }
        },
        IssueCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Csr", "SigningAlgorithm", "Validity" ],
                members: {
                    ApiPassthrough: {
                        type: "structure",
                        members: {
                            Extensions: {
                                type: "structure",
                                members: {
                                    CertificatePolicies: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "CertPolicyId" ],
                                            members: {
                                                CertPolicyId: {},
                                                PolicyQualifiers: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "PolicyQualifierId", "Qualifier" ],
                                                        members: {
                                                            PolicyQualifierId: {},
                                                            Qualifier: {
                                                                type: "structure",
                                                                required: [ "CpsUri" ],
                                                                members: {
                                                                    CpsUri: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    ExtendedKeyUsage: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ExtendedKeyUsageType: {},
                                                ExtendedKeyUsageObjectIdentifier: {}
                                            }
                                        }
                                    },
                                    KeyUsage: {
                                        shape: "Sj"
                                    },
                                    SubjectAlternativeNames: {
                                        type: "list",
                                        member: {
                                            shape: "Sp"
                                        }
                                    },
                                    CustomExtensions: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "ObjectIdentifier", "Value" ],
                                            members: {
                                                ObjectIdentifier: {},
                                                Value: {},
                                                Critical: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Subject: {
                                shape: "S5"
                            }
                        }
                    },
                    CertificateAuthorityArn: {},
                    Csr: {
                        type: "blob"
                    },
                    SigningAlgorithm: {},
                    TemplateArn: {},
                    Validity: {
                        shape: "S2x"
                    },
                    ValidityNotBefore: {
                        shape: "S2x"
                    },
                    IdempotencyToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateArn: {}
                }
            },
            idempotent: true
        },
        ListCertificateAuthorities: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceOwner: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthorities: {
                        type: "list",
                        member: {
                            shape: "S1t"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPermissions: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CertificateAuthorityArn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Principal: {},
                                SourceAccount: {},
                                Actions: {
                                    shape: "S1l"
                                },
                                Policy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S15"
                    },
                    NextToken: {}
                }
            }
        },
        PutPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            }
        },
        RestoreCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {}
                }
            }
        },
        RevokeCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "CertificateSerial", "RevocationReason" ],
                members: {
                    CertificateAuthorityArn: {},
                    CertificateSerial: {},
                    RevocationReason: {}
                }
            }
        },
        TagCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Tags" ],
                members: {
                    CertificateAuthorityArn: {},
                    Tags: {
                        shape: "S15"
                    }
                }
            }
        },
        UntagCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn", "Tags" ],
                members: {
                    CertificateAuthorityArn: {},
                    Tags: {
                        shape: "S15"
                    }
                }
            }
        },
        UpdateCertificateAuthority: {
            input: {
                type: "structure",
                required: [ "CertificateAuthorityArn" ],
                members: {
                    CertificateAuthorityArn: {},
                    RevocationConfiguration: {
                        shape: "Sv"
                    },
                    Status: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "KeyAlgorithm", "SigningAlgorithm", "Subject" ],
            members: {
                KeyAlgorithm: {},
                SigningAlgorithm: {},
                Subject: {
                    shape: "S5"
                },
                CsrExtensions: {
                    type: "structure",
                    members: {
                        KeyUsage: {
                            shape: "Sj"
                        },
                        SubjectInformationAccess: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "AccessMethod", "AccessLocation" ],
                                members: {
                                    AccessMethod: {
                                        type: "structure",
                                        members: {
                                            CustomObjectIdentifier: {},
                                            AccessMethodType: {}
                                        }
                                    },
                                    AccessLocation: {
                                        shape: "Sp"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S5: {
            type: "structure",
            members: {
                Country: {},
                Organization: {},
                OrganizationalUnit: {},
                DistinguishedNameQualifier: {},
                State: {},
                CommonName: {},
                SerialNumber: {},
                Locality: {},
                Title: {},
                Surname: {},
                GivenName: {},
                Initials: {},
                Pseudonym: {},
                GenerationQualifier: {},
                CustomAttributes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ObjectIdentifier", "Value" ],
                        members: {
                            ObjectIdentifier: {},
                            Value: {}
                        }
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                DigitalSignature: {
                    type: "boolean"
                },
                NonRepudiation: {
                    type: "boolean"
                },
                KeyEncipherment: {
                    type: "boolean"
                },
                DataEncipherment: {
                    type: "boolean"
                },
                KeyAgreement: {
                    type: "boolean"
                },
                KeyCertSign: {
                    type: "boolean"
                },
                CRLSign: {
                    type: "boolean"
                },
                EncipherOnly: {
                    type: "boolean"
                },
                DecipherOnly: {
                    type: "boolean"
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                OtherName: {
                    type: "structure",
                    required: [ "TypeId", "Value" ],
                    members: {
                        TypeId: {},
                        Value: {}
                    }
                },
                Rfc822Name: {},
                DnsName: {},
                DirectoryName: {
                    shape: "S5"
                },
                EdiPartyName: {
                    type: "structure",
                    required: [ "PartyName" ],
                    members: {
                        PartyName: {},
                        NameAssigner: {}
                    }
                },
                UniformResourceIdentifier: {},
                IpAddress: {},
                RegisteredId: {}
            }
        },
        Sv: {
            type: "structure",
            members: {
                CrlConfiguration: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        ExpirationInDays: {
                            type: "integer"
                        },
                        CustomCname: {},
                        S3BucketName: {},
                        S3ObjectAcl: {}
                    }
                },
                OcspConfiguration: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        OcspCustomCname: {}
                    }
                }
            }
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1l: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "structure",
            members: {
                Arn: {},
                OwnerAccount: {},
                CreatedAt: {
                    type: "timestamp"
                },
                LastStateChangeAt: {
                    type: "timestamp"
                },
                Type: {},
                Serial: {},
                Status: {},
                NotBefore: {
                    type: "timestamp"
                },
                NotAfter: {
                    type: "timestamp"
                },
                FailureReason: {},
                CertificateAuthorityConfiguration: {
                    shape: "S2"
                },
                RevocationConfiguration: {
                    shape: "Sv"
                },
                RestorableUntil: {
                    type: "timestamp"
                },
                KeyStorageSecurityStandard: {},
                UsageMode: {}
            }
        },
        S2x: {
            type: "structure",
            required: [ "Value", "Type" ],
            members: {
                Value: {
                    type: "long"
                },
                Type: {}
            }
        }
    },
    paginators: {
        ListCertificateAuthorities: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CertificateAuthorities"
        },
        ListPermissions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Permissions"
        },
        ListTags: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Tags"
        }
    },
    waiters: {
        CertificateAuthorityCSRCreated: {
            description: "Wait until a Certificate Authority CSR is created",
            operation: "GetCertificateAuthorityCsr",
            delay: 3,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 200
            }, {
                state: "retry",
                matcher: "error",
                expected: "RequestInProgressException"
            } ]
        },
        CertificateIssued: {
            description: "Wait until a certificate is issued",
            operation: "GetCertificate",
            delay: 3,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 200
            }, {
                state: "retry",
                matcher: "error",
                expected: "RequestInProgressException"
            } ]
        },
        AuditReportCreated: {
            description: "Wait until a Audit Report is created",
            operation: "DescribeCertificateAuthorityAuditReport",
            delay: 3,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "AuditReportStatus",
                expected: "SUCCESS"
            }, {
                state: "failure",
                matcher: "path",
                argument: "AuditReportStatus",
                expected: "FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["fms"] = {};

AWS.FMS = AWS.Service.defineService("fms", [ "2018-01-01" ]);

AWS.apiLoader.services["fms"]["2018-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-01-01",
        endpointPrefix: "fms",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "FMS",
        serviceFullName: "Firewall Management Service",
        serviceId: "FMS",
        signatureVersion: "v4",
        targetPrefix: "AWSFMS_20180101",
        uid: "fms-2018-01-01"
    },
    operations: {
        AssociateAdminAccount: {
            input: {
                type: "structure",
                required: [ "AdminAccount" ],
                members: {
                    AdminAccount: {}
                }
            }
        },
        AssociateThirdPartyFirewall: {
            input: {
                type: "structure",
                required: [ "ThirdPartyFirewall" ],
                members: {
                    ThirdPartyFirewall: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ThirdPartyFirewallStatus: {}
                }
            }
        },
        BatchAssociateResource: {
            input: {
                type: "structure",
                required: [ "ResourceSetIdentifier", "Items" ],
                members: {
                    ResourceSetIdentifier: {},
                    Items: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceSetIdentifier", "FailedItems" ],
                members: {
                    ResourceSetIdentifier: {},
                    FailedItems: {
                        shape: "Sb"
                    }
                }
            }
        },
        BatchDisassociateResource: {
            input: {
                type: "structure",
                required: [ "ResourceSetIdentifier", "Items" ],
                members: {
                    ResourceSetIdentifier: {},
                    Items: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceSetIdentifier", "FailedItems" ],
                members: {
                    ResourceSetIdentifier: {},
                    FailedItems: {
                        shape: "Sb"
                    }
                }
            }
        },
        DeleteAppsList: {
            input: {
                type: "structure",
                required: [ "ListId" ],
                members: {
                    ListId: {}
                }
            }
        },
        DeleteNotificationChannel: {
            input: {
                type: "structure",
                members: {}
            }
        },
        DeletePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {},
                    DeleteAllPolicyResources: {
                        type: "boolean"
                    }
                }
            }
        },
        DeleteProtocolsList: {
            input: {
                type: "structure",
                required: [ "ListId" ],
                members: {
                    ListId: {}
                }
            }
        },
        DeleteResourceSet: {
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {}
                }
            }
        },
        DisassociateAdminAccount: {
            input: {
                type: "structure",
                members: {}
            }
        },
        DisassociateThirdPartyFirewall: {
            input: {
                type: "structure",
                required: [ "ThirdPartyFirewall" ],
                members: {
                    ThirdPartyFirewall: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ThirdPartyFirewallStatus: {}
                }
            }
        },
        GetAdminAccount: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AdminAccount: {},
                    RoleStatus: {}
                }
            }
        },
        GetAdminScope: {
            input: {
                type: "structure",
                required: [ "AdminAccount" ],
                members: {
                    AdminAccount: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AdminScope: {
                        shape: "Sx"
                    },
                    Status: {}
                }
            }
        },
        GetAppsList: {
            input: {
                type: "structure",
                required: [ "ListId" ],
                members: {
                    ListId: {},
                    DefaultList: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppsList: {
                        shape: "S1c"
                    },
                    AppsListArn: {}
                }
            }
        },
        GetComplianceDetail: {
            input: {
                type: "structure",
                required: [ "PolicyId", "MemberAccount" ],
                members: {
                    PolicyId: {},
                    MemberAccount: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyComplianceDetail: {
                        type: "structure",
                        members: {
                            PolicyOwner: {},
                            PolicyId: {},
                            MemberAccount: {},
                            Violators: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ResourceId: {},
                                        ViolationReason: {},
                                        ResourceType: {},
                                        Metadata: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        }
                                    }
                                }
                            },
                            EvaluationLimitExceeded: {
                                type: "boolean"
                            },
                            ExpiredAt: {
                                type: "timestamp"
                            },
                            IssueInfoMap: {
                                shape: "S1x"
                            }
                        }
                    }
                }
            }
        },
        GetNotificationChannel: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    SnsTopicArn: {},
                    SnsRoleName: {}
                }
            }
        },
        GetPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "S24"
                    },
                    PolicyArn: {}
                }
            }
        },
        GetProtectionStatus: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {},
                    MemberAccountId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdminAccountId: {},
                    ServiceType: {},
                    Data: {},
                    NextToken: {}
                }
            }
        },
        GetProtocolsList: {
            input: {
                type: "structure",
                required: [ "ListId" ],
                members: {
                    ListId: {},
                    DefaultList: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProtocolsList: {
                        shape: "S2v"
                    },
                    ProtocolsListArn: {}
                }
            }
        },
        GetResourceSet: {
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceSet", "ResourceSetArn" ],
                members: {
                    ResourceSet: {
                        shape: "S30"
                    },
                    ResourceSetArn: {}
                }
            }
        },
        GetThirdPartyFirewallAssociationStatus: {
            input: {
                type: "structure",
                required: [ "ThirdPartyFirewall" ],
                members: {
                    ThirdPartyFirewall: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ThirdPartyFirewallStatus: {},
                    MarketplaceOnboardingStatus: {}
                }
            }
        },
        GetViolationDetails: {
            input: {
                type: "structure",
                required: [ "PolicyId", "MemberAccount", "ResourceId", "ResourceType" ],
                members: {
                    PolicyId: {},
                    MemberAccount: {},
                    ResourceId: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ViolationDetail: {
                        type: "structure",
                        required: [ "PolicyId", "MemberAccount", "ResourceId", "ResourceType", "ResourceViolations" ],
                        members: {
                            PolicyId: {},
                            MemberAccount: {},
                            ResourceId: {},
                            ResourceType: {},
                            ResourceViolations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AwsVPCSecurityGroupViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                ViolationTargetDescription: {},
                                                PartialMatches: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Reference: {},
                                                            TargetViolationReasons: {
                                                                type: "list",
                                                                member: {}
                                                            }
                                                        }
                                                    }
                                                },
                                                PossibleSecurityGroupRemediationActions: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            RemediationActionType: {},
                                                            Description: {},
                                                            RemediationResult: {
                                                                type: "structure",
                                                                members: {
                                                                    IPV4Range: {},
                                                                    IPV6Range: {},
                                                                    PrefixListId: {},
                                                                    Protocol: {},
                                                                    FromPort: {
                                                                        type: "long"
                                                                    },
                                                                    ToPort: {
                                                                        type: "long"
                                                                    }
                                                                }
                                                            },
                                                            IsDefaultAction: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        AwsEc2NetworkInterfaceViolation: {
                                            shape: "S3p"
                                        },
                                        AwsEc2InstanceViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                AwsEc2NetworkInterfaceViolations: {
                                                    type: "list",
                                                    member: {
                                                        shape: "S3p"
                                                    }
                                                }
                                            }
                                        },
                                        NetworkFirewallMissingFirewallViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                VPC: {},
                                                AvailabilityZone: {},
                                                TargetViolationReason: {}
                                            }
                                        },
                                        NetworkFirewallMissingSubnetViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                VPC: {},
                                                AvailabilityZone: {},
                                                TargetViolationReason: {}
                                            }
                                        },
                                        NetworkFirewallMissingExpectedRTViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                VPC: {},
                                                AvailabilityZone: {},
                                                CurrentRouteTable: {},
                                                ExpectedRouteTable: {}
                                            }
                                        },
                                        NetworkFirewallPolicyModifiedViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                CurrentPolicyDescription: {
                                                    shape: "S3x"
                                                },
                                                ExpectedPolicyDescription: {
                                                    shape: "S3x"
                                                }
                                            }
                                        },
                                        NetworkFirewallInternetTrafficNotInspectedViolation: {
                                            type: "structure",
                                            members: {
                                                SubnetId: {},
                                                SubnetAvailabilityZone: {},
                                                RouteTableId: {},
                                                ViolatingRoutes: {
                                                    shape: "S4c"
                                                },
                                                IsRouteTableUsedInDifferentAZ: {
                                                    type: "boolean"
                                                },
                                                CurrentFirewallSubnetRouteTable: {},
                                                ExpectedFirewallEndpoint: {},
                                                FirewallSubnetId: {},
                                                ExpectedFirewallSubnetRoutes: {
                                                    shape: "S4g"
                                                },
                                                ActualFirewallSubnetRoutes: {
                                                    shape: "S4c"
                                                },
                                                InternetGatewayId: {},
                                                CurrentInternetGatewayRouteTable: {},
                                                ExpectedInternetGatewayRoutes: {
                                                    shape: "S4g"
                                                },
                                                ActualInternetGatewayRoutes: {
                                                    shape: "S4c"
                                                },
                                                VpcId: {}
                                            }
                                        },
                                        NetworkFirewallInvalidRouteConfigurationViolation: {
                                            type: "structure",
                                            members: {
                                                AffectedSubnets: {
                                                    shape: "S3q"
                                                },
                                                RouteTableId: {},
                                                IsRouteTableUsedInDifferentAZ: {
                                                    type: "boolean"
                                                },
                                                ViolatingRoute: {
                                                    shape: "S4d"
                                                },
                                                CurrentFirewallSubnetRouteTable: {},
                                                ExpectedFirewallEndpoint: {},
                                                ActualFirewallEndpoint: {},
                                                ExpectedFirewallSubnetId: {},
                                                ActualFirewallSubnetId: {},
                                                ExpectedFirewallSubnetRoutes: {
                                                    shape: "S4g"
                                                },
                                                ActualFirewallSubnetRoutes: {
                                                    shape: "S4c"
                                                },
                                                InternetGatewayId: {},
                                                CurrentInternetGatewayRouteTable: {},
                                                ExpectedInternetGatewayRoutes: {
                                                    shape: "S4g"
                                                },
                                                ActualInternetGatewayRoutes: {
                                                    shape: "S4c"
                                                },
                                                VpcId: {}
                                            }
                                        },
                                        NetworkFirewallBlackHoleRouteDetectedViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                RouteTableId: {},
                                                VpcId: {},
                                                ViolatingRoutes: {
                                                    shape: "S4c"
                                                }
                                            }
                                        },
                                        NetworkFirewallUnexpectedFirewallRoutesViolation: {
                                            type: "structure",
                                            members: {
                                                FirewallSubnetId: {},
                                                ViolatingRoutes: {
                                                    shape: "S4c"
                                                },
                                                RouteTableId: {},
                                                FirewallEndpoint: {},
                                                VpcId: {}
                                            }
                                        },
                                        NetworkFirewallUnexpectedGatewayRoutesViolation: {
                                            type: "structure",
                                            members: {
                                                GatewayId: {},
                                                ViolatingRoutes: {
                                                    shape: "S4c"
                                                },
                                                RouteTableId: {},
                                                VpcId: {}
                                            }
                                        },
                                        NetworkFirewallMissingExpectedRoutesViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                ExpectedRoutes: {
                                                    shape: "S4g"
                                                },
                                                VpcId: {}
                                            }
                                        },
                                        DnsRuleGroupPriorityConflictViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                ViolationTargetDescription: {},
                                                ConflictingPriority: {
                                                    type: "integer"
                                                },
                                                ConflictingPolicyId: {},
                                                UnavailablePriorities: {
                                                    type: "list",
                                                    member: {
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        },
                                        DnsDuplicateRuleGroupViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                ViolationTargetDescription: {}
                                            }
                                        },
                                        DnsRuleGroupLimitExceededViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                ViolationTargetDescription: {},
                                                NumberOfRuleGroupsAlreadyAssociated: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        PossibleRemediationActions: {
                                            type: "structure",
                                            members: {
                                                Description: {},
                                                Actions: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "OrderedRemediationActions" ],
                                                        members: {
                                                            Description: {},
                                                            OrderedRemediationActions: {
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        RemediationAction: {
                                                                            type: "structure",
                                                                            members: {
                                                                                Description: {},
                                                                                EC2CreateRouteAction: {
                                                                                    type: "structure",
                                                                                    required: [ "RouteTableId" ],
                                                                                    members: {
                                                                                        Description: {},
                                                                                        DestinationCidrBlock: {},
                                                                                        DestinationPrefixListId: {},
                                                                                        DestinationIpv6CidrBlock: {},
                                                                                        VpcEndpointId: {
                                                                                            shape: "S51"
                                                                                        },
                                                                                        GatewayId: {
                                                                                            shape: "S51"
                                                                                        },
                                                                                        RouteTableId: {
                                                                                            shape: "S51"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                EC2ReplaceRouteAction: {
                                                                                    type: "structure",
                                                                                    required: [ "RouteTableId" ],
                                                                                    members: {
                                                                                        Description: {},
                                                                                        DestinationCidrBlock: {},
                                                                                        DestinationPrefixListId: {},
                                                                                        DestinationIpv6CidrBlock: {},
                                                                                        GatewayId: {
                                                                                            shape: "S51"
                                                                                        },
                                                                                        RouteTableId: {
                                                                                            shape: "S51"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                EC2DeleteRouteAction: {
                                                                                    type: "structure",
                                                                                    required: [ "RouteTableId" ],
                                                                                    members: {
                                                                                        Description: {},
                                                                                        DestinationCidrBlock: {},
                                                                                        DestinationPrefixListId: {},
                                                                                        DestinationIpv6CidrBlock: {},
                                                                                        RouteTableId: {
                                                                                            shape: "S51"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                EC2CopyRouteTableAction: {
                                                                                    type: "structure",
                                                                                    required: [ "VpcId", "RouteTableId" ],
                                                                                    members: {
                                                                                        Description: {},
                                                                                        VpcId: {
                                                                                            shape: "S51"
                                                                                        },
                                                                                        RouteTableId: {
                                                                                            shape: "S51"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                EC2ReplaceRouteTableAssociationAction: {
                                                                                    type: "structure",
                                                                                    required: [ "AssociationId", "RouteTableId" ],
                                                                                    members: {
                                                                                        Description: {},
                                                                                        AssociationId: {
                                                                                            shape: "S51"
                                                                                        },
                                                                                        RouteTableId: {
                                                                                            shape: "S51"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                EC2AssociateRouteTableAction: {
                                                                                    type: "structure",
                                                                                    required: [ "RouteTableId" ],
                                                                                    members: {
                                                                                        Description: {},
                                                                                        RouteTableId: {
                                                                                            shape: "S51"
                                                                                        },
                                                                                        SubnetId: {
                                                                                            shape: "S51"
                                                                                        },
                                                                                        GatewayId: {
                                                                                            shape: "S51"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                EC2CreateRouteTableAction: {
                                                                                    type: "structure",
                                                                                    required: [ "VpcId" ],
                                                                                    members: {
                                                                                        Description: {},
                                                                                        VpcId: {
                                                                                            shape: "S51"
                                                                                        }
                                                                                    }
                                                                                },
                                                                                FMSPolicyUpdateFirewallCreationConfigAction: {
                                                                                    type: "structure",
                                                                                    members: {
                                                                                        Description: {},
                                                                                        FirewallCreationConfig: {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        },
                                                                        Order: {
                                                                            type: "integer"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            IsDefaultAction: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        FirewallSubnetIsOutOfScopeViolation: {
                                            type: "structure",
                                            members: {
                                                FirewallSubnetId: {},
                                                VpcId: {},
                                                SubnetAvailabilityZone: {},
                                                SubnetAvailabilityZoneId: {},
                                                VpcEndpointId: {}
                                            }
                                        },
                                        RouteHasOutOfScopeEndpointViolation: {
                                            type: "structure",
                                            members: {
                                                SubnetId: {},
                                                VpcId: {},
                                                RouteTableId: {},
                                                ViolatingRoutes: {
                                                    shape: "S4c"
                                                },
                                                SubnetAvailabilityZone: {},
                                                SubnetAvailabilityZoneId: {},
                                                CurrentFirewallSubnetRouteTable: {},
                                                FirewallSubnetId: {},
                                                FirewallSubnetRoutes: {
                                                    shape: "S4c"
                                                },
                                                InternetGatewayId: {},
                                                CurrentInternetGatewayRouteTable: {},
                                                InternetGatewayRoutes: {
                                                    shape: "S4c"
                                                }
                                            }
                                        },
                                        ThirdPartyFirewallMissingFirewallViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                VPC: {},
                                                AvailabilityZone: {},
                                                TargetViolationReason: {}
                                            }
                                        },
                                        ThirdPartyFirewallMissingSubnetViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                VPC: {},
                                                AvailabilityZone: {},
                                                TargetViolationReason: {}
                                            }
                                        },
                                        ThirdPartyFirewallMissingExpectedRouteTableViolation: {
                                            type: "structure",
                                            members: {
                                                ViolationTarget: {},
                                                VPC: {},
                                                AvailabilityZone: {},
                                                CurrentRouteTable: {},
                                                ExpectedRouteTable: {}
                                            }
                                        },
                                        FirewallSubnetMissingVPCEndpointViolation: {
                                            type: "structure",
                                            members: {
                                                FirewallSubnetId: {},
                                                VpcId: {},
                                                SubnetAvailabilityZone: {},
                                                SubnetAvailabilityZoneId: {}
                                            }
                                        }
                                    }
                                }
                            },
                            ResourceTags: {
                                shape: "S5f"
                            },
                            ResourceDescription: {}
                        }
                    }
                }
            }
        },
        ListAdminAccountsForOrganization: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdminAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AdminAccount: {},
                                DefaultAdmin: {
                                    type: "boolean"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAdminsManagingAccount: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdminAccounts: {
                        shape: "Sz"
                    },
                    NextToken: {}
                }
            }
        },
        ListAppsLists: {
            input: {
                type: "structure",
                required: [ "MaxResults" ],
                members: {
                    DefaultLists: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppsLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ListArn: {},
                                ListId: {},
                                ListName: {},
                                AppsList: {
                                    shape: "S1g"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListComplianceStatus: {
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyComplianceStatusList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyOwner: {},
                                PolicyId: {},
                                PolicyName: {},
                                MemberAccount: {},
                                EvaluationResults: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ComplianceStatus: {},
                                            ViolatorCount: {
                                                type: "long"
                                            },
                                            EvaluationLimitExceeded: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                LastUpdated: {
                                    type: "timestamp"
                                },
                                IssueInfoMap: {
                                    shape: "S1x"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDiscoveredResources: {
            input: {
                type: "structure",
                required: [ "MemberAccountIds", "ResourceType" ],
                members: {
                    MemberAccountIds: {
                        type: "list",
                        member: {}
                    },
                    ResourceType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                URI: {},
                                AccountId: {},
                                Type: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMemberAccounts: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MemberAccounts: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListPolicies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyArn: {},
                                PolicyId: {},
                                PolicyName: {},
                                ResourceType: {},
                                SecurityServiceType: {},
                                RemediationEnabled: {
                                    type: "boolean"
                                },
                                DeleteUnusedFMManagedResources: {
                                    type: "boolean"
                                },
                                PolicyStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProtocolsLists: {
            input: {
                type: "structure",
                required: [ "MaxResults" ],
                members: {
                    DefaultLists: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProtocolsLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ListArn: {},
                                ListId: {},
                                ListName: {},
                                ProtocolsList: {
                                    shape: "S2w"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceSetResources: {
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Items" ],
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "URI" ],
                            members: {
                                URI: {},
                                AccountId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceSets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Description: {},
                                LastUpdateTime: {
                                    type: "timestamp"
                                },
                                ResourceSetStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "S5f"
                    }
                }
            }
        },
        ListThirdPartyFirewallFirewallPolicies: {
            input: {
                type: "structure",
                required: [ "ThirdPartyFirewall", "MaxResults" ],
                members: {
                    ThirdPartyFirewall: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThirdPartyFirewallFirewallPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FirewallPolicyId: {},
                                FirewallPolicyName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutAdminAccount: {
            input: {
                type: "structure",
                required: [ "AdminAccount" ],
                members: {
                    AdminAccount: {},
                    AdminScope: {
                        shape: "Sx"
                    }
                }
            }
        },
        PutAppsList: {
            input: {
                type: "structure",
                required: [ "AppsList" ],
                members: {
                    AppsList: {
                        shape: "S1c"
                    },
                    TagList: {
                        shape: "S5f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppsList: {
                        shape: "S1c"
                    },
                    AppsListArn: {}
                }
            }
        },
        PutNotificationChannel: {
            input: {
                type: "structure",
                required: [ "SnsTopicArn", "SnsRoleName" ],
                members: {
                    SnsTopicArn: {},
                    SnsRoleName: {}
                }
            }
        },
        PutPolicy: {
            input: {
                type: "structure",
                required: [ "Policy" ],
                members: {
                    Policy: {
                        shape: "S24"
                    },
                    TagList: {
                        shape: "S5f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "S24"
                    },
                    PolicyArn: {}
                }
            }
        },
        PutProtocolsList: {
            input: {
                type: "structure",
                required: [ "ProtocolsList" ],
                members: {
                    ProtocolsList: {
                        shape: "S2v"
                    },
                    TagList: {
                        shape: "S5f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProtocolsList: {
                        shape: "S2v"
                    },
                    ProtocolsListArn: {}
                }
            }
        },
        PutResourceSet: {
            input: {
                type: "structure",
                required: [ "ResourceSet" ],
                members: {
                    ResourceSet: {
                        shape: "S30"
                    },
                    TagList: {
                        shape: "S5f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceSet", "ResourceSetArn" ],
                members: {
                    ResourceSet: {
                        shape: "S30"
                    },
                    ResourceSetArn: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagList" ],
                members: {
                    ResourceArn: {},
                    TagList: {
                        shape: "S5f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {}
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    URI: {},
                    Reason: {}
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                AccountScope: {
                    type: "structure",
                    members: {
                        Accounts: {
                            shape: "Sz"
                        },
                        AllAccountsEnabled: {
                            type: "boolean"
                        },
                        ExcludeSpecifiedAccounts: {
                            type: "boolean"
                        }
                    }
                },
                OrganizationalUnitScope: {
                    type: "structure",
                    members: {
                        OrganizationalUnits: {
                            type: "list",
                            member: {}
                        },
                        AllOrganizationalUnitsEnabled: {
                            type: "boolean"
                        },
                        ExcludeSpecifiedOrganizationalUnits: {
                            type: "boolean"
                        }
                    }
                },
                RegionScope: {
                    type: "structure",
                    members: {
                        Regions: {
                            type: "list",
                            member: {}
                        },
                        AllRegionsEnabled: {
                            type: "boolean"
                        }
                    }
                },
                PolicyTypeScope: {
                    type: "structure",
                    members: {
                        PolicyTypes: {
                            type: "list",
                            member: {}
                        },
                        AllPolicyTypesEnabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S1c: {
            type: "structure",
            required: [ "ListName", "AppsList" ],
            members: {
                ListId: {},
                ListName: {},
                ListUpdateToken: {},
                CreateTime: {
                    type: "timestamp"
                },
                LastUpdateTime: {
                    type: "timestamp"
                },
                AppsList: {
                    shape: "S1g"
                },
                PreviousAppsList: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S1g"
                    }
                }
            }
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AppName", "Protocol", "Port" ],
                members: {
                    AppName: {},
                    Protocol: {},
                    Port: {
                        type: "long"
                    }
                }
            }
        },
        S1x: {
            type: "map",
            key: {},
            value: {}
        },
        S24: {
            type: "structure",
            required: [ "PolicyName", "SecurityServicePolicyData", "ResourceType", "ExcludeResourceTags", "RemediationEnabled" ],
            members: {
                PolicyId: {},
                PolicyName: {},
                PolicyUpdateToken: {},
                SecurityServicePolicyData: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {},
                        ManagedServiceData: {},
                        PolicyOption: {
                            type: "structure",
                            members: {
                                NetworkFirewallPolicy: {
                                    type: "structure",
                                    members: {
                                        FirewallDeploymentModel: {}
                                    }
                                },
                                ThirdPartyFirewallPolicy: {
                                    type: "structure",
                                    members: {
                                        FirewallDeploymentModel: {}
                                    }
                                }
                            }
                        }
                    }
                },
                ResourceType: {},
                ResourceTypeList: {
                    shape: "S2c"
                },
                ResourceTags: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Key" ],
                        members: {
                            Key: {},
                            Value: {}
                        }
                    }
                },
                ExcludeResourceTags: {
                    type: "boolean"
                },
                RemediationEnabled: {
                    type: "boolean"
                },
                DeleteUnusedFMManagedResources: {
                    type: "boolean"
                },
                IncludeMap: {
                    shape: "S2h"
                },
                ExcludeMap: {
                    shape: "S2h"
                },
                ResourceSetIds: {
                    type: "list",
                    member: {}
                },
                PolicyDescription: {},
                PolicyStatus: {}
            }
        },
        S2c: {
            type: "list",
            member: {}
        },
        S2h: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        S2v: {
            type: "structure",
            required: [ "ListName", "ProtocolsList" ],
            members: {
                ListId: {},
                ListName: {},
                ListUpdateToken: {},
                CreateTime: {
                    type: "timestamp"
                },
                LastUpdateTime: {
                    type: "timestamp"
                },
                ProtocolsList: {
                    shape: "S2w"
                },
                PreviousProtocolsList: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S2w"
                    }
                }
            }
        },
        S2w: {
            type: "list",
            member: {}
        },
        S30: {
            type: "structure",
            required: [ "Name", "ResourceTypeList" ],
            members: {
                Id: {},
                Name: {},
                Description: {},
                UpdateToken: {},
                ResourceTypeList: {
                    shape: "S2c"
                },
                LastUpdateTime: {
                    type: "timestamp"
                },
                ResourceSetStatus: {}
            }
        },
        S3p: {
            type: "structure",
            members: {
                ViolationTarget: {},
                ViolatingSecurityGroups: {
                    shape: "S3q"
                }
            }
        },
        S3q: {
            type: "list",
            member: {}
        },
        S3x: {
            type: "structure",
            members: {
                StatelessRuleGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            RuleGroupName: {},
                            ResourceId: {},
                            Priority: {
                                type: "integer"
                            }
                        }
                    }
                },
                StatelessDefaultActions: {
                    shape: "S42"
                },
                StatelessFragmentDefaultActions: {
                    shape: "S42"
                },
                StatelessCustomActions: {
                    shape: "S42"
                },
                StatefulRuleGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            RuleGroupName: {},
                            ResourceId: {},
                            Priority: {
                                type: "integer"
                            },
                            Override: {
                                type: "structure",
                                members: {
                                    Action: {}
                                }
                            }
                        }
                    }
                },
                StatefulDefaultActions: {
                    shape: "S42"
                },
                StatefulEngineOptions: {
                    type: "structure",
                    members: {
                        RuleOrder: {}
                    }
                }
            }
        },
        S42: {
            type: "list",
            member: {}
        },
        S4c: {
            type: "list",
            member: {
                shape: "S4d"
            }
        },
        S4d: {
            type: "structure",
            members: {
                DestinationType: {},
                TargetType: {},
                Destination: {},
                Target: {}
            }
        },
        S4g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IpV4Cidr: {},
                    PrefixListId: {},
                    IpV6Cidr: {},
                    ContributingSubnets: {
                        shape: "S3q"
                    },
                    AllowedTargets: {
                        type: "list",
                        member: {}
                    },
                    RouteTableId: {}
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                ResourceId: {},
                Description: {}
            }
        },
        S5f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListAdminAccountsForOrganization: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AdminAccounts"
        },
        ListAdminsManagingAccount: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AdminAccounts"
        },
        ListAppsLists: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AppsLists"
        },
        ListComplianceStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PolicyComplianceStatusList"
        },
        ListMemberAccounts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "MemberAccounts"
        },
        ListPolicies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PolicyList"
        },
        ListProtocolsLists: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ProtocolsLists"
        },
        ListThirdPartyFirewallFirewallPolicies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ThirdPartyFirewallFirewallPolicies"
        }
    }
};

AWS.apiLoader.services["secretsmanager"] = {};

AWS.SecretsManager = AWS.Service.defineService("secretsmanager", [ "2017-10-17" ]);

AWS.apiLoader.services["secretsmanager"]["2017-10-17"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-17",
        endpointPrefix: "secretsmanager",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Secrets Manager",
        serviceId: "Secrets Manager",
        signatureVersion: "v4",
        signingName: "secretsmanager",
        targetPrefix: "secretsmanager",
        uid: "secretsmanager-2017-10-17"
    },
    operations: {
        BatchGetSecretValue: {
            input: {
                type: "structure",
                members: {
                    SecretIdList: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        shape: "S4"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SecretValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ARN: {},
                                Name: {},
                                VersionId: {},
                                SecretBinary: {
                                    shape: "Sh"
                                },
                                SecretString: {
                                    shape: "Si"
                                },
                                VersionStages: {
                                    shape: "Sj"
                                },
                                CreatedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SecretId: {},
                                ErrorCode: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        CancelRotateSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {}
                }
            }
        },
        CreateSecret: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    KmsKeyId: {},
                    SecretBinary: {
                        shape: "Sh"
                    },
                    SecretString: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sx"
                    },
                    AddReplicaRegions: {
                        shape: "S11"
                    },
                    ForceOverwriteReplicaSecret: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {},
                    ReplicationStatus: {
                        shape: "S16"
                    }
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {}
                }
            }
        },
        DeleteSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    RecoveryWindowInDays: {
                        type: "long"
                    },
                    ForceDeleteWithoutRecovery: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    DeletionDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    Description: {},
                    KmsKeyId: {},
                    RotationEnabled: {
                        type: "boolean"
                    },
                    RotationLambdaARN: {},
                    RotationRules: {
                        shape: "S1l"
                    },
                    LastRotatedDate: {
                        type: "timestamp"
                    },
                    LastChangedDate: {
                        type: "timestamp"
                    },
                    LastAccessedDate: {
                        type: "timestamp"
                    },
                    DeletedDate: {
                        type: "timestamp"
                    },
                    NextRotationDate: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "Sx"
                    },
                    VersionIdsToStages: {
                        shape: "S1t"
                    },
                    OwningService: {},
                    CreatedDate: {
                        type: "timestamp"
                    },
                    PrimaryRegion: {},
                    ReplicationStatus: {
                        shape: "S16"
                    }
                }
            }
        },
        GetRandomPassword: {
            input: {
                type: "structure",
                members: {
                    PasswordLength: {
                        type: "long"
                    },
                    ExcludeCharacters: {},
                    ExcludeNumbers: {
                        type: "boolean"
                    },
                    ExcludePunctuation: {
                        type: "boolean"
                    },
                    ExcludeUppercase: {
                        type: "boolean"
                    },
                    ExcludeLowercase: {
                        type: "boolean"
                    },
                    IncludeSpace: {
                        type: "boolean"
                    },
                    RequireEachIncludedType: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RandomPassword: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    ResourcePolicy: {}
                }
            }
        },
        GetSecretValue: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    VersionId: {},
                    VersionStage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {},
                    SecretBinary: {
                        shape: "Sh"
                    },
                    SecretString: {
                        shape: "Si"
                    },
                    VersionStages: {
                        shape: "Sj"
                    },
                    CreatedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        ListSecretVersionIds: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    IncludeDeprecated: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Versions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VersionId: {},
                                VersionStages: {
                                    shape: "Sj"
                                },
                                LastAccessedDate: {
                                    type: "timestamp"
                                },
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                KmsKeyIds: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextToken: {},
                    ARN: {},
                    Name: {}
                }
            }
        },
        ListSecrets: {
            input: {
                type: "structure",
                members: {
                    IncludePlannedDeletion: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S4"
                    },
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SecretList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ARN: {},
                                Name: {},
                                Description: {},
                                KmsKeyId: {},
                                RotationEnabled: {
                                    type: "boolean"
                                },
                                RotationLambdaARN: {},
                                RotationRules: {
                                    shape: "S1l"
                                },
                                LastRotatedDate: {
                                    type: "timestamp"
                                },
                                LastChangedDate: {
                                    type: "timestamp"
                                },
                                LastAccessedDate: {
                                    type: "timestamp"
                                },
                                DeletedDate: {
                                    type: "timestamp"
                                },
                                NextRotationDate: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "Sx"
                                },
                                SecretVersionsToStages: {
                                    shape: "S1t"
                                },
                                OwningService: {},
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                PrimaryRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "SecretId", "ResourcePolicy" ],
                members: {
                    SecretId: {},
                    ResourcePolicy: {},
                    BlockPublicPolicy: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {}
                }
            }
        },
        PutSecretValue: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    SecretBinary: {
                        shape: "Sh"
                    },
                    SecretString: {
                        shape: "Si"
                    },
                    VersionStages: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {},
                    VersionStages: {
                        shape: "Sj"
                    }
                }
            }
        },
        RemoveRegionsFromReplication: {
            input: {
                type: "structure",
                required: [ "SecretId", "RemoveReplicaRegions" ],
                members: {
                    SecretId: {},
                    RemoveReplicaRegions: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    ReplicationStatus: {
                        shape: "S16"
                    }
                }
            }
        },
        ReplicateSecretToRegions: {
            input: {
                type: "structure",
                required: [ "SecretId", "AddReplicaRegions" ],
                members: {
                    SecretId: {},
                    AddReplicaRegions: {
                        shape: "S11"
                    },
                    ForceOverwriteReplicaSecret: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    ReplicationStatus: {
                        shape: "S16"
                    }
                }
            }
        },
        RestoreSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {}
                }
            }
        },
        RotateSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    RotationLambdaARN: {},
                    RotationRules: {
                        shape: "S1l"
                    },
                    RotateImmediately: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {}
                }
            }
        },
        StopReplicationToReplica: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "SecretId", "Tags" ],
                members: {
                    SecretId: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "SecretId", "TagKeys" ],
                members: {
                    SecretId: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateSecret: {
            input: {
                type: "structure",
                required: [ "SecretId" ],
                members: {
                    SecretId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    KmsKeyId: {},
                    SecretBinary: {
                        shape: "Sh"
                    },
                    SecretString: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {},
                    VersionId: {}
                }
            }
        },
        UpdateSecretVersionStage: {
            input: {
                type: "structure",
                required: [ "SecretId", "VersionStage" ],
                members: {
                    SecretId: {},
                    VersionStage: {},
                    RemoveFromVersionId: {},
                    MoveToVersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ARN: {},
                    Name: {}
                }
            }
        },
        ValidateResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourcePolicy" ],
                members: {
                    SecretId: {},
                    ResourcePolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyValidationPassed: {
                        type: "boolean"
                    },
                    ValidationErrors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CheckName: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Sh: {
            type: "blob",
            sensitive: true
        },
        Si: {
            type: "string",
            sensitive: true
        },
        Sj: {
            type: "list",
            member: {}
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S11: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Region: {},
                    KmsKeyId: {}
                }
            }
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Region: {},
                    KmsKeyId: {},
                    Status: {},
                    StatusMessage: {},
                    LastAccessedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        S1l: {
            type: "structure",
            members: {
                AutomaticallyAfterDays: {
                    type: "long"
                },
                Duration: {},
                ScheduleExpression: {}
            }
        },
        S1t: {
            type: "map",
            key: {},
            value: {
                shape: "Sj"
            }
        }
    },
    paginators: {
        BatchGetSecretValue: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSecretVersionIds: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSecrets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["iotanalytics"] = {};

AWS.IoTAnalytics = AWS.Service.defineService("iotanalytics", [ "2017-11-27" ]);

AWS.apiLoader.services["iotanalytics"]["2017-11-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-27",
        endpointPrefix: "iotanalytics",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Analytics",
        serviceId: "IoTAnalytics",
        signatureVersion: "v4",
        signingName: "iotanalytics",
        uid: "iotanalytics-2017-11-27"
    },
    operations: {
        BatchPutMessage: {
            http: {
                requestUri: "/messages/batch",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelName", "messages" ],
                members: {
                    channelName: {},
                    messages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "messageId", "payload" ],
                            members: {
                                messageId: {},
                                payload: {
                                    type: "blob"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    batchPutMessageErrorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                messageId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        CancelPipelineReprocessing: {
            http: {
                method: "DELETE",
                requestUri: "/pipelines/{pipelineName}/reprocessing/{reprocessingId}"
            },
            input: {
                type: "structure",
                required: [ "pipelineName", "reprocessingId" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    },
                    reprocessingId: {
                        location: "uri",
                        locationName: "reprocessingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/channels",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {},
                    channelStorage: {
                        shape: "Sh"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channelName: {},
                    channelArn: {},
                    retentionPeriod: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateDataset: {
            http: {
                requestUri: "/datasets",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "datasetName", "actions" ],
                members: {
                    datasetName: {},
                    actions: {
                        shape: "Sy"
                    },
                    triggers: {
                        shape: "S1l"
                    },
                    contentDeliveryRules: {
                        shape: "S1q"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    versioningConfiguration: {
                        shape: "S21"
                    },
                    tags: {
                        shape: "Sq"
                    },
                    lateDataRules: {
                        shape: "S24"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetName: {},
                    datasetArn: {},
                    retentionPeriod: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateDatasetContent: {
            http: {
                requestUri: "/datasets/{datasetName}/content"
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    versionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    versionId: {}
                }
            }
        },
        CreateDatastore: {
            http: {
                requestUri: "/datastores",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "datastoreName" ],
                members: {
                    datastoreName: {},
                    datastoreStorage: {
                        shape: "S2h"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "Sq"
                    },
                    fileFormatConfiguration: {
                        shape: "S2m"
                    },
                    datastorePartitions: {
                        shape: "S2u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datastoreName: {},
                    datastoreArn: {},
                    retentionPeriod: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreatePipeline: {
            http: {
                requestUri: "/pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "pipelineName", "pipelineActivities" ],
                members: {
                    pipelineName: {},
                    pipelineActivities: {
                        shape: "S34"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineName: {},
                    pipelineArn: {}
                }
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {
                        location: "uri",
                        locationName: "channelName"
                    }
                }
            }
        },
        DeleteDataset: {
            http: {
                method: "DELETE",
                requestUri: "/datasets/{datasetName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    }
                }
            }
        },
        DeleteDatasetContent: {
            http: {
                method: "DELETE",
                requestUri: "/datasets/{datasetName}/content",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    versionId: {
                        location: "querystring",
                        locationName: "versionId"
                    }
                }
            }
        },
        DeleteDatastore: {
            http: {
                method: "DELETE",
                requestUri: "/datastores/{datastoreName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "datastoreName" ],
                members: {
                    datastoreName: {
                        location: "uri",
                        locationName: "datastoreName"
                    }
                }
            }
        },
        DeletePipeline: {
            http: {
                method: "DELETE",
                requestUri: "/pipelines/{pipelineName}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "pipelineName" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    }
                }
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelName}"
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    includeStatistics: {
                        location: "querystring",
                        locationName: "includeStatistics",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channel: {
                        type: "structure",
                        members: {
                            name: {},
                            storage: {
                                shape: "Sh"
                            },
                            arn: {},
                            status: {},
                            retentionPeriod: {
                                shape: "Sn"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            },
                            lastMessageArrivalTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    statistics: {
                        type: "structure",
                        members: {
                            size: {
                                shape: "S42"
                            }
                        }
                    }
                }
            }
        },
        DescribeDataset: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetName}"
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataset: {
                        type: "structure",
                        members: {
                            name: {},
                            arn: {},
                            actions: {
                                shape: "Sy"
                            },
                            triggers: {
                                shape: "S1l"
                            },
                            contentDeliveryRules: {
                                shape: "S1q"
                            },
                            status: {},
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            },
                            retentionPeriod: {
                                shape: "Sn"
                            },
                            versioningConfiguration: {
                                shape: "S21"
                            },
                            lateDataRules: {
                                shape: "S24"
                            }
                        }
                    }
                }
            }
        },
        DescribeDatastore: {
            http: {
                method: "GET",
                requestUri: "/datastores/{datastoreName}"
            },
            input: {
                type: "structure",
                required: [ "datastoreName" ],
                members: {
                    datastoreName: {
                        location: "uri",
                        locationName: "datastoreName"
                    },
                    includeStatistics: {
                        location: "querystring",
                        locationName: "includeStatistics",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datastore: {
                        type: "structure",
                        members: {
                            name: {},
                            storage: {
                                shape: "S2h"
                            },
                            arn: {},
                            status: {},
                            retentionPeriod: {
                                shape: "Sn"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            },
                            lastMessageArrivalTime: {
                                type: "timestamp"
                            },
                            fileFormatConfiguration: {
                                shape: "S2m"
                            },
                            datastorePartitions: {
                                shape: "S2u"
                            }
                        }
                    },
                    statistics: {
                        type: "structure",
                        members: {
                            size: {
                                shape: "S42"
                            }
                        }
                    }
                }
            }
        },
        DescribeLoggingOptions: {
            http: {
                method: "GET",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    loggingOptions: {
                        shape: "S4f"
                    }
                }
            }
        },
        DescribePipeline: {
            http: {
                method: "GET",
                requestUri: "/pipelines/{pipelineName}"
            },
            input: {
                type: "structure",
                required: [ "pipelineName" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipeline: {
                        type: "structure",
                        members: {
                            name: {},
                            arn: {},
                            activities: {
                                shape: "S34"
                            },
                            reprocessingSummaries: {
                                shape: "S4l"
                            },
                            creationTime: {
                                type: "timestamp"
                            },
                            lastUpdateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetDatasetContent: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetName}/content"
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    versionId: {
                        location: "querystring",
                        locationName: "versionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                entryName: {},
                                dataURI: {}
                            }
                        }
                    },
                    timestamp: {
                        type: "timestamp"
                    },
                    status: {
                        shape: "S4t"
                    }
                }
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    channelSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                channelName: {},
                                channelStorage: {
                                    type: "structure",
                                    members: {
                                        serviceManagedS3: {
                                            type: "structure",
                                            members: {}
                                        },
                                        customerManagedS3: {
                                            type: "structure",
                                            members: {
                                                bucket: {},
                                                keyPrefix: {},
                                                roleArn: {}
                                            }
                                        }
                                    }
                                },
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                lastMessageArrivalTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDatasetContents: {
            http: {
                method: "GET",
                requestUri: "/datasets/{datasetName}/contents"
            },
            input: {
                type: "structure",
                required: [ "datasetName" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    scheduledOnOrAfter: {
                        location: "querystring",
                        locationName: "scheduledOnOrAfter",
                        type: "timestamp"
                    },
                    scheduledBefore: {
                        location: "querystring",
                        locationName: "scheduledBefore",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetContentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                version: {},
                                status: {
                                    shape: "S4t"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                scheduleTime: {
                                    type: "timestamp"
                                },
                                completionTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDatasets: {
            http: {
                method: "GET",
                requestUri: "/datasets"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datasetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                datasetName: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                triggers: {
                                    shape: "S1l"
                                },
                                actions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            actionName: {},
                                            actionType: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDatastores: {
            http: {
                method: "GET",
                requestUri: "/datastores"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    datastoreSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                datastoreName: {},
                                datastoreStorage: {
                                    type: "structure",
                                    members: {
                                        serviceManagedS3: {
                                            type: "structure",
                                            members: {}
                                        },
                                        customerManagedS3: {
                                            type: "structure",
                                            members: {
                                                bucket: {},
                                                keyPrefix: {},
                                                roleArn: {}
                                            }
                                        },
                                        iotSiteWiseMultiLayerStorage: {
                                            type: "structure",
                                            members: {
                                                customerManagedS3Storage: {
                                                    type: "structure",
                                                    members: {
                                                        bucket: {},
                                                        keyPrefix: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                lastMessageArrivalTime: {
                                    type: "timestamp"
                                },
                                fileFormatType: {},
                                datastorePartitions: {
                                    shape: "S2u"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPipelines: {
            http: {
                method: "GET",
                requestUri: "/pipelines"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                pipelineName: {},
                                reprocessingSummaries: {
                                    shape: "S4l"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sq"
                    }
                }
            }
        },
        PutLoggingOptions: {
            http: {
                method: "PUT",
                requestUri: "/logging"
            },
            input: {
                type: "structure",
                required: [ "loggingOptions" ],
                members: {
                    loggingOptions: {
                        shape: "S4f"
                    }
                }
            }
        },
        RunPipelineActivity: {
            http: {
                requestUri: "/pipelineactivities/run"
            },
            input: {
                type: "structure",
                required: [ "pipelineActivity", "payloads" ],
                members: {
                    pipelineActivity: {
                        shape: "S35"
                    },
                    payloads: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    payloads: {
                        shape: "S5z"
                    },
                    logResult: {}
                }
            }
        },
        SampleChannelData: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelName}/sample"
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    maxMessages: {
                        location: "querystring",
                        locationName: "maxMessages",
                        type: "integer"
                    },
                    startTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    endTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    payloads: {
                        shape: "S5z"
                    }
                }
            }
        },
        StartPipelineReprocessing: {
            http: {
                requestUri: "/pipelines/{pipelineName}/reprocessing"
            },
            input: {
                type: "structure",
                required: [ "pipelineName" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    channelMessages: {
                        type: "structure",
                        members: {
                            s3Paths: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reprocessingId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelName}"
            },
            input: {
                type: "structure",
                required: [ "channelName" ],
                members: {
                    channelName: {
                        location: "uri",
                        locationName: "channelName"
                    },
                    channelStorage: {
                        shape: "Sh"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    }
                }
            }
        },
        UpdateDataset: {
            http: {
                method: "PUT",
                requestUri: "/datasets/{datasetName}"
            },
            input: {
                type: "structure",
                required: [ "datasetName", "actions" ],
                members: {
                    datasetName: {
                        location: "uri",
                        locationName: "datasetName"
                    },
                    actions: {
                        shape: "Sy"
                    },
                    triggers: {
                        shape: "S1l"
                    },
                    contentDeliveryRules: {
                        shape: "S1q"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    versioningConfiguration: {
                        shape: "S21"
                    },
                    lateDataRules: {
                        shape: "S24"
                    }
                }
            }
        },
        UpdateDatastore: {
            http: {
                method: "PUT",
                requestUri: "/datastores/{datastoreName}"
            },
            input: {
                type: "structure",
                required: [ "datastoreName" ],
                members: {
                    datastoreName: {
                        location: "uri",
                        locationName: "datastoreName"
                    },
                    retentionPeriod: {
                        shape: "Sn"
                    },
                    datastoreStorage: {
                        shape: "S2h"
                    },
                    fileFormatConfiguration: {
                        shape: "S2m"
                    }
                }
            }
        },
        UpdatePipeline: {
            http: {
                method: "PUT",
                requestUri: "/pipelines/{pipelineName}"
            },
            input: {
                type: "structure",
                required: [ "pipelineName", "pipelineActivities" ],
                members: {
                    pipelineName: {
                        location: "uri",
                        locationName: "pipelineName"
                    },
                    pipelineActivities: {
                        shape: "S34"
                    }
                }
            }
        }
    },
    shapes: {
        Sh: {
            type: "structure",
            members: {
                serviceManagedS3: {
                    type: "structure",
                    members: {}
                },
                customerManagedS3: {
                    type: "structure",
                    required: [ "bucket", "roleArn" ],
                    members: {
                        bucket: {},
                        keyPrefix: {},
                        roleArn: {}
                    }
                }
            }
        },
        Sn: {
            type: "structure",
            members: {
                unlimited: {
                    type: "boolean"
                },
                numberOfDays: {
                    type: "integer"
                }
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    actionName: {},
                    queryAction: {
                        type: "structure",
                        required: [ "sqlQuery" ],
                        members: {
                            sqlQuery: {},
                            filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        deltaTime: {
                                            type: "structure",
                                            required: [ "offsetSeconds", "timeExpression" ],
                                            members: {
                                                offsetSeconds: {
                                                    type: "integer"
                                                },
                                                timeExpression: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    containerAction: {
                        type: "structure",
                        required: [ "image", "executionRoleArn", "resourceConfiguration" ],
                        members: {
                            image: {},
                            executionRoleArn: {},
                            resourceConfiguration: {
                                type: "structure",
                                required: [ "computeType", "volumeSizeInGB" ],
                                members: {
                                    computeType: {},
                                    volumeSizeInGB: {
                                        type: "integer"
                                    }
                                }
                            },
                            variables: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name" ],
                                    members: {
                                        name: {},
                                        stringValue: {},
                                        doubleValue: {
                                            type: "double"
                                        },
                                        datasetContentVersionValue: {
                                            type: "structure",
                                            required: [ "datasetName" ],
                                            members: {
                                                datasetName: {}
                                            }
                                        },
                                        outputFileUriValue: {
                                            type: "structure",
                                            required: [ "fileName" ],
                                            members: {
                                                fileName: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    schedule: {
                        type: "structure",
                        members: {
                            expression: {}
                        }
                    },
                    dataset: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            name: {}
                        }
                    }
                }
            }
        },
        S1q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "destination" ],
                members: {
                    entryName: {},
                    destination: {
                        type: "structure",
                        members: {
                            iotEventsDestinationConfiguration: {
                                type: "structure",
                                required: [ "inputName", "roleArn" ],
                                members: {
                                    inputName: {},
                                    roleArn: {}
                                }
                            },
                            s3DestinationConfiguration: {
                                type: "structure",
                                required: [ "bucket", "key", "roleArn" ],
                                members: {
                                    bucket: {},
                                    key: {},
                                    glueConfiguration: {
                                        type: "structure",
                                        required: [ "tableName", "databaseName" ],
                                        members: {
                                            tableName: {},
                                            databaseName: {}
                                        }
                                    },
                                    roleArn: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                unlimited: {
                    type: "boolean"
                },
                maxVersions: {
                    type: "integer"
                }
            }
        },
        S24: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ruleConfiguration" ],
                members: {
                    ruleName: {},
                    ruleConfiguration: {
                        type: "structure",
                        members: {
                            deltaTimeSessionWindowConfiguration: {
                                type: "structure",
                                required: [ "timeoutInMinutes" ],
                                members: {
                                    timeoutInMinutes: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                serviceManagedS3: {
                    type: "structure",
                    members: {}
                },
                customerManagedS3: {
                    type: "structure",
                    required: [ "bucket", "roleArn" ],
                    members: {
                        bucket: {},
                        keyPrefix: {},
                        roleArn: {}
                    }
                },
                iotSiteWiseMultiLayerStorage: {
                    type: "structure",
                    required: [ "customerManagedS3Storage" ],
                    members: {
                        customerManagedS3Storage: {
                            type: "structure",
                            required: [ "bucket" ],
                            members: {
                                bucket: {},
                                keyPrefix: {}
                            }
                        }
                    }
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                jsonConfiguration: {
                    type: "structure",
                    members: {}
                },
                parquetConfiguration: {
                    type: "structure",
                    members: {
                        schemaDefinition: {
                            type: "structure",
                            members: {
                                columns: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "type" ],
                                        members: {
                                            name: {},
                                            type: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                partitions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            attributePartition: {
                                type: "structure",
                                required: [ "attributeName" ],
                                members: {
                                    attributeName: {}
                                }
                            },
                            timestampPartition: {
                                type: "structure",
                                required: [ "attributeName" ],
                                members: {
                                    attributeName: {},
                                    timestampFormat: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S34: {
            type: "list",
            member: {
                shape: "S35"
            }
        },
        S35: {
            type: "structure",
            members: {
                channel: {
                    type: "structure",
                    required: [ "name", "channelName" ],
                    members: {
                        name: {},
                        channelName: {},
                        next: {}
                    }
                },
                lambda: {
                    type: "structure",
                    required: [ "name", "lambdaName", "batchSize" ],
                    members: {
                        name: {},
                        lambdaName: {},
                        batchSize: {
                            type: "integer"
                        },
                        next: {}
                    }
                },
                datastore: {
                    type: "structure",
                    required: [ "name", "datastoreName" ],
                    members: {
                        name: {},
                        datastoreName: {}
                    }
                },
                addAttributes: {
                    type: "structure",
                    required: [ "name", "attributes" ],
                    members: {
                        name: {},
                        attributes: {
                            type: "map",
                            key: {},
                            value: {}
                        },
                        next: {}
                    }
                },
                removeAttributes: {
                    type: "structure",
                    required: [ "name", "attributes" ],
                    members: {
                        name: {},
                        attributes: {
                            shape: "S3g"
                        },
                        next: {}
                    }
                },
                selectAttributes: {
                    type: "structure",
                    required: [ "name", "attributes" ],
                    members: {
                        name: {},
                        attributes: {
                            shape: "S3g"
                        },
                        next: {}
                    }
                },
                filter: {
                    type: "structure",
                    required: [ "name", "filter" ],
                    members: {
                        name: {},
                        filter: {},
                        next: {}
                    }
                },
                math: {
                    type: "structure",
                    required: [ "name", "attribute", "math" ],
                    members: {
                        name: {},
                        attribute: {},
                        math: {},
                        next: {}
                    }
                },
                deviceRegistryEnrich: {
                    type: "structure",
                    required: [ "name", "attribute", "thingName", "roleArn" ],
                    members: {
                        name: {},
                        attribute: {},
                        thingName: {},
                        roleArn: {},
                        next: {}
                    }
                },
                deviceShadowEnrich: {
                    type: "structure",
                    required: [ "name", "attribute", "thingName", "roleArn" ],
                    members: {
                        name: {},
                        attribute: {},
                        thingName: {},
                        roleArn: {},
                        next: {}
                    }
                }
            }
        },
        S3g: {
            type: "list",
            member: {}
        },
        S42: {
            type: "structure",
            members: {
                estimatedSizeInBytes: {
                    type: "double"
                },
                estimatedOn: {
                    type: "timestamp"
                }
            }
        },
        S4f: {
            type: "structure",
            required: [ "roleArn", "level", "enabled" ],
            members: {
                roleArn: {},
                level: {},
                enabled: {
                    type: "boolean"
                }
            }
        },
        S4l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S4t: {
            type: "structure",
            members: {
                state: {},
                reason: {}
            }
        },
        S5z: {
            type: "list",
            member: {
                type: "blob"
            }
        }
    },
    paginators: {
        ListChannels: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListDatasetContents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListDatasets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListDatastores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPipelines: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["iot1clickdevicesservice"] = {};

AWS.IoT1ClickDevicesService = AWS.Service.defineService("iot1clickdevicesservice", [ "2018-05-14" ]);

AWS.apiLoader.services["iot1clickdevicesservice"]["2018-05-14"] = {
    metadata: {
        apiVersion: "2018-05-14",
        endpointPrefix: "devices.iot1click",
        signingName: "iot1click",
        serviceFullName: "AWS IoT 1-Click Devices Service",
        serviceId: "IoT 1Click Devices Service",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "devices-2018-05-14",
        signatureVersion: "v4"
    },
    operations: {
        ClaimDevicesByClaimCode: {
            http: {
                method: "PUT",
                requestUri: "/claims/{claimCode}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ClaimCode: {
                        location: "uri",
                        locationName: "claimCode"
                    }
                },
                required: [ "ClaimCode" ]
            },
            output: {
                type: "structure",
                members: {
                    ClaimCode: {
                        locationName: "claimCode"
                    },
                    Total: {
                        locationName: "total",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDevice: {
            http: {
                method: "GET",
                requestUri: "/devices/{deviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeviceDescription: {
                        shape: "S8",
                        locationName: "deviceDescription"
                    }
                }
            }
        },
        FinalizeDeviceClaim: {
            http: {
                method: "PUT",
                requestUri: "/devices/{deviceId}/finalize-claim",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    Tags: {
                        shape: "Sc",
                        locationName: "tags"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        GetDeviceMethods: {
            http: {
                method: "GET",
                requestUri: "/devices/{deviceId}/methods",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeviceMethods: {
                        locationName: "deviceMethods",
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    }
                }
            }
        },
        InitiateDeviceClaim: {
            http: {
                method: "PUT",
                requestUri: "/devices/{deviceId}/initiate-claim",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        InvokeDeviceMethod: {
            http: {
                requestUri: "/devices/{deviceId}/methods",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    DeviceMethod: {
                        shape: "Si",
                        locationName: "deviceMethod"
                    },
                    DeviceMethodParameters: {
                        locationName: "deviceMethodParameters"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeviceMethodResponse: {
                        locationName: "deviceMethodResponse"
                    }
                }
            }
        },
        ListDeviceEvents: {
            http: {
                method: "GET",
                requestUri: "/devices/{deviceId}/events",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    FromTimeStamp: {
                        shape: "So",
                        location: "querystring",
                        locationName: "fromTimeStamp"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ToTimeStamp: {
                        shape: "So",
                        location: "querystring",
                        locationName: "toTimeStamp"
                    }
                },
                required: [ "DeviceId", "FromTimeStamp", "ToTimeStamp" ]
            },
            output: {
                type: "structure",
                members: {
                    Events: {
                        locationName: "events",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Device: {
                                    locationName: "device",
                                    type: "structure",
                                    members: {
                                        Attributes: {
                                            locationName: "attributes",
                                            type: "structure",
                                            members: {}
                                        },
                                        DeviceId: {
                                            locationName: "deviceId"
                                        },
                                        Type: {
                                            locationName: "type"
                                        }
                                    }
                                },
                                StdEvent: {
                                    locationName: "stdEvent"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListDevices: {
            http: {
                method: "GET",
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceType: {
                        location: "querystring",
                        locationName: "deviceType"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        locationName: "devices",
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sc",
                        locationName: "tags"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "Sc",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            }
        },
        UnclaimDevice: {
            http: {
                method: "PUT",
                requestUri: "/devices/{deviceId}/unclaim",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateDeviceState: {
            http: {
                method: "PUT",
                requestUri: "/devices/{deviceId}/state",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "deviceId"
                    },
                    Enabled: {
                        locationName: "enabled",
                        type: "boolean"
                    }
                },
                required: [ "DeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S8: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Attributes: {
                    locationName: "attributes",
                    type: "map",
                    key: {},
                    value: {}
                },
                DeviceId: {
                    locationName: "deviceId"
                },
                Enabled: {
                    locationName: "enabled",
                    type: "boolean"
                },
                RemainingLife: {
                    locationName: "remainingLife",
                    type: "double"
                },
                Type: {
                    locationName: "type"
                },
                Tags: {
                    shape: "Sc",
                    locationName: "tags"
                }
            }
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        },
        Si: {
            type: "structure",
            members: {
                DeviceType: {
                    locationName: "deviceType"
                },
                MethodName: {
                    locationName: "methodName"
                }
            }
        },
        So: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    }
};

AWS.apiLoader.services["iot1clickprojects"] = {};

AWS.IoT1ClickProjects = AWS.Service.defineService("iot1clickprojects", [ "2018-05-14" ]);

AWS.apiLoader.services["iot1clickprojects"]["2018-05-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-14",
        endpointPrefix: "projects.iot1click",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWS IoT 1-Click Projects",
        serviceFullName: "AWS IoT 1-Click Projects Service",
        serviceId: "IoT 1Click Projects",
        signatureVersion: "v4",
        signingName: "iot1click",
        uid: "iot1click-projects-2018-05-14"
    },
    operations: {
        AssociateDeviceWithPlacement: {
            http: {
                method: "PUT",
                requestUri: "/projects/{projectName}/placements/{placementName}/devices/{deviceTemplateName}"
            },
            input: {
                type: "structure",
                required: [ "projectName", "placementName", "deviceId", "deviceTemplateName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    deviceId: {},
                    deviceTemplateName: {
                        location: "uri",
                        locationName: "deviceTemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreatePlacement: {
            http: {
                requestUri: "/projects/{projectName}/placements"
            },
            input: {
                type: "structure",
                required: [ "placementName", "projectName" ],
                members: {
                    placementName: {},
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    attributes: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateProject: {
            http: {
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {},
                    description: {},
                    placementTemplate: {
                        shape: "Se"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePlacement: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectName}/placements/{placementName}"
            },
            input: {
                type: "structure",
                required: [ "placementName", "projectName" ],
                members: {
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribePlacement: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectName}/placements/{placementName}"
            },
            input: {
                type: "structure",
                required: [ "placementName", "projectName" ],
                members: {
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "placement" ],
                members: {
                    placement: {
                        type: "structure",
                        required: [ "projectName", "placementName", "attributes", "createdDate", "updatedDate" ],
                        members: {
                            projectName: {},
                            placementName: {},
                            attributes: {
                                shape: "S8"
                            },
                            createdDate: {
                                type: "timestamp"
                            },
                            updatedDate: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        type: "structure",
                        required: [ "projectName", "createdDate", "updatedDate" ],
                        members: {
                            arn: {},
                            projectName: {},
                            description: {},
                            createdDate: {
                                type: "timestamp"
                            },
                            updatedDate: {
                                type: "timestamp"
                            },
                            placementTemplate: {
                                shape: "Se"
                            },
                            tags: {
                                shape: "Sn"
                            }
                        }
                    }
                }
            }
        },
        DisassociateDeviceFromPlacement: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectName}/placements/{placementName}/devices/{deviceTemplateName}"
            },
            input: {
                type: "structure",
                required: [ "projectName", "placementName", "deviceTemplateName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    deviceTemplateName: {
                        location: "uri",
                        locationName: "deviceTemplateName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDevicesInPlacement: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectName}/placements/{placementName}/devices"
            },
            input: {
                type: "structure",
                required: [ "projectName", "placementName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "devices" ],
                members: {
                    devices: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        ListPlacements: {
            http: {
                method: "GET",
                requestUri: "/projects/{projectName}/placements"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "placements" ],
                members: {
                    placements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "projectName", "placementName", "createdDate", "updatedDate" ],
                            members: {
                                projectName: {},
                                placementName: {},
                                createdDate: {
                                    type: "timestamp"
                                },
                                updatedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projects" ],
                members: {
                    projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "projectName", "createdDate", "updatedDate" ],
                            members: {
                                arn: {},
                                projectName: {},
                                createdDate: {
                                    type: "timestamp"
                                },
                                updatedDate: {
                                    type: "timestamp"
                                },
                                tags: {
                                    shape: "Sn"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePlacement: {
            http: {
                method: "PUT",
                requestUri: "/projects/{projectName}/placements/{placementName}"
            },
            input: {
                type: "structure",
                required: [ "placementName", "projectName" ],
                members: {
                    placementName: {
                        location: "uri",
                        locationName: "placementName"
                    },
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    attributes: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateProject: {
            http: {
                method: "PUT",
                requestUri: "/projects/{projectName}"
            },
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {
                        location: "uri",
                        locationName: "projectName"
                    },
                    description: {},
                    placementTemplate: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S8: {
            type: "map",
            key: {},
            value: {}
        },
        Se: {
            type: "structure",
            members: {
                defaultAttributes: {
                    type: "map",
                    key: {},
                    value: {}
                },
                deviceTemplates: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            deviceType: {},
                            callbackOverrides: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        },
        Sn: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListPlacements: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "placements"
        },
        ListProjects: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "projects"
        }
    }
};

AWS.apiLoader.services["pi"] = {};

AWS.PI = AWS.Service.defineService("pi", [ "2018-02-27" ]);

AWS.apiLoader.services["pi"]["2018-02-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-02-27",
        endpointPrefix: "pi",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWS PI",
        serviceFullName: "AWS Performance Insights",
        serviceId: "PI",
        signatureVersion: "v4",
        signingName: "pi",
        targetPrefix: "PerformanceInsightsv20180227",
        uid: "pi-2018-02-27"
    },
    operations: {
        CreatePerformanceAnalysisReport: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "StartTime", "EndTime" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisReportId: {}
                }
            }
        },
        DeletePerformanceAnalysisReport: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "AnalysisReportId" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    AnalysisReportId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeDimensionKeys: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "StartTime", "EndTime", "Metric", "GroupBy" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Metric: {},
                    PeriodInSeconds: {
                        type: "integer"
                    },
                    GroupBy: {
                        shape: "Sg"
                    },
                    AdditionalMetrics: {
                        type: "list",
                        member: {}
                    },
                    PartitionBy: {
                        shape: "Sg"
                    },
                    Filter: {
                        shape: "Sk"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AlignedStartTime: {
                        type: "timestamp"
                    },
                    AlignedEndTime: {
                        type: "timestamp"
                    },
                    PartitionKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Dimensions" ],
                            members: {
                                Dimensions: {
                                    shape: "Sq"
                                }
                            }
                        }
                    },
                    Keys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Dimensions: {
                                    shape: "Sq"
                                },
                                Total: {
                                    type: "double"
                                },
                                AdditionalMetrics: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "double"
                                    }
                                },
                                Partitions: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDimensionKeyDetails: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "Group", "GroupIdentifier" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    Group: {},
                    GroupIdentifier: {},
                    RequestedDimensions: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Dimensions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Value: {},
                                Dimension: {},
                                Status: {}
                            }
                        }
                    }
                }
            }
        },
        GetPerformanceAnalysisReport: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "AnalysisReportId" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    AnalysisReportId: {},
                    TextFormat: {},
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisReport: {
                        type: "structure",
                        required: [ "AnalysisReportId" ],
                        members: {
                            AnalysisReportId: {},
                            Identifier: {},
                            ServiceType: {},
                            CreateTime: {
                                type: "timestamp"
                            },
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            },
                            Status: {},
                            Insights: {
                                shape: "S19"
                            }
                        }
                    }
                }
            }
        },
        GetResourceMetadata: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier" ],
                members: {
                    ServiceType: {},
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Identifier: {},
                    Features: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                Status: {}
                            }
                        }
                    }
                }
            }
        },
        GetResourceMetrics: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "MetricQueries", "StartTime", "EndTime" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    MetricQueries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Metric" ],
                            members: {
                                Metric: {},
                                GroupBy: {
                                    shape: "Sg"
                                },
                                Filter: {
                                    shape: "Sk"
                                }
                            }
                        }
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    PeriodInSeconds: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PeriodAlignment: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AlignedStartTime: {
                        type: "timestamp"
                    },
                    AlignedEndTime: {
                        type: "timestamp"
                    },
                    Identifier: {},
                    MetricList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {
                                    type: "structure",
                                    required: [ "Metric" ],
                                    members: {
                                        Metric: {},
                                        Dimensions: {
                                            shape: "Sq"
                                        }
                                    }
                                },
                                DataPoints: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Timestamp", "Value" ],
                                        members: {
                                            Timestamp: {
                                                type: "timestamp"
                                            },
                                            Value: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAvailableResourceDimensions: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "Metrics" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    Metrics: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MetricDimensions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Metric: {},
                                Groups: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Group: {},
                                            Dimensions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Identifier: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAvailableResourceMetrics: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier", "MetricTypes" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    MetricTypes: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Metric: {},
                                Description: {},
                                Unit: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPerformanceAnalysisReports: {
            input: {
                type: "structure",
                required: [ "ServiceType", "Identifier" ],
                members: {
                    ServiceType: {},
                    Identifier: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ListTags: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisReports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AnalysisReportId: {},
                                CreateTime: {
                                    type: "timestamp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                Tags: {
                                    shape: "S5"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ServiceType", "ResourceARN" ],
                members: {
                    ServiceType: {},
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ServiceType", "ResourceARN", "Tags" ],
                members: {
                    ServiceType: {},
                    ResourceARN: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ServiceType", "ResourceARN", "TagKeys" ],
                members: {
                    ServiceType: {},
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sg: {
            type: "structure",
            required: [ "Group" ],
            members: {
                Group: {},
                Dimensions: {
                    type: "list",
                    member: {}
                },
                Limit: {
                    type: "integer"
                }
            }
        },
        Sk: {
            type: "map",
            key: {},
            value: {}
        },
        Sq: {
            type: "map",
            key: {},
            value: {}
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {},
                    InsightType: {},
                    Context: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Severity: {},
                    SupportingInsights: {
                        shape: "S19"
                    },
                    Description: {
                        shape: "S1d"
                    },
                    Recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecommendationId: {},
                                RecommendationDescription: {
                                    shape: "S1d"
                                }
                            }
                        }
                    },
                    InsightData: {
                        shape: "S1g"
                    },
                    BaselineData: {
                        shape: "S1g"
                    }
                }
            }
        },
        S1d: {
            type: "string",
            sensitive: true
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PerformanceInsightsMetric: {
                        type: "structure",
                        members: {
                            Metric: {},
                            DisplayName: {},
                            Dimensions: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            Value: {
                                type: "double"
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeDimensionKeys: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetResourceMetrics: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAvailableResourceDimensions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAvailableResourceMetrics: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPerformanceAnalysisReports: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["neptune"] = {};

AWS.Neptune = AWS.Service.defineService("neptune", [ "2014-10-31" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    108: [ function(require, module, exports) {
        var AWS = require("../core");
        var rdsutil = require("./rdsutil");
        var crossRegionOperations = [ "createDBCluster", "copyDBClusterSnapshot" ];
        AWS.util.update(AWS.Neptune.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                if (crossRegionOperations.indexOf(request.operation) !== -1 && this.config.params && this.config.params.SourceRegion && request.params && !request.params.SourceRegion) {
                    request.params.SourceRegion = this.config.params.SourceRegion;
                }
                rdsutil.setupRequestListeners(this, request, crossRegionOperations);
            }
        });
    }, {
        "../core": 44,
        "./rdsutil": 113
    } ]
}, {}, [ 108 ]);

AWS.apiLoader.services["neptune"]["2014-10-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-10-31",
        endpointPrefix: "rds",
        protocol: "query",
        serviceAbbreviation: "Amazon Neptune",
        serviceFullName: "Amazon Neptune",
        serviceId: "Neptune",
        signatureVersion: "v4",
        signingName: "rds",
        uid: "neptune-2014-10-31",
        xmlNamespace: "http://rds.amazonaws.com/doc/2014-10-31/"
    },
    operations: {
        AddRoleToDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "RoleArn" ],
                members: {
                    DBClusterIdentifier: {},
                    RoleArn: {},
                    FeatureName: {}
                }
            }
        },
        AddSourceIdentifierToSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "AddSourceIdentifierToSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "Tags" ],
                members: {
                    ResourceName: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        ApplyPendingMaintenanceAction: {
            input: {
                type: "structure",
                required: [ "ResourceIdentifier", "ApplyAction", "OptInType" ],
                members: {
                    ResourceIdentifier: {},
                    ApplyAction: {},
                    OptInType: {}
                }
            },
            output: {
                resultWrapper: "ApplyPendingMaintenanceActionResult",
                type: "structure",
                members: {
                    ResourcePendingMaintenanceActions: {
                        shape: "Se"
                    }
                }
            }
        },
        CopyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupIdentifier", "TargetDBClusterParameterGroupDescription" ],
                members: {
                    SourceDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupIdentifier: {},
                    TargetDBClusterParameterGroupDescription: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "Sk"
                    }
                }
            }
        },
        CopyDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "SourceDBClusterSnapshotIdentifier", "TargetDBClusterSnapshotIdentifier" ],
                members: {
                    SourceDBClusterSnapshotIdentifier: {},
                    TargetDBClusterSnapshotIdentifier: {},
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    CopyTags: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "So"
                    }
                }
            }
        },
        CopyDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "SourceDBParameterGroupIdentifier", "TargetDBParameterGroupIdentifier", "TargetDBParameterGroupDescription" ],
                members: {
                    SourceDBParameterGroupIdentifier: {},
                    TargetDBParameterGroupIdentifier: {},
                    TargetDBParameterGroupDescription: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CopyDBParameterGroupResult",
                type: "structure",
                members: {
                    DBParameterGroup: {
                        shape: "St"
                    }
                }
            }
        },
        CreateDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "Sp"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    CharacterSetName: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    DatabaseName: {},
                    DBClusterIdentifier: {},
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    DBSubnetGroupName: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    MasterUsername: {},
                    MasterUserPassword: {},
                    OptionGroupName: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    ReplicationSourceIdentifier: {},
                    Tags: {
                        shape: "Sa"
                    },
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    PreSignedUrl: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "Sx"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    },
                    ServerlessV2ScalingConfiguration: {
                        shape: "Sy"
                    },
                    GlobalClusterIdentifier: {},
                    StorageType: {}
                }
            },
            output: {
                resultWrapper: "CreateDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateDBClusterEndpoint: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "DBClusterEndpointIdentifier", "EndpointType" ],
                members: {
                    DBClusterIdentifier: {},
                    DBClusterEndpointIdentifier: {},
                    EndpointType: {},
                    StaticMembers: {
                        shape: "S1g"
                    },
                    ExcludedMembers: {
                        shape: "S1g"
                    },
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterEndpointResult",
                type: "structure",
                members: {
                    DBClusterEndpointIdentifier: {},
                    DBClusterIdentifier: {},
                    DBClusterEndpointResourceIdentifier: {},
                    Endpoint: {},
                    Status: {},
                    EndpointType: {},
                    CustomEndpointType: {},
                    StaticMembers: {
                        shape: "S1g"
                    },
                    ExcludedMembers: {
                        shape: "S1g"
                    },
                    DBClusterEndpointArn: {}
                }
            }
        },
        CreateDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "DBParameterGroupFamily", "Description" ],
                members: {
                    DBClusterParameterGroupName: {},
                    DBParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterParameterGroupResult",
                type: "structure",
                members: {
                    DBClusterParameterGroup: {
                        shape: "Sk"
                    }
                }
            }
        },
        CreateDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "DBClusterIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    DBClusterIdentifier: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "So"
                    }
                }
            }
        },
        CreateDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier", "DBInstanceClass", "Engine", "DBClusterIdentifier" ],
                members: {
                    DBName: {},
                    DBInstanceIdentifier: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    DBInstanceClass: {},
                    Engine: {},
                    MasterUsername: {},
                    MasterUserPassword: {},
                    DBSecurityGroups: {
                        shape: "S1n"
                    },
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    AvailabilityZone: {},
                    DBSubnetGroupName: {},
                    PreferredMaintenanceWindow: {},
                    DBParameterGroupName: {},
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    PreferredBackupWindow: {},
                    Port: {
                        type: "integer"
                    },
                    MultiAZ: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    LicenseModel: {},
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    CharacterSetName: {},
                    PubliclyAccessible: {
                        deprecated: true,
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    DBClusterIdentifier: {},
                    StorageType: {},
                    TdeCredentialArn: {},
                    TdeCredentialPassword: {
                        shape: "S1o"
                    },
                    StorageEncrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    Domain: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    MonitoringRoleArn: {},
                    DomainIAMRoleName: {},
                    PromotionTier: {
                        type: "integer"
                    },
                    Timezone: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    EnableCloudwatchLogsExports: {
                        shape: "Sx"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1q"
                    }
                }
            }
        },
        CreateDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName", "DBParameterGroupFamily", "Description" ],
                members: {
                    DBParameterGroupName: {},
                    DBParameterGroupFamily: {},
                    Description: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBParameterGroupResult",
                type: "structure",
                members: {
                    DBParameterGroup: {
                        shape: "St"
                    }
                }
            }
        },
        CreateDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "DBSubnetGroupDescription", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S2c"
                    },
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S1w"
                    }
                }
            }
        },
        CreateEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SnsTopicArn" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S7"
                    },
                    SourceIds: {
                        shape: "S6"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "CreateEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    SourceDBClusterIdentifier: {},
                    Engine: {},
                    EngineVersion: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    StorageEncrypted: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S2i"
                    }
                }
            }
        },
        DeleteDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    SkipFinalSnapshot: {
                        type: "boolean"
                    },
                    FinalDBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S12"
                    }
                }
            }
        },
        DeleteDBClusterEndpoint: {
            input: {
                type: "structure",
                required: [ "DBClusterEndpointIdentifier" ],
                members: {
                    DBClusterEndpointIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterEndpointResult",
                type: "structure",
                members: {
                    DBClusterEndpointIdentifier: {},
                    DBClusterIdentifier: {},
                    DBClusterEndpointResourceIdentifier: {},
                    Endpoint: {},
                    Status: {},
                    EndpointType: {},
                    CustomEndpointType: {},
                    StaticMembers: {
                        shape: "S1g"
                    },
                    ExcludedMembers: {
                        shape: "S1g"
                    },
                    DBClusterEndpointArn: {}
                }
            }
        },
        DeleteDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {}
                }
            }
        },
        DeleteDBClusterSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBClusterSnapshotResult",
                type: "structure",
                members: {
                    DBClusterSnapshot: {
                        shape: "So"
                    }
                }
            }
        },
        DeleteDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    SkipFinalSnapshot: {
                        type: "boolean"
                    },
                    FinalDBSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1q"
                    }
                }
            }
        },
        DeleteDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName" ],
                members: {
                    DBParameterGroupName: {}
                }
            }
        },
        DeleteDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName" ],
                members: {
                    DBSubnetGroupName: {}
                }
            }
        },
        DeleteEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {}
                }
            },
            output: {
                resultWrapper: "DeleteEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DeleteGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S2i"
                    }
                }
            }
        },
        DescribeDBClusterEndpoints: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    DBClusterEndpointIdentifier: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterEndpointsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterEndpoints: {
                        type: "list",
                        member: {
                            locationName: "DBClusterEndpointList",
                            type: "structure",
                            members: {
                                DBClusterEndpointIdentifier: {},
                                DBClusterIdentifier: {},
                                DBClusterEndpointResourceIdentifier: {},
                                Endpoint: {},
                                Status: {},
                                EndpointType: {},
                                CustomEndpointType: {},
                                StaticMembers: {
                                    shape: "S1g"
                                },
                                ExcludedMembers: {
                                    shape: "S1g"
                                },
                                DBClusterEndpointArn: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeDBClusterParameterGroups: {
            input: {
                type: "structure",
                members: {
                    DBClusterParameterGroupName: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterParameterGroups: {
                        type: "list",
                        member: {
                            shape: "Sk",
                            locationName: "DBClusterParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeDBClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Source: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterParametersResult",
                type: "structure",
                members: {
                    Parameters: {
                        shape: "S3d"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBClusterSnapshotAttributes: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier" ],
                members: {
                    DBClusterSnapshotIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotAttributesResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S3i"
                    }
                }
            }
        },
        DescribeDBClusterSnapshots: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    DBClusterSnapshotIdentifier: {},
                    SnapshotType: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    IncludeShared: {
                        type: "boolean"
                    },
                    IncludePublic: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBClusterSnapshotsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusterSnapshots: {
                        type: "list",
                        member: {
                            shape: "So",
                            locationName: "DBClusterSnapshot"
                        }
                    }
                }
            }
        },
        DescribeDBClusters: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBClusters: {
                        type: "list",
                        member: {
                            shape: "S12",
                            locationName: "DBCluster"
                        }
                    }
                }
            }
        },
        DescribeDBEngineVersions: {
            input: {
                type: "structure",
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    DefaultOnly: {
                        type: "boolean"
                    },
                    ListSupportedCharacterSets: {
                        type: "boolean"
                    },
                    ListSupportedTimezones: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDBEngineVersionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBEngineVersions: {
                        type: "list",
                        member: {
                            locationName: "DBEngineVersion",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                DBParameterGroupFamily: {},
                                DBEngineDescription: {},
                                DBEngineVersionDescription: {},
                                DefaultCharacterSet: {
                                    shape: "S3w"
                                },
                                SupportedCharacterSets: {
                                    type: "list",
                                    member: {
                                        shape: "S3w",
                                        locationName: "CharacterSet"
                                    }
                                },
                                ValidUpgradeTarget: {
                                    type: "list",
                                    member: {
                                        locationName: "UpgradeTarget",
                                        type: "structure",
                                        members: {
                                            Engine: {},
                                            EngineVersion: {},
                                            Description: {},
                                            AutoUpgrade: {
                                                type: "boolean"
                                            },
                                            IsMajorVersionUpgrade: {
                                                type: "boolean"
                                            },
                                            SupportsGlobalDatabases: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                SupportedTimezones: {
                                    type: "list",
                                    member: {
                                        locationName: "Timezone",
                                        type: "structure",
                                        members: {
                                            TimezoneName: {}
                                        }
                                    }
                                },
                                ExportableLogTypes: {
                                    shape: "Sx"
                                },
                                SupportsLogExportsToCloudwatchLogs: {
                                    type: "boolean"
                                },
                                SupportsReadReplica: {
                                    type: "boolean"
                                },
                                SupportsGlobalDatabases: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeDBInstances: {
            input: {
                type: "structure",
                members: {
                    DBInstanceIdentifier: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBInstancesResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBInstances: {
                        type: "list",
                        member: {
                            shape: "S1q",
                            locationName: "DBInstance"
                        }
                    }
                }
            }
        },
        DescribeDBParameterGroups: {
            input: {
                type: "structure",
                members: {
                    DBParameterGroupName: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBParameterGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBParameterGroups: {
                        type: "list",
                        member: {
                            shape: "St",
                            locationName: "DBParameterGroup"
                        }
                    }
                }
            }
        },
        DescribeDBParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName" ],
                members: {
                    DBParameterGroupName: {},
                    Source: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBParametersResult",
                type: "structure",
                members: {
                    Parameters: {
                        shape: "S3d"
                    },
                    Marker: {}
                }
            }
        },
        DescribeDBSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    DBSubnetGroupName: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeDBSubnetGroupsResult",
                type: "structure",
                members: {
                    Marker: {},
                    DBSubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S1w",
                            locationName: "DBSubnetGroup"
                        }
                    }
                }
            }
        },
        DescribeEngineDefaultClusterParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupFamily" ],
                members: {
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEngineDefaultClusterParametersResult",
                type: "structure",
                members: {
                    EngineDefaults: {
                        shape: "S4f"
                    }
                }
            }
        },
        DescribeEngineDefaultParameters: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupFamily" ],
                members: {
                    DBParameterGroupFamily: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEngineDefaultParametersResult",
                type: "structure",
                members: {
                    EngineDefaults: {
                        shape: "S4f"
                    }
                }
            }
        },
        DescribeEventCategories: {
            input: {
                type: "structure",
                members: {
                    SourceType: {},
                    Filters: {
                        shape: "S32"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeEventCategoriesResult",
                type: "structure",
                members: {
                    EventCategoriesMapList: {
                        type: "list",
                        member: {
                            locationName: "EventCategoriesMap",
                            type: "structure",
                            members: {
                                SourceType: {},
                                EventCategories: {
                                    shape: "S7"
                                }
                            },
                            wrapper: true
                        }
                    }
                }
            }
        },
        DescribeEventSubscriptions: {
            input: {
                type: "structure",
                members: {
                    SubscriptionName: {},
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventSubscriptionsResult",
                type: "structure",
                members: {
                    Marker: {},
                    EventSubscriptionsList: {
                        type: "list",
                        member: {
                            shape: "S5",
                            locationName: "EventSubscription"
                        }
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceIdentifier: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    EventCategories: {
                        shape: "S7"
                    },
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeEventsResult",
                type: "structure",
                members: {
                    Marker: {},
                    Events: {
                        type: "list",
                        member: {
                            locationName: "Event",
                            type: "structure",
                            members: {
                                SourceIdentifier: {},
                                SourceType: {},
                                Message: {},
                                EventCategories: {
                                    shape: "S7"
                                },
                                Date: {
                                    type: "timestamp"
                                },
                                SourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeGlobalClusters: {
            input: {
                type: "structure",
                members: {
                    GlobalClusterIdentifier: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeGlobalClustersResult",
                type: "structure",
                members: {
                    Marker: {},
                    GlobalClusters: {
                        type: "list",
                        member: {
                            shape: "S2i",
                            locationName: "GlobalClusterMember"
                        }
                    }
                }
            }
        },
        DescribeOrderableDBInstanceOptions: {
            input: {
                type: "structure",
                required: [ "Engine" ],
                members: {
                    Engine: {},
                    EngineVersion: {},
                    DBInstanceClass: {},
                    LicenseModel: {},
                    Vpc: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S32"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                resultWrapper: "DescribeOrderableDBInstanceOptionsResult",
                type: "structure",
                members: {
                    OrderableDBInstanceOptions: {
                        type: "list",
                        member: {
                            locationName: "OrderableDBInstanceOption",
                            type: "structure",
                            members: {
                                Engine: {},
                                EngineVersion: {},
                                DBInstanceClass: {},
                                LicenseModel: {},
                                AvailabilityZones: {
                                    type: "list",
                                    member: {
                                        shape: "S1z",
                                        locationName: "AvailabilityZone"
                                    }
                                },
                                MultiAZCapable: {
                                    type: "boolean"
                                },
                                ReadReplicaCapable: {
                                    type: "boolean"
                                },
                                Vpc: {
                                    type: "boolean"
                                },
                                SupportsStorageEncryption: {
                                    type: "boolean"
                                },
                                StorageType: {},
                                SupportsIops: {
                                    type: "boolean"
                                },
                                SupportsEnhancedMonitoring: {
                                    type: "boolean"
                                },
                                SupportsIAMDatabaseAuthentication: {
                                    type: "boolean"
                                },
                                SupportsPerformanceInsights: {
                                    type: "boolean"
                                },
                                MinStorageSize: {
                                    type: "integer"
                                },
                                MaxStorageSize: {
                                    type: "integer"
                                },
                                MinIopsPerDbInstance: {
                                    type: "integer"
                                },
                                MaxIopsPerDbInstance: {
                                    type: "integer"
                                },
                                MinIopsPerGib: {
                                    type: "double"
                                },
                                MaxIopsPerGib: {
                                    type: "double"
                                },
                                SupportsGlobalDatabases: {
                                    type: "boolean"
                                }
                            },
                            wrapper: true
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribePendingMaintenanceActions: {
            input: {
                type: "structure",
                members: {
                    ResourceIdentifier: {},
                    Filters: {
                        shape: "S32"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribePendingMaintenanceActionsResult",
                type: "structure",
                members: {
                    PendingMaintenanceActions: {
                        type: "list",
                        member: {
                            shape: "Se",
                            locationName: "ResourcePendingMaintenanceActions"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeValidDBInstanceModifications: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "DescribeValidDBInstanceModificationsResult",
                type: "structure",
                members: {
                    ValidDBInstanceModificationsMessage: {
                        type: "structure",
                        members: {
                            Storage: {
                                type: "list",
                                member: {
                                    locationName: "ValidStorageOptions",
                                    type: "structure",
                                    members: {
                                        StorageType: {},
                                        StorageSize: {
                                            shape: "S5a"
                                        },
                                        ProvisionedIops: {
                                            shape: "S5a"
                                        },
                                        IopsToStorageRatio: {
                                            type: "list",
                                            member: {
                                                locationName: "DoubleRange",
                                                type: "structure",
                                                members: {
                                                    From: {
                                                        type: "double"
                                                    },
                                                    To: {
                                                        type: "double"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        wrapper: true
                    }
                }
            }
        },
        FailoverDBCluster: {
            input: {
                type: "structure",
                members: {
                    DBClusterIdentifier: {},
                    TargetDBInstanceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "FailoverDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S12"
                    }
                }
            }
        },
        FailoverGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier", "TargetDbClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    TargetDbClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "FailoverGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S2i"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceName" ],
                members: {
                    ResourceName: {},
                    Filters: {
                        shape: "S32"
                    }
                }
            },
            output: {
                resultWrapper: "ListTagsForResourceResult",
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sa"
                    }
                }
            }
        },
        ModifyDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    NewDBClusterIdentifier: {},
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    DBClusterParameterGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    Port: {
                        type: "integer"
                    },
                    MasterUserPassword: {},
                    OptionGroupName: {},
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    CloudwatchLogsExportConfiguration: {
                        shape: "S5m"
                    },
                    EngineVersion: {},
                    AllowMajorVersionUpgrade: {
                        type: "boolean"
                    },
                    DBInstanceParameterGroupName: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    ServerlessV2ScalingConfiguration: {
                        shape: "Sy"
                    },
                    StorageType: {}
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S12"
                    }
                }
            }
        },
        ModifyDBClusterEndpoint: {
            input: {
                type: "structure",
                required: [ "DBClusterEndpointIdentifier" ],
                members: {
                    DBClusterEndpointIdentifier: {},
                    EndpointType: {},
                    StaticMembers: {
                        shape: "S1g"
                    },
                    ExcludedMembers: {
                        shape: "S1g"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterEndpointResult",
                type: "structure",
                members: {
                    DBClusterEndpointIdentifier: {},
                    DBClusterIdentifier: {},
                    DBClusterEndpointResourceIdentifier: {},
                    Endpoint: {},
                    Status: {},
                    EndpointType: {},
                    CustomEndpointType: {},
                    StaticMembers: {
                        shape: "S1g"
                    },
                    ExcludedMembers: {
                        shape: "S1g"
                    },
                    DBClusterEndpointArn: {}
                }
            }
        },
        ModifyDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName", "Parameters" ],
                members: {
                    DBClusterParameterGroupName: {},
                    Parameters: {
                        shape: "S3d"
                    }
                }
            },
            output: {
                shape: "S5r",
                resultWrapper: "ModifyDBClusterParameterGroupResult"
            }
        },
        ModifyDBClusterSnapshotAttribute: {
            input: {
                type: "structure",
                required: [ "DBClusterSnapshotIdentifier", "AttributeName" ],
                members: {
                    DBClusterSnapshotIdentifier: {},
                    AttributeName: {},
                    ValuesToAdd: {
                        shape: "S3l"
                    },
                    ValuesToRemove: {
                        shape: "S3l"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBClusterSnapshotAttributeResult",
                type: "structure",
                members: {
                    DBClusterSnapshotAttributesResult: {
                        shape: "S3i"
                    }
                }
            }
        },
        ModifyDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    DBInstanceClass: {},
                    DBSubnetGroupName: {},
                    DBSecurityGroups: {
                        shape: "S1n"
                    },
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    MasterUserPassword: {},
                    DBParameterGroupName: {},
                    BackupRetentionPeriod: {
                        type: "integer"
                    },
                    PreferredBackupWindow: {},
                    PreferredMaintenanceWindow: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AllowMajorVersionUpgrade: {
                        type: "boolean"
                    },
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    LicenseModel: {},
                    Iops: {
                        type: "integer"
                    },
                    OptionGroupName: {},
                    NewDBInstanceIdentifier: {},
                    StorageType: {},
                    TdeCredentialArn: {},
                    TdeCredentialPassword: {
                        shape: "S1o"
                    },
                    CACertificateIdentifier: {},
                    Domain: {},
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    MonitoringInterval: {
                        type: "integer"
                    },
                    DBPortNumber: {
                        type: "integer"
                    },
                    PubliclyAccessible: {
                        deprecated: true,
                        type: "boolean"
                    },
                    MonitoringRoleArn: {},
                    DomainIAMRoleName: {},
                    PromotionTier: {
                        type: "integer"
                    },
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnablePerformanceInsights: {
                        type: "boolean"
                    },
                    PerformanceInsightsKMSKeyId: {},
                    CloudwatchLogsExportConfiguration: {
                        shape: "S5m"
                    },
                    DeletionProtection: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1q"
                    }
                }
            }
        },
        ModifyDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName", "Parameters" ],
                members: {
                    DBParameterGroupName: {},
                    Parameters: {
                        shape: "S3d"
                    }
                }
            },
            output: {
                shape: "S5x",
                resultWrapper: "ModifyDBParameterGroupResult"
            }
        },
        ModifyDBSubnetGroup: {
            input: {
                type: "structure",
                required: [ "DBSubnetGroupName", "SubnetIds" ],
                members: {
                    DBSubnetGroupName: {},
                    DBSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S2c"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyDBSubnetGroupResult",
                type: "structure",
                members: {
                    DBSubnetGroup: {
                        shape: "S1w"
                    }
                }
            }
        },
        ModifyEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S7"
                    },
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyEventSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        ModifyGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    NewGlobalClusterIdentifier: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AllowMajorVersionUpgrade: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ModifyGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S2i"
                    }
                }
            }
        },
        PromoteReadReplicaDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "PromoteReadReplicaDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S12"
                    }
                }
            }
        },
        RebootDBInstance: {
            input: {
                type: "structure",
                required: [ "DBInstanceIdentifier" ],
                members: {
                    DBInstanceIdentifier: {},
                    ForceFailover: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RebootDBInstanceResult",
                type: "structure",
                members: {
                    DBInstance: {
                        shape: "S1q"
                    }
                }
            }
        },
        RemoveFromGlobalCluster: {
            input: {
                type: "structure",
                required: [ "GlobalClusterIdentifier", "DbClusterIdentifier" ],
                members: {
                    GlobalClusterIdentifier: {},
                    DbClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RemoveFromGlobalClusterResult",
                type: "structure",
                members: {
                    GlobalCluster: {
                        shape: "S2i"
                    }
                }
            }
        },
        RemoveRoleFromDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "RoleArn" ],
                members: {
                    DBClusterIdentifier: {},
                    RoleArn: {},
                    FeatureName: {}
                }
            }
        },
        RemoveSourceIdentifierFromSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SourceIdentifier" ],
                members: {
                    SubscriptionName: {},
                    SourceIdentifier: {}
                }
            },
            output: {
                resultWrapper: "RemoveSourceIdentifierFromSubscriptionResult",
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S5"
                    }
                }
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "TagKeys" ],
                members: {
                    ResourceName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ResetDBClusterParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBClusterParameterGroupName" ],
                members: {
                    DBClusterParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S3d"
                    }
                }
            },
            output: {
                shape: "S5r",
                resultWrapper: "ResetDBClusterParameterGroupResult"
            }
        },
        ResetDBParameterGroup: {
            input: {
                type: "structure",
                required: [ "DBParameterGroupName" ],
                members: {
                    DBParameterGroupName: {},
                    ResetAllParameters: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S3d"
                    }
                }
            },
            output: {
                shape: "S5x",
                resultWrapper: "ResetDBParameterGroupResult"
            }
        },
        RestoreDBClusterFromSnapshot: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "SnapshotIdentifier", "Engine" ],
                members: {
                    AvailabilityZones: {
                        shape: "Sp"
                    },
                    DBClusterIdentifier: {},
                    SnapshotIdentifier: {},
                    Engine: {},
                    EngineVersion: {},
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    DatabaseName: {},
                    OptionGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    KmsKeyId: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "Sx"
                    },
                    DBClusterParameterGroupName: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    CopyTagsToSnapshot: {
                        type: "boolean"
                    },
                    ServerlessV2ScalingConfiguration: {
                        shape: "Sy"
                    },
                    StorageType: {}
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterFromSnapshotResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S12"
                    }
                }
            }
        },
        RestoreDBClusterToPointInTime: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier", "SourceDBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {},
                    RestoreType: {},
                    SourceDBClusterIdentifier: {},
                    RestoreToTime: {
                        type: "timestamp"
                    },
                    UseLatestRestorableTime: {
                        type: "boolean"
                    },
                    Port: {
                        type: "integer"
                    },
                    DBSubnetGroupName: {},
                    OptionGroupName: {},
                    VpcSecurityGroupIds: {
                        shape: "Sw"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    KmsKeyId: {},
                    EnableIAMDatabaseAuthentication: {
                        type: "boolean"
                    },
                    EnableCloudwatchLogsExports: {
                        shape: "Sx"
                    },
                    DBClusterParameterGroupName: {},
                    DeletionProtection: {
                        type: "boolean"
                    },
                    ServerlessV2ScalingConfiguration: {
                        shape: "Sy"
                    },
                    StorageType: {}
                }
            },
            output: {
                resultWrapper: "RestoreDBClusterToPointInTimeResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S12"
                    }
                }
            }
        },
        StartDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StartDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S12"
                    }
                }
            }
        },
        StopDBCluster: {
            input: {
                type: "structure",
                required: [ "DBClusterIdentifier" ],
                members: {
                    DBClusterIdentifier: {}
                }
            },
            output: {
                resultWrapper: "StopDBClusterResult",
                type: "structure",
                members: {
                    DBCluster: {
                        shape: "S12"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                CustomerAwsId: {},
                CustSubscriptionId: {},
                SnsTopicArn: {},
                Status: {},
                SubscriptionCreationTime: {},
                SourceType: {},
                SourceIdsList: {
                    shape: "S6"
                },
                EventCategoriesList: {
                    shape: "S7"
                },
                Enabled: {
                    type: "boolean"
                },
                EventSubscriptionArn: {}
            },
            wrapper: true
        },
        S6: {
            type: "list",
            member: {
                locationName: "SourceId"
            }
        },
        S7: {
            type: "list",
            member: {
                locationName: "EventCategory"
            }
        },
        Sa: {
            type: "list",
            member: {
                locationName: "Tag",
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                ResourceIdentifier: {},
                PendingMaintenanceActionDetails: {
                    type: "list",
                    member: {
                        locationName: "PendingMaintenanceAction",
                        type: "structure",
                        members: {
                            Action: {},
                            AutoAppliedAfterDate: {
                                type: "timestamp"
                            },
                            ForcedApplyDate: {
                                type: "timestamp"
                            },
                            OptInStatus: {},
                            CurrentApplyDate: {
                                type: "timestamp"
                            },
                            Description: {}
                        }
                    }
                }
            },
            wrapper: true
        },
        Sk: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {},
                DBParameterGroupFamily: {},
                Description: {},
                DBClusterParameterGroupArn: {}
            },
            wrapper: true
        },
        So: {
            type: "structure",
            members: {
                AvailabilityZones: {
                    shape: "Sp"
                },
                DBClusterSnapshotIdentifier: {},
                DBClusterIdentifier: {},
                SnapshotCreateTime: {
                    type: "timestamp"
                },
                Engine: {},
                AllocatedStorage: {
                    type: "integer"
                },
                Status: {},
                Port: {
                    type: "integer"
                },
                VpcId: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                MasterUsername: {},
                EngineVersion: {},
                LicenseModel: {},
                SnapshotType: {},
                PercentProgress: {
                    type: "integer"
                },
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DBClusterSnapshotArn: {},
                SourceDBClusterSnapshotArn: {},
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                StorageType: {}
            },
            wrapper: true
        },
        Sp: {
            type: "list",
            member: {
                locationName: "AvailabilityZone"
            }
        },
        St: {
            type: "structure",
            members: {
                DBParameterGroupName: {},
                DBParameterGroupFamily: {},
                Description: {},
                DBParameterGroupArn: {}
            },
            wrapper: true
        },
        Sw: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupId"
            }
        },
        Sx: {
            type: "list",
            member: {}
        },
        Sy: {
            type: "structure",
            members: {
                MinCapacity: {
                    type: "double"
                },
                MaxCapacity: {
                    type: "double"
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                AllocatedStorage: {
                    type: "integer"
                },
                AvailabilityZones: {
                    shape: "Sp"
                },
                BackupRetentionPeriod: {
                    type: "integer"
                },
                CharacterSetName: {},
                DatabaseName: {},
                DBClusterIdentifier: {},
                DBClusterParameterGroup: {},
                DBSubnetGroup: {},
                Status: {},
                PercentProgress: {},
                EarliestRestorableTime: {
                    type: "timestamp"
                },
                Endpoint: {},
                ReaderEndpoint: {},
                MultiAZ: {
                    type: "boolean"
                },
                Engine: {},
                EngineVersion: {},
                LatestRestorableTime: {
                    type: "timestamp"
                },
                Port: {
                    type: "integer"
                },
                MasterUsername: {},
                DBClusterOptionGroupMemberships: {
                    type: "list",
                    member: {
                        locationName: "DBClusterOptionGroup",
                        type: "structure",
                        members: {
                            DBClusterOptionGroupName: {},
                            Status: {}
                        }
                    }
                },
                PreferredBackupWindow: {},
                PreferredMaintenanceWindow: {},
                ReplicationSourceIdentifier: {},
                ReadReplicaIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaIdentifier"
                    }
                },
                DBClusterMembers: {
                    type: "list",
                    member: {
                        locationName: "DBClusterMember",
                        type: "structure",
                        members: {
                            DBInstanceIdentifier: {},
                            IsClusterWriter: {
                                type: "boolean"
                            },
                            DBClusterParameterGroupStatus: {},
                            PromotionTier: {
                                type: "integer"
                            }
                        },
                        wrapper: true
                    }
                },
                VpcSecurityGroups: {
                    shape: "S18"
                },
                HostedZoneId: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbClusterResourceId: {},
                DBClusterArn: {},
                AssociatedRoles: {
                    type: "list",
                    member: {
                        locationName: "DBClusterRole",
                        type: "structure",
                        members: {
                            RoleArn: {},
                            Status: {},
                            FeatureName: {}
                        }
                    }
                },
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                CloneGroupId: {},
                ClusterCreateTime: {
                    type: "timestamp"
                },
                CopyTagsToSnapshot: {
                    type: "boolean"
                },
                EnabledCloudwatchLogsExports: {
                    shape: "Sx"
                },
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        PendingCloudwatchLogsExports: {
                            shape: "S1d"
                        },
                        DBClusterIdentifier: {},
                        IAMDatabaseAuthenticationEnabled: {
                            type: "boolean"
                        },
                        EngineVersion: {},
                        BackupRetentionPeriod: {
                            type: "integer"
                        },
                        StorageType: {},
                        AllocatedStorage: {
                            type: "integer"
                        },
                        Iops: {
                            type: "integer"
                        }
                    }
                },
                DeletionProtection: {
                    type: "boolean"
                },
                CrossAccountClone: {
                    type: "boolean"
                },
                AutomaticRestartTime: {
                    type: "timestamp"
                },
                ServerlessV2ScalingConfiguration: {
                    type: "structure",
                    members: {
                        MinCapacity: {
                            type: "double"
                        },
                        MaxCapacity: {
                            type: "double"
                        }
                    }
                },
                GlobalClusterIdentifier: {},
                IOOptimizedNextAllowedModificationTime: {
                    type: "timestamp"
                },
                StorageType: {}
            },
            wrapper: true
        },
        S18: {
            type: "list",
            member: {
                locationName: "VpcSecurityGroupMembership",
                type: "structure",
                members: {
                    VpcSecurityGroupId: {},
                    Status: {}
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                LogTypesToEnable: {
                    shape: "Sx"
                },
                LogTypesToDisable: {
                    shape: "Sx"
                }
            }
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1n: {
            type: "list",
            member: {
                locationName: "DBSecurityGroupName"
            }
        },
        S1o: {
            type: "string",
            sensitive: true
        },
        S1q: {
            type: "structure",
            members: {
                DBInstanceIdentifier: {},
                DBInstanceClass: {},
                Engine: {},
                DBInstanceStatus: {},
                MasterUsername: {},
                DBName: {},
                Endpoint: {
                    type: "structure",
                    members: {
                        Address: {},
                        Port: {
                            type: "integer"
                        },
                        HostedZoneId: {}
                    }
                },
                AllocatedStorage: {
                    type: "integer"
                },
                InstanceCreateTime: {
                    type: "timestamp"
                },
                PreferredBackupWindow: {},
                BackupRetentionPeriod: {
                    type: "integer"
                },
                DBSecurityGroups: {
                    type: "list",
                    member: {
                        locationName: "DBSecurityGroup",
                        type: "structure",
                        members: {
                            DBSecurityGroupName: {},
                            Status: {}
                        }
                    }
                },
                VpcSecurityGroups: {
                    shape: "S18"
                },
                DBParameterGroups: {
                    type: "list",
                    member: {
                        locationName: "DBParameterGroup",
                        type: "structure",
                        members: {
                            DBParameterGroupName: {},
                            ParameterApplyStatus: {}
                        }
                    }
                },
                AvailabilityZone: {},
                DBSubnetGroup: {
                    shape: "S1w"
                },
                PreferredMaintenanceWindow: {},
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        DBInstanceClass: {},
                        AllocatedStorage: {
                            type: "integer"
                        },
                        MasterUserPassword: {},
                        Port: {
                            type: "integer"
                        },
                        BackupRetentionPeriod: {
                            type: "integer"
                        },
                        MultiAZ: {
                            type: "boolean"
                        },
                        EngineVersion: {},
                        LicenseModel: {},
                        Iops: {
                            type: "integer"
                        },
                        DBInstanceIdentifier: {},
                        StorageType: {},
                        CACertificateIdentifier: {},
                        DBSubnetGroupName: {},
                        PendingCloudwatchLogsExports: {
                            shape: "S1d"
                        }
                    }
                },
                LatestRestorableTime: {
                    type: "timestamp"
                },
                MultiAZ: {
                    type: "boolean"
                },
                EngineVersion: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                ReadReplicaSourceDBInstanceIdentifier: {},
                ReadReplicaDBInstanceIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaDBInstanceIdentifier"
                    }
                },
                ReadReplicaDBClusterIdentifiers: {
                    type: "list",
                    member: {
                        locationName: "ReadReplicaDBClusterIdentifier"
                    }
                },
                LicenseModel: {},
                Iops: {
                    type: "integer"
                },
                OptionGroupMemberships: {
                    type: "list",
                    member: {
                        locationName: "OptionGroupMembership",
                        type: "structure",
                        members: {
                            OptionGroupName: {},
                            Status: {}
                        }
                    }
                },
                CharacterSetName: {},
                SecondaryAvailabilityZone: {},
                PubliclyAccessible: {
                    deprecated: true,
                    type: "boolean"
                },
                StatusInfos: {
                    type: "list",
                    member: {
                        locationName: "DBInstanceStatusInfo",
                        type: "structure",
                        members: {
                            StatusType: {},
                            Normal: {
                                type: "boolean"
                            },
                            Status: {},
                            Message: {}
                        }
                    }
                },
                StorageType: {},
                TdeCredentialArn: {},
                DbInstancePort: {
                    type: "integer"
                },
                DBClusterIdentifier: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                KmsKeyId: {},
                DbiResourceId: {},
                CACertificateIdentifier: {},
                DomainMemberships: {
                    type: "list",
                    member: {
                        locationName: "DomainMembership",
                        type: "structure",
                        members: {
                            Domain: {},
                            Status: {},
                            FQDN: {},
                            IAMRoleName: {}
                        }
                    }
                },
                CopyTagsToSnapshot: {
                    type: "boolean"
                },
                MonitoringInterval: {
                    type: "integer"
                },
                EnhancedMonitoringResourceArn: {},
                MonitoringRoleArn: {},
                PromotionTier: {
                    type: "integer"
                },
                DBInstanceArn: {},
                Timezone: {},
                IAMDatabaseAuthenticationEnabled: {
                    type: "boolean"
                },
                PerformanceInsightsEnabled: {
                    type: "boolean"
                },
                PerformanceInsightsKMSKeyId: {},
                EnabledCloudwatchLogsExports: {
                    shape: "Sx"
                },
                DeletionProtection: {
                    type: "boolean"
                }
            },
            wrapper: true
        },
        S1w: {
            type: "structure",
            members: {
                DBSubnetGroupName: {},
                DBSubnetGroupDescription: {},
                VpcId: {},
                SubnetGroupStatus: {},
                Subnets: {
                    type: "list",
                    member: {
                        locationName: "Subnet",
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {
                                shape: "S1z"
                            },
                            SubnetStatus: {}
                        }
                    }
                },
                DBSubnetGroupArn: {}
            },
            wrapper: true
        },
        S1z: {
            type: "structure",
            members: {
                Name: {}
            },
            wrapper: true
        },
        S2c: {
            type: "list",
            member: {
                locationName: "SubnetIdentifier"
            }
        },
        S2i: {
            type: "structure",
            members: {
                GlobalClusterIdentifier: {},
                GlobalClusterResourceId: {},
                GlobalClusterArn: {},
                Status: {},
                Engine: {},
                EngineVersion: {},
                StorageEncrypted: {
                    type: "boolean"
                },
                DeletionProtection: {
                    type: "boolean"
                },
                GlobalClusterMembers: {
                    type: "list",
                    member: {
                        locationName: "GlobalClusterMember",
                        type: "structure",
                        members: {
                            DBClusterArn: {},
                            Readers: {
                                type: "list",
                                member: {}
                            },
                            IsWriter: {
                                type: "boolean"
                            }
                        },
                        wrapper: true
                    }
                }
            },
            wrapper: true
        },
        S32: {
            type: "list",
            member: {
                locationName: "Filter",
                type: "structure",
                required: [ "Name", "Values" ],
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {
                            locationName: "Value"
                        }
                    }
                }
            }
        },
        S3d: {
            type: "list",
            member: {
                locationName: "Parameter",
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterValue: {},
                    Description: {},
                    Source: {},
                    ApplyType: {},
                    DataType: {},
                    AllowedValues: {},
                    IsModifiable: {
                        type: "boolean"
                    },
                    MinimumEngineVersion: {},
                    ApplyMethod: {}
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                DBClusterSnapshotIdentifier: {},
                DBClusterSnapshotAttributes: {
                    type: "list",
                    member: {
                        locationName: "DBClusterSnapshotAttribute",
                        type: "structure",
                        members: {
                            AttributeName: {},
                            AttributeValues: {
                                shape: "S3l"
                            }
                        }
                    }
                }
            },
            wrapper: true
        },
        S3l: {
            type: "list",
            member: {
                locationName: "AttributeValue"
            }
        },
        S3w: {
            type: "structure",
            members: {
                CharacterSetName: {},
                CharacterSetDescription: {}
            }
        },
        S4f: {
            type: "structure",
            members: {
                DBParameterGroupFamily: {},
                Marker: {},
                Parameters: {
                    shape: "S3d"
                }
            },
            wrapper: true
        },
        S5a: {
            type: "list",
            member: {
                locationName: "Range",
                type: "structure",
                members: {
                    From: {
                        type: "integer"
                    },
                    To: {
                        type: "integer"
                    },
                    Step: {
                        type: "integer"
                    }
                }
            }
        },
        S5m: {
            type: "structure",
            members: {
                EnableLogTypes: {
                    shape: "Sx"
                },
                DisableLogTypes: {
                    shape: "Sx"
                }
            }
        },
        S5r: {
            type: "structure",
            members: {
                DBClusterParameterGroupName: {}
            }
        },
        S5x: {
            type: "structure",
            members: {
                DBParameterGroupName: {}
            }
        }
    },
    paginators: {
        DescribeDBClusterEndpoints: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterEndpoints"
        },
        DescribeDBClusterParameterGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterParameterGroups"
        },
        DescribeDBClusterParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Parameters"
        },
        DescribeDBClusterSnapshots: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusterSnapshots"
        },
        DescribeDBClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBClusters"
        },
        DescribeDBEngineVersions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBEngineVersions"
        },
        DescribeDBInstances: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBInstances"
        },
        DescribeDBParameterGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBParameterGroups"
        },
        DescribeDBParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Parameters"
        },
        DescribeDBSubnetGroups: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "DBSubnetGroups"
        },
        DescribeEngineDefaultParameters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "EngineDefaults.Marker",
            result_key: "EngineDefaults.Parameters"
        },
        DescribeEventSubscriptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "EventSubscriptionsList"
        },
        DescribeEvents: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "Events"
        },
        DescribeGlobalClusters: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "GlobalClusters"
        },
        DescribeOrderableDBInstanceOptions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "OrderableDBInstanceOptions"
        },
        DescribePendingMaintenanceActions: {
            input_token: "Marker",
            limit_key: "MaxRecords",
            output_token: "Marker",
            result_key: "PendingMaintenanceActions"
        },
        ListTagsForResource: {
            result_key: "TagList"
        }
    },
    waiters: {
        DBInstanceAvailable: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-restore",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "incompatible-parameters",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        },
        DBInstanceDeleted: {
            delay: 30,
            operation: "DescribeDBInstances",
            maxAttempts: 60,
            acceptors: [ {
                expected: "deleted",
                matcher: "pathAll",
                state: "success",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "DBInstanceNotFound",
                matcher: "error",
                state: "success"
            }, {
                expected: "creating",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "modifying",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "rebooting",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            }, {
                expected: "resetting-master-credentials",
                matcher: "pathAny",
                state: "failure",
                argument: "DBInstances[].DBInstanceStatus"
            } ]
        }
    }
};

AWS.apiLoader.services["mediatailor"] = {};

AWS.MediaTailor = AWS.Service.defineService("mediatailor", [ "2018-04-23" ]);

AWS.apiLoader.services["mediatailor"]["2018-04-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-23",
        endpointPrefix: "api.mediatailor",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "MediaTailor",
        serviceFullName: "AWS MediaTailor",
        serviceId: "MediaTailor",
        signatureVersion: "v4",
        signingName: "mediatailor",
        uid: "mediatailor-2018-04-23"
    },
    operations: {
        ConfigureLogsForChannel: {
            http: {
                method: "PUT",
                requestUri: "/configureLogs/channel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName", "LogTypes" ],
                members: {
                    ChannelName: {},
                    LogTypes: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelName: {},
                    LogTypes: {
                        shape: "S3"
                    }
                }
            }
        },
        ConfigureLogsForPlaybackConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/configureLogs/playbackConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PercentEnabled", "PlaybackConfigurationName" ],
                members: {
                    PercentEnabled: {
                        type: "integer"
                    },
                    PlaybackConfigurationName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "PercentEnabled" ],
                members: {
                    PercentEnabled: {
                        type: "integer"
                    },
                    PlaybackConfigurationName: {}
                }
            },
            idempotent: true
        },
        CreateChannel: {
            http: {
                requestUri: "/channel/{ChannelName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName", "Outputs", "PlaybackMode" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    FillerSlate: {
                        shape: "Sa"
                    },
                    Outputs: {
                        shape: "Sb"
                    },
                    PlaybackMode: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    Tier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    ChannelName: {},
                    ChannelState: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    FillerSlate: {
                        shape: "Sa"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    Outputs: {
                        shape: "Sn"
                    },
                    PlaybackMode: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    Tier: {}
                }
            },
            idempotent: true
        },
        CreateLiveSource: {
            http: {
                requestUri: "/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "HttpPackageConfigurations", "LiveSourceName", "SourceLocationName" ],
                members: {
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    LiveSourceName: {
                        location: "uri",
                        locationName: "LiveSourceName"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    },
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    LiveSourceName: {},
                    SourceLocationName: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            },
            idempotent: true
        },
        CreatePrefetchSchedule: {
            http: {
                requestUri: "/prefetchSchedule/{PlaybackConfigurationName}/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Consumption", "Name", "PlaybackConfigurationName", "Retrieval" ],
                members: {
                    Consumption: {
                        shape: "Sv"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    PlaybackConfigurationName: {
                        location: "uri",
                        locationName: "PlaybackConfigurationName"
                    },
                    Retrieval: {
                        shape: "Sz"
                    },
                    StreamId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Consumption: {
                        shape: "Sv"
                    },
                    Name: {},
                    PlaybackConfigurationName: {},
                    Retrieval: {
                        shape: "Sz"
                    },
                    StreamId: {}
                }
            },
            idempotent: true
        },
        CreateProgram: {
            http: {
                requestUri: "/channel/{ChannelName}/program/{ProgramName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName", "ProgramName", "ScheduleConfiguration", "SourceLocationName" ],
                members: {
                    AdBreaks: {
                        shape: "S12"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    LiveSourceName: {},
                    ProgramName: {
                        location: "uri",
                        locationName: "ProgramName"
                    },
                    ScheduleConfiguration: {
                        type: "structure",
                        required: [ "Transition" ],
                        members: {
                            ClipRange: {
                                shape: "S1f"
                            },
                            Transition: {
                                type: "structure",
                                required: [ "RelativePosition", "Type" ],
                                members: {
                                    DurationMillis: {
                                        type: "long"
                                    },
                                    RelativePosition: {},
                                    RelativeProgram: {},
                                    ScheduledStartTimeMillis: {
                                        type: "long"
                                    },
                                    Type: {}
                                }
                            }
                        }
                    },
                    SourceLocationName: {},
                    VodSourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AdBreaks: {
                        shape: "S12"
                    },
                    Arn: {},
                    ChannelName: {},
                    ClipRange: {
                        shape: "S1f"
                    },
                    CreationTime: {
                        shape: "Sm"
                    },
                    DurationMillis: {
                        type: "long"
                    },
                    LiveSourceName: {},
                    ProgramName: {},
                    ScheduledStartTime: {
                        shape: "Sm"
                    },
                    SourceLocationName: {},
                    VodSourceName: {}
                }
            },
            idempotent: true
        },
        CreateSourceLocation: {
            http: {
                requestUri: "/sourceLocation/{SourceLocationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "HttpConfiguration", "SourceLocationName" ],
                members: {
                    AccessConfiguration: {
                        shape: "S1k"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "S1n"
                    },
                    HttpConfiguration: {
                        shape: "S1o"
                    },
                    SegmentDeliveryConfigurations: {
                        shape: "S1p"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    },
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessConfiguration: {
                        shape: "S1k"
                    },
                    Arn: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "S1n"
                    },
                    HttpConfiguration: {
                        shape: "S1o"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    SegmentDeliveryConfigurations: {
                        shape: "S1p"
                    },
                    SourceLocationName: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            },
            idempotent: true
        },
        CreateVodSource: {
            http: {
                requestUri: "/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "HttpPackageConfigurations", "SourceLocationName", "VodSourceName" ],
                members: {
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    },
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    VodSourceName: {
                        location: "uri",
                        locationName: "VodSourceName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    SourceLocationName: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    VodSourceName: {}
                }
            },
            idempotent: true
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channel/{ChannelName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteChannelPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/channel/{ChannelName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteLiveSource: {
            http: {
                method: "DELETE",
                requestUri: "/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "LiveSourceName", "SourceLocationName" ],
                members: {
                    LiveSourceName: {
                        location: "uri",
                        locationName: "LiveSourceName"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePlaybackConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/playbackConfiguration/{Name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePrefetchSchedule: {
            http: {
                method: "DELETE",
                requestUri: "/prefetchSchedule/{PlaybackConfigurationName}/{Name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Name", "PlaybackConfigurationName" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    PlaybackConfigurationName: {
                        location: "uri",
                        locationName: "PlaybackConfigurationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteProgram: {
            http: {
                method: "DELETE",
                requestUri: "/channel/{ChannelName}/program/{ProgramName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName", "ProgramName" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "ProgramName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSourceLocation: {
            http: {
                method: "DELETE",
                requestUri: "/sourceLocation/{SourceLocationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SourceLocationName" ],
                members: {
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteVodSource: {
            http: {
                method: "DELETE",
                requestUri: "/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SourceLocationName", "VodSourceName" ],
                members: {
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    },
                    VodSourceName: {
                        location: "uri",
                        locationName: "VodSourceName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channel/{ChannelName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "LogConfiguration" ],
                members: {
                    Arn: {},
                    ChannelName: {},
                    ChannelState: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    FillerSlate: {
                        shape: "Sa"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    LogConfiguration: {
                        shape: "S2c"
                    },
                    Outputs: {
                        shape: "Sn"
                    },
                    PlaybackMode: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    Tier: {}
                }
            }
        },
        DescribeLiveSource: {
            http: {
                method: "GET",
                requestUri: "/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "LiveSourceName", "SourceLocationName" ],
                members: {
                    LiveSourceName: {
                        location: "uri",
                        locationName: "LiveSourceName"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    LiveSourceName: {},
                    SourceLocationName: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeProgram: {
            http: {
                method: "GET",
                requestUri: "/channel/{ChannelName}/program/{ProgramName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName", "ProgramName" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "ProgramName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdBreaks: {
                        shape: "S12"
                    },
                    Arn: {},
                    ChannelName: {},
                    ClipRange: {
                        shape: "S1f"
                    },
                    CreationTime: {
                        shape: "Sm"
                    },
                    DurationMillis: {
                        type: "long"
                    },
                    LiveSourceName: {},
                    ProgramName: {},
                    ScheduledStartTime: {
                        shape: "Sm"
                    },
                    SourceLocationName: {},
                    VodSourceName: {}
                }
            }
        },
        DescribeSourceLocation: {
            http: {
                method: "GET",
                requestUri: "/sourceLocation/{SourceLocationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SourceLocationName" ],
                members: {
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessConfiguration: {
                        shape: "S1k"
                    },
                    Arn: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "S1n"
                    },
                    HttpConfiguration: {
                        shape: "S1o"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    SegmentDeliveryConfigurations: {
                        shape: "S1p"
                    },
                    SourceLocationName: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeVodSource: {
            http: {
                method: "GET",
                requestUri: "/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SourceLocationName", "VodSourceName" ],
                members: {
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    },
                    VodSourceName: {
                        location: "uri",
                        locationName: "VodSourceName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdBreakOpportunities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OffsetMillis" ],
                            members: {
                                OffsetMillis: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    Arn: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    SourceLocationName: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    VodSourceName: {}
                }
            }
        },
        GetChannelPolicy: {
            http: {
                method: "GET",
                requestUri: "/channel/{ChannelName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetChannelSchedule: {
            http: {
                method: "GET",
                requestUri: "/channel/{ChannelName}/schedule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    DurationMinutes: {
                        location: "querystring",
                        locationName: "durationMinutes"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "ChannelName", "ProgramName", "SourceLocationName" ],
                            members: {
                                ApproximateDurationSeconds: {
                                    type: "long"
                                },
                                ApproximateStartTime: {
                                    shape: "Sm"
                                },
                                Arn: {},
                                ChannelName: {},
                                LiveSourceName: {},
                                ProgramName: {},
                                ScheduleAdBreaks: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ApproximateDurationSeconds: {
                                                type: "long"
                                            },
                                            ApproximateStartTime: {
                                                shape: "Sm"
                                            },
                                            SourceLocationName: {},
                                            VodSourceName: {}
                                        }
                                    }
                                },
                                ScheduleEntryType: {},
                                SourceLocationName: {},
                                VodSourceName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetPlaybackConfiguration: {
            http: {
                method: "GET",
                requestUri: "/playbackConfiguration/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdDecisionServerUrl: {},
                    AvailSuppression: {
                        shape: "S30"
                    },
                    Bumper: {
                        shape: "S33"
                    },
                    CdnConfiguration: {
                        shape: "S34"
                    },
                    ConfigurationAliases: {
                        shape: "S35"
                    },
                    DashConfiguration: {
                        shape: "S36"
                    },
                    HlsConfiguration: {
                        shape: "S38"
                    },
                    LivePreRollConfiguration: {
                        shape: "S39"
                    },
                    LogConfiguration: {
                        shape: "S3a"
                    },
                    ManifestProcessingRules: {
                        shape: "S3b"
                    },
                    Name: {},
                    PersonalizationThresholdSeconds: {
                        type: "integer"
                    },
                    PlaybackConfigurationArn: {},
                    PlaybackEndpointPrefix: {},
                    SessionInitializationEndpointPrefix: {},
                    SlateAdUrl: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    TranscodeProfileName: {},
                    VideoContentSourceUrl: {}
                }
            }
        },
        GetPrefetchSchedule: {
            http: {
                method: "GET",
                requestUri: "/prefetchSchedule/{PlaybackConfigurationName}/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "PlaybackConfigurationName" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    PlaybackConfigurationName: {
                        location: "uri",
                        locationName: "PlaybackConfigurationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Consumption: {
                        shape: "Sv"
                    },
                    Name: {},
                    PlaybackConfigurationName: {},
                    Retrieval: {
                        shape: "Sz"
                    },
                    StreamId: {}
                }
            }
        },
        ListAlerts: {
            http: {
                method: "GET",
                requestUri: "/alerts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    ResourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AlertCode", "AlertMessage", "LastModifiedTime", "RelatedResourceArns", "ResourceArn" ],
                            members: {
                                AlertCode: {},
                                AlertMessage: {},
                                Category: {},
                                LastModifiedTime: {
                                    shape: "Sm"
                                },
                                RelatedResourceArns: {
                                    shape: "S3m"
                                },
                                ResourceArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "ChannelName", "ChannelState", "LogConfiguration", "Outputs", "PlaybackMode", "Tier" ],
                            members: {
                                Arn: {},
                                ChannelName: {},
                                ChannelState: {},
                                CreationTime: {
                                    shape: "Sm"
                                },
                                FillerSlate: {
                                    shape: "Sa"
                                },
                                LastModifiedTime: {
                                    shape: "Sm"
                                },
                                LogConfiguration: {
                                    shape: "S2c"
                                },
                                Outputs: {
                                    shape: "Sn"
                                },
                                PlaybackMode: {},
                                Tags: {
                                    shape: "Si",
                                    locationName: "tags"
                                },
                                Tier: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLiveSources: {
            http: {
                method: "GET",
                requestUri: "/sourceLocation/{SourceLocationName}/liveSources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SourceLocationName" ],
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "HttpPackageConfigurations", "LiveSourceName", "SourceLocationName" ],
                            members: {
                                Arn: {},
                                CreationTime: {
                                    shape: "Sm"
                                },
                                HttpPackageConfigurations: {
                                    shape: "Sq"
                                },
                                LastModifiedTime: {
                                    shape: "Sm"
                                },
                                LiveSourceName: {},
                                SourceLocationName: {},
                                Tags: {
                                    shape: "Si",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPlaybackConfigurations: {
            http: {
                method: "GET",
                requestUri: "/playbackConfigurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AdDecisionServerUrl: {},
                                AvailSuppression: {
                                    shape: "S30"
                                },
                                Bumper: {
                                    shape: "S33"
                                },
                                CdnConfiguration: {
                                    shape: "S34"
                                },
                                ConfigurationAliases: {
                                    shape: "S35"
                                },
                                DashConfiguration: {
                                    shape: "S36"
                                },
                                HlsConfiguration: {
                                    shape: "S38"
                                },
                                LivePreRollConfiguration: {
                                    shape: "S39"
                                },
                                LogConfiguration: {
                                    shape: "S3a"
                                },
                                ManifestProcessingRules: {
                                    shape: "S3b"
                                },
                                Name: {},
                                PersonalizationThresholdSeconds: {
                                    type: "integer"
                                },
                                PlaybackConfigurationArn: {},
                                PlaybackEndpointPrefix: {},
                                SessionInitializationEndpointPrefix: {},
                                SlateAdUrl: {},
                                Tags: {
                                    shape: "Si",
                                    locationName: "tags"
                                },
                                TranscodeProfileName: {},
                                VideoContentSourceUrl: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPrefetchSchedules: {
            http: {
                requestUri: "/prefetchSchedule/{PlaybackConfigurationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PlaybackConfigurationName" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PlaybackConfigurationName: {
                        location: "uri",
                        locationName: "PlaybackConfigurationName"
                    },
                    StreamId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "Consumption", "Name", "PlaybackConfigurationName", "Retrieval" ],
                            members: {
                                Arn: {},
                                Consumption: {
                                    shape: "Sv"
                                },
                                Name: {},
                                PlaybackConfigurationName: {},
                                Retrieval: {
                                    shape: "Sz"
                                },
                                StreamId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSourceLocations: {
            http: {
                method: "GET",
                requestUri: "/sourceLocations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "HttpConfiguration", "SourceLocationName" ],
                            members: {
                                AccessConfiguration: {
                                    shape: "S1k"
                                },
                                Arn: {},
                                CreationTime: {
                                    shape: "Sm"
                                },
                                DefaultSegmentDeliveryConfiguration: {
                                    shape: "S1n"
                                },
                                HttpConfiguration: {
                                    shape: "S1o"
                                },
                                LastModifiedTime: {
                                    shape: "Sm"
                                },
                                SegmentDeliveryConfigurations: {
                                    shape: "S1p"
                                },
                                SourceLocationName: {},
                                Tags: {
                                    shape: "Si",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            }
        },
        ListVodSources: {
            http: {
                method: "GET",
                requestUri: "/sourceLocation/{SourceLocationName}/vodSources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SourceLocationName" ],
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn", "HttpPackageConfigurations", "SourceLocationName", "VodSourceName" ],
                            members: {
                                Arn: {},
                                CreationTime: {
                                    shape: "Sm"
                                },
                                HttpPackageConfigurations: {
                                    shape: "Sq"
                                },
                                LastModifiedTime: {
                                    shape: "Sm"
                                },
                                SourceLocationName: {},
                                Tags: {
                                    shape: "Si",
                                    locationName: "tags"
                                },
                                VodSourceName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutChannelPolicy: {
            http: {
                method: "PUT",
                requestUri: "/channel/{ChannelName}/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName", "Policy" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        PutPlaybackConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/playbackConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    AdDecisionServerUrl: {},
                    AvailSuppression: {
                        shape: "S30"
                    },
                    Bumper: {
                        shape: "S33"
                    },
                    CdnConfiguration: {
                        shape: "S34"
                    },
                    ConfigurationAliases: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "Si"
                        }
                    },
                    DashConfiguration: {
                        type: "structure",
                        members: {
                            MpdLocation: {},
                            OriginManifestType: {}
                        }
                    },
                    LivePreRollConfiguration: {
                        shape: "S39"
                    },
                    ManifestProcessingRules: {
                        shape: "S3b"
                    },
                    Name: {},
                    PersonalizationThresholdSeconds: {
                        type: "integer"
                    },
                    SlateAdUrl: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    TranscodeProfileName: {},
                    VideoContentSourceUrl: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AdDecisionServerUrl: {},
                    AvailSuppression: {
                        shape: "S30"
                    },
                    Bumper: {
                        shape: "S33"
                    },
                    CdnConfiguration: {
                        shape: "S34"
                    },
                    ConfigurationAliases: {
                        shape: "S35"
                    },
                    DashConfiguration: {
                        shape: "S36"
                    },
                    HlsConfiguration: {
                        shape: "S38"
                    },
                    LivePreRollConfiguration: {
                        shape: "S39"
                    },
                    LogConfiguration: {
                        shape: "S3a"
                    },
                    ManifestProcessingRules: {
                        shape: "S3b"
                    },
                    Name: {},
                    PersonalizationThresholdSeconds: {
                        type: "integer"
                    },
                    PlaybackConfigurationArn: {},
                    PlaybackEndpointPrefix: {},
                    SessionInitializationEndpointPrefix: {},
                    SlateAdUrl: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    TranscodeProfileName: {},
                    VideoContentSourceUrl: {}
                }
            },
            idempotent: true
        },
        StartChannel: {
            http: {
                method: "PUT",
                requestUri: "/channel/{ChannelName}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        StopChannel: {
            http: {
                method: "PUT",
                requestUri: "/channel/{ChannelName}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        shape: "S3m",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                }
            },
            idempotent: true
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channel/{ChannelName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName", "Outputs" ],
                members: {
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    FillerSlate: {
                        shape: "Sa"
                    },
                    Outputs: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    ChannelName: {},
                    ChannelState: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    FillerSlate: {
                        shape: "Sa"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    Outputs: {
                        shape: "Sn"
                    },
                    PlaybackMode: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    Tier: {}
                }
            },
            idempotent: true
        },
        UpdateLiveSource: {
            http: {
                method: "PUT",
                requestUri: "/sourceLocation/{SourceLocationName}/liveSource/{LiveSourceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "HttpPackageConfigurations", "LiveSourceName", "SourceLocationName" ],
                members: {
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    LiveSourceName: {
                        location: "uri",
                        locationName: "LiveSourceName"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    LiveSourceName: {},
                    SourceLocationName: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            },
            idempotent: true
        },
        UpdateProgram: {
            http: {
                method: "PUT",
                requestUri: "/channel/{ChannelName}/program/{ProgramName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelName", "ProgramName", "ScheduleConfiguration" ],
                members: {
                    AdBreaks: {
                        shape: "S12"
                    },
                    ChannelName: {
                        location: "uri",
                        locationName: "ChannelName"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "ProgramName"
                    },
                    ScheduleConfiguration: {
                        type: "structure",
                        members: {
                            ClipRange: {
                                shape: "S1f"
                            },
                            Transition: {
                                type: "structure",
                                members: {
                                    DurationMillis: {
                                        type: "long"
                                    },
                                    ScheduledStartTimeMillis: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdBreaks: {
                        shape: "S12"
                    },
                    Arn: {},
                    ChannelName: {},
                    ClipRange: {
                        shape: "S1f"
                    },
                    CreationTime: {
                        shape: "Sm"
                    },
                    DurationMillis: {
                        type: "long"
                    },
                    LiveSourceName: {},
                    ProgramName: {},
                    ScheduledStartTime: {
                        shape: "Sm"
                    },
                    SourceLocationName: {},
                    VodSourceName: {}
                }
            },
            idempotent: true
        },
        UpdateSourceLocation: {
            http: {
                method: "PUT",
                requestUri: "/sourceLocation/{SourceLocationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "HttpConfiguration", "SourceLocationName" ],
                members: {
                    AccessConfiguration: {
                        shape: "S1k"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "S1n"
                    },
                    HttpConfiguration: {
                        shape: "S1o"
                    },
                    SegmentDeliveryConfigurations: {
                        shape: "S1p"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessConfiguration: {
                        shape: "S1k"
                    },
                    Arn: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    DefaultSegmentDeliveryConfiguration: {
                        shape: "S1n"
                    },
                    HttpConfiguration: {
                        shape: "S1o"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    SegmentDeliveryConfigurations: {
                        shape: "S1p"
                    },
                    SourceLocationName: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    }
                }
            },
            idempotent: true
        },
        UpdateVodSource: {
            http: {
                method: "PUT",
                requestUri: "/sourceLocation/{SourceLocationName}/vodSource/{VodSourceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "HttpPackageConfigurations", "SourceLocationName", "VodSourceName" ],
                members: {
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    SourceLocationName: {
                        location: "uri",
                        locationName: "SourceLocationName"
                    },
                    VodSourceName: {
                        location: "uri",
                        locationName: "VodSourceName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTime: {
                        shape: "Sm"
                    },
                    HttpPackageConfigurations: {
                        shape: "Sq"
                    },
                    LastModifiedTime: {
                        shape: "Sm"
                    },
                    SourceLocationName: {},
                    Tags: {
                        shape: "Si",
                        locationName: "tags"
                    },
                    VodSourceName: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        Sa: {
            type: "structure",
            members: {
                SourceLocationName: {},
                VodSourceName: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ManifestName", "SourceGroup" ],
                members: {
                    DashPlaylistSettings: {
                        shape: "Sd"
                    },
                    HlsPlaylistSettings: {
                        shape: "Se"
                    },
                    ManifestName: {},
                    SourceGroup: {}
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                ManifestWindowSeconds: {
                    type: "integer"
                },
                MinBufferTimeSeconds: {
                    type: "integer"
                },
                MinUpdatePeriodSeconds: {
                    type: "integer"
                },
                SuggestedPresentationDelaySeconds: {
                    type: "integer"
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                AdMarkupType: {
                    type: "list",
                    member: {}
                },
                ManifestWindowSeconds: {
                    type: "integer"
                }
            }
        },
        Si: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "timestamp",
            timestampFormat: "unixTimestamp"
        },
        Sn: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ManifestName", "PlaybackUrl", "SourceGroup" ],
                members: {
                    DashPlaylistSettings: {
                        shape: "Sd"
                    },
                    HlsPlaylistSettings: {
                        shape: "Se"
                    },
                    ManifestName: {},
                    PlaybackUrl: {},
                    SourceGroup: {}
                }
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Path", "SourceGroup", "Type" ],
                members: {
                    Path: {},
                    SourceGroup: {},
                    Type: {}
                }
            }
        },
        Sv: {
            type: "structure",
            required: [ "EndTime" ],
            members: {
                AvailMatchingCriteria: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DynamicVariable", "Operator" ],
                        members: {
                            DynamicVariable: {},
                            Operator: {}
                        }
                    }
                },
                EndTime: {
                    shape: "Sm"
                },
                StartTime: {
                    shape: "Sm"
                }
            }
        },
        Sz: {
            type: "structure",
            required: [ "EndTime" ],
            members: {
                DynamicVariables: {
                    shape: "Si"
                },
                EndTime: {
                    shape: "Sm"
                },
                StartTime: {
                    shape: "Sm"
                }
            }
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AdBreakMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Value" ],
                            members: {
                                Key: {},
                                Value: {}
                            }
                        }
                    },
                    MessageType: {},
                    OffsetMillis: {
                        type: "long"
                    },
                    Slate: {
                        shape: "Sa"
                    },
                    SpliceInsertMessage: {
                        type: "structure",
                        members: {
                            AvailNum: {
                                type: "integer"
                            },
                            AvailsExpected: {
                                type: "integer"
                            },
                            SpliceEventId: {
                                type: "integer"
                            },
                            UniqueProgramId: {
                                type: "integer"
                            }
                        }
                    },
                    TimeSignalMessage: {
                        type: "structure",
                        members: {
                            SegmentationDescriptors: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        SegmentNum: {
                                            type: "integer"
                                        },
                                        SegmentationEventId: {
                                            type: "integer"
                                        },
                                        SegmentationTypeId: {
                                            type: "integer"
                                        },
                                        SegmentationUpid: {},
                                        SegmentationUpidType: {
                                            type: "integer"
                                        },
                                        SegmentsExpected: {
                                            type: "integer"
                                        },
                                        SubSegmentNum: {
                                            type: "integer"
                                        },
                                        SubSegmentsExpected: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1f: {
            type: "structure",
            required: [ "EndOffsetMillis" ],
            members: {
                EndOffsetMillis: {
                    type: "long"
                }
            }
        },
        S1k: {
            type: "structure",
            members: {
                AccessType: {},
                SecretsManagerAccessTokenConfiguration: {
                    type: "structure",
                    members: {
                        HeaderName: {},
                        SecretArn: {},
                        SecretStringKey: {}
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                BaseUrl: {}
            }
        },
        S1o: {
            type: "structure",
            required: [ "BaseUrl" ],
            members: {
                BaseUrl: {}
            }
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    BaseUrl: {},
                    Name: {}
                }
            }
        },
        S2c: {
            type: "structure",
            members: {
                LogTypes: {
                    shape: "S3"
                }
            }
        },
        S30: {
            type: "structure",
            members: {
                FillPolicy: {},
                Mode: {},
                Value: {}
            }
        },
        S33: {
            type: "structure",
            members: {
                EndUrl: {},
                StartUrl: {}
            }
        },
        S34: {
            type: "structure",
            members: {
                AdSegmentUrlPrefix: {},
                ContentSegmentUrlPrefix: {}
            }
        },
        S35: {
            type: "map",
            key: {},
            value: {
                shape: "Si"
            }
        },
        S36: {
            type: "structure",
            members: {
                ManifestEndpointPrefix: {},
                MpdLocation: {},
                OriginManifestType: {}
            }
        },
        S38: {
            type: "structure",
            members: {
                ManifestEndpointPrefix: {}
            }
        },
        S39: {
            type: "structure",
            members: {
                AdDecisionServerUrl: {},
                MaxDurationSeconds: {
                    type: "integer"
                }
            }
        },
        S3a: {
            type: "structure",
            required: [ "PercentEnabled" ],
            members: {
                PercentEnabled: {
                    type: "integer"
                }
            }
        },
        S3b: {
            type: "structure",
            members: {
                AdMarkerPassthrough: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S3m: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetChannelSchedule: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListAlerts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListLiveSources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListPlaybackConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListPrefetchSchedules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListSourceLocations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        },
        ListVodSources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Items"
        }
    }
};

AWS.apiLoader.services["eks"] = {};

AWS.EKS = AWS.Service.defineService("eks", [ "2017-11-01" ]);

AWS.apiLoader.services["eks"]["2017-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-01",
        endpointPrefix: "eks",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon EKS",
        serviceFullName: "Amazon Elastic Kubernetes Service",
        serviceId: "EKS",
        signatureVersion: "v4",
        signingName: "eks",
        uid: "eks-2017-11-01"
    },
    operations: {
        AssociateEncryptionConfig: {
            http: {
                requestUri: "/clusters/{name}/encryption-config/associate"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "encryptionConfig" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    encryptionConfig: {
                        shape: "S3"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        AssociateIdentityProviderConfig: {
            http: {
                requestUri: "/clusters/{name}/identity-provider-configs/associate"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "oidc" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    oidc: {
                        type: "structure",
                        required: [ "identityProviderConfigName", "issuerUrl", "clientId" ],
                        members: {
                            identityProviderConfigName: {},
                            issuerUrl: {},
                            clientId: {},
                            usernameClaim: {},
                            usernamePrefix: {},
                            groupsClaim: {},
                            groupsPrefix: {},
                            requiredClaims: {
                                shape: "Sk"
                            }
                        }
                    },
                    tags: {
                        shape: "Sn"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        CreateAddon: {
            http: {
                requestUri: "/clusters/{name}/addons"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "addonName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    addonName: {},
                    addonVersion: {},
                    serviceAccountRoleArn: {},
                    resolveConflicts: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    },
                    configurationValues: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    addon: {
                        shape: "Sw"
                    }
                }
            }
        },
        CreateCluster: {
            http: {
                requestUri: "/clusters"
            },
            input: {
                type: "structure",
                required: [ "name", "roleArn", "resourcesVpcConfig" ],
                members: {
                    name: {},
                    version: {},
                    roleArn: {},
                    resourcesVpcConfig: {
                        shape: "S14"
                    },
                    kubernetesNetworkConfig: {
                        type: "structure",
                        members: {
                            serviceIpv4Cidr: {},
                            ipFamily: {}
                        }
                    },
                    logging: {
                        shape: "S18"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    },
                    encryptionConfig: {
                        shape: "S3"
                    },
                    outpostConfig: {
                        type: "structure",
                        required: [ "outpostArns", "controlPlaneInstanceType" ],
                        members: {
                            outpostArns: {
                                shape: "S5"
                            },
                            controlPlaneInstanceType: {},
                            controlPlanePlacement: {
                                type: "structure",
                                members: {
                                    groupName: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "S1g"
                    }
                }
            }
        },
        CreateEksAnywhereSubscription: {
            http: {
                requestUri: "/eks-anywhere-subscriptions"
            },
            input: {
                type: "structure",
                required: [ "name", "term" ],
                members: {
                    name: {},
                    term: {
                        shape: "S1x"
                    },
                    licenseQuantity: {
                        type: "integer"
                    },
                    licenseType: {},
                    autoRenew: {
                        type: "boolean"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscription: {
                        shape: "S22"
                    }
                }
            }
        },
        CreateFargateProfile: {
            http: {
                requestUri: "/clusters/{name}/fargate-profiles"
            },
            input: {
                type: "structure",
                required: [ "fargateProfileName", "clusterName", "podExecutionRoleArn" ],
                members: {
                    fargateProfileName: {},
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    podExecutionRoleArn: {},
                    subnets: {
                        shape: "S5"
                    },
                    selectors: {
                        shape: "S24"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fargateProfile: {
                        shape: "S28"
                    }
                }
            }
        },
        CreateNodegroup: {
            http: {
                requestUri: "/clusters/{name}/node-groups"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName", "subnets", "nodeRole" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {},
                    scalingConfig: {
                        shape: "S2b"
                    },
                    diskSize: {
                        type: "integer"
                    },
                    subnets: {
                        shape: "S5"
                    },
                    instanceTypes: {
                        shape: "S5"
                    },
                    amiType: {},
                    remoteAccess: {
                        shape: "S2g"
                    },
                    nodeRole: {},
                    labels: {
                        shape: "S2h"
                    },
                    taints: {
                        shape: "S2k"
                    },
                    tags: {
                        shape: "Sn"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    launchTemplate: {
                        shape: "S2p"
                    },
                    updateConfig: {
                        shape: "S2q"
                    },
                    capacityType: {},
                    version: {},
                    releaseVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nodegroup: {
                        shape: "S2v"
                    }
                }
            }
        },
        CreatePodIdentityAssociation: {
            http: {
                requestUri: "/clusters/{name}/pod-identity-associations"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "namespace", "serviceAccount", "roleArn" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    namespace: {},
                    serviceAccount: {},
                    roleArn: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    association: {
                        shape: "S36"
                    }
                }
            }
        },
        DeleteAddon: {
            http: {
                method: "DELETE",
                requestUri: "/clusters/{name}/addons/{addonName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "addonName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    addonName: {
                        location: "uri",
                        locationName: "addonName"
                    },
                    preserve: {
                        location: "querystring",
                        locationName: "preserve",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addon: {
                        shape: "Sw"
                    }
                }
            }
        },
        DeleteCluster: {
            http: {
                method: "DELETE",
                requestUri: "/clusters/{name}"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "S1g"
                    }
                }
            }
        },
        DeleteEksAnywhereSubscription: {
            http: {
                method: "DELETE",
                requestUri: "/eks-anywhere-subscriptions/{id}"
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscription: {
                        shape: "S22"
                    }
                }
            }
        },
        DeleteFargateProfile: {
            http: {
                method: "DELETE",
                requestUri: "/clusters/{name}/fargate-profiles/{fargateProfileName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "fargateProfileName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    fargateProfileName: {
                        location: "uri",
                        locationName: "fargateProfileName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fargateProfile: {
                        shape: "S28"
                    }
                }
            }
        },
        DeleteNodegroup: {
            http: {
                method: "DELETE",
                requestUri: "/clusters/{name}/node-groups/{nodegroupName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "uri",
                        locationName: "nodegroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodegroup: {
                        shape: "S2v"
                    }
                }
            }
        },
        DeletePodIdentityAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/clusters/{name}/pod-identity-associations/{associationId}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "associationId" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    associationId: {
                        location: "uri",
                        locationName: "associationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    association: {
                        shape: "S36"
                    }
                }
            }
        },
        DeregisterCluster: {
            http: {
                method: "DELETE",
                requestUri: "/cluster-registrations/{name}"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "S1g"
                    }
                }
            }
        },
        DescribeAddon: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/addons/{addonName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "addonName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    addonName: {
                        location: "uri",
                        locationName: "addonName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addon: {
                        shape: "Sw"
                    }
                }
            }
        },
        DescribeAddonConfiguration: {
            http: {
                method: "GET",
                requestUri: "/addons/configuration-schemas"
            },
            input: {
                type: "structure",
                required: [ "addonName", "addonVersion" ],
                members: {
                    addonName: {
                        location: "querystring",
                        locationName: "addonName"
                    },
                    addonVersion: {
                        location: "querystring",
                        locationName: "addonVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addonName: {},
                    addonVersion: {},
                    configurationSchema: {}
                }
            }
        },
        DescribeAddonVersions: {
            http: {
                method: "GET",
                requestUri: "/addons/supported-versions"
            },
            input: {
                type: "structure",
                members: {
                    kubernetesVersion: {
                        location: "querystring",
                        locationName: "kubernetesVersion"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    addonName: {
                        location: "querystring",
                        locationName: "addonName"
                    },
                    types: {
                        shape: "S5",
                        location: "querystring",
                        locationName: "types"
                    },
                    publishers: {
                        shape: "S5",
                        location: "querystring",
                        locationName: "publishers"
                    },
                    owners: {
                        shape: "S5",
                        location: "querystring",
                        locationName: "owners"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addons: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                addonName: {},
                                type: {},
                                addonVersions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            addonVersion: {},
                                            architecture: {
                                                shape: "S5"
                                            },
                                            compatibilities: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        clusterVersion: {},
                                                        platformVersions: {
                                                            shape: "S5"
                                                        },
                                                        defaultVersion: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            requiresConfiguration: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                publisher: {},
                                owner: {},
                                marketplaceInformation: {
                                    shape: "S12"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeCluster: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "S1g"
                    }
                }
            }
        },
        DescribeEksAnywhereSubscription: {
            http: {
                method: "GET",
                requestUri: "/eks-anywhere-subscriptions/{id}"
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscription: {
                        shape: "S22"
                    }
                }
            }
        },
        DescribeFargateProfile: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/fargate-profiles/{fargateProfileName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "fargateProfileName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    fargateProfileName: {
                        location: "uri",
                        locationName: "fargateProfileName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fargateProfile: {
                        shape: "S28"
                    }
                }
            }
        },
        DescribeIdentityProviderConfig: {
            http: {
                requestUri: "/clusters/{name}/identity-provider-configs/describe"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "identityProviderConfig" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    identityProviderConfig: {
                        shape: "S45"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    identityProviderConfig: {
                        type: "structure",
                        members: {
                            oidc: {
                                type: "structure",
                                members: {
                                    identityProviderConfigName: {},
                                    identityProviderConfigArn: {},
                                    clusterName: {},
                                    issuerUrl: {},
                                    clientId: {},
                                    usernameClaim: {},
                                    usernamePrefix: {},
                                    groupsClaim: {},
                                    groupsPrefix: {},
                                    requiredClaims: {
                                        shape: "Sk"
                                    },
                                    tags: {
                                        shape: "Sn"
                                    },
                                    status: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeNodegroup: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/node-groups/{nodegroupName}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "uri",
                        locationName: "nodegroupName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodegroup: {
                        shape: "S2v"
                    }
                }
            }
        },
        DescribePodIdentityAssociation: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/pod-identity-associations/{associationId}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "associationId" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    associationId: {
                        location: "uri",
                        locationName: "associationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    association: {
                        shape: "S36"
                    }
                }
            }
        },
        DescribeUpdate: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/updates/{updateId}"
            },
            input: {
                type: "structure",
                required: [ "name", "updateId" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    updateId: {
                        location: "uri",
                        locationName: "updateId"
                    },
                    nodegroupName: {
                        location: "querystring",
                        locationName: "nodegroupName"
                    },
                    addonName: {
                        location: "querystring",
                        locationName: "addonName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        DisassociateIdentityProviderConfig: {
            http: {
                requestUri: "/clusters/{name}/identity-provider-configs/disassociate"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "identityProviderConfig" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    identityProviderConfig: {
                        shape: "S45"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        ListAddons: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/addons"
            },
            input: {
                type: "structure",
                required: [ "clusterName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    addons: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        ListClusters: {
            http: {
                method: "GET",
                requestUri: "/clusters"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    include: {
                        location: "querystring",
                        locationName: "include",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clusters: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        ListEksAnywhereSubscriptions: {
            http: {
                method: "GET",
                requestUri: "/eks-anywhere-subscriptions"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    includeStatus: {
                        location: "querystring",
                        locationName: "includeStatus",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscriptions: {
                        type: "list",
                        member: {
                            shape: "S22"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFargateProfiles: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/fargate-profiles"
            },
            input: {
                type: "structure",
                required: [ "clusterName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fargateProfileNames: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        ListIdentityProviderConfigs: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/identity-provider-configs"
            },
            input: {
                type: "structure",
                required: [ "clusterName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    identityProviderConfigs: {
                        type: "list",
                        member: {
                            shape: "S45"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNodegroups: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/node-groups"
            },
            input: {
                type: "structure",
                required: [ "clusterName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodegroups: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        ListPodIdentityAssociations: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/pod-identity-associations"
            },
            input: {
                type: "structure",
                required: [ "clusterName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    serviceAccount: {
                        location: "querystring",
                        locationName: "serviceAccount"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    associations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                clusterName: {},
                                namespace: {},
                                serviceAccount: {},
                                associationArn: {},
                                associationId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sn"
                    }
                }
            }
        },
        ListUpdates: {
            http: {
                method: "GET",
                requestUri: "/clusters/{name}/updates"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "querystring",
                        locationName: "nodegroupName"
                    },
                    addonName: {
                        location: "querystring",
                        locationName: "addonName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    updateIds: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        RegisterCluster: {
            http: {
                requestUri: "/cluster-registrations"
            },
            input: {
                type: "structure",
                required: [ "name", "connectorConfig" ],
                members: {
                    name: {},
                    connectorConfig: {
                        type: "structure",
                        required: [ "roleArn", "provider" ],
                        members: {
                            roleArn: {},
                            provider: {}
                        }
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cluster: {
                        shape: "S1g"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAddon: {
            http: {
                requestUri: "/clusters/{name}/addons/{addonName}/update"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "addonName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    addonName: {
                        location: "uri",
                        locationName: "addonName"
                    },
                    addonVersion: {},
                    serviceAccountRoleArn: {},
                    resolveConflicts: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    configurationValues: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdateClusterConfig: {
            http: {
                requestUri: "/clusters/{name}/update-config"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    resourcesVpcConfig: {
                        shape: "S14"
                    },
                    logging: {
                        shape: "S18"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdateClusterVersion: {
            http: {
                requestUri: "/clusters/{name}/updates"
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdateEksAnywhereSubscription: {
            http: {
                requestUri: "/eks-anywhere-subscriptions/{id}"
            },
            input: {
                type: "structure",
                required: [ "id", "autoRenew" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    autoRenew: {
                        type: "boolean"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscription: {
                        shape: "S22"
                    }
                }
            }
        },
        UpdateNodegroupConfig: {
            http: {
                requestUri: "/clusters/{name}/node-groups/{nodegroupName}/update-config"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "uri",
                        locationName: "nodegroupName"
                    },
                    labels: {
                        type: "structure",
                        members: {
                            addOrUpdateLabels: {
                                shape: "S2h"
                            },
                            removeLabels: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    taints: {
                        type: "structure",
                        members: {
                            addOrUpdateTaints: {
                                shape: "S2k"
                            },
                            removeTaints: {
                                shape: "S2k"
                            }
                        }
                    },
                    scalingConfig: {
                        shape: "S2b"
                    },
                    updateConfig: {
                        shape: "S2q"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdateNodegroupVersion: {
            http: {
                requestUri: "/clusters/{name}/node-groups/{nodegroupName}/update-version"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "nodegroupName" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    nodegroupName: {
                        location: "uri",
                        locationName: "nodegroupName"
                    },
                    version: {},
                    releaseVersion: {},
                    launchTemplate: {
                        shape: "S2p"
                    },
                    force: {
                        type: "boolean"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    update: {
                        shape: "S8"
                    }
                }
            }
        },
        UpdatePodIdentityAssociation: {
            http: {
                requestUri: "/clusters/{name}/pod-identity-associations/{associationId}"
            },
            input: {
                type: "structure",
                required: [ "clusterName", "associationId" ],
                members: {
                    clusterName: {
                        location: "uri",
                        locationName: "name"
                    },
                    associationId: {
                        location: "uri",
                        locationName: "associationId"
                    },
                    roleArn: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    association: {
                        shape: "S36"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    resources: {
                        shape: "S5"
                    },
                    provider: {
                        type: "structure",
                        members: {
                            keyArn: {}
                        }
                    }
                }
            }
        },
        S5: {
            type: "list",
            member: {}
        },
        S8: {
            type: "structure",
            members: {
                id: {},
                status: {},
                type: {},
                params: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            type: {},
                            value: {}
                        }
                    }
                },
                createdAt: {
                    type: "timestamp"
                },
                errors: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            errorCode: {},
                            errorMessage: {},
                            resourceIds: {
                                shape: "S5"
                            }
                        }
                    }
                }
            }
        },
        Sk: {
            type: "map",
            key: {},
            value: {}
        },
        Sn: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "structure",
            members: {
                addonName: {},
                clusterName: {},
                status: {},
                addonVersion: {},
                health: {
                    type: "structure",
                    members: {
                        issues: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    code: {},
                                    message: {},
                                    resourceIds: {
                                        shape: "S5"
                                    }
                                }
                            }
                        }
                    }
                },
                addonArn: {},
                createdAt: {
                    type: "timestamp"
                },
                modifiedAt: {
                    type: "timestamp"
                },
                serviceAccountRoleArn: {},
                tags: {
                    shape: "Sn"
                },
                publisher: {},
                owner: {},
                marketplaceInformation: {
                    shape: "S12"
                },
                configurationValues: {}
            }
        },
        S12: {
            type: "structure",
            members: {
                productId: {},
                productUrl: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                subnetIds: {
                    shape: "S5"
                },
                securityGroupIds: {
                    shape: "S5"
                },
                endpointPublicAccess: {
                    type: "boolean"
                },
                endpointPrivateAccess: {
                    type: "boolean"
                },
                publicAccessCidrs: {
                    shape: "S5"
                }
            }
        },
        S18: {
            type: "structure",
            members: {
                clusterLogging: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            types: {
                                type: "list",
                                member: {}
                            },
                            enabled: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S1g: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                version: {},
                endpoint: {},
                roleArn: {},
                resourcesVpcConfig: {
                    type: "structure",
                    members: {
                        subnetIds: {
                            shape: "S5"
                        },
                        securityGroupIds: {
                            shape: "S5"
                        },
                        clusterSecurityGroupId: {},
                        vpcId: {},
                        endpointPublicAccess: {
                            type: "boolean"
                        },
                        endpointPrivateAccess: {
                            type: "boolean"
                        },
                        publicAccessCidrs: {
                            shape: "S5"
                        }
                    }
                },
                kubernetesNetworkConfig: {
                    type: "structure",
                    members: {
                        serviceIpv4Cidr: {},
                        serviceIpv6Cidr: {},
                        ipFamily: {}
                    }
                },
                logging: {
                    shape: "S18"
                },
                identity: {
                    type: "structure",
                    members: {
                        oidc: {
                            type: "structure",
                            members: {
                                issuer: {}
                            }
                        }
                    }
                },
                status: {},
                certificateAuthority: {
                    type: "structure",
                    members: {
                        data: {}
                    }
                },
                clientRequestToken: {},
                platformVersion: {},
                tags: {
                    shape: "Sn"
                },
                encryptionConfig: {
                    shape: "S3"
                },
                connectorConfig: {
                    type: "structure",
                    members: {
                        activationId: {},
                        activationCode: {},
                        activationExpiry: {
                            type: "timestamp"
                        },
                        provider: {},
                        roleArn: {}
                    }
                },
                id: {},
                health: {
                    type: "structure",
                    members: {
                        issues: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    code: {},
                                    message: {},
                                    resourceIds: {
                                        shape: "S5"
                                    }
                                }
                            }
                        }
                    }
                },
                outpostConfig: {
                    type: "structure",
                    required: [ "outpostArns", "controlPlaneInstanceType" ],
                    members: {
                        outpostArns: {
                            shape: "S5"
                        },
                        controlPlaneInstanceType: {},
                        controlPlanePlacement: {
                            type: "structure",
                            members: {
                                groupName: {}
                            }
                        }
                    }
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                duration: {
                    type: "integer"
                },
                unit: {}
            }
        },
        S22: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                effectiveDate: {
                    type: "timestamp"
                },
                expirationDate: {
                    type: "timestamp"
                },
                licenseQuantity: {
                    type: "integer"
                },
                licenseType: {},
                term: {
                    shape: "S1x"
                },
                status: {},
                autoRenew: {
                    type: "boolean"
                },
                licenseArns: {
                    shape: "S5"
                },
                tags: {
                    shape: "Sn"
                }
            }
        },
        S24: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    namespace: {},
                    labels: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S28: {
            type: "structure",
            members: {
                fargateProfileName: {},
                fargateProfileArn: {},
                clusterName: {},
                createdAt: {
                    type: "timestamp"
                },
                podExecutionRoleArn: {},
                subnets: {
                    shape: "S5"
                },
                selectors: {
                    shape: "S24"
                },
                status: {},
                tags: {
                    shape: "Sn"
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                minSize: {
                    type: "integer"
                },
                maxSize: {
                    type: "integer"
                },
                desiredSize: {
                    type: "integer"
                }
            }
        },
        S2g: {
            type: "structure",
            members: {
                ec2SshKey: {},
                sourceSecurityGroups: {
                    shape: "S5"
                }
            }
        },
        S2h: {
            type: "map",
            key: {},
            value: {}
        },
        S2k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {},
                    effect: {}
                }
            }
        },
        S2p: {
            type: "structure",
            members: {
                name: {},
                version: {},
                id: {}
            }
        },
        S2q: {
            type: "structure",
            members: {
                maxUnavailable: {
                    type: "integer"
                },
                maxUnavailablePercentage: {
                    type: "integer"
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                nodegroupName: {},
                nodegroupArn: {},
                clusterName: {},
                version: {},
                releaseVersion: {},
                createdAt: {
                    type: "timestamp"
                },
                modifiedAt: {
                    type: "timestamp"
                },
                status: {},
                capacityType: {},
                scalingConfig: {
                    shape: "S2b"
                },
                instanceTypes: {
                    shape: "S5"
                },
                subnets: {
                    shape: "S5"
                },
                remoteAccess: {
                    shape: "S2g"
                },
                amiType: {},
                nodeRole: {},
                labels: {
                    shape: "S2h"
                },
                taints: {
                    shape: "S2k"
                },
                resources: {
                    type: "structure",
                    members: {
                        autoScalingGroups: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    name: {}
                                }
                            }
                        },
                        remoteAccessSecurityGroup: {}
                    }
                },
                diskSize: {
                    type: "integer"
                },
                health: {
                    type: "structure",
                    members: {
                        issues: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    code: {},
                                    message: {},
                                    resourceIds: {
                                        shape: "S5"
                                    }
                                }
                            }
                        }
                    }
                },
                updateConfig: {
                    shape: "S2q"
                },
                launchTemplate: {
                    shape: "S2p"
                },
                tags: {
                    shape: "Sn"
                }
            }
        },
        S36: {
            type: "structure",
            members: {
                clusterName: {},
                namespace: {},
                serviceAccount: {},
                roleArn: {},
                associationArn: {},
                associationId: {},
                tags: {
                    shape: "Sn"
                },
                createdAt: {
                    type: "timestamp"
                },
                modifiedAt: {
                    type: "timestamp"
                }
            }
        },
        S45: {
            type: "structure",
            required: [ "type", "name" ],
            members: {
                type: {},
                name: {}
            }
        }
    },
    paginators: {
        DescribeAddonVersions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "addons"
        },
        ListAddons: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "addons"
        },
        ListClusters: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "clusters"
        },
        ListEksAnywhereSubscriptions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "subscriptions"
        },
        ListFargateProfiles: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "fargateProfileNames"
        },
        ListIdentityProviderConfigs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "identityProviderConfigs"
        },
        ListNodegroups: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "nodegroups"
        },
        ListPodIdentityAssociations: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "associations"
        },
        ListUpdates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "updateIds"
        }
    },
    waiters: {
        ClusterActive: {
            delay: 30,
            operation: "DescribeCluster",
            maxAttempts: 40,
            acceptors: [ {
                expected: "DELETING",
                matcher: "path",
                state: "failure",
                argument: "cluster.status"
            }, {
                expected: "FAILED",
                matcher: "path",
                state: "failure",
                argument: "cluster.status"
            }, {
                expected: "ACTIVE",
                matcher: "path",
                state: "success",
                argument: "cluster.status"
            } ]
        },
        ClusterDeleted: {
            delay: 30,
            operation: "DescribeCluster",
            maxAttempts: 40,
            acceptors: [ {
                expected: "ACTIVE",
                matcher: "path",
                state: "failure",
                argument: "cluster.status"
            }, {
                expected: "CREATING",
                matcher: "path",
                state: "failure",
                argument: "cluster.status"
            }, {
                expected: "PENDING",
                matcher: "path",
                state: "failure",
                argument: "cluster.status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            } ]
        },
        NodegroupActive: {
            delay: 30,
            operation: "DescribeNodegroup",
            maxAttempts: 80,
            acceptors: [ {
                expected: "CREATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "nodegroup.status"
            }, {
                expected: "ACTIVE",
                matcher: "path",
                state: "success",
                argument: "nodegroup.status"
            } ]
        },
        NodegroupDeleted: {
            delay: 30,
            operation: "DescribeNodegroup",
            maxAttempts: 40,
            acceptors: [ {
                expected: "DELETE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "nodegroup.status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            } ]
        },
        AddonActive: {
            delay: 10,
            operation: "DescribeAddon",
            maxAttempts: 60,
            acceptors: [ {
                expected: "CREATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "addon.status"
            }, {
                expected: "DEGRADED",
                matcher: "path",
                state: "failure",
                argument: "addon.status"
            }, {
                expected: "ACTIVE",
                matcher: "path",
                state: "success",
                argument: "addon.status"
            } ]
        },
        AddonDeleted: {
            delay: 10,
            operation: "DescribeAddon",
            maxAttempts: 60,
            acceptors: [ {
                expected: "DELETE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "addon.status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            } ]
        },
        FargateProfileActive: {
            delay: 10,
            operation: "DescribeFargateProfile",
            maxAttempts: 60,
            acceptors: [ {
                expected: "CREATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "fargateProfile.status"
            }, {
                expected: "ACTIVE",
                matcher: "path",
                state: "success",
                argument: "fargateProfile.status"
            } ]
        },
        FargateProfileDeleted: {
            delay: 30,
            operation: "DescribeFargateProfile",
            maxAttempts: 60,
            acceptors: [ {
                expected: "DELETE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "fargateProfile.status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            } ]
        }
    }
};

AWS.apiLoader.services["dlm"] = {};

AWS.DLM = AWS.Service.defineService("dlm", [ "2018-01-12" ]);

AWS.apiLoader.services["dlm"]["2018-01-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-01-12",
        endpointPrefix: "dlm",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amazon DLM",
        serviceFullName: "Amazon Data Lifecycle Manager",
        serviceId: "DLM",
        signatureVersion: "v4",
        signingName: "dlm",
        uid: "dlm-2018-01-12"
    },
    operations: {
        CreateLifecyclePolicy: {
            http: {
                requestUri: "/policies"
            },
            input: {
                type: "structure",
                required: [ "ExecutionRoleArn", "Description", "State" ],
                members: {
                    ExecutionRoleArn: {},
                    Description: {},
                    State: {},
                    PolicyDetails: {
                        shape: "S5"
                    },
                    Tags: {
                        shape: "S2g"
                    },
                    DefaultPolicy: {},
                    CreateInterval: {
                        type: "integer"
                    },
                    RetainInterval: {
                        type: "integer"
                    },
                    CopyTags: {
                        type: "boolean"
                    },
                    ExtendDeletion: {
                        type: "boolean"
                    },
                    CrossRegionCopyTargets: {
                        shape: "S28"
                    },
                    Exclusions: {
                        shape: "S2b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyId: {}
                }
            }
        },
        DeleteLifecyclePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/policies/{policyId}"
            },
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {
                        location: "uri",
                        locationName: "policyId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetLifecyclePolicies: {
            http: {
                method: "GET",
                requestUri: "/policies"
            },
            input: {
                type: "structure",
                members: {
                    PolicyIds: {
                        location: "querystring",
                        locationName: "policyIds",
                        type: "list",
                        member: {}
                    },
                    State: {
                        location: "querystring",
                        locationName: "state"
                    },
                    ResourceTypes: {
                        shape: "S7",
                        location: "querystring",
                        locationName: "resourceTypes"
                    },
                    TargetTags: {
                        location: "querystring",
                        locationName: "targetTags",
                        type: "list",
                        member: {}
                    },
                    TagsToAdd: {
                        location: "querystring",
                        locationName: "tagsToAdd",
                        type: "list",
                        member: {}
                    },
                    DefaultPolicyType: {
                        location: "querystring",
                        locationName: "defaultPolicyType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyId: {},
                                Description: {},
                                State: {},
                                Tags: {
                                    shape: "S2g"
                                },
                                PolicyType: {},
                                DefaultPolicy: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetLifecyclePolicy: {
            http: {
                method: "GET",
                requestUri: "/policies/{policyId}"
            },
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {
                        location: "uri",
                        locationName: "policyId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        type: "structure",
                        members: {
                            PolicyId: {},
                            Description: {},
                            State: {},
                            StatusMessage: {},
                            ExecutionRoleArn: {},
                            DateCreated: {
                                shape: "S33"
                            },
                            DateModified: {
                                shape: "S33"
                            },
                            PolicyDetails: {
                                shape: "S5"
                            },
                            Tags: {
                                shape: "S2g"
                            },
                            PolicyArn: {},
                            DefaultPolicy: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2g"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S2g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLifecyclePolicy: {
            http: {
                method: "PATCH",
                requestUri: "/policies/{policyId}"
            },
            input: {
                type: "structure",
                required: [ "PolicyId" ],
                members: {
                    PolicyId: {
                        location: "uri",
                        locationName: "policyId"
                    },
                    ExecutionRoleArn: {},
                    State: {},
                    Description: {},
                    PolicyDetails: {
                        shape: "S5"
                    },
                    CreateInterval: {
                        type: "integer"
                    },
                    RetainInterval: {
                        type: "integer"
                    },
                    CopyTags: {
                        type: "boolean"
                    },
                    ExtendDeletion: {
                        type: "boolean"
                    },
                    CrossRegionCopyTargets: {
                        shape: "S28"
                    },
                    Exclusions: {
                        shape: "S2b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                PolicyType: {},
                ResourceTypes: {
                    shape: "S7"
                },
                ResourceLocations: {
                    type: "list",
                    member: {}
                },
                TargetTags: {
                    type: "list",
                    member: {
                        shape: "Sc"
                    }
                },
                Schedules: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            CopyTags: {
                                type: "boolean"
                            },
                            TagsToAdd: {
                                type: "list",
                                member: {
                                    shape: "Sc"
                                }
                            },
                            VariableTags: {
                                type: "list",
                                member: {
                                    shape: "Sc"
                                }
                            },
                            CreateRule: {
                                type: "structure",
                                members: {
                                    Location: {},
                                    Interval: {
                                        type: "integer"
                                    },
                                    IntervalUnit: {},
                                    Times: {
                                        type: "list",
                                        member: {}
                                    },
                                    CronExpression: {},
                                    Scripts: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "ExecutionHandler" ],
                                            members: {
                                                Stages: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                ExecutionHandlerService: {},
                                                ExecutionHandler: {},
                                                ExecuteOperationOnScriptFailure: {
                                                    type: "boolean"
                                                },
                                                ExecutionTimeout: {
                                                    type: "integer"
                                                },
                                                MaximumRetryCount: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            RetainRule: {
                                type: "structure",
                                members: {
                                    Count: {
                                        type: "integer"
                                    },
                                    Interval: {
                                        type: "integer"
                                    },
                                    IntervalUnit: {}
                                }
                            },
                            FastRestoreRule: {
                                type: "structure",
                                required: [ "AvailabilityZones" ],
                                members: {
                                    Count: {
                                        type: "integer"
                                    },
                                    Interval: {
                                        type: "integer"
                                    },
                                    IntervalUnit: {},
                                    AvailabilityZones: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            },
                            CrossRegionCopyRules: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Encrypted" ],
                                    members: {
                                        TargetRegion: {},
                                        Target: {},
                                        Encrypted: {
                                            type: "boolean"
                                        },
                                        CmkArn: {},
                                        CopyTags: {
                                            type: "boolean"
                                        },
                                        RetainRule: {
                                            shape: "S1f"
                                        },
                                        DeprecateRule: {
                                            type: "structure",
                                            members: {
                                                Interval: {
                                                    type: "integer"
                                                },
                                                IntervalUnit: {}
                                            }
                                        }
                                    }
                                }
                            },
                            ShareRules: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "TargetAccounts" ],
                                    members: {
                                        TargetAccounts: {
                                            type: "list",
                                            member: {}
                                        },
                                        UnshareInterval: {
                                            type: "integer"
                                        },
                                        UnshareIntervalUnit: {}
                                    }
                                }
                            },
                            DeprecateRule: {
                                type: "structure",
                                members: {
                                    Count: {
                                        type: "integer"
                                    },
                                    Interval: {
                                        type: "integer"
                                    },
                                    IntervalUnit: {}
                                }
                            },
                            ArchiveRule: {
                                type: "structure",
                                required: [ "RetainRule" ],
                                members: {
                                    RetainRule: {
                                        type: "structure",
                                        required: [ "RetentionArchiveTier" ],
                                        members: {
                                            RetentionArchiveTier: {
                                                type: "structure",
                                                members: {
                                                    Count: {
                                                        type: "integer"
                                                    },
                                                    Interval: {
                                                        type: "integer"
                                                    },
                                                    IntervalUnit: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Parameters: {
                    type: "structure",
                    members: {
                        ExcludeBootVolume: {
                            type: "boolean"
                        },
                        NoReboot: {
                            type: "boolean"
                        },
                        ExcludeDataVolumeTags: {
                            type: "list",
                            member: {
                                shape: "Sc"
                            }
                        }
                    }
                },
                EventSource: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {},
                        Parameters: {
                            type: "structure",
                            required: [ "EventType", "SnapshotOwner", "DescriptionRegex" ],
                            members: {
                                EventType: {},
                                SnapshotOwner: {
                                    type: "list",
                                    member: {}
                                },
                                DescriptionRegex: {}
                            }
                        }
                    }
                },
                Actions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "CrossRegionCopy" ],
                        members: {
                            Name: {},
                            CrossRegionCopy: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Target", "EncryptionConfiguration" ],
                                    members: {
                                        Target: {},
                                        EncryptionConfiguration: {
                                            type: "structure",
                                            required: [ "Encrypted" ],
                                            members: {
                                                Encrypted: {
                                                    type: "boolean"
                                                },
                                                CmkArn: {}
                                            }
                                        },
                                        RetainRule: {
                                            shape: "S1f"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                PolicyLanguage: {},
                ResourceType: {},
                CreateInterval: {
                    type: "integer"
                },
                RetainInterval: {
                    type: "integer"
                },
                CopyTags: {
                    type: "boolean"
                },
                CrossRegionCopyTargets: {
                    shape: "S28"
                },
                ExtendDeletion: {
                    type: "boolean"
                },
                Exclusions: {
                    shape: "S2b"
                }
            }
        },
        S7: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        S1f: {
            type: "structure",
            members: {
                Interval: {
                    type: "integer"
                },
                IntervalUnit: {}
            }
        },
        S28: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TargetRegion: {}
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                ExcludeBootVolumes: {
                    type: "boolean"
                },
                ExcludeVolumeTypes: {
                    type: "list",
                    member: {}
                },
                ExcludeTags: {
                    type: "list",
                    member: {
                        shape: "Sc"
                    }
                }
            }
        },
        S2g: {
            type: "map",
            key: {},
            value: {}
        },
        S33: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {}
};

AWS.apiLoader.services["signer"] = {};

AWS.Signer = AWS.Service.defineService("signer", [ "2017-08-25" ]);

AWS.apiLoader.services["signer"]["2017-08-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-08-25",
        endpointPrefix: "signer",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "signer",
        serviceFullName: "AWS Signer",
        serviceId: "signer",
        signatureVersion: "v4",
        signingName: "signer",
        uid: "signer-2017-08-25"
    },
    operations: {
        AddProfilePermission: {
            http: {
                requestUri: "/signing-profiles/{profileName}/permissions"
            },
            input: {
                type: "structure",
                required: [ "action", "principal", "statementId", "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    profileVersion: {},
                    action: {},
                    principal: {},
                    revisionId: {},
                    statementId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    revisionId: {}
                }
            }
        },
        CancelSigningProfile: {
            http: {
                method: "DELETE",
                requestUri: "/signing-profiles/{profileName}"
            },
            input: {
                type: "structure",
                required: [ "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    }
                }
            }
        },
        DescribeSigningJob: {
            http: {
                method: "GET",
                requestUri: "/signing-jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    source: {
                        shape: "Sa"
                    },
                    signingMaterial: {
                        shape: "Sf"
                    },
                    platformId: {},
                    platformDisplayName: {},
                    profileName: {},
                    profileVersion: {},
                    overrides: {
                        shape: "Sj"
                    },
                    signingParameters: {
                        shape: "So"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    completedAt: {
                        type: "timestamp"
                    },
                    signatureExpiresAt: {
                        type: "timestamp"
                    },
                    requestedBy: {},
                    status: {},
                    statusReason: {},
                    revocationRecord: {
                        type: "structure",
                        members: {
                            reason: {},
                            revokedAt: {
                                type: "timestamp"
                            },
                            revokedBy: {}
                        }
                    },
                    signedObject: {
                        shape: "Sw"
                    },
                    jobOwner: {},
                    jobInvoker: {}
                }
            }
        },
        GetRevocationStatus: {
            http: {
                method: "GET",
                requestUri: "/revocations"
            },
            input: {
                type: "structure",
                required: [ "signatureTimestamp", "platformId", "profileVersionArn", "jobArn", "certificateHashes" ],
                members: {
                    signatureTimestamp: {
                        location: "querystring",
                        locationName: "signatureTimestamp",
                        type: "timestamp"
                    },
                    platformId: {
                        location: "querystring",
                        locationName: "platformId"
                    },
                    profileVersionArn: {
                        location: "querystring",
                        locationName: "profileVersionArn"
                    },
                    jobArn: {
                        location: "querystring",
                        locationName: "jobArn"
                    },
                    certificateHashes: {
                        location: "querystring",
                        locationName: "certificateHashes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    revokedEntities: {
                        type: "list",
                        member: {}
                    }
                }
            },
            endpoint: {
                hostPrefix: "verification."
            }
        },
        GetSigningPlatform: {
            http: {
                method: "GET",
                requestUri: "/signing-platforms/{platformId}"
            },
            input: {
                type: "structure",
                required: [ "platformId" ],
                members: {
                    platformId: {
                        location: "uri",
                        locationName: "platformId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    platformId: {},
                    displayName: {},
                    partner: {},
                    target: {},
                    category: {},
                    signingConfiguration: {
                        shape: "S17"
                    },
                    signingImageFormat: {
                        shape: "S1c"
                    },
                    maxSizeInMB: {
                        type: "integer"
                    },
                    revocationSupported: {
                        type: "boolean"
                    }
                }
            }
        },
        GetSigningProfile: {
            http: {
                method: "GET",
                requestUri: "/signing-profiles/{profileName}"
            },
            input: {
                type: "structure",
                required: [ "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    profileOwner: {
                        location: "querystring",
                        locationName: "profileOwner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    profileName: {},
                    profileVersion: {},
                    profileVersionArn: {},
                    revocationRecord: {
                        type: "structure",
                        members: {
                            revocationEffectiveFrom: {
                                type: "timestamp"
                            },
                            revokedAt: {
                                type: "timestamp"
                            },
                            revokedBy: {}
                        }
                    },
                    signingMaterial: {
                        shape: "Sf"
                    },
                    platformId: {},
                    platformDisplayName: {},
                    signatureValidityPeriod: {
                        shape: "S1j"
                    },
                    overrides: {
                        shape: "Sj"
                    },
                    signingParameters: {
                        shape: "So"
                    },
                    status: {},
                    statusReason: {},
                    arn: {},
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        ListProfilePermissions: {
            http: {
                method: "GET",
                requestUri: "/signing-profiles/{profileName}/permissions"
            },
            input: {
                type: "structure",
                required: [ "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    revisionId: {},
                    policySizeBytes: {
                        type: "integer"
                    },
                    permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                action: {},
                                principal: {},
                                statementId: {},
                                profileVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSigningJobs: {
            http: {
                method: "GET",
                requestUri: "/signing-jobs"
            },
            input: {
                type: "structure",
                members: {
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    platformId: {
                        location: "querystring",
                        locationName: "platformId"
                    },
                    requestedBy: {
                        location: "querystring",
                        locationName: "requestedBy"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    isRevoked: {
                        location: "querystring",
                        locationName: "isRevoked",
                        type: "boolean"
                    },
                    signatureExpiresBefore: {
                        location: "querystring",
                        locationName: "signatureExpiresBefore",
                        type: "timestamp"
                    },
                    signatureExpiresAfter: {
                        location: "querystring",
                        locationName: "signatureExpiresAfter",
                        type: "timestamp"
                    },
                    jobInvoker: {
                        location: "querystring",
                        locationName: "jobInvoker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                jobId: {},
                                source: {
                                    shape: "Sa"
                                },
                                signedObject: {
                                    shape: "Sw"
                                },
                                signingMaterial: {
                                    shape: "Sf"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                status: {},
                                isRevoked: {
                                    type: "boolean"
                                },
                                profileName: {},
                                profileVersion: {},
                                platformId: {},
                                platformDisplayName: {},
                                signatureExpiresAt: {
                                    type: "timestamp"
                                },
                                jobOwner: {},
                                jobInvoker: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSigningPlatforms: {
            http: {
                method: "GET",
                requestUri: "/signing-platforms"
            },
            input: {
                type: "structure",
                members: {
                    category: {
                        location: "querystring",
                        locationName: "category"
                    },
                    partner: {
                        location: "querystring",
                        locationName: "partner"
                    },
                    target: {
                        location: "querystring",
                        locationName: "target"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    platforms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                platformId: {},
                                displayName: {},
                                partner: {},
                                target: {},
                                category: {},
                                signingConfiguration: {
                                    shape: "S17"
                                },
                                signingImageFormat: {
                                    shape: "S1c"
                                },
                                maxSizeInMB: {
                                    type: "integer"
                                },
                                revocationSupported: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSigningProfiles: {
            http: {
                method: "GET",
                requestUri: "/signing-profiles"
            },
            input: {
                type: "structure",
                members: {
                    includeCanceled: {
                        location: "querystring",
                        locationName: "includeCanceled",
                        type: "boolean"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    platformId: {
                        location: "querystring",
                        locationName: "platformId"
                    },
                    statuses: {
                        location: "querystring",
                        locationName: "statuses",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    profiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                profileName: {},
                                profileVersion: {},
                                profileVersionArn: {},
                                signingMaterial: {
                                    shape: "Sf"
                                },
                                signatureValidityPeriod: {
                                    shape: "S1j"
                                },
                                platformId: {},
                                platformDisplayName: {},
                                signingParameters: {
                                    shape: "So"
                                },
                                status: {},
                                arn: {},
                                tags: {
                                    shape: "S1o"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        PutSigningProfile: {
            http: {
                method: "PUT",
                requestUri: "/signing-profiles/{profileName}"
            },
            input: {
                type: "structure",
                required: [ "profileName", "platformId" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    signingMaterial: {
                        shape: "Sf"
                    },
                    signatureValidityPeriod: {
                        shape: "S1j"
                    },
                    platformId: {},
                    overrides: {
                        shape: "Sj"
                    },
                    signingParameters: {
                        shape: "So"
                    },
                    tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    profileVersion: {},
                    profileVersionArn: {}
                }
            }
        },
        RemoveProfilePermission: {
            http: {
                method: "DELETE",
                requestUri: "/signing-profiles/{profileName}/permissions/{statementId}"
            },
            input: {
                type: "structure",
                required: [ "revisionId", "profileName", "statementId" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    revisionId: {
                        location: "querystring",
                        locationName: "revisionId"
                    },
                    statementId: {
                        location: "uri",
                        locationName: "statementId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    revisionId: {}
                }
            }
        },
        RevokeSignature: {
            http: {
                method: "PUT",
                requestUri: "/signing-jobs/{jobId}/revoke"
            },
            input: {
                type: "structure",
                required: [ "reason", "jobId" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    jobOwner: {},
                    reason: {}
                }
            }
        },
        RevokeSigningProfile: {
            http: {
                method: "PUT",
                requestUri: "/signing-profiles/{profileName}/revoke"
            },
            input: {
                type: "structure",
                required: [ "profileVersion", "reason", "effectiveTime", "profileName" ],
                members: {
                    profileName: {
                        location: "uri",
                        locationName: "profileName"
                    },
                    profileVersion: {},
                    reason: {},
                    effectiveTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        SignPayload: {
            http: {
                requestUri: "/signing-jobs/with-payload"
            },
            input: {
                type: "structure",
                required: [ "profileName", "payload", "payloadFormat" ],
                members: {
                    profileName: {},
                    profileOwner: {},
                    payload: {
                        type: "blob"
                    },
                    payloadFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    jobOwner: {},
                    metadata: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    signature: {
                        type: "blob"
                    }
                }
            }
        },
        StartSigningJob: {
            http: {
                requestUri: "/signing-jobs"
            },
            input: {
                type: "structure",
                required: [ "source", "destination", "profileName", "clientRequestToken" ],
                members: {
                    source: {
                        shape: "Sa"
                    },
                    destination: {
                        type: "structure",
                        members: {
                            s3: {
                                type: "structure",
                                members: {
                                    bucketName: {},
                                    prefix: {}
                                }
                            }
                        }
                    },
                    profileName: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    profileOwner: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    jobId: {},
                    jobOwner: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    required: [ "bucketName", "key", "version" ],
                    members: {
                        bucketName: {},
                        key: {},
                        version: {}
                    }
                }
            }
        },
        Sf: {
            type: "structure",
            required: [ "certificateArn" ],
            members: {
                certificateArn: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                signingConfiguration: {
                    type: "structure",
                    members: {
                        encryptionAlgorithm: {},
                        hashAlgorithm: {}
                    }
                },
                signingImageFormat: {}
            }
        },
        So: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "structure",
            members: {
                s3: {
                    type: "structure",
                    members: {
                        bucketName: {},
                        key: {}
                    }
                }
            }
        },
        S17: {
            type: "structure",
            required: [ "encryptionAlgorithmOptions", "hashAlgorithmOptions" ],
            members: {
                encryptionAlgorithmOptions: {
                    type: "structure",
                    required: [ "allowedValues", "defaultValue" ],
                    members: {
                        allowedValues: {
                            type: "list",
                            member: {}
                        },
                        defaultValue: {}
                    }
                },
                hashAlgorithmOptions: {
                    type: "structure",
                    required: [ "allowedValues", "defaultValue" ],
                    members: {
                        allowedValues: {
                            type: "list",
                            member: {}
                        },
                        defaultValue: {}
                    }
                }
            }
        },
        S1c: {
            type: "structure",
            required: [ "supportedFormats", "defaultFormat" ],
            members: {
                supportedFormats: {
                    type: "list",
                    member: {}
                },
                defaultFormat: {}
            }
        },
        S1j: {
            type: "structure",
            members: {
                value: {
                    type: "integer"
                },
                type: {}
            }
        },
        S1o: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListSigningJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSigningPlatforms: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSigningProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    },
    waiters: {
        SuccessfulSigningJob: {
            delay: 20,
            operation: "DescribeSigningJob",
            maxAttempts: 25,
            acceptors: [ {
                expected: "Succeeded",
                matcher: "path",
                state: "success",
                argument: "status"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "status"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "failure"
            } ]
        }
    }
};

AWS.apiLoader.services["chime"] = {};

AWS.Chime = AWS.Service.defineService("chime", [ "2018-05-01" ]);

AWS.apiLoader.services["chime"]["2018-05-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-01",
        endpointPrefix: "chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime",
        serviceId: "Chime",
        signatureVersion: "v4",
        uid: "chime-2018-05-01"
    },
    operations: {
        AssociatePhoneNumberWithUser: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}?operation=associate-phone-number",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId", "E164PhoneNumber" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    E164PhoneNumber: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociatePhoneNumbersWithVoiceConnector: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}?operation=associate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    E164PhoneNumbers: {
                        shape: "S7"
                    },
                    ForceAssociate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by AssociatePhoneNumbersWithVoiceConnector in the Amazon Chime SDK Voice Namespace"
        },
        AssociatePhoneNumbersWithVoiceConnectorGroup: {
            http: {
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}?operation=associate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    },
                    E164PhoneNumbers: {
                        shape: "S7"
                    },
                    ForceAssociate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by AssociatePhoneNumbersWithVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace"
        },
        AssociateSigninDelegateGroupsWithAccount: {
            http: {
                requestUri: "/accounts/{accountId}?operation=associate-signin-delegate-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "SigninDelegateGroups" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    SigninDelegateGroups: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchCreateAttendee: {
            http: {
                requestUri: "/meetings/{meetingId}/attendees?operation=batch-create",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "Attendees" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "St"
                    },
                    Errors: {
                        shape: "Sw"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by BatchCreateAttendee in the Amazon Chime SDK Meetings Namespace"
        },
        BatchCreateChannelMembership: {
            http: {
                requestUri: "/channels/{channelArn}/memberships?operation=batch-create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArns" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Type: {},
                    MemberArns: {
                        type: "list",
                        member: {}
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BatchChannelMemberships: {
                        type: "structure",
                        members: {
                            InvitedBy: {
                                shape: "S14"
                            },
                            Type: {},
                            Members: {
                                type: "list",
                                member: {
                                    shape: "S14"
                                }
                            },
                            ChannelArn: {}
                        }
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MemberArn: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by BatchCreateChannelMembership in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        BatchCreateRoomMembership: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships?operation=batch-create",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MembershipItemList" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MembershipItemList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MemberId: {},
                                Role: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MemberId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDeletePhoneNumber: {
            http: {
                requestUri: "/phone-numbers?operation=batch-delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberIds" ],
                members: {
                    PhoneNumberIds: {
                        shape: "S1h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            }
        },
        BatchSuspendUser: {
            http: {
                requestUri: "/accounts/{accountId}/users?operation=suspend",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserIdList" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserIdList: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserErrors: {
                        shape: "S1m"
                    }
                }
            }
        },
        BatchUnsuspendUser: {
            http: {
                requestUri: "/accounts/{accountId}/users?operation=unsuspend",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserIdList" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserIdList: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserErrors: {
                        shape: "S1m"
                    }
                }
            }
        },
        BatchUpdatePhoneNumber: {
            http: {
                requestUri: "/phone-numbers?operation=batch-update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "UpdatePhoneNumberRequestItems" ],
                members: {
                    UpdatePhoneNumberRequestItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PhoneNumberId" ],
                            members: {
                                PhoneNumberId: {},
                                ProductType: {},
                                CallingName: {
                                    shape: "S1u"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            }
        },
        BatchUpdateUser: {
            http: {
                requestUri: "/accounts/{accountId}/users",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UpdateUserRequestItems" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UpdateUserRequestItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "UserId" ],
                            members: {
                                UserId: {},
                                LicenseType: {},
                                UserType: {},
                                AlexaForBusinessMetadata: {
                                    shape: "S21"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserErrors: {
                        shape: "S1m"
                    }
                }
            }
        },
        CreateAccount: {
            http: {
                requestUri: "/accounts",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Account: {
                        shape: "S28"
                    }
                }
            }
        },
        CreateAppInstance: {
            http: {
                requestUri: "/app-instances",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "ClientRequestToken" ],
                members: {
                    Name: {
                        shape: "S2e"
                    },
                    Metadata: {
                        shape: "S2f"
                    },
                    ClientRequestToken: {
                        shape: "S2g",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S2h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateAppInstance in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        CreateAppInstanceAdmin: {
            http: {
                requestUri: "/app-instances/{appInstanceArn}/admins",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {},
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceAdmin: {
                        shape: "S14"
                    },
                    AppInstanceArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateAppInstanceAdmin in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        CreateAppInstanceUser: {
            http: {
                requestUri: "/app-instance-users",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceUserId", "Name", "ClientRequestToken" ],
                members: {
                    AppInstanceArn: {},
                    AppInstanceUserId: {
                        type: "string",
                        sensitive: true
                    },
                    Name: {
                        shape: "S2n"
                    },
                    Metadata: {
                        shape: "S2f"
                    },
                    ClientRequestToken: {
                        shape: "S2g",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S2h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateAppInstanceUser in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        CreateAttendee: {
            http: {
                requestUri: "/meetings/{meetingId}/attendees",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "ExternalUserId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    ExternalUserId: {
                        shape: "Sn"
                    },
                    Tags: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Su"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateAttendee in the Amazon Chime SDK Meetings Namespace"
        },
        CreateBot: {
            http: {
                requestUri: "/accounts/{accountId}/bots",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DisplayName", "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    DisplayName: {
                        shape: "S23"
                    },
                    Domain: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Bot: {
                        shape: "S2t"
                    }
                }
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/channels",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Name", "ClientRequestToken" ],
                members: {
                    AppInstanceArn: {},
                    Name: {
                        shape: "S2e"
                    },
                    Mode: {},
                    Privacy: {},
                    Metadata: {
                        shape: "S2f"
                    },
                    ClientRequestToken: {
                        shape: "S2g",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S2h"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateChannel in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        CreateChannelBan: {
            http: {
                requestUri: "/channels/{channelArn}/bans",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S14"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateChannelBan in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        CreateChannelMembership: {
            http: {
                requestUri: "/channels/{channelArn}/memberships",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn", "Type" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {},
                    Type: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Member: {
                        shape: "S14"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateChannelMembership in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        CreateChannelModerator: {
            http: {
                requestUri: "/channels/{channelArn}/moderators",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {},
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    ChannelModerator: {
                        shape: "S14"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateChannelModerator in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        CreateMediaCapturePipeline: {
            http: {
                requestUri: "/media-capture-pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "SourceType", "SourceArn", "SinkType", "SinkArn" ],
                members: {
                    SourceType: {},
                    SourceArn: {
                        shape: "S37"
                    },
                    SinkType: {},
                    SinkArn: {
                        shape: "S37"
                    },
                    ClientRequestToken: {
                        shape: "S2g",
                        idempotencyToken: true
                    },
                    ChimeSdkMeetingConfiguration: {
                        shape: "S39"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaCapturePipeline: {
                        shape: "S3n"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateMediaCapturePipeline in the Amazon Chime SDK Media Pipelines Namespace"
        },
        CreateMeeting: {
            http: {
                requestUri: "/meetings",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken" ],
                members: {
                    ClientRequestToken: {
                        shape: "S2g",
                        idempotencyToken: true
                    },
                    ExternalMeetingId: {
                        shape: "S3q"
                    },
                    MeetingHostId: {
                        shape: "Sn"
                    },
                    MediaRegion: {},
                    Tags: {
                        shape: "S3r"
                    },
                    NotificationsConfiguration: {
                        shape: "S3s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S3u"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateMeeting in the Amazon Chime SDK Meetings Namespace"
        },
        CreateMeetingDialOut: {
            http: {
                requestUri: "/meetings/{meetingId}/dial-outs",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "FromPhoneNumber", "ToPhoneNumber", "JoinToken" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    FromPhoneNumber: {
                        shape: "S3"
                    },
                    ToPhoneNumber: {
                        shape: "S3"
                    },
                    JoinToken: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransactionId: {}
                }
            }
        },
        CreateMeetingWithAttendees: {
            http: {
                requestUri: "/meetings?operation=create-attendees",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken" ],
                members: {
                    ClientRequestToken: {
                        shape: "S2g",
                        idempotencyToken: true
                    },
                    ExternalMeetingId: {
                        shape: "S3q"
                    },
                    MeetingHostId: {
                        shape: "Sn"
                    },
                    MediaRegion: {},
                    Tags: {
                        shape: "S3r"
                    },
                    NotificationsConfiguration: {
                        shape: "S3s"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S3u"
                    },
                    Attendees: {
                        shape: "St"
                    },
                    Errors: {
                        shape: "Sw"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateMeetingWithAttendees in the Amazon Chime SDK Meetings Namespace"
        },
        CreatePhoneNumberOrder: {
            http: {
                requestUri: "/phone-number-orders",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ProductType", "E164PhoneNumbers" ],
                members: {
                    ProductType: {},
                    E164PhoneNumbers: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberOrder: {
                        shape: "S44"
                    }
                }
            }
        },
        CreateProxySession: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ParticipantPhoneNumbers", "Capabilities", "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ParticipantPhoneNumbers: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    },
                    Name: {
                        type: "string",
                        sensitive: true
                    },
                    ExpiryMinutes: {
                        type: "integer"
                    },
                    Capabilities: {
                        shape: "S4e"
                    },
                    NumberSelectionBehavior: {},
                    GeoMatchLevel: {},
                    GeoMatchParams: {
                        shape: "S4i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySession: {
                        shape: "S4m"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateProxySession in the Amazon Chime SDK Voice Namespace"
        },
        CreateRoom: {
            http: {
                requestUri: "/accounts/{accountId}/rooms",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "Name" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    Name: {
                        shape: "S23"
                    },
                    ClientRequestToken: {
                        shape: "S2g",
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Room: {
                        shape: "S4t"
                    }
                }
            }
        },
        CreateRoomMembership: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MemberId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MemberId: {},
                    Role: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomMembership: {
                        shape: "S4w"
                    }
                }
            }
        },
        CreateSipMediaApplication: {
            http: {
                requestUri: "/sip-media-applications",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AwsRegion", "Name", "Endpoints" ],
                members: {
                    AwsRegion: {},
                    Name: {},
                    Endpoints: {
                        shape: "S51"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplication: {
                        shape: "S55"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateSipMediaApplication in the Amazon Chime SDK Voice Namespace"
        },
        CreateSipMediaApplicationCall: {
            http: {
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/calls",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FromPhoneNumber", "ToPhoneNumber", "SipMediaApplicationId" ],
                members: {
                    FromPhoneNumber: {
                        shape: "S3"
                    },
                    ToPhoneNumber: {
                        shape: "S3"
                    },
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    SipHeaders: {
                        type: "map",
                        key: {
                            shape: "S23"
                        },
                        value: {
                            shape: "S23"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationCall: {
                        shape: "S59"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateSipMediaApplicationCall in the Amazon Chime SDK Voice Namespace"
        },
        CreateSipRule: {
            http: {
                requestUri: "/sip-rules",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "TriggerType", "TriggerValue", "TargetApplications" ],
                members: {
                    Name: {},
                    TriggerType: {},
                    TriggerValue: {},
                    Disabled: {
                        type: "boolean"
                    },
                    TargetApplications: {
                        shape: "S5d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRule: {
                        shape: "S5h"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateSipRule in the Amazon Chime SDK Voice Namespace"
        },
        CreateUser: {
            http: {
                requestUri: "/accounts/{accountId}/users?operation=create",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    Username: {},
                    Email: {
                        shape: "S5j"
                    },
                    UserType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S5l"
                    }
                }
            }
        },
        CreateVoiceConnector: {
            http: {
                requestUri: "/voice-connectors",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name", "RequireEncryption" ],
                members: {
                    Name: {},
                    AwsRegion: {},
                    RequireEncryption: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S5s"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateVoiceConnector in the Amazon Chime SDK Voice Namespace"
        },
        CreateVoiceConnectorGroup: {
            http: {
                requestUri: "/voice-connector-groups",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    VoiceConnectorItems: {
                        shape: "S5v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroup: {
                        shape: "S5z"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by CreateVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace"
        },
        DeleteAccount: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{accountId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAppInstance: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteAppInstance in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DeleteAppInstanceAdmin: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {
                        location: "uri",
                        locationName: "appInstanceAdminArn"
                    },
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteAppInstanceAdmin in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DeleteAppInstanceStreamingConfigurations: {
            http: {
                method: "DELETE",
                requestUri: "/app-instances/{appInstanceArn}/streaming-configurations",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteAppInstanceStreamingConfigurations in the Amazon Chime SDK Messaging Namespace"
        },
        DeleteAppInstanceUser: {
            http: {
                method: "DELETE",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteAppInstanceUser in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DeleteAttendee: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteAttendee in the Amazon Chime SDK Meetings Namespace"
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteChannel in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteChannelBan: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/bans/{memberArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteChannelBan in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteChannelMembership: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteChannelMembership in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteChannelMessage: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteChannelMessage in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteChannelModerator: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{channelArn}/moderators/{channelModeratorArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {
                        location: "uri",
                        locationName: "channelModeratorArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteChannelModerator in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DeleteEventsConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{accountId}/bots/{botId}/events-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            }
        },
        DeleteMediaCapturePipeline: {
            http: {
                method: "DELETE",
                requestUri: "/media-capture-pipelines/{mediaPipelineId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteMediaCapturePipeline in the Amazon Chime SDK Media Pipelines Namespace"
        },
        DeleteMeeting: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{meetingId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteMeeting in the Amazon Chime SDK Meetings Namespace"
        },
        DeletePhoneNumber: {
            http: {
                method: "DELETE",
                requestUri: "/phone-numbers/{phoneNumberId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "phoneNumberId"
                    }
                }
            }
        },
        DeleteProxySession: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "ProxySessionId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ProxySessionId: {
                        location: "uri",
                        locationName: "proxySessionId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteProxySession in the Amazon Chime SDK Voice Namespace"
        },
        DeleteRoom: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{accountId}/rooms/{roomId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    }
                }
            }
        },
        DeleteRoomMembership: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MemberId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    }
                }
            }
        },
        DeleteSipMediaApplication: {
            http: {
                method: "DELETE",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteSipMediaApplication in the Amazon Chime SDK Voice Namespace"
        },
        DeleteSipRule: {
            http: {
                method: "DELETE",
                requestUri: "/sip-rules/{sipRuleId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "SipRuleId" ],
                members: {
                    SipRuleId: {
                        location: "uri",
                        locationName: "sipRuleId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteSipRule in the Amazon Chime SDK Voice Namespace"
        },
        DeleteVoiceConnector: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteVoiceConnector in the Amazon Chime SDK Voice Namespace"
        },
        DeleteVoiceConnectorEmergencyCallingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteVoiceConnectorEmergencyCallingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        DeleteVoiceConnectorGroup: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace"
        },
        DeleteVoiceConnectorOrigination: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/origination",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteVoiceConnectorOrigination in the Amazon Chime SDK Voice Namespace"
        },
        DeleteVoiceConnectorProxy: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteVoiceConnectorProxy in the Amazon Chime SDK Voice Namespace"
        },
        DeleteVoiceConnectorStreamingConfiguration: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteVoiceConnectorStreamingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        DeleteVoiceConnectorTermination: {
            http: {
                method: "DELETE",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteVoiceConnectorTermination in the Amazon Chime SDK Voice Namespace"
        },
        DeleteVoiceConnectorTerminationCredentials: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/credentials?operation=delete",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Usernames", "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Usernames: {
                        shape: "S6u"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DeleteVoiceConnectorTerminationCredentials in the Amazon Chime SDK Voice Namespace"
        },
        DescribeAppInstance: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstance: {
                        type: "structure",
                        members: {
                            AppInstanceArn: {},
                            Name: {
                                shape: "S2e"
                            },
                            Metadata: {
                                shape: "S2f"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DescribeAppInstance in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DescribeAppInstanceAdmin: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceAdminArn", "AppInstanceArn" ],
                members: {
                    AppInstanceAdminArn: {
                        location: "uri",
                        locationName: "appInstanceAdminArn"
                    },
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceAdmin: {
                        type: "structure",
                        members: {
                            Admin: {
                                shape: "S14"
                            },
                            AppInstanceArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DescribeAppInstanceAdmin in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DescribeAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUser: {
                        type: "structure",
                        members: {
                            AppInstanceUserArn: {},
                            Name: {
                                shape: "S2n"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            Metadata: {
                                shape: "S2f"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DescribeAppInstanceUser in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        type: "structure",
                        members: {
                            Name: {
                                shape: "S2e"
                            },
                            ChannelArn: {},
                            Mode: {},
                            Privacy: {},
                            Metadata: {
                                shape: "S2f"
                            },
                            CreatedBy: {
                                shape: "S14"
                            },
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastMessageTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DescribeChannel in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelBan: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/bans/{memberArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelBan: {
                        type: "structure",
                        members: {
                            Member: {
                                shape: "S14"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            CreatedBy: {
                                shape: "S14"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DescribeChannelBan in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelMembership: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships/{memberArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MemberArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MemberArn: {
                        location: "uri",
                        locationName: "memberArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMembership: {
                        type: "structure",
                        members: {
                            InvitedBy: {
                                shape: "S14"
                            },
                            Type: {},
                            Member: {
                                shape: "S14"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DescribeChannelMembership in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelMembershipForAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}?scope=app-instance-user-membership",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "AppInstanceUserArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMembership: {
                        shape: "S7g"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DescribeChannelMembershipForAppInstanceUser in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelModeratedByAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}?scope=app-instance-user-moderated-channel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "AppInstanceUserArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "S7l"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DescribeChannelModeratedByAppInstanceUser in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DescribeChannelModerator: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/moderators/{channelModeratorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "ChannelModeratorArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChannelModeratorArn: {
                        location: "uri",
                        locationName: "channelModeratorArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelModerator: {
                        type: "structure",
                        members: {
                            Moderator: {
                                shape: "S14"
                            },
                            ChannelArn: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            CreatedBy: {
                                shape: "S14"
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DescribeChannelModerator in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        DisassociatePhoneNumberFromUser: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}?operation=disassociate-phone-number",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociatePhoneNumbersFromVoiceConnector: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}?operation=disassociate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    E164PhoneNumbers: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DisassociatePhoneNumbersFromVoiceConnector in the Amazon Chime SDK Voice Namespace"
        },
        DisassociatePhoneNumbersFromVoiceConnectorGroup: {
            http: {
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}?operation=disassociate-phone-numbers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId", "E164PhoneNumbers" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    },
                    E164PhoneNumbers: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberErrors: {
                        shape: "Sa"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by DisassociatePhoneNumbersFromVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace"
        },
        DisassociateSigninDelegateGroupsFromAccount: {
            http: {
                requestUri: "/accounts/{accountId}?operation=disassociate-signin-delegate-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "GroupNames" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    GroupNames: {
                        shape: "S1h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccount: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Account: {
                        shape: "S28"
                    }
                }
            }
        },
        GetAccountSettings: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/settings"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountSettings: {
                        shape: "S81"
                    }
                }
            }
        },
        GetAppInstanceRetentionSettings: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/retention-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceRetentionSettings: {
                        shape: "S84"
                    },
                    InitiateDeletionTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetAppInstanceRetentionSettings in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        GetAppInstanceStreamingConfigurations: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/streaming-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceStreamingConfigurations: {
                        shape: "S89"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetAppInstanceStreamingConfigurations in the Amazon Chime SDK Messaging Namespace"
        },
        GetAttendee: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Su"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetAttendee in the Amazon Chime SDK Meetings Namespace"
        },
        GetBot: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/bots/{botId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bot: {
                        shape: "S2t"
                    }
                }
            }
        },
        GetChannelMessage: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMessage: {
                        type: "structure",
                        members: {
                            ChannelArn: {},
                            MessageId: {},
                            Content: {
                                shape: "S8j"
                            },
                            Metadata: {
                                shape: "S2f"
                            },
                            Type: {},
                            CreatedTimestamp: {
                                type: "timestamp"
                            },
                            LastEditedTimestamp: {
                                type: "timestamp"
                            },
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            Sender: {
                                shape: "S14"
                            },
                            Redacted: {
                                type: "boolean"
                            },
                            Persistence: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetChannelMessage in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        GetEventsConfiguration: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/bots/{botId}/events-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventsConfiguration: {
                        shape: "S8p"
                    }
                }
            }
        },
        GetGlobalSettings: {
            http: {
                method: "GET",
                requestUri: "/settings",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    BusinessCalling: {
                        shape: "S8r"
                    },
                    VoiceConnector: {
                        shape: "S8s"
                    }
                }
            }
        },
        GetMediaCapturePipeline: {
            http: {
                method: "GET",
                requestUri: "/media-capture-pipelines/{mediaPipelineId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaCapturePipeline: {
                        shape: "S3n"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetMediaCapturePipeline in the Amazon Chime SDK Media Pipelines Namespace"
        },
        GetMeeting: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S3u"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetMeeting in the Amazon Chime SDK Meetings Namespace"
        },
        GetMessagingSessionEndpoint: {
            http: {
                method: "GET",
                requestUri: "/endpoints/messaging-session",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Endpoint: {
                        type: "structure",
                        members: {
                            Url: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetMessagingSessionEndpoint in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        GetPhoneNumber: {
            http: {
                method: "GET",
                requestUri: "/phone-numbers/{phoneNumberId}"
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "phoneNumberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumber: {
                        shape: "S93"
                    }
                }
            }
        },
        GetPhoneNumberOrder: {
            http: {
                method: "GET",
                requestUri: "/phone-number-orders/{phoneNumberOrderId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberOrderId" ],
                members: {
                    PhoneNumberOrderId: {
                        location: "uri",
                        locationName: "phoneNumberOrderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberOrder: {
                        shape: "S44"
                    }
                }
            }
        },
        GetPhoneNumberSettings: {
            http: {
                method: "GET",
                requestUri: "/settings/phone-number",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    CallingName: {
                        shape: "S1u"
                    },
                    CallingNameUpdatedTimestamp: {
                        shape: "S2a"
                    }
                }
            }
        },
        GetProxySession: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "ProxySessionId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ProxySessionId: {
                        location: "uri",
                        locationName: "proxySessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySession: {
                        shape: "S4m"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetProxySession in the Amazon Chime SDK Voice Namespace"
        },
        GetRetentionSettings: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/retention-settings"
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RetentionSettings: {
                        shape: "S9j"
                    },
                    InitiateDeletionTimestamp: {
                        shape: "S2a"
                    }
                }
            }
        },
        GetRoom: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/rooms/{roomId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Room: {
                        shape: "S4t"
                    }
                }
            }
        },
        GetSipMediaApplication: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplication: {
                        shape: "S55"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetSipMediaApplication in the Amazon Chime SDK Voice Namespace"
        },
        GetSipMediaApplicationLoggingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationLoggingConfiguration: {
                        shape: "S9s"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetSipMediaApplicationLoggingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        GetSipRule: {
            http: {
                method: "GET",
                requestUri: "/sip-rules/{sipRuleId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipRuleId" ],
                members: {
                    SipRuleId: {
                        location: "uri",
                        locationName: "sipRuleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRule: {
                        shape: "S5h"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetSipRule in the Amazon Chime SDK Voice Namespace"
        },
        GetUser: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/users/{userId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S5l"
                    }
                }
            }
        },
        GetUserSettings: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/users/{userId}/settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserSettings: {
                        shape: "S9z"
                    }
                }
            }
        },
        GetVoiceConnector: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S5s"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetVoiceConnector in the Amazon Chime SDK Voice Namespace"
        },
        GetVoiceConnectorEmergencyCallingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmergencyCallingConfiguration: {
                        shape: "Sa5"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetVoiceConnectorEmergencyCallingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        GetVoiceConnectorGroup: {
            http: {
                method: "GET",
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroup: {
                        shape: "S5z"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace"
        },
        GetVoiceConnectorLoggingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "Sac"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetVoiceConnectorLoggingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        GetVoiceConnectorOrigination: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/origination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Origination: {
                        shape: "Saf"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetVoiceConnectorOrigination in the Amazon Chime SDK Voice Namespace"
        },
        GetVoiceConnectorProxy: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proxy: {
                        shape: "Sao"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetVoiceConnectorProxy in the Amazon Chime SDK Voice Namespace"
        },
        GetVoiceConnectorStreamingConfiguration: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingConfiguration: {
                        shape: "Sat"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetVoiceConnectorStreamingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        GetVoiceConnectorTermination: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Termination: {
                        shape: "Sb0"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetVoiceConnectorTermination in the Amazon Chime SDK Voice Namespace"
        },
        GetVoiceConnectorTerminationHealth: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/health",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminationHealth: {
                        type: "structure",
                        members: {
                            Timestamp: {
                                shape: "S2a"
                            },
                            Source: {}
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by GetVoiceConnectorTerminationHealth in the Amazon Chime SDK Voice Namespace"
        },
        InviteUsers: {
            http: {
                requestUri: "/accounts/{accountId}/users?operation=add",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserEmailList" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserEmailList: {
                        type: "list",
                        member: {
                            shape: "S5j"
                        }
                    },
                    UserType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Invites: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InviteId: {},
                                Status: {},
                                EmailAddress: {
                                    shape: "S5j"
                                },
                                EmailStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListAccounts: {
            http: {
                method: "GET",
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    UserEmail: {
                        shape: "S5j",
                        location: "querystring",
                        locationName: "user-email"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accounts: {
                        type: "list",
                        member: {
                            shape: "S28"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAppInstanceAdmins: {
            http: {
                method: "GET",
                requestUri: "/app-instances/{appInstanceArn}/admins",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {},
                    AppInstanceAdmins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Admin: {
                                    shape: "S14"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "Sbj"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListAppInstanceAdmins in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        ListAppInstanceUsers: {
            http: {
                method: "GET",
                requestUri: "/app-instance-users",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {},
                    AppInstanceUsers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceUserArn: {},
                                Name: {
                                    shape: "S2n"
                                },
                                Metadata: {
                                    shape: "S2f"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "Sbj"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListAppInstanceUsers in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        ListAppInstances: {
            http: {
                method: "GET",
                requestUri: "/app-instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppInstanceArn: {},
                                Name: {
                                    shape: "S2e"
                                },
                                Metadata: {
                                    shape: "S2f"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "Sbj"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListAppInstances in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        ListAttendeeTags: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2h"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Attendee Tags are not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API."
        },
        ListAttendees: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}/attendees",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "St"
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListAttendees in the Amazon Chime SDK Meetings Namespace"
        },
        ListBots: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/bots",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bots: {
                        type: "list",
                        member: {
                            shape: "S2t"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListChannelBans: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/bans",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "Sbj"
                    },
                    ChannelBans: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Member: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListChannelBans in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelMemberships: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    ChannelMemberships: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Member: {
                                    shape: "S14"
                                }
                            }
                        }
                    },
                    NextToken: {
                        shape: "Sbj"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListChannelMemberships in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelMembershipsForAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=app-instance-user-memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelMemberships: {
                        type: "list",
                        member: {
                            shape: "S7g"
                        }
                    },
                    NextToken: {
                        shape: "Sbj"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListChannelMembershipsForAppInstanceUser in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelMessages: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/messages",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    SortOrder: {
                        location: "querystring",
                        locationName: "sort-order"
                    },
                    NotBefore: {
                        location: "querystring",
                        locationName: "not-before",
                        type: "timestamp"
                    },
                    NotAfter: {
                        location: "querystring",
                        locationName: "not-after",
                        type: "timestamp"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "Sbj"
                    },
                    ChannelMessages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MessageId: {},
                                Content: {
                                    shape: "S8j"
                                },
                                Metadata: {
                                    shape: "S2f"
                                },
                                Type: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                },
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                LastEditedTimestamp: {
                                    type: "timestamp"
                                },
                                Sender: {
                                    shape: "S14"
                                },
                                Redacted: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListChannelMessages in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelModerators: {
            http: {
                method: "GET",
                requestUri: "/channels/{channelArn}/moderators",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    NextToken: {
                        shape: "Sbj"
                    },
                    ChannelModerators: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Moderator: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListChannelModerators in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn" ],
                members: {
                    AppInstanceArn: {
                        location: "querystring",
                        locationName: "app-instance-arn"
                    },
                    Privacy: {
                        location: "querystring",
                        locationName: "privacy"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            shape: "S7h"
                        }
                    },
                    NextToken: {
                        shape: "Sbj"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListChannels in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListChannelsModeratedByAppInstanceUser: {
            http: {
                method: "GET",
                requestUri: "/channels?scope=app-instance-user-moderated-channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {
                        location: "querystring",
                        locationName: "app-instance-user-arn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        shape: "Sbj",
                        location: "querystring",
                        locationName: "next-token"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            shape: "S7l"
                        }
                    },
                    NextToken: {
                        shape: "Sbj"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListChannelsModeratedByAppInstanceUser in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        ListMediaCapturePipelines: {
            http: {
                method: "GET",
                requestUri: "/media-capture-pipelines",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaCapturePipelines: {
                        type: "list",
                        member: {
                            shape: "S3n"
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListMediaCapturePipelines in the Amazon Chime SDK Media Pipelines Namespace"
        },
        ListMeetingTags: {
            http: {
                method: "GET",
                requestUri: "/meetings/{meetingId}/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2h"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Use ListTagsForResource in the Amazon Chime SDK Meetings Namespace."
        },
        ListMeetings: {
            http: {
                method: "GET",
                requestUri: "/meetings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meetings: {
                        type: "list",
                        member: {
                            shape: "S3u"
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API."
        },
        ListPhoneNumberOrders: {
            http: {
                method: "GET",
                requestUri: "/phone-number-orders",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberOrders: {
                        type: "list",
                        member: {
                            shape: "S44"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPhoneNumbers: {
            http: {
                method: "GET",
                requestUri: "/phone-numbers"
            },
            input: {
                type: "structure",
                members: {
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    ProductType: {
                        location: "querystring",
                        locationName: "product-type"
                    },
                    FilterName: {
                        location: "querystring",
                        locationName: "filter-name"
                    },
                    FilterValue: {
                        location: "querystring",
                        locationName: "filter-value"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumbers: {
                        type: "list",
                        member: {
                            shape: "S93"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProxySessions: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySessions: {
                        type: "list",
                        member: {
                            shape: "S4m"
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListProxySessions in the Amazon Chime SDK Voice Namespace"
        },
        ListRoomMemberships: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomMemberships: {
                        type: "list",
                        member: {
                            shape: "S4w"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRooms: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/rooms",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    MemberId: {
                        location: "querystring",
                        locationName: "member-id"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rooms: {
                        type: "list",
                        member: {
                            shape: "S4t"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSipMediaApplications: {
            http: {
                method: "GET",
                requestUri: "/sip-media-applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplications: {
                        type: "list",
                        member: {
                            shape: "S55"
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListSipMediaApplications in the Amazon Chime SDK Voice Namespace"
        },
        ListSipRules: {
            http: {
                method: "GET",
                requestUri: "/sip-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SipMediaApplicationId: {
                        location: "querystring",
                        locationName: "sip-media-application"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRules: {
                        type: "list",
                        member: {
                            shape: "S5h"
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListSipRules in the Amazon Chime SDK Voice Namespace"
        },
        ListSupportedPhoneNumberCountries: {
            http: {
                method: "GET",
                requestUri: "/phone-number-countries",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ProductType" ],
                members: {
                    ProductType: {
                        location: "querystring",
                        locationName: "product-type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberCountries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CountryCode: {},
                                SupportedPhoneNumberTypes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        shape: "S37",
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2h"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListTagsForResource in the Amazon Chime SDK Voice, Amazon Chime SDK Meetings, Amazon Chime SDK Identity, Amazon Chime SDK Messaging, and Amazon Chime SDK Media Pipelines Namespaces"
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/accounts/{accountId}/users",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserEmail: {
                        shape: "S5j",
                        location: "querystring",
                        locationName: "user-email"
                    },
                    UserType: {
                        location: "querystring",
                        locationName: "user-type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            shape: "S5l"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVoiceConnectorGroups: {
            http: {
                method: "GET",
                requestUri: "/voice-connector-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroups: {
                        type: "list",
                        member: {
                            shape: "S5z"
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListVoiceConnectorGroups in the Amazon Chime SDK Voice Namespace"
        },
        ListVoiceConnectorTerminationCredentials: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/credentials",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Usernames: {
                        shape: "S6u"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListVoiceConnectorTerminationCredentials in the Amazon Chime SDK Voice Namespace"
        },
        ListVoiceConnectors: {
            http: {
                method: "GET",
                requestUri: "/voice-connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectors: {
                        type: "list",
                        member: {
                            shape: "S5s"
                        }
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ListVoiceConnectors in the Amazon Chime SDK Voice Namespace"
        },
        LogoutUser: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}?operation=logout",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAppInstanceRetentionSettings: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}/retention-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceRetentionSettings" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    AppInstanceRetentionSettings: {
                        shape: "S84"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceRetentionSettings: {
                        shape: "S84"
                    },
                    InitiateDeletionTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutAppInstanceRetentionSettings in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        PutAppInstanceStreamingConfigurations: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}/streaming-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "AppInstanceStreamingConfigurations" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    AppInstanceStreamingConfigurations: {
                        shape: "S89"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceStreamingConfigurations: {
                        shape: "S89"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutAppInstanceStreamingConfigurations in the Amazon Chime SDK Messaging Namespace"
        },
        PutEventsConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{accountId}/bots/{botId}/events-configuration",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    OutboundEventsHTTPSEndpoint: {
                        shape: "S23"
                    },
                    LambdaFunctionArn: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventsConfiguration: {
                        shape: "S8p"
                    }
                }
            }
        },
        PutRetentionSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{accountId}/retention-settings",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RetentionSettings" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RetentionSettings: {
                        shape: "S9j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RetentionSettings: {
                        shape: "S9j"
                    },
                    InitiateDeletionTimestamp: {
                        shape: "S2a"
                    }
                }
            }
        },
        PutSipMediaApplicationLoggingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    SipMediaApplicationLoggingConfiguration: {
                        shape: "S9s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationLoggingConfiguration: {
                        shape: "S9s"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutSipMediaApplicationLoggingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        PutVoiceConnectorEmergencyCallingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "EmergencyCallingConfiguration" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    EmergencyCallingConfiguration: {
                        shape: "Sa5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmergencyCallingConfiguration: {
                        shape: "Sa5"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutVoiceConnectorEmergencyCallingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        PutVoiceConnectorLoggingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/logging-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "LoggingConfiguration" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    LoggingConfiguration: {
                        shape: "Sac"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "Sac"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutVoiceConnectorLoggingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        PutVoiceConnectorOrigination: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/origination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "Origination" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Origination: {
                        shape: "Saf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Origination: {
                        shape: "Saf"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutVoiceConnectorOrigination in the Amazon Chime SDK Voice Namespace"
        },
        PutVoiceConnectorProxy: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy"
            },
            input: {
                type: "structure",
                required: [ "DefaultSessionExpiryMinutes", "PhoneNumberPoolCountries", "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    DefaultSessionExpiryMinutes: {
                        type: "integer"
                    },
                    PhoneNumberPoolCountries: {
                        type: "list",
                        member: {}
                    },
                    FallBackPhoneNumber: {
                        shape: "S3"
                    },
                    Disabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Proxy: {
                        shape: "Sao"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutVoiceConnectorProxy in the Amazon Chime SDK Voice Namespace"
        },
        PutVoiceConnectorStreamingConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/streaming-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "StreamingConfiguration" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    StreamingConfiguration: {
                        shape: "Sat"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingConfiguration: {
                        shape: "Sat"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutVoiceConnectorStreamingConfiguration in the Amazon Chime SDK Voice Namespace"
        },
        PutVoiceConnectorTermination: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}/termination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "Termination" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Termination: {
                        shape: "Sb0"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Termination: {
                        shape: "Sb0"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutVoiceConnectorTermination in the Amazon Chime SDK Voice Namespace"
        },
        PutVoiceConnectorTerminationCredentials: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/termination/credentials?operation=put",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Credentials: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Username: {
                                    shape: "S23"
                                },
                                Password: {
                                    shape: "S23"
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by PutVoiceConnectorTerminationCredentials in the Amazon Chime SDK Voice Namespace"
        },
        RedactChannelMessage: {
            http: {
                requestUri: "/channels/{channelArn}/messages/{messageId}?operation=redact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by RedactChannelMessage in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        RedactConversationMessage: {
            http: {
                requestUri: "/accounts/{accountId}/conversations/{conversationId}/messages/{messageId}?operation=redact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "ConversationId", "MessageId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    ConversationId: {
                        location: "uri",
                        locationName: "conversationId"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RedactRoomMessage: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}/messages/{messageId}?operation=redact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MessageId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RegenerateSecurityToken: {
            http: {
                requestUri: "/accounts/{accountId}/bots/{botId}?operation=regenerate-security-token",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bot: {
                        shape: "S2t"
                    }
                }
            }
        },
        ResetPersonalPIN: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}?operation=reset-personal-pin",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S5l"
                    }
                }
            }
        },
        RestorePhoneNumber: {
            http: {
                requestUri: "/phone-numbers/{phoneNumberId}?operation=restore",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "phoneNumberId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumber: {
                        shape: "S93"
                    }
                }
            }
        },
        SearchAvailablePhoneNumbers: {
            http: {
                method: "GET",
                requestUri: "/search?type=phone-numbers"
            },
            input: {
                type: "structure",
                members: {
                    AreaCode: {
                        location: "querystring",
                        locationName: "area-code"
                    },
                    City: {
                        location: "querystring",
                        locationName: "city"
                    },
                    Country: {
                        location: "querystring",
                        locationName: "country"
                    },
                    State: {
                        location: "querystring",
                        locationName: "state"
                    },
                    TollFreePrefix: {
                        location: "querystring",
                        locationName: "toll-free-prefix"
                    },
                    PhoneNumberType: {
                        location: "querystring",
                        locationName: "phone-number-type"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    E164PhoneNumbers: {
                        shape: "S7"
                    },
                    NextToken: {}
                }
            }
        },
        SendChannelMessage: {
            http: {
                requestUri: "/channels/{channelArn}/messages",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "Content", "Type", "Persistence", "ClientRequestToken" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Content: {
                        type: "string",
                        sensitive: true
                    },
                    Type: {},
                    Persistence: {},
                    Metadata: {
                        shape: "S2f"
                    },
                    ClientRequestToken: {
                        shape: "S2g",
                        idempotencyToken: true
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by SendChannelMessage in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        StartMeetingTranscription: {
            http: {
                requestUri: "/meetings/{meetingId}/transcription?operation=start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "TranscriptionConfiguration" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    TranscriptionConfiguration: {
                        type: "structure",
                        members: {
                            EngineTranscribeSettings: {
                                type: "structure",
                                members: {
                                    LanguageCode: {},
                                    VocabularyFilterMethod: {},
                                    VocabularyFilterName: {},
                                    VocabularyName: {},
                                    Region: {},
                                    EnablePartialResultsStabilization: {
                                        type: "boolean"
                                    },
                                    PartialResultsStability: {},
                                    ContentIdentificationType: {},
                                    ContentRedactionType: {},
                                    PiiEntityTypes: {},
                                    LanguageModelName: {},
                                    IdentifyLanguage: {
                                        type: "boolean"
                                    },
                                    LanguageOptions: {},
                                    PreferredLanguage: {},
                                    VocabularyNames: {},
                                    VocabularyFilterNames: {}
                                }
                            },
                            EngineTranscribeMedicalSettings: {
                                type: "structure",
                                required: [ "LanguageCode", "Specialty", "Type" ],
                                members: {
                                    LanguageCode: {},
                                    Specialty: {},
                                    Type: {},
                                    VocabularyName: {},
                                    Region: {},
                                    ContentIdentificationType: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Replaced by StartMeetingTranscription in the Amazon Chime SDK Meetings Namespace"
        },
        StopMeetingTranscription: {
            http: {
                requestUri: "/meetings/{meetingId}/transcription?operation=stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "Replaced by StopMeetingTranscription in the Amazon Chime SDK Meetings Namespace"
        },
        TagAttendee: {
            http: {
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}/tags?operation=add",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId", "Tags" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    },
                    Tags: {
                        shape: "So"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Attendee Tags are not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API."
        },
        TagMeeting: {
            http: {
                requestUri: "/meetings/{meetingId}/tags?operation=add",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "Tags" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    Tags: {
                        shape: "S3r"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Use TagResource in the Amazon Chime SDK Meetings Namespace."
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {
                        shape: "S37"
                    },
                    Tags: {
                        shape: "S2h"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by TagResource in the Amazon Chime SDK Voice, Amazon Chime SDK Meetings, Amazon Chime SDK Identity, Amazon Chime SDK Messaging, and Amazon Chime SDK Media Pipelines Namespaces"
        },
        UntagAttendee: {
            http: {
                requestUri: "/meetings/{meetingId}/attendees/{attendeeId}/tags?operation=delete",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "TagKeys", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "attendeeId"
                    },
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Attendee Tags are not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API."
        },
        UntagMeeting: {
            http: {
                requestUri: "/meetings/{meetingId}/tags?operation=delete",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "TagKeys" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "meetingId"
                    },
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Use UntagResource in the Amazon Chime SDK Meetings Namespace."
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {
                        shape: "S37"
                    },
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UntagResource in the Amazon Chime SDK Voice, Amazon Chime SDK Meetings, Amazon Chime SDK Identity, Amazon Chime SDK Messaging, and Amazon Chime SDK Media Pipelines Namespaces"
        },
        UpdateAccount: {
            http: {
                requestUri: "/accounts/{accountId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    Name: {},
                    DefaultLicense: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Account: {
                        shape: "S28"
                    }
                }
            }
        },
        UpdateAccountSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{accountId}/settings",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "AccountSettings" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    AccountSettings: {
                        shape: "S81"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAppInstance: {
            http: {
                method: "PUT",
                requestUri: "/app-instances/{appInstanceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceArn", "Name" ],
                members: {
                    AppInstanceArn: {
                        location: "uri",
                        locationName: "appInstanceArn"
                    },
                    Name: {
                        shape: "S2e"
                    },
                    Metadata: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateAppInstance in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        UpdateAppInstanceUser: {
            http: {
                method: "PUT",
                requestUri: "/app-instance-users/{appInstanceUserArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppInstanceUserArn", "Name" ],
                members: {
                    AppInstanceUserArn: {
                        location: "uri",
                        locationName: "appInstanceUserArn"
                    },
                    Name: {
                        shape: "S2n"
                    },
                    Metadata: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppInstanceUserArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateAppInstanceUser in the Amazon Chime SDK Identity Namespace",
            endpoint: {
                hostPrefix: "identity-"
            }
        },
        UpdateBot: {
            http: {
                requestUri: "/accounts/{accountId}/bots/{botId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "BotId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    BotId: {
                        location: "uri",
                        locationName: "botId"
                    },
                    Disabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bot: {
                        shape: "S2t"
                    }
                }
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "Name", "Mode" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    Name: {
                        shape: "S2e"
                    },
                    Mode: {},
                    Metadata: {
                        shape: "S2f"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateChannel in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        UpdateChannelMessage: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/messages/{messageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn", "MessageId" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    MessageId: {
                        location: "uri",
                        locationName: "messageId"
                    },
                    Content: {
                        shape: "S8j"
                    },
                    Metadata: {
                        shape: "S2f"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    MessageId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateChannelMessage in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        UpdateChannelReadMarker: {
            http: {
                method: "PUT",
                requestUri: "/channels/{channelArn}/readMarker",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ChannelArn" ],
                members: {
                    ChannelArn: {
                        location: "uri",
                        locationName: "channelArn"
                    },
                    ChimeBearer: {
                        location: "header",
                        locationName: "x-amz-chime-bearer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateChannelReadMarker in the Amazon Chime SDK Messaging Namespace",
            endpoint: {
                hostPrefix: "messaging-"
            }
        },
        UpdateGlobalSettings: {
            http: {
                method: "PUT",
                requestUri: "/settings",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    BusinessCalling: {
                        shape: "S8r"
                    },
                    VoiceConnector: {
                        shape: "S8s"
                    }
                }
            }
        },
        UpdatePhoneNumber: {
            http: {
                requestUri: "/phone-numbers/{phoneNumberId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {
                        location: "uri",
                        locationName: "phoneNumberId"
                    },
                    ProductType: {},
                    CallingName: {
                        shape: "S1u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumber: {
                        shape: "S93"
                    }
                }
            }
        },
        UpdatePhoneNumberSettings: {
            http: {
                method: "PUT",
                requestUri: "/settings/phone-number",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "CallingName" ],
                members: {
                    CallingName: {
                        shape: "S1u"
                    }
                }
            }
        },
        UpdateProxySession: {
            http: {
                requestUri: "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Capabilities", "VoiceConnectorId", "ProxySessionId" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    ProxySessionId: {
                        location: "uri",
                        locationName: "proxySessionId"
                    },
                    Capabilities: {
                        shape: "S4e"
                    },
                    ExpiryMinutes: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProxySession: {
                        shape: "S4m"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateProxySession in the Amazon Chime SDK Voice Namespace"
        },
        UpdateRoom: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    Name: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Room: {
                        shape: "S4t"
                    }
                }
            }
        },
        UpdateRoomMembership: {
            http: {
                requestUri: "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "RoomId", "MemberId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    RoomId: {
                        location: "uri",
                        locationName: "roomId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "memberId"
                    },
                    Role: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RoomMembership: {
                        shape: "S4w"
                    }
                }
            }
        },
        UpdateSipMediaApplication: {
            http: {
                method: "PUT",
                requestUri: "/sip-media-applications/{sipMediaApplicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    Name: {},
                    Endpoints: {
                        shape: "S51"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplication: {
                        shape: "S55"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateSipMediaApplication in the Amazon Chime SDK Voice Namespace"
        },
        UpdateSipMediaApplicationCall: {
            http: {
                requestUri: "/sip-media-applications/{sipMediaApplicationId}/calls/{transactionId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "SipMediaApplicationId", "TransactionId", "Arguments" ],
                members: {
                    SipMediaApplicationId: {
                        location: "uri",
                        locationName: "sipMediaApplicationId"
                    },
                    TransactionId: {
                        location: "uri",
                        locationName: "transactionId"
                    },
                    Arguments: {
                        type: "map",
                        key: {
                            shape: "S23"
                        },
                        value: {
                            shape: "S23"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipMediaApplicationCall: {
                        shape: "S59"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateSipMediaApplicationCall in the Amazon Chime SDK Voice Namespace"
        },
        UpdateSipRule: {
            http: {
                method: "PUT",
                requestUri: "/sip-rules/{sipRuleId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "SipRuleId", "Name" ],
                members: {
                    SipRuleId: {
                        location: "uri",
                        locationName: "sipRuleId"
                    },
                    Name: {},
                    Disabled: {
                        type: "boolean"
                    },
                    TargetApplications: {
                        shape: "S5d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SipRule: {
                        shape: "S5h"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateSipRule in the Amazon Chime SDK Voice Namespace"
        },
        UpdateUser: {
            http: {
                requestUri: "/accounts/{accountId}/users/{userId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    LicenseType: {},
                    UserType: {},
                    AlexaForBusinessMetadata: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S5l"
                    }
                }
            }
        },
        UpdateUserSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{accountId}/users/{userId}/settings",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "AccountId", "UserId", "UserSettings" ],
                members: {
                    AccountId: {
                        location: "uri",
                        locationName: "accountId"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "userId"
                    },
                    UserSettings: {
                        shape: "S9z"
                    }
                }
            }
        },
        UpdateVoiceConnector: {
            http: {
                method: "PUT",
                requestUri: "/voice-connectors/{voiceConnectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorId", "Name", "RequireEncryption" ],
                members: {
                    VoiceConnectorId: {
                        location: "uri",
                        locationName: "voiceConnectorId"
                    },
                    Name: {},
                    RequireEncryption: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnector: {
                        shape: "S5s"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateVoiceConnector in the Amazon Chime SDK Voice Namespace"
        },
        UpdateVoiceConnectorGroup: {
            http: {
                method: "PUT",
                requestUri: "/voice-connector-groups/{voiceConnectorGroupId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "VoiceConnectorGroupId", "Name", "VoiceConnectorItems" ],
                members: {
                    VoiceConnectorGroupId: {
                        location: "uri",
                        locationName: "voiceConnectorGroupId"
                    },
                    Name: {},
                    VoiceConnectorItems: {
                        shape: "S5v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VoiceConnectorGroup: {
                        shape: "S5z"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by UpdateVoiceConnectorGroup in the Amazon Chime SDK Voice Namespace"
        },
        ValidateE911Address: {
            http: {
                requestUri: "/emergency-calling/address",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "StreetNumber", "StreetInfo", "City", "State", "Country", "PostalCode" ],
                members: {
                    AwsAccountId: {},
                    StreetNumber: {
                        shape: "Shg"
                    },
                    StreetInfo: {
                        shape: "Shg"
                    },
                    City: {
                        shape: "Shg"
                    },
                    State: {
                        shape: "Shg"
                    },
                    Country: {
                        shape: "Shg"
                    },
                    PostalCode: {
                        shape: "Shg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ValidationResult: {
                        type: "integer"
                    },
                    AddressExternalId: {},
                    Address: {
                        type: "structure",
                        members: {
                            streetName: {
                                shape: "Shg"
                            },
                            streetSuffix: {
                                shape: "Shg"
                            },
                            postDirectional: {
                                shape: "Shg"
                            },
                            preDirectional: {
                                shape: "Shg"
                            },
                            streetNumber: {
                                shape: "Shg"
                            },
                            city: {
                                shape: "Shg"
                            },
                            state: {
                                shape: "Shg"
                            },
                            postalCode: {
                                shape: "Shg"
                            },
                            postalCodePlus4: {
                                shape: "Shg"
                            },
                            country: {
                                shape: "Shg"
                            }
                        }
                    },
                    CandidateAddressList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                streetInfo: {
                                    shape: "Shg"
                                },
                                streetNumber: {
                                    shape: "Shg"
                                },
                                city: {
                                    shape: "Shg"
                                },
                                state: {
                                    shape: "Shg"
                                },
                                postalCode: {
                                    shape: "Shg"
                                },
                                postalCodePlus4: {
                                    shape: "Shg"
                                },
                                country: {
                                    shape: "Shg"
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "Replaced by ValidateE911Address in the Amazon Chime SDK Voice Namespace"
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S7: {
            type: "list",
            member: {
                shape: "S3"
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PhoneNumberId: {},
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    GroupName: {}
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "ExternalUserId" ],
            members: {
                ExternalUserId: {
                    shape: "Sn"
                },
                Tags: {
                    shape: "So"
                }
            }
        },
        Sn: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "list",
            member: {
                shape: "Sp"
            }
        },
        Sp: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {
                    shape: "Sq"
                },
                Value: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sq: {
            type: "string",
            sensitive: true
        },
        St: {
            type: "list",
            member: {
                shape: "Su"
            }
        },
        Su: {
            type: "structure",
            members: {
                ExternalUserId: {
                    shape: "Sn"
                },
                AttendeeId: {},
                JoinToken: {
                    shape: "Sv"
                }
            }
        },
        Sv: {
            type: "string",
            sensitive: true
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ExternalUserId: {
                        shape: "Sn"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                Arn: {},
                Name: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "list",
            member: {}
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    UserId: {},
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        S1u: {
            type: "string",
            sensitive: true
        },
        S21: {
            type: "structure",
            members: {
                IsAlexaForBusinessEnabled: {
                    type: "boolean"
                },
                AlexaForBusinessRoomArn: {
                    shape: "S23"
                }
            }
        },
        S23: {
            type: "string",
            sensitive: true
        },
        S28: {
            type: "structure",
            required: [ "AwsAccountId", "AccountId", "Name" ],
            members: {
                AwsAccountId: {},
                AccountId: {},
                Name: {},
                AccountType: {},
                CreatedTimestamp: {
                    shape: "S2a"
                },
                DefaultLicense: {},
                SupportedLicenses: {
                    type: "list",
                    member: {}
                },
                AccountStatus: {},
                SigninDelegateGroups: {
                    shape: "Sg"
                }
            }
        },
        S2a: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S2e: {
            type: "string",
            sensitive: true
        },
        S2f: {
            type: "string",
            sensitive: true
        },
        S2g: {
            type: "string",
            sensitive: true
        },
        S2h: {
            type: "list",
            member: {
                shape: "Sp"
            }
        },
        S2n: {
            type: "string",
            sensitive: true
        },
        S2t: {
            type: "structure",
            members: {
                BotId: {},
                UserId: {},
                DisplayName: {
                    shape: "S23"
                },
                BotType: {},
                Disabled: {
                    type: "boolean"
                },
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                },
                BotEmail: {
                    shape: "S23"
                },
                SecurityToken: {
                    shape: "S23"
                }
            }
        },
        S37: {
            type: "string",
            sensitive: true
        },
        S39: {
            type: "structure",
            members: {
                SourceConfiguration: {
                    type: "structure",
                    members: {
                        SelectedVideoStreams: {
                            type: "structure",
                            members: {
                                AttendeeIds: {
                                    type: "list",
                                    member: {}
                                },
                                ExternalUserIds: {
                                    type: "list",
                                    member: {
                                        shape: "Sn"
                                    }
                                }
                            }
                        }
                    }
                },
                ArtifactsConfiguration: {
                    type: "structure",
                    required: [ "Audio", "Video", "Content" ],
                    members: {
                        Audio: {
                            type: "structure",
                            required: [ "MuxType" ],
                            members: {
                                MuxType: {}
                            }
                        },
                        Video: {
                            type: "structure",
                            required: [ "State" ],
                            members: {
                                State: {},
                                MuxType: {}
                            }
                        },
                        Content: {
                            type: "structure",
                            required: [ "State" ],
                            members: {
                                State: {},
                                MuxType: {}
                            }
                        }
                    }
                }
            }
        },
        S3n: {
            type: "structure",
            members: {
                MediaPipelineId: {},
                SourceType: {},
                SourceArn: {
                    shape: "S37"
                },
                Status: {},
                SinkType: {},
                SinkArn: {
                    shape: "S37"
                },
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                },
                ChimeSdkMeetingConfiguration: {
                    shape: "S39"
                }
            }
        },
        S3q: {
            type: "string",
            sensitive: true
        },
        S3r: {
            type: "list",
            member: {
                shape: "Sp"
            }
        },
        S3s: {
            type: "structure",
            members: {
                SnsTopicArn: {
                    shape: "S37"
                },
                SqsQueueArn: {
                    shape: "S37"
                }
            }
        },
        S3u: {
            type: "structure",
            members: {
                MeetingId: {},
                ExternalMeetingId: {
                    shape: "S3q"
                },
                MediaPlacement: {
                    type: "structure",
                    members: {
                        AudioHostUrl: {},
                        AudioFallbackUrl: {},
                        ScreenDataUrl: {},
                        ScreenSharingUrl: {},
                        ScreenViewingUrl: {},
                        SignalingUrl: {},
                        TurnControlUrl: {},
                        EventIngestionUrl: {}
                    }
                },
                MediaRegion: {}
            }
        },
        S44: {
            type: "structure",
            members: {
                PhoneNumberOrderId: {},
                ProductType: {},
                Status: {},
                OrderedPhoneNumbers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            E164PhoneNumber: {
                                shape: "S3"
                            },
                            Status: {}
                        }
                    }
                },
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                }
            }
        },
        S4e: {
            type: "list",
            member: {}
        },
        S4i: {
            type: "structure",
            required: [ "Country", "AreaCode" ],
            members: {
                Country: {},
                AreaCode: {}
            }
        },
        S4m: {
            type: "structure",
            members: {
                VoiceConnectorId: {},
                ProxySessionId: {},
                Name: {},
                Status: {},
                ExpiryMinutes: {
                    type: "integer"
                },
                Capabilities: {
                    shape: "S4e"
                },
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                },
                EndedTimestamp: {
                    shape: "S2a"
                },
                Participants: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PhoneNumber: {
                                shape: "S3"
                            },
                            ProxyPhoneNumber: {
                                shape: "S3"
                            }
                        }
                    }
                },
                NumberSelectionBehavior: {},
                GeoMatchLevel: {},
                GeoMatchParams: {
                    shape: "S4i"
                }
            }
        },
        S4t: {
            type: "structure",
            members: {
                RoomId: {},
                Name: {
                    shape: "S23"
                },
                AccountId: {},
                CreatedBy: {},
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                }
            }
        },
        S4w: {
            type: "structure",
            members: {
                RoomId: {},
                Member: {
                    type: "structure",
                    members: {
                        MemberId: {},
                        MemberType: {},
                        Email: {
                            shape: "S23"
                        },
                        FullName: {
                            shape: "S23"
                        },
                        AccountId: {}
                    }
                },
                Role: {},
                InvitedBy: {},
                UpdatedTimestamp: {
                    shape: "S2a"
                }
            }
        },
        S51: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LambdaArn: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S55: {
            type: "structure",
            members: {
                SipMediaApplicationId: {},
                AwsRegion: {},
                Name: {},
                Endpoints: {
                    shape: "S51"
                },
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                }
            }
        },
        S59: {
            type: "structure",
            members: {
                TransactionId: {}
            }
        },
        S5d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SipMediaApplicationId: {},
                    Priority: {
                        type: "integer"
                    },
                    AwsRegion: {}
                }
            }
        },
        S5h: {
            type: "structure",
            members: {
                SipRuleId: {},
                Name: {},
                Disabled: {
                    type: "boolean"
                },
                TriggerType: {},
                TriggerValue: {},
                TargetApplications: {
                    shape: "S5d"
                },
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                }
            }
        },
        S5j: {
            type: "string",
            sensitive: true
        },
        S5l: {
            type: "structure",
            required: [ "UserId" ],
            members: {
                UserId: {},
                AccountId: {},
                PrimaryEmail: {
                    shape: "S5j"
                },
                PrimaryProvisionedNumber: {
                    shape: "S23"
                },
                DisplayName: {
                    shape: "S23"
                },
                LicenseType: {},
                UserType: {},
                UserRegistrationStatus: {},
                UserInvitationStatus: {},
                RegisteredOn: {
                    shape: "S2a"
                },
                InvitedOn: {
                    shape: "S2a"
                },
                AlexaForBusinessMetadata: {
                    shape: "S21"
                },
                PersonalPIN: {}
            }
        },
        S5s: {
            type: "structure",
            members: {
                VoiceConnectorId: {},
                AwsRegion: {},
                Name: {},
                OutboundHostName: {},
                RequireEncryption: {
                    type: "boolean"
                },
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                },
                VoiceConnectorArn: {}
            }
        },
        S5v: {
            type: "list",
            member: {
                type: "structure",
                required: [ "VoiceConnectorId", "Priority" ],
                members: {
                    VoiceConnectorId: {},
                    Priority: {
                        type: "integer"
                    }
                }
            }
        },
        S5z: {
            type: "structure",
            members: {
                VoiceConnectorGroupId: {},
                Name: {},
                VoiceConnectorItems: {
                    shape: "S5v"
                },
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                },
                VoiceConnectorGroupArn: {}
            }
        },
        S6u: {
            type: "list",
            member: {
                shape: "S23"
            }
        },
        S7g: {
            type: "structure",
            members: {
                ChannelSummary: {
                    shape: "S7h"
                },
                AppInstanceUserMembershipSummary: {
                    type: "structure",
                    members: {
                        Type: {},
                        ReadMarkerTimestamp: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        S7h: {
            type: "structure",
            members: {
                Name: {
                    shape: "S2e"
                },
                ChannelArn: {},
                Mode: {},
                Privacy: {},
                Metadata: {
                    shape: "S2f"
                },
                LastMessageTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S7l: {
            type: "structure",
            members: {
                ChannelSummary: {
                    shape: "S7h"
                }
            }
        },
        S81: {
            type: "structure",
            members: {
                DisableRemoteControl: {
                    type: "boolean"
                },
                EnableDialOut: {
                    type: "boolean"
                }
            }
        },
        S84: {
            type: "structure",
            members: {
                ChannelRetentionSettings: {
                    type: "structure",
                    members: {
                        RetentionDays: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S89: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AppInstanceDataType", "ResourceArn" ],
                members: {
                    AppInstanceDataType: {},
                    ResourceArn: {
                        shape: "S37"
                    }
                }
            }
        },
        S8j: {
            type: "string",
            sensitive: true
        },
        S8p: {
            type: "structure",
            members: {
                BotId: {},
                OutboundEventsHTTPSEndpoint: {
                    shape: "S23"
                },
                LambdaFunctionArn: {
                    shape: "S23"
                }
            }
        },
        S8r: {
            type: "structure",
            members: {
                CdrBucket: {}
            }
        },
        S8s: {
            type: "structure",
            members: {
                CdrBucket: {}
            }
        },
        S93: {
            type: "structure",
            members: {
                PhoneNumberId: {},
                E164PhoneNumber: {
                    shape: "S3"
                },
                Country: {},
                Type: {},
                ProductType: {},
                Status: {},
                Capabilities: {
                    type: "structure",
                    members: {
                        InboundCall: {
                            type: "boolean"
                        },
                        OutboundCall: {
                            type: "boolean"
                        },
                        InboundSMS: {
                            type: "boolean"
                        },
                        OutboundSMS: {
                            type: "boolean"
                        },
                        InboundMMS: {
                            type: "boolean"
                        },
                        OutboundMMS: {
                            type: "boolean"
                        }
                    }
                },
                Associations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Value: {},
                            Name: {},
                            AssociatedTimestamp: {
                                shape: "S2a"
                            }
                        }
                    }
                },
                CallingName: {
                    shape: "S1u"
                },
                CallingNameStatus: {},
                CreatedTimestamp: {
                    shape: "S2a"
                },
                UpdatedTimestamp: {
                    shape: "S2a"
                },
                DeletionTimestamp: {
                    shape: "S2a"
                }
            }
        },
        S9j: {
            type: "structure",
            members: {
                RoomRetentionSettings: {
                    type: "structure",
                    members: {
                        RetentionDays: {
                            type: "integer"
                        }
                    }
                },
                ConversationRetentionSettings: {
                    type: "structure",
                    members: {
                        RetentionDays: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S9s: {
            type: "structure",
            members: {
                EnableSipMediaApplicationMessageLogs: {
                    type: "boolean"
                }
            }
        },
        S9z: {
            type: "structure",
            required: [ "Telephony" ],
            members: {
                Telephony: {
                    type: "structure",
                    required: [ "InboundCalling", "OutboundCalling", "SMS" ],
                    members: {
                        InboundCalling: {
                            type: "boolean"
                        },
                        OutboundCalling: {
                            type: "boolean"
                        },
                        SMS: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sa5: {
            type: "structure",
            members: {
                DNIS: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "EmergencyPhoneNumber", "CallingCountry" ],
                        members: {
                            EmergencyPhoneNumber: {
                                shape: "S3"
                            },
                            TestPhoneNumber: {
                                shape: "S3"
                            },
                            CallingCountry: {}
                        }
                    }
                }
            }
        },
        Sac: {
            type: "structure",
            members: {
                EnableSIPLogs: {
                    type: "boolean"
                },
                EnableMediaMetricLogs: {
                    type: "boolean"
                }
            }
        },
        Saf: {
            type: "structure",
            members: {
                Routes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Host: {},
                            Port: {
                                type: "integer"
                            },
                            Protocol: {},
                            Priority: {
                                type: "integer"
                            },
                            Weight: {
                                type: "integer"
                            }
                        }
                    }
                },
                Disabled: {
                    type: "boolean"
                }
            }
        },
        Sao: {
            type: "structure",
            members: {
                DefaultSessionExpiryMinutes: {
                    type: "integer"
                },
                Disabled: {
                    type: "boolean"
                },
                FallBackPhoneNumber: {
                    shape: "S3"
                },
                PhoneNumberCountries: {
                    shape: "Saq"
                }
            }
        },
        Saq: {
            type: "list",
            member: {}
        },
        Sat: {
            type: "structure",
            required: [ "DataRetentionInHours" ],
            members: {
                DataRetentionInHours: {
                    type: "integer"
                },
                Disabled: {
                    type: "boolean"
                },
                StreamingNotificationTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "NotificationTarget" ],
                        members: {
                            NotificationTarget: {}
                        }
                    }
                }
            }
        },
        Sb0: {
            type: "structure",
            members: {
                CpsLimit: {
                    type: "integer"
                },
                DefaultPhoneNumber: {
                    shape: "S3"
                },
                CallingRegions: {
                    type: "list",
                    member: {}
                },
                CidrAllowedList: {
                    shape: "Saq"
                },
                Disabled: {
                    type: "boolean"
                }
            }
        },
        Sbj: {
            type: "string",
            sensitive: true
        },
        Shg: {
            type: "string",
            sensitive: true
        }
    },
    deprecated: true,
    deprecatedMessage: "This namespace has been deprecated",
    paginators: {
        ListAccounts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstanceAdmins: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstanceUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAppInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAttendees: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListBots: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelBans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMemberships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMembershipsForAppInstanceUser: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelMessages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelModerators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListChannelsModeratedByAppInstanceUser: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMediaCapturePipelines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMeetings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPhoneNumberOrders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPhoneNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListProxySessions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRoomMemberships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListRooms: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSipMediaApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListSipRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVoiceConnectorGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListVoiceConnectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchAvailablePhoneNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["pinpointemail"] = {};

AWS.PinpointEmail = AWS.Service.defineService("pinpointemail", [ "2018-07-26" ]);

AWS.apiLoader.services["pinpointemail"]["2018-07-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-07-26",
        endpointPrefix: "email",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Pinpoint Email",
        serviceFullName: "Amazon Pinpoint Email Service",
        serviceId: "Pinpoint Email",
        signatureVersion: "v4",
        signingName: "ses",
        uid: "pinpoint-email-2018-07-26"
    },
    operations: {
        CreateConfigurationSet: {
            http: {
                requestUri: "/v1/email/configuration-sets"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "S3"
                    },
                    DeliveryOptions: {
                        shape: "S5"
                    },
                    ReputationOptions: {
                        shape: "S8"
                    },
                    SendingOptions: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetEventDestination: {
            http: {
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {},
                    EventDestination: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDedicatedIpPool: {
            http: {
                requestUri: "/v1/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDeliverabilityTestReport: {
            http: {
                requestUri: "/v1/email/deliverability-dashboard/test"
            },
            input: {
                type: "structure",
                required: [ "FromEmailAddress", "Content" ],
                members: {
                    ReportName: {},
                    FromEmailAddress: {},
                    Content: {
                        shape: "S12"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ReportId", "DeliverabilityTestStatus" ],
                members: {
                    ReportId: {},
                    DeliverabilityTestStatus: {}
                }
            }
        },
        CreateEmailIdentity: {
            http: {
                requestUri: "/v1/email/identities"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S1k"
                    }
                }
            }
        },
        DeleteConfigurationSet: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetEventDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDedicatedIpPool: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/dedicated-ip-pools/{PoolName}"
            },
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {
                        location: "uri",
                        locationName: "PoolName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEmailIdentity: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccount: {
            http: {
                method: "GET",
                requestUri: "/v1/email/account"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    SendQuota: {
                        type: "structure",
                        members: {
                            Max24HourSend: {
                                type: "double"
                            },
                            MaxSendRate: {
                                type: "double"
                            },
                            SentLast24Hours: {
                                type: "double"
                            }
                        }
                    },
                    SendingEnabled: {
                        type: "boolean"
                    },
                    DedicatedIpAutoWarmupEnabled: {
                        type: "boolean"
                    },
                    EnforcementStatus: {},
                    ProductionAccessEnabled: {
                        type: "boolean"
                    }
                }
            }
        },
        GetBlacklistReports: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/blacklist-report"
            },
            input: {
                type: "structure",
                required: [ "BlacklistItemNames" ],
                members: {
                    BlacklistItemNames: {
                        location: "querystring",
                        locationName: "BlacklistItemNames",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "BlacklistReport" ],
                members: {
                    BlacklistReport: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    RblName: {},
                                    ListingTime: {
                                        type: "timestamp"
                                    },
                                    Description: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetConfigurationSet: {
            http: {
                method: "GET",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "S3"
                    },
                    DeliveryOptions: {
                        shape: "S5"
                    },
                    ReputationOptions: {
                        shape: "S8"
                    },
                    SendingOptions: {
                        shape: "Sb"
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetConfigurationSetEventDestinations: {
            http: {
                method: "GET",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "MatchingEventTypes" ],
                            members: {
                                Name: {},
                                Enabled: {
                                    type: "boolean"
                                },
                                MatchingEventTypes: {
                                    shape: "Sk"
                                },
                                KinesisFirehoseDestination: {
                                    shape: "Sm"
                                },
                                CloudWatchDestination: {
                                    shape: "So"
                                },
                                SnsDestination: {
                                    shape: "Su"
                                },
                                PinpointDestination: {
                                    shape: "Sv"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDedicatedIp: {
            http: {
                method: "GET",
                requestUri: "/v1/email/dedicated-ips/{IP}"
            },
            input: {
                type: "structure",
                required: [ "Ip" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIp: {
                        shape: "S2m"
                    }
                }
            }
        },
        GetDedicatedIps: {
            http: {
                method: "GET",
                requestUri: "/v1/email/dedicated-ips"
            },
            input: {
                type: "structure",
                members: {
                    PoolName: {
                        location: "querystring",
                        locationName: "PoolName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIps: {
                        type: "list",
                        member: {
                            shape: "S2m"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDeliverabilityDashboardOptions: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscriptionExpiryDate: {
                        type: "timestamp"
                    },
                    AccountStatus: {},
                    ActiveSubscribedDomains: {
                        shape: "S2x"
                    },
                    PendingExpirationSubscribedDomains: {
                        shape: "S2x"
                    }
                }
            }
        },
        GetDeliverabilityTestReport: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/test-reports/{ReportId}"
            },
            input: {
                type: "structure",
                required: [ "ReportId" ],
                members: {
                    ReportId: {
                        location: "uri",
                        locationName: "ReportId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReport", "OverallPlacement", "IspPlacements" ],
                members: {
                    DeliverabilityTestReport: {
                        shape: "S35"
                    },
                    OverallPlacement: {
                        shape: "S37"
                    },
                    IspPlacements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IspName: {},
                                PlacementStatistics: {
                                    shape: "S37"
                                }
                            }
                        }
                    },
                    Message: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetDomainDeliverabilityCampaign: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/campaigns/{CampaignId}"
            },
            input: {
                type: "structure",
                required: [ "CampaignId" ],
                members: {
                    CampaignId: {
                        location: "uri",
                        locationName: "CampaignId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaign" ],
                members: {
                    DomainDeliverabilityCampaign: {
                        shape: "S3f"
                    }
                }
            }
        },
        GetDomainStatisticsReport: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/statistics-report/{Domain}"
            },
            input: {
                type: "structure",
                required: [ "Domain", "StartDate", "EndDate" ],
                members: {
                    Domain: {
                        location: "uri",
                        locationName: "Domain"
                    },
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "OverallVolume", "DailyVolumes" ],
                members: {
                    OverallVolume: {
                        type: "structure",
                        members: {
                            VolumeStatistics: {
                                shape: "S3p"
                            },
                            ReadRatePercent: {
                                type: "double"
                            },
                            DomainIspPlacements: {
                                shape: "S3q"
                            }
                        }
                    },
                    DailyVolumes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StartDate: {
                                    type: "timestamp"
                                },
                                VolumeStatistics: {
                                    shape: "S3p"
                                },
                                DomainIspPlacements: {
                                    shape: "S3q"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetEmailIdentity: {
            http: {
                method: "GET",
                requestUri: "/v1/email/identities/{EmailIdentity}"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityType: {},
                    FeedbackForwardingStatus: {
                        type: "boolean"
                    },
                    VerifiedForSendingStatus: {
                        type: "boolean"
                    },
                    DkimAttributes: {
                        shape: "S1k"
                    },
                    MailFromAttributes: {
                        type: "structure",
                        required: [ "MailFromDomain", "MailFromDomainStatus", "BehaviorOnMxFailure" ],
                        members: {
                            MailFromDomain: {},
                            MailFromDomainStatus: {},
                            BehaviorOnMxFailure: {}
                        }
                    },
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListConfigurationSets: {
            http: {
                method: "GET",
                requestUri: "/v1/email/configuration-sets"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListDedicatedIpPools: {
            http: {
                method: "GET",
                requestUri: "/v1/email/dedicated-ip-pools"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DedicatedIpPools: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListDeliverabilityTestReports: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/test-reports"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DeliverabilityTestReports" ],
                members: {
                    DeliverabilityTestReports: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomainDeliverabilityCampaigns: {
            http: {
                method: "GET",
                requestUri: "/v1/email/deliverability-dashboard/domains/{SubscribedDomain}/campaigns"
            },
            input: {
                type: "structure",
                required: [ "StartDate", "EndDate", "SubscribedDomain" ],
                members: {
                    StartDate: {
                        location: "querystring",
                        locationName: "StartDate",
                        type: "timestamp"
                    },
                    EndDate: {
                        location: "querystring",
                        locationName: "EndDate",
                        type: "timestamp"
                    },
                    SubscribedDomain: {
                        location: "uri",
                        locationName: "SubscribedDomain"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DomainDeliverabilityCampaigns" ],
                members: {
                    DomainDeliverabilityCampaigns: {
                        type: "list",
                        member: {
                            shape: "S3f"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEmailIdentities: {
            http: {
                method: "GET",
                requestUri: "/v1/email/identities"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmailIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IdentityType: {},
                                IdentityName: {},
                                SendingEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        PutAccountDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/account/dedicated-ips/warmup"
            },
            input: {
                type: "structure",
                members: {
                    AutoWarmupEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAccountSendingAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/account/sending"
            },
            input: {
                type: "structure",
                members: {
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetDeliveryOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/delivery-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    TlsPolicy: {},
                    SendingPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetReputationOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/reputation-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    ReputationMetricsEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetSendingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/sending"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    SendingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutConfigurationSetTrackingOptions: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/tracking-options"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    CustomRedirectDomain: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpInPool: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/dedicated-ips/{IP}/pool"
            },
            input: {
                type: "structure",
                required: [ "Ip", "DestinationPoolName" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    DestinationPoolName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDedicatedIpWarmupAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/dedicated-ips/{IP}/warmup"
            },
            input: {
                type: "structure",
                required: [ "Ip", "WarmupPercentage" ],
                members: {
                    Ip: {
                        location: "uri",
                        locationName: "IP"
                    },
                    WarmupPercentage: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutDeliverabilityDashboardOption: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/deliverability-dashboard"
            },
            input: {
                type: "structure",
                required: [ "DashboardEnabled" ],
                members: {
                    DashboardEnabled: {
                        type: "boolean"
                    },
                    SubscribedDomains: {
                        shape: "S2x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityDkimAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/dkim"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    SigningEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityFeedbackAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/feedback"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    EmailForwardingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutEmailIdentityMailFromAttributes: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/identities/{EmailIdentity}/mail-from"
            },
            input: {
                type: "structure",
                required: [ "EmailIdentity" ],
                members: {
                    EmailIdentity: {
                        location: "uri",
                        locationName: "EmailIdentity"
                    },
                    MailFromDomain: {},
                    BehaviorOnMxFailure: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendEmail: {
            http: {
                requestUri: "/v1/email/outbound-emails"
            },
            input: {
                type: "structure",
                required: [ "Destination", "Content" ],
                members: {
                    FromEmailAddress: {},
                    Destination: {
                        type: "structure",
                        members: {
                            ToAddresses: {
                                shape: "S59"
                            },
                            CcAddresses: {
                                shape: "S59"
                            },
                            BccAddresses: {
                                shape: "S59"
                            }
                        }
                    },
                    ReplyToAddresses: {
                        shape: "S59"
                    },
                    FeedbackForwardingEmailAddress: {},
                    Content: {
                        shape: "S12"
                    },
                    EmailTags: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/email/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "querystring",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "TagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConfigurationSetEventDestination: {
            http: {
                method: "PUT",
                requestUri: "/v1/email/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    },
                    EventDestination: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "CustomRedirectDomain" ],
            members: {
                CustomRedirectDomain: {}
            }
        },
        S5: {
            type: "structure",
            members: {
                TlsPolicy: {},
                SendingPoolName: {}
            }
        },
        S8: {
            type: "structure",
            members: {
                ReputationMetricsEnabled: {
                    type: "boolean"
                },
                LastFreshStart: {
                    type: "timestamp"
                }
            }
        },
        Sb: {
            type: "structure",
            members: {
                SendingEnabled: {
                    type: "boolean"
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                MatchingEventTypes: {
                    shape: "Sk"
                },
                KinesisFirehoseDestination: {
                    shape: "Sm"
                },
                CloudWatchDestination: {
                    shape: "So"
                },
                SnsDestination: {
                    shape: "Su"
                },
                PinpointDestination: {
                    shape: "Sv"
                }
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sm: {
            type: "structure",
            required: [ "IamRoleArn", "DeliveryStreamArn" ],
            members: {
                IamRoleArn: {},
                DeliveryStreamArn: {}
            }
        },
        So: {
            type: "structure",
            required: [ "DimensionConfigurations" ],
            members: {
                DimensionConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DimensionName", "DimensionValueSource", "DefaultDimensionValue" ],
                        members: {
                            DimensionName: {},
                            DimensionValueSource: {},
                            DefaultDimensionValue: {}
                        }
                    }
                }
            }
        },
        Su: {
            type: "structure",
            required: [ "TopicArn" ],
            members: {
                TopicArn: {}
            }
        },
        Sv: {
            type: "structure",
            members: {
                ApplicationArn: {}
            }
        },
        S12: {
            type: "structure",
            members: {
                Simple: {
                    type: "structure",
                    required: [ "Subject", "Body" ],
                    members: {
                        Subject: {
                            shape: "S14"
                        },
                        Body: {
                            type: "structure",
                            members: {
                                Text: {
                                    shape: "S14"
                                },
                                Html: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                },
                Raw: {
                    type: "structure",
                    required: [ "Data" ],
                    members: {
                        Data: {
                            type: "blob"
                        }
                    }
                },
                Template: {
                    type: "structure",
                    members: {
                        TemplateArn: {},
                        TemplateData: {}
                    }
                }
            }
        },
        S14: {
            type: "structure",
            required: [ "Data" ],
            members: {
                Data: {},
                Charset: {}
            }
        },
        S1k: {
            type: "structure",
            members: {
                SigningEnabled: {
                    type: "boolean"
                },
                Status: {},
                Tokens: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "Ip", "WarmupStatus", "WarmupPercentage" ],
            members: {
                Ip: {},
                WarmupStatus: {},
                WarmupPercentage: {
                    type: "integer"
                },
                PoolName: {}
            }
        },
        S2x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Domain: {},
                    SubscriptionStartDate: {
                        type: "timestamp"
                    },
                    InboxPlacementTrackingOption: {
                        type: "structure",
                        members: {
                            Global: {
                                type: "boolean"
                            },
                            TrackedIsps: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                ReportId: {},
                ReportName: {},
                Subject: {},
                FromEmailAddress: {},
                CreateDate: {
                    type: "timestamp"
                },
                DeliverabilityTestStatus: {}
            }
        },
        S37: {
            type: "structure",
            members: {
                InboxPercentage: {
                    type: "double"
                },
                SpamPercentage: {
                    type: "double"
                },
                MissingPercentage: {
                    type: "double"
                },
                SpfPercentage: {
                    type: "double"
                },
                DkimPercentage: {
                    type: "double"
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                CampaignId: {},
                ImageUrl: {},
                Subject: {},
                FromAddress: {},
                SendingIps: {
                    type: "list",
                    member: {}
                },
                FirstSeenDateTime: {
                    type: "timestamp"
                },
                LastSeenDateTime: {
                    type: "timestamp"
                },
                InboxCount: {
                    type: "long"
                },
                SpamCount: {
                    type: "long"
                },
                ReadRate: {
                    type: "double"
                },
                DeleteRate: {
                    type: "double"
                },
                ReadDeleteRate: {
                    type: "double"
                },
                ProjectedVolume: {
                    type: "long"
                },
                Esps: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3p: {
            type: "structure",
            members: {
                InboxRawCount: {
                    type: "long"
                },
                SpamRawCount: {
                    type: "long"
                },
                ProjectedInbox: {
                    type: "long"
                },
                ProjectedSpam: {
                    type: "long"
                }
            }
        },
        S3q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IspName: {},
                    InboxRawCount: {
                        type: "long"
                    },
                    SpamRawCount: {
                        type: "long"
                    },
                    InboxPercentage: {
                        type: "double"
                    },
                    SpamPercentage: {
                        type: "double"
                    }
                }
            }
        },
        S59: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetDedicatedIps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListConfigurationSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDedicatedIpPools: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDeliverabilityTestReports: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListDomainDeliverabilityCampaigns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        },
        ListEmailIdentities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "PageSize"
        }
    }
};

AWS.apiLoader.services["ram"] = {};

AWS.RAM = AWS.Service.defineService("ram", [ "2018-01-04" ]);

AWS.apiLoader.services["ram"]["2018-01-04"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-01-04",
        endpointPrefix: "ram",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "RAM",
        serviceFullName: "AWS Resource Access Manager",
        serviceId: "RAM",
        signatureVersion: "v4",
        uid: "ram-2018-01-04"
    },
    operations: {
        AcceptResourceShareInvitation: {
            http: {
                requestUri: "/acceptresourceshareinvitation"
            },
            input: {
                type: "structure",
                required: [ "resourceShareInvitationArn" ],
                members: {
                    resourceShareInvitationArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareInvitation: {
                        shape: "S4"
                    },
                    clientToken: {}
                }
            }
        },
        AssociateResourceShare: {
            http: {
                requestUri: "/associateresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    principals: {
                        shape: "Se"
                    },
                    clientToken: {},
                    sources: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareAssociations: {
                        shape: "S7"
                    },
                    clientToken: {}
                }
            }
        },
        AssociateResourceSharePermission: {
            http: {
                requestUri: "/associateresourcesharepermission"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "permissionArn" ],
                members: {
                    resourceShareArn: {},
                    permissionArn: {},
                    replace: {
                        type: "boolean"
                    },
                    clientToken: {},
                    permissionVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        CreatePermission: {
            http: {
                requestUri: "/createpermission"
            },
            input: {
                type: "structure",
                required: [ "name", "resourceType", "policyTemplate" ],
                members: {
                    name: {},
                    resourceType: {},
                    policyTemplate: {},
                    clientToken: {},
                    tags: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permission: {
                        shape: "Ss"
                    },
                    clientToken: {}
                }
            }
        },
        CreatePermissionVersion: {
            http: {
                requestUri: "/createpermissionversion"
            },
            input: {
                type: "structure",
                required: [ "permissionArn", "policyTemplate" ],
                members: {
                    permissionArn: {},
                    policyTemplate: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    permission: {
                        shape: "Sx"
                    },
                    clientToken: {}
                }
            }
        },
        CreateResourceShare: {
            http: {
                requestUri: "/createresourceshare"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    principals: {
                        shape: "Se"
                    },
                    tags: {
                        shape: "Sn"
                    },
                    allowExternalPrincipals: {
                        type: "boolean"
                    },
                    clientToken: {},
                    permissionArns: {
                        type: "list",
                        member: {}
                    },
                    sources: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShare: {
                        shape: "S12"
                    },
                    clientToken: {}
                }
            }
        },
        DeletePermission: {
            http: {
                method: "DELETE",
                requestUri: "/deletepermission"
            },
            input: {
                type: "structure",
                required: [ "permissionArn" ],
                members: {
                    permissionArn: {
                        location: "querystring",
                        locationName: "permissionArn"
                    },
                    clientToken: {
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {},
                    permissionStatus: {}
                }
            }
        },
        DeletePermissionVersion: {
            http: {
                method: "DELETE",
                requestUri: "/deletepermissionversion"
            },
            input: {
                type: "structure",
                required: [ "permissionArn", "permissionVersion" ],
                members: {
                    permissionArn: {
                        location: "querystring",
                        locationName: "permissionArn"
                    },
                    permissionVersion: {
                        location: "querystring",
                        locationName: "permissionVersion",
                        type: "integer"
                    },
                    clientToken: {
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {},
                    permissionStatus: {}
                }
            }
        },
        DeleteResourceShare: {
            http: {
                method: "DELETE",
                requestUri: "/deleteresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {
                        location: "querystring",
                        locationName: "resourceShareArn"
                    },
                    clientToken: {
                        location: "querystring",
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        DisassociateResourceShare: {
            http: {
                requestUri: "/disassociateresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    principals: {
                        shape: "Se"
                    },
                    clientToken: {},
                    sources: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareAssociations: {
                        shape: "S7"
                    },
                    clientToken: {}
                }
            }
        },
        DisassociateResourceSharePermission: {
            http: {
                requestUri: "/disassociateresourcesharepermission"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn", "permissionArn" ],
                members: {
                    resourceShareArn: {},
                    permissionArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        EnableSharingWithAwsOrganization: {
            http: {
                requestUri: "/enablesharingwithawsorganization"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        GetPermission: {
            http: {
                requestUri: "/getpermission"
            },
            input: {
                type: "structure",
                required: [ "permissionArn" ],
                members: {
                    permissionArn: {},
                    permissionVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permission: {
                        shape: "Sx"
                    }
                }
            }
        },
        GetResourcePolicies: {
            http: {
                requestUri: "/getresourcepolicies"
            },
            input: {
                type: "structure",
                required: [ "resourceArns" ],
                members: {
                    resourceArns: {
                        shape: "Sd"
                    },
                    principal: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    policies: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceShareAssociations: {
            http: {
                requestUri: "/getresourceshareassociations"
            },
            input: {
                type: "structure",
                required: [ "associationType" ],
                members: {
                    associationType: {},
                    resourceShareArns: {
                        shape: "S1o"
                    },
                    resourceArn: {},
                    principal: {},
                    associationStatus: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareAssociations: {
                        shape: "S7"
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceShareInvitations: {
            http: {
                requestUri: "/getresourceshareinvitations"
            },
            input: {
                type: "structure",
                members: {
                    resourceShareInvitationArns: {
                        type: "list",
                        member: {}
                    },
                    resourceShareArns: {
                        shape: "S1o"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareInvitations: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceShares: {
            http: {
                requestUri: "/getresourceshares"
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceShareArns: {
                        shape: "S1o"
                    },
                    resourceShareStatus: {},
                    resourceOwner: {},
                    name: {},
                    tagFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                tagKey: {},
                                tagValues: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    permissionArn: {},
                    permissionVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShares: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPendingInvitationResources: {
            http: {
                requestUri: "/listpendinginvitationresources"
            },
            input: {
                type: "structure",
                required: [ "resourceShareInvitationArn" ],
                members: {
                    resourceShareInvitationArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    resourceRegionScope: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        shape: "S24"
                    },
                    nextToken: {}
                }
            }
        },
        ListPermissionAssociations: {
            http: {
                requestUri: "/listpermissionassociations"
            },
            input: {
                type: "structure",
                members: {
                    permissionArn: {},
                    permissionVersion: {
                        type: "integer"
                    },
                    associationStatus: {},
                    resourceType: {},
                    featureSet: {},
                    defaultVersion: {
                        type: "boolean"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                permissionVersion: {},
                                defaultVersion: {
                                    type: "boolean"
                                },
                                resourceType: {},
                                status: {},
                                featureSet: {},
                                lastUpdatedTime: {
                                    type: "timestamp"
                                },
                                resourceShareArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPermissionVersions: {
            http: {
                requestUri: "/listpermissionversions"
            },
            input: {
                type: "structure",
                required: [ "permissionArn" ],
                members: {
                    permissionArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissions: {
                        shape: "S2e"
                    },
                    nextToken: {}
                }
            }
        },
        ListPermissions: {
            http: {
                requestUri: "/listpermissions"
            },
            input: {
                type: "structure",
                members: {
                    resourceType: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    permissionType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    permissions: {
                        shape: "S2e"
                    },
                    nextToken: {}
                }
            }
        },
        ListPrincipals: {
            http: {
                requestUri: "/listprincipals"
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceOwner: {},
                    resourceArn: {},
                    principals: {
                        shape: "Se"
                    },
                    resourceType: {},
                    resourceShareArns: {
                        shape: "S1o"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    principals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                resourceShareArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedTime: {
                                    type: "timestamp"
                                },
                                external: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListReplacePermissionAssociationsWork: {
            http: {
                requestUri: "/listreplacepermissionassociationswork"
            },
            input: {
                type: "structure",
                members: {
                    workIds: {
                        type: "list",
                        member: {}
                    },
                    status: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    replacePermissionAssociationsWorks: {
                        type: "list",
                        member: {
                            shape: "S2r"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResourceSharePermissions: {
            http: {
                requestUri: "/listresourcesharepermissions"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    permissions: {
                        shape: "S2e"
                    },
                    nextToken: {}
                }
            }
        },
        ListResourceTypes: {
            http: {
                requestUri: "/listresourcetypes"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    resourceRegionScope: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceType: {},
                                serviceName: {},
                                resourceRegionScope: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResources: {
            http: {
                requestUri: "/listresources"
            },
            input: {
                type: "structure",
                required: [ "resourceOwner" ],
                members: {
                    resourceOwner: {},
                    principal: {},
                    resourceType: {},
                    resourceArns: {
                        shape: "Sd"
                    },
                    resourceShareArns: {
                        shape: "S1o"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    resourceRegionScope: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        shape: "S24"
                    },
                    nextToken: {}
                }
            }
        },
        PromotePermissionCreatedFromPolicy: {
            http: {
                requestUri: "/promotepermissioncreatedfrompolicy"
            },
            input: {
                type: "structure",
                required: [ "permissionArn", "name" ],
                members: {
                    permissionArn: {},
                    name: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    permission: {
                        shape: "Ss"
                    },
                    clientToken: {}
                }
            }
        },
        PromoteResourceShareCreatedFromPolicy: {
            http: {
                requestUri: "/promoteresourcesharecreatedfrompolicy"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {
                        location: "querystring",
                        locationName: "resourceShareArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        RejectResourceShareInvitation: {
            http: {
                requestUri: "/rejectresourceshareinvitation"
            },
            input: {
                type: "structure",
                required: [ "resourceShareInvitationArn" ],
                members: {
                    resourceShareInvitationArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShareInvitation: {
                        shape: "S4"
                    },
                    clientToken: {}
                }
            }
        },
        ReplacePermissionAssociations: {
            http: {
                requestUri: "/replacepermissionassociations"
            },
            input: {
                type: "structure",
                required: [ "fromPermissionArn", "toPermissionArn" ],
                members: {
                    fromPermissionArn: {},
                    fromPermissionVersion: {
                        type: "integer"
                    },
                    toPermissionArn: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    replacePermissionAssociationsWork: {
                        shape: "S2r"
                    },
                    clientToken: {}
                }
            }
        },
        SetDefaultPermissionVersion: {
            http: {
                requestUri: "/setdefaultpermissionversion"
            },
            input: {
                type: "structure",
                required: [ "permissionArn", "permissionVersion" ],
                members: {
                    permissionArn: {},
                    permissionVersion: {
                        type: "integer"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    returnValue: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tagresource"
            },
            input: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    resourceShareArn: {},
                    tags: {
                        shape: "Sn"
                    },
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/untagresource"
            },
            input: {
                type: "structure",
                required: [ "tagKeys" ],
                members: {
                    resourceShareArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    },
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceShare: {
            http: {
                requestUri: "/updateresourceshare"
            },
            input: {
                type: "structure",
                required: [ "resourceShareArn" ],
                members: {
                    resourceShareArn: {},
                    name: {},
                    allowExternalPrincipals: {
                        type: "boolean"
                    },
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceShare: {
                        shape: "S12"
                    },
                    clientToken: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                resourceShareInvitationArn: {},
                resourceShareName: {},
                resourceShareArn: {},
                senderAccountId: {},
                receiverAccountId: {},
                invitationTimestamp: {
                    type: "timestamp"
                },
                status: {},
                resourceShareAssociations: {
                    shape: "S7",
                    deprecated: true,
                    deprecatedMessage: "This member has been deprecated. Use ListPendingInvitationResources."
                },
                receiverArn: {}
            }
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    resourceShareArn: {},
                    resourceShareName: {},
                    associatedEntity: {},
                    associationType: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    },
                    external: {
                        type: "boolean"
                    }
                }
            }
        },
        Sd: {
            type: "list",
            member: {}
        },
        Se: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "list",
            member: {}
        },
        Sn: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                arn: {},
                version: {},
                defaultVersion: {
                    type: "boolean"
                },
                name: {},
                resourceType: {},
                status: {},
                creationTime: {
                    type: "timestamp"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                isResourceTypeDefault: {
                    type: "boolean"
                },
                permissionType: {},
                featureSet: {},
                tags: {
                    shape: "Sn"
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                arn: {},
                version: {},
                defaultVersion: {
                    type: "boolean"
                },
                name: {},
                resourceType: {},
                permission: {},
                creationTime: {
                    type: "timestamp"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                isResourceTypeDefault: {
                    type: "boolean"
                },
                permissionType: {},
                featureSet: {},
                status: {},
                tags: {
                    shape: "Sn"
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                resourceShareArn: {},
                name: {},
                owningAccountId: {},
                allowExternalPrincipals: {
                    type: "boolean"
                },
                status: {},
                statusMessage: {},
                tags: {
                    shape: "Sn"
                },
                creationTime: {
                    type: "timestamp"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                featureSet: {}
            }
        },
        S1o: {
            type: "list",
            member: {}
        },
        S24: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    type: {},
                    resourceShareArn: {},
                    resourceGroupArn: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    },
                    resourceRegionScope: {}
                }
            }
        },
        S2e: {
            type: "list",
            member: {
                shape: "Ss"
            }
        },
        S2r: {
            type: "structure",
            members: {
                id: {},
                fromPermissionArn: {},
                fromPermissionVersion: {},
                toPermissionArn: {},
                toPermissionVersion: {},
                status: {},
                statusMessage: {},
                creationTime: {
                    type: "timestamp"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        GetResourcePolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetResourceShareAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetResourceShareInvitations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetResourceShares: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPendingInvitationResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPermissionAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPermissionVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPermissions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPrincipals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListReplacePermissionAssociationsWork: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListResourceSharePermissions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListResourceTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["route53resolver"] = {};

AWS.Route53Resolver = AWS.Service.defineService("route53resolver", [ "2018-04-01" ]);

AWS.apiLoader.services["route53resolver"]["2018-04-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-01",
        endpointPrefix: "route53resolver",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Route53Resolver",
        serviceFullName: "Amazon Route 53 Resolver",
        serviceId: "Route53Resolver",
        signatureVersion: "v4",
        targetPrefix: "Route53Resolver",
        uid: "route53resolver-2018-04-01"
    },
    operations: {
        AssociateFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "FirewallRuleGroupId", "VpcId", "Priority", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    FirewallRuleGroupId: {},
                    VpcId: {},
                    Priority: {
                        type: "integer"
                    },
                    Name: {},
                    MutationProtection: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        AssociateResolverEndpointIpAddress: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId", "IpAddress" ],
                members: {
                    ResolverEndpointId: {},
                    IpAddress: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "So"
                    }
                }
            }
        },
        AssociateResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId", "ResourceId" ],
                members: {
                    ResolverQueryLogConfigId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigAssociation: {
                        shape: "Sy"
                    }
                }
            }
        },
        AssociateResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId", "VPCId" ],
                members: {
                    ResolverRuleId: {},
                    Name: {},
                    VPCId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRuleAssociation: {
                        shape: "S14"
                    }
                }
            }
        },
        CreateFirewallDomainList: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallDomainList: {
                        shape: "S18"
                    }
                }
            }
        },
        CreateFirewallRule: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "FirewallRuleGroupId", "FirewallDomainListId", "Priority", "Action", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    FirewallRuleGroupId: {},
                    FirewallDomainListId: {},
                    Priority: {
                        type: "integer"
                    },
                    Action: {},
                    BlockResponse: {},
                    BlockOverrideDomain: {},
                    BlockOverrideDnsType: {},
                    BlockOverrideTtl: {
                        type: "integer"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRule: {
                        shape: "S1i"
                    }
                }
            }
        },
        CreateFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "Name" ],
                members: {
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Name: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroup: {
                        shape: "S1l"
                    }
                }
            }
        },
        CreateOutpostResolver: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "Name", "PreferredInstanceType", "OutpostArn" ],
                members: {
                    CreatorRequestId: {},
                    Name: {},
                    InstanceCount: {
                        type: "integer"
                    },
                    PreferredInstanceType: {},
                    OutpostArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OutpostResolver: {
                        shape: "S1t"
                    }
                }
            }
        },
        CreateResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "SecurityGroupIds", "Direction", "IpAddresses" ],
                members: {
                    CreatorRequestId: {},
                    Name: {},
                    SecurityGroupIds: {
                        shape: "Sp"
                    },
                    Direction: {},
                    IpAddresses: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SubnetId" ],
                            members: {
                                SubnetId: {},
                                Ip: {},
                                Ipv6: {}
                            }
                        }
                    },
                    Tags: {
                        shape: "S7"
                    },
                    ResolverEndpointType: {},
                    OutpostArn: {},
                    PreferredInstanceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "So"
                    }
                }
            }
        },
        CreateResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "Name", "DestinationArn", "CreatorRequestId" ],
                members: {
                    Name: {},
                    DestinationArn: {},
                    CreatorRequestId: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfig: {
                        shape: "S24"
                    }
                }
            }
        },
        CreateResolverRule: {
            input: {
                type: "structure",
                required: [ "CreatorRequestId", "RuleType", "DomainName" ],
                members: {
                    CreatorRequestId: {},
                    Name: {},
                    RuleType: {},
                    DomainName: {},
                    TargetIps: {
                        shape: "S2a"
                    },
                    ResolverEndpointId: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S2e"
                    }
                }
            }
        },
        DeleteFirewallDomainList: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId" ],
                members: {
                    FirewallDomainListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallDomainList: {
                        shape: "S18"
                    }
                }
            }
        },
        DeleteFirewallRule: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId", "FirewallDomainListId" ],
                members: {
                    FirewallRuleGroupId: {},
                    FirewallDomainListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRule: {
                        shape: "S1i"
                    }
                }
            }
        },
        DeleteFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId" ],
                members: {
                    FirewallRuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroup: {
                        shape: "S1l"
                    }
                }
            }
        },
        DeleteOutpostResolver: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OutpostResolver: {
                        shape: "S1t"
                    }
                }
            }
        },
        DeleteResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "So"
                    }
                }
            }
        },
        DeleteResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId" ],
                members: {
                    ResolverQueryLogConfigId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfig: {
                        shape: "S24"
                    }
                }
            }
        },
        DeleteResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId" ],
                members: {
                    ResolverRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S2e"
                    }
                }
            }
        },
        DisassociateFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupAssociationId" ],
                members: {
                    FirewallRuleGroupAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        DisassociateResolverEndpointIpAddress: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId", "IpAddress" ],
                members: {
                    ResolverEndpointId: {},
                    IpAddress: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "So"
                    }
                }
            }
        },
        DisassociateResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId", "ResourceId" ],
                members: {
                    ResolverQueryLogConfigId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigAssociation: {
                        shape: "Sy"
                    }
                }
            }
        },
        DisassociateResolverRule: {
            input: {
                type: "structure",
                required: [ "VPCId", "ResolverRuleId" ],
                members: {
                    VPCId: {},
                    ResolverRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRuleAssociation: {
                        shape: "S14"
                    }
                }
            }
        },
        GetFirewallConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallConfig: {
                        shape: "S34"
                    }
                }
            }
        },
        GetFirewallDomainList: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId" ],
                members: {
                    FirewallDomainListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallDomainList: {
                        shape: "S18"
                    }
                }
            }
        },
        GetFirewallRuleGroup: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId" ],
                members: {
                    FirewallRuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroup: {
                        shape: "S1l"
                    }
                }
            }
        },
        GetFirewallRuleGroupAssociation: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupAssociationId" ],
                members: {
                    FirewallRuleGroupAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetFirewallRuleGroupPolicy: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupPolicy: {}
                }
            }
        },
        GetOutpostResolver: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OutpostResolver: {
                        shape: "S1t"
                    }
                }
            }
        },
        GetResolverConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverConfig: {
                        shape: "S3j"
                    }
                }
            }
        },
        GetResolverDnssecConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverDNSSECConfig: {
                        shape: "S3n"
                    }
                }
            }
        },
        GetResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "So"
                    }
                }
            }
        },
        GetResolverQueryLogConfig: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigId" ],
                members: {
                    ResolverQueryLogConfigId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfig: {
                        shape: "S24"
                    }
                }
            }
        },
        GetResolverQueryLogConfigAssociation: {
            input: {
                type: "structure",
                required: [ "ResolverQueryLogConfigAssociationId" ],
                members: {
                    ResolverQueryLogConfigAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigAssociation: {
                        shape: "Sy"
                    }
                }
            }
        },
        GetResolverQueryLogConfigPolicy: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverQueryLogConfigPolicy: {}
                }
            }
        },
        GetResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId" ],
                members: {
                    ResolverRuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S2e"
                    }
                }
            }
        },
        GetResolverRuleAssociation: {
            input: {
                type: "structure",
                required: [ "ResolverRuleAssociationId" ],
                members: {
                    ResolverRuleAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRuleAssociation: {
                        shape: "S14"
                    }
                }
            }
        },
        GetResolverRulePolicy: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRulePolicy: {}
                }
            }
        },
        ImportFirewallDomains: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId", "Operation", "DomainFileUrl" ],
                members: {
                    FirewallDomainListId: {},
                    Operation: {},
                    DomainFileUrl: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Status: {},
                    StatusMessage: {}
                }
            }
        },
        ListFirewallConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallConfigs: {
                        type: "list",
                        member: {
                            shape: "S34"
                        }
                    }
                }
            }
        },
        ListFirewallDomainLists: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallDomainLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                CreatorRequestId: {},
                                ManagedOwnerName: {}
                            }
                        }
                    }
                }
            }
        },
        ListFirewallDomains: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId" ],
                members: {
                    FirewallDomainListId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Domains: {
                        shape: "S4m"
                    }
                }
            }
        },
        ListFirewallRuleGroupAssociations: {
            input: {
                type: "structure",
                members: {
                    FirewallRuleGroupId: {},
                    VpcId: {},
                    Priority: {
                        type: "integer"
                    },
                    Status: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallRuleGroupAssociations: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    }
                }
            }
        },
        ListFirewallRuleGroups: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallRuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Arn: {},
                                Name: {},
                                OwnerId: {},
                                CreatorRequestId: {},
                                ShareStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListFirewallRules: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId" ],
                members: {
                    FirewallRuleGroupId: {},
                    Priority: {
                        type: "integer"
                    },
                    Action: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    FirewallRules: {
                        type: "list",
                        member: {
                            shape: "S1i"
                        }
                    }
                }
            }
        },
        ListOutpostResolvers: {
            input: {
                type: "structure",
                members: {
                    OutpostArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OutpostResolvers: {
                        type: "list",
                        member: {
                            shape: "S1t"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResolverConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ResolverConfigs: {
                        type: "list",
                        member: {
                            shape: "S3j"
                        }
                    }
                }
            }
        },
        ListResolverDnssecConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S56"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ResolverDnssecConfigs: {
                        type: "list",
                        member: {
                            shape: "S3n"
                        }
                    }
                }
            }
        },
        ListResolverEndpointIpAddresses: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    IpAddresses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IpId: {},
                                SubnetId: {},
                                Ip: {},
                                Ipv6: {},
                                Status: {},
                                StatusMessage: {},
                                CreationTime: {},
                                ModificationTime: {}
                            }
                        }
                    }
                }
            }
        },
        ListResolverEndpoints: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S56"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResolverEndpoints: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    }
                }
            }
        },
        ListResolverQueryLogConfigAssociations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S56"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    },
                    TotalFilteredCount: {
                        type: "integer"
                    },
                    ResolverQueryLogConfigAssociations: {
                        type: "list",
                        member: {
                            shape: "Sy"
                        }
                    }
                }
            }
        },
        ListResolverQueryLogConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S56"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TotalCount: {
                        type: "integer"
                    },
                    TotalFilteredCount: {
                        type: "integer"
                    },
                    ResolverQueryLogConfigs: {
                        type: "list",
                        member: {
                            shape: "S24"
                        }
                    }
                }
            }
        },
        ListResolverRuleAssociations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S56"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResolverRuleAssociations: {
                        type: "list",
                        member: {
                            shape: "S14"
                        }
                    }
                }
            }
        },
        ListResolverRules: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S56"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResolverRules: {
                        type: "list",
                        member: {
                            shape: "S2e"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    },
                    NextToken: {}
                }
            }
        },
        PutFirewallRuleGroupPolicy: {
            input: {
                type: "structure",
                required: [ "Arn", "FirewallRuleGroupPolicy" ],
                members: {
                    Arn: {},
                    FirewallRuleGroupPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        PutResolverQueryLogConfigPolicy: {
            input: {
                type: "structure",
                required: [ "Arn", "ResolverQueryLogConfigPolicy" ],
                members: {
                    Arn: {},
                    ResolverQueryLogConfigPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        PutResolverRulePolicy: {
            input: {
                type: "structure",
                required: [ "Arn", "ResolverRulePolicy" ],
                members: {
                    Arn: {},
                    ResolverRulePolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        type: "boolean"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFirewallConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId", "FirewallFailOpen" ],
                members: {
                    ResourceId: {},
                    FirewallFailOpen: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallConfig: {
                        shape: "S34"
                    }
                }
            }
        },
        UpdateFirewallDomains: {
            input: {
                type: "structure",
                required: [ "FirewallDomainListId", "Operation", "Domains" ],
                members: {
                    FirewallDomainListId: {},
                    Operation: {},
                    Domains: {
                        shape: "S4m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    Status: {},
                    StatusMessage: {}
                }
            }
        },
        UpdateFirewallRule: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupId", "FirewallDomainListId" ],
                members: {
                    FirewallRuleGroupId: {},
                    FirewallDomainListId: {},
                    Priority: {
                        type: "integer"
                    },
                    Action: {},
                    BlockResponse: {},
                    BlockOverrideDomain: {},
                    BlockOverrideDnsType: {},
                    BlockOverrideTtl: {
                        type: "integer"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRule: {
                        shape: "S1i"
                    }
                }
            }
        },
        UpdateFirewallRuleGroupAssociation: {
            input: {
                type: "structure",
                required: [ "FirewallRuleGroupAssociationId" ],
                members: {
                    FirewallRuleGroupAssociationId: {},
                    Priority: {
                        type: "integer"
                    },
                    MutationProtection: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FirewallRuleGroupAssociation: {
                        shape: "Sc"
                    }
                }
            }
        },
        UpdateOutpostResolver: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    Name: {},
                    InstanceCount: {
                        type: "integer"
                    },
                    PreferredInstanceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OutpostResolver: {
                        shape: "S1t"
                    }
                }
            }
        },
        UpdateResolverConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId", "AutodefinedReverseFlag" ],
                members: {
                    ResourceId: {},
                    AutodefinedReverseFlag: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverConfig: {
                        shape: "S3j"
                    }
                }
            }
        },
        UpdateResolverDnssecConfig: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Validation" ],
                members: {
                    ResourceId: {},
                    Validation: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverDNSSECConfig: {
                        shape: "S3n"
                    }
                }
            }
        },
        UpdateResolverEndpoint: {
            input: {
                type: "structure",
                required: [ "ResolverEndpointId" ],
                members: {
                    ResolverEndpointId: {},
                    Name: {},
                    ResolverEndpointType: {},
                    UpdateIpAddresses: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "IpId", "Ipv6" ],
                            members: {
                                IpId: {},
                                Ipv6: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverEndpoint: {
                        shape: "So"
                    }
                }
            }
        },
        UpdateResolverRule: {
            input: {
                type: "structure",
                required: [ "ResolverRuleId", "Config" ],
                members: {
                    ResolverRuleId: {},
                    Config: {
                        type: "structure",
                        members: {
                            Name: {},
                            TargetIps: {
                                shape: "S2a"
                            },
                            ResolverEndpointId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResolverRule: {
                        shape: "S2e"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sc: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                FirewallRuleGroupId: {},
                VpcId: {},
                Name: {},
                Priority: {
                    type: "integer"
                },
                MutationProtection: {},
                ManagedOwnerName: {},
                Status: {},
                StatusMessage: {},
                CreatorRequestId: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                IpId: {},
                SubnetId: {},
                Ip: {},
                Ipv6: {}
            }
        },
        So: {
            type: "structure",
            members: {
                Id: {},
                CreatorRequestId: {},
                Arn: {},
                Name: {},
                SecurityGroupIds: {
                    shape: "Sp"
                },
                Direction: {},
                IpAddressCount: {
                    type: "integer"
                },
                HostVPCId: {},
                Status: {},
                StatusMessage: {},
                CreationTime: {},
                ModificationTime: {},
                ResolverEndpointType: {},
                OutpostArn: {},
                PreferredInstanceType: {}
            }
        },
        Sp: {
            type: "list",
            member: {}
        },
        Sy: {
            type: "structure",
            members: {
                Id: {},
                ResolverQueryLogConfigId: {},
                ResourceId: {},
                Status: {},
                Error: {},
                ErrorMessage: {},
                CreationTime: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                Id: {},
                ResolverRuleId: {},
                Name: {},
                VPCId: {},
                Status: {},
                StatusMessage: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                DomainCount: {
                    type: "integer"
                },
                Status: {},
                StatusMessage: {},
                ManagedOwnerName: {},
                CreatorRequestId: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S1i: {
            type: "structure",
            members: {
                FirewallRuleGroupId: {},
                FirewallDomainListId: {},
                Name: {},
                Priority: {
                    type: "integer"
                },
                Action: {},
                BlockResponse: {},
                BlockOverrideDomain: {},
                BlockOverrideDnsType: {},
                BlockOverrideTtl: {
                    type: "integer"
                },
                CreatorRequestId: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S1l: {
            type: "structure",
            members: {
                Id: {},
                Arn: {},
                Name: {},
                RuleCount: {
                    type: "integer"
                },
                Status: {},
                StatusMessage: {},
                OwnerId: {},
                CreatorRequestId: {},
                ShareStatus: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S1t: {
            type: "structure",
            members: {
                Arn: {},
                CreationTime: {},
                ModificationTime: {},
                CreatorRequestId: {},
                Id: {},
                InstanceCount: {
                    type: "integer"
                },
                PreferredInstanceType: {},
                Name: {},
                Status: {},
                StatusMessage: {},
                OutpostArn: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                Id: {},
                OwnerId: {},
                Status: {},
                ShareStatus: {},
                AssociationCount: {
                    type: "integer"
                },
                Arn: {},
                Name: {},
                DestinationArn: {},
                CreatorRequestId: {},
                CreationTime: {}
            }
        },
        S2a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Ip: {},
                    Port: {
                        type: "integer"
                    },
                    Ipv6: {}
                }
            }
        },
        S2e: {
            type: "structure",
            members: {
                Id: {},
                CreatorRequestId: {},
                Arn: {},
                DomainName: {},
                Status: {},
                StatusMessage: {},
                RuleType: {},
                Name: {},
                TargetIps: {
                    shape: "S2a"
                },
                ResolverEndpointId: {},
                OwnerId: {},
                ShareStatus: {},
                CreationTime: {},
                ModificationTime: {}
            }
        },
        S34: {
            type: "structure",
            members: {
                Id: {},
                ResourceId: {},
                OwnerId: {},
                FirewallFailOpen: {}
            }
        },
        S3j: {
            type: "structure",
            members: {
                Id: {},
                ResourceId: {},
                OwnerId: {},
                AutodefinedReverse: {}
            }
        },
        S3n: {
            type: "structure",
            members: {
                Id: {},
                OwnerId: {},
                ResourceId: {},
                ValidationStatus: {}
            }
        },
        S4m: {
            type: "list",
            member: {}
        },
        S56: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListFirewallConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallConfigs"
        },
        ListFirewallDomainLists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallDomainLists"
        },
        ListFirewallDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Domains"
        },
        ListFirewallRuleGroupAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallRuleGroupAssociations"
        },
        ListFirewallRuleGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallRuleGroups"
        },
        ListFirewallRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FirewallRules"
        },
        ListOutpostResolvers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "OutpostResolvers"
        },
        ListResolverConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverConfigs"
        },
        ListResolverDnssecConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverDnssecConfigs"
        },
        ListResolverEndpointIpAddresses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "IpAddresses"
        },
        ListResolverEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverEndpoints"
        },
        ListResolverQueryLogConfigAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverQueryLogConfigAssociations"
        },
        ListResolverQueryLogConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverQueryLogConfigs"
        },
        ListResolverRuleAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverRuleAssociations"
        },
        ListResolverRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResolverRules"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        }
    }
};

AWS.apiLoader.services["pinpointsmsvoice"] = {};

AWS.PinpointSMSVoice = AWS.Service.defineService("pinpointsmsvoice", [ "2018-09-05" ]);

AWS.apiLoader.services["pinpointsmsvoice"]["2018-09-05"] = {
    metadata: {
        apiVersion: "2018-09-05",
        endpointPrefix: "sms-voice.pinpoint",
        signingName: "sms-voice",
        serviceAbbreviation: "Pinpoint SMS Voice",
        serviceFullName: "Amazon Pinpoint SMS and Voice Service",
        serviceId: "Pinpoint SMS Voice",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "pinpoint-sms-voice-2018-09-05",
        signatureVersion: "v4"
    },
    operations: {
        CreateConfigurationSet: {
            http: {
                requestUri: "/v1/sms-voice/configuration-sets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetEventDestination: {
            http: {
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestination: {
                        shape: "S6"
                    },
                    EventDestinationName: {}
                },
                required: [ "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSet: {
            http: {
                method: "DELETE",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                },
                required: [ "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetEventDestination: {
            http: {
                method: "DELETE",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                },
                required: [ "EventDestinationName", "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetConfigurationSetEventDestinations: {
            http: {
                method: "GET",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    }
                },
                required: [ "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {
                    EventDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CloudWatchLogsDestination: {
                                    shape: "S7"
                                },
                                Enabled: {
                                    type: "boolean"
                                },
                                KinesisFirehoseDestination: {
                                    shape: "Sa"
                                },
                                MatchingEventTypes: {
                                    shape: "Sb"
                                },
                                Name: {},
                                SnsDestination: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListConfigurationSets: {
            http: {
                method: "GET",
                requestUri: "/v1/sms-voice/configuration-sets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    PageSize: {
                        location: "querystring",
                        locationName: "PageSize"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        SendVoiceMessage: {
            http: {
                requestUri: "/v1/sms-voice/voice/message",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CallerId: {},
                    ConfigurationSetName: {},
                    Content: {
                        type: "structure",
                        members: {
                            CallInstructionsMessage: {
                                type: "structure",
                                members: {
                                    Text: {}
                                },
                                required: []
                            },
                            PlainTextMessage: {
                                type: "structure",
                                members: {
                                    LanguageCode: {},
                                    Text: {},
                                    VoiceId: {}
                                },
                                required: []
                            },
                            SSMLMessage: {
                                type: "structure",
                                members: {
                                    LanguageCode: {},
                                    Text: {},
                                    VoiceId: {}
                                },
                                required: []
                            }
                        }
                    },
                    DestinationPhoneNumber: {},
                    OriginationPhoneNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        UpdateConfigurationSetEventDestination: {
            http: {
                method: "PUT",
                requestUri: "/v1/sms-voice/configuration-sets/{ConfigurationSetName}/event-destinations/{EventDestinationName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationSetName: {
                        location: "uri",
                        locationName: "ConfigurationSetName"
                    },
                    EventDestination: {
                        shape: "S6"
                    },
                    EventDestinationName: {
                        location: "uri",
                        locationName: "EventDestinationName"
                    }
                },
                required: [ "EventDestinationName", "ConfigurationSetName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                CloudWatchLogsDestination: {
                    shape: "S7"
                },
                Enabled: {
                    type: "boolean"
                },
                KinesisFirehoseDestination: {
                    shape: "Sa"
                },
                MatchingEventTypes: {
                    shape: "Sb"
                },
                SnsDestination: {
                    shape: "Sd"
                }
            },
            required: []
        },
        S7: {
            type: "structure",
            members: {
                IamRoleArn: {},
                LogGroupArn: {}
            },
            required: []
        },
        Sa: {
            type: "structure",
            members: {
                DeliveryStreamArn: {},
                IamRoleArn: {}
            },
            required: []
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "structure",
            members: {
                TopicArn: {}
            },
            required: []
        }
    }
};

AWS.apiLoader.services["quicksight"] = {};

AWS.QuickSight = AWS.Service.defineService("quicksight", [ "2018-04-01" ]);

AWS.apiLoader.services["quicksight"]["2018-04-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-01",
        endpointPrefix: "quicksight",
        jsonVersion: "1.0",
        protocol: "rest-json",
        serviceFullName: "Amazon QuickSight",
        serviceId: "QuickSight",
        signatureVersion: "v4",
        uid: "quicksight-2018-04-01"
    },
    operations: {
        CancelIngestion: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "IngestionId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    IngestionId: {
                        location: "uri",
                        locationName: "IngestionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    IngestionId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateAccountCustomization: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AccountCustomization" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AwsAccountId: {},
                    Namespace: {},
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateAccountSubscription: {
            http: {
                requestUri: "/account/{AwsAccountId}"
            },
            input: {
                type: "structure",
                required: [ "Edition", "AuthenticationMethod", "AwsAccountId", "AccountName", "NotificationEmail" ],
                members: {
                    Edition: {},
                    AuthenticationMethod: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AccountName: {},
                    NotificationEmail: {},
                    ActiveDirectoryName: {},
                    Realm: {},
                    DirectoryId: {},
                    AdminGroup: {
                        shape: "Sk"
                    },
                    AuthorGroup: {
                        shape: "Sk"
                    },
                    ReaderGroup: {
                        shape: "Sk"
                    },
                    FirstName: {},
                    LastName: {},
                    EmailAddress: {},
                    ContactNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SignupResponse: {
                        type: "structure",
                        members: {
                            IAMUser: {
                                type: "boolean"
                            },
                            userLoginName: {},
                            accountName: {},
                            directoryType: {}
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateAnalysis: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId", "Name" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    Name: {},
                    Parameters: {
                        shape: "Sr"
                    },
                    Permissions: {
                        shape: "S19"
                    },
                    SourceEntity: {
                        shape: "S1d"
                    },
                    ThemeArn: {},
                    Tags: {
                        shape: "Sb"
                    },
                    Definition: {
                        shape: "S1h"
                    },
                    ValidationStrategy: {
                        shape: "Sm5"
                    },
                    FolderArns: {
                        shape: "Sm7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AnalysisId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateDashboard: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "Name" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    Name: {},
                    Parameters: {
                        shape: "Sr"
                    },
                    Permissions: {
                        shape: "S19"
                    },
                    SourceEntity: {
                        shape: "Smc"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    VersionDescription: {},
                    DashboardPublishOptions: {
                        shape: "Smf"
                    },
                    ThemeArn: {},
                    Definition: {
                        shape: "Smu"
                    },
                    ValidationStrategy: {
                        shape: "Sm5"
                    },
                    FolderArns: {
                        shape: "Sm7"
                    },
                    LinkSharingConfiguration: {
                        shape: "Smv"
                    },
                    LinkEntities: {
                        shape: "Smw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    DashboardId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateDataSet: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sets"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "Name", "PhysicalTableMap", "ImportMode" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {},
                    Name: {},
                    PhysicalTableMap: {
                        shape: "Sn2"
                    },
                    LogicalTableMap: {
                        shape: "Snm"
                    },
                    ImportMode: {},
                    ColumnGroups: {
                        shape: "Sot"
                    },
                    FieldFolders: {
                        shape: "Soz"
                    },
                    Permissions: {
                        shape: "S19"
                    },
                    RowLevelPermissionDataSet: {
                        shape: "Sp4"
                    },
                    RowLevelPermissionTagConfiguration: {
                        shape: "Sp8"
                    },
                    ColumnLevelPermissionRules: {
                        shape: "Spg"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    DataSetUsageConfiguration: {
                        shape: "Spk"
                    },
                    DatasetParameters: {
                        shape: "Spl"
                    },
                    FolderArns: {
                        shape: "Sm7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    IngestionArn: {},
                    IngestionId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateDataSource: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sources"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId", "Name", "Type" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {},
                    Name: {},
                    Type: {},
                    DataSourceParameters: {
                        shape: "Sq0"
                    },
                    Credentials: {
                        shape: "Srh"
                    },
                    Permissions: {
                        shape: "S19"
                    },
                    VpcConnectionProperties: {
                        shape: "Sro"
                    },
                    SslProperties: {
                        shape: "Srp"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    FolderArns: {
                        shape: "Sm7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSourceId: {},
                    CreationStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateFolder: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Name: {},
                    FolderType: {},
                    ParentFolderArn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    SharingModel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    FolderId: {},
                    RequestId: {}
                }
            }
        },
        CreateFolderMembership: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId", "MemberId", "MemberType" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "MemberId"
                    },
                    MemberType: {
                        location: "uri",
                        locationName: "MemberType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "integer"
                    },
                    FolderMember: {
                        type: "structure",
                        members: {
                            MemberId: {},
                            MemberType: {}
                        }
                    },
                    RequestId: {}
                }
            }
        },
        CreateGroup: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {},
                    Description: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Ss5"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateGroupMembership: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}"
            },
            input: {
                type: "structure",
                required: [ "MemberName", "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    MemberName: {
                        location: "uri",
                        locationName: "MemberName"
                    },
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupMember: {
                        shape: "Ss9"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateIAMPolicyAssignment: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "AssignmentStatus", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {},
                    AssignmentStatus: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "Ssd"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignmentName: {},
                    AssignmentId: {},
                    AssignmentStatus: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "Ssd"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateIngestion: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}"
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "IngestionId", "AwsAccountId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    IngestionId: {
                        location: "uri",
                        locationName: "IngestionId"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    IngestionType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    IngestionId: {},
                    IngestionStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateNamespace: {
            http: {
                requestUri: "/accounts/{AwsAccountId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace", "IdentityStore" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {},
                    IdentityStore: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    CapacityRegion: {},
                    CreationStatus: {},
                    IdentityStore: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateRefreshSchedule: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules"
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "AwsAccountId", "Schedule" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Schedule: {
                        shape: "Ssq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    ScheduleId: {},
                    Arn: {}
                }
            }
        },
        CreateRoleMembership: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/members/{MemberName}"
            },
            input: {
                type: "structure",
                required: [ "MemberName", "AwsAccountId", "Namespace", "Role" ],
                members: {
                    MemberName: {
                        location: "uri",
                        locationName: "MemberName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    Role: {
                        location: "uri",
                        locationName: "Role"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateTemplate: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    Name: {},
                    Permissions: {
                        shape: "S19"
                    },
                    SourceEntity: {
                        shape: "St2"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    VersionDescription: {},
                    Definition: {
                        shape: "St5"
                    },
                    ValidationStrategy: {
                        shape: "Sm5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    TemplateId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateTemplateAlias: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName", "TemplateVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    TemplateVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAlias: {
                        shape: "Stk"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateTheme: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "Name", "BaseThemeId", "Configuration" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    Name: {},
                    BaseThemeId: {},
                    VersionDescription: {},
                    Configuration: {
                        shape: "Stn"
                    },
                    Permissions: {
                        shape: "S19"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    ThemeId: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateThemeAlias: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName", "ThemeVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    ThemeVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAlias: {
                        shape: "Su3"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateTopic: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/topics"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId", "Topic" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {},
                    Topic: {
                        shape: "Su6"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    TopicId: {},
                    RefreshArn: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        CreateTopicRefreshSchedule: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}/schedules"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId", "DatasetArn", "RefreshSchedule" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    },
                    DatasetArn: {},
                    DatasetName: {},
                    RefreshSchedule: {
                        shape: "Svu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicId: {},
                    TopicArn: {},
                    DatasetArn: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        CreateVPCConnection: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/vpc-connections"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "VPCConnectionId", "Name", "SubnetIds", "SecurityGroupIds", "RoleArn" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    VPCConnectionId: {},
                    Name: {},
                    SubnetIds: {
                        shape: "Svz"
                    },
                    SecurityGroupIds: {
                        shape: "Sw1"
                    },
                    DnsResolvers: {
                        shape: "Sw3"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VPCConnectionId: {},
                    CreationStatus: {},
                    AvailabilityStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteAccountCustomization: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteAccountSubscription: {
            http: {
                method: "DELETE",
                requestUri: "/account/{AwsAccountId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteAnalysis: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    RecoveryWindowInDays: {
                        location: "querystring",
                        locationName: "recovery-window-in-days",
                        type: "long"
                    },
                    ForceDeleteWithoutRecovery: {
                        location: "querystring",
                        locationName: "force-delete-without-recovery",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    AnalysisId: {},
                    DeletionTime: {
                        type: "timestamp"
                    },
                    RequestId: {}
                }
            }
        },
        DeleteDashboard: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    DashboardId: {},
                    RequestId: {}
                }
            }
        },
        DeleteDataSet: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteDataSetRefreshProperties: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteDataSource: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSourceId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteFolder: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    FolderId: {},
                    RequestId: {}
                }
            }
        },
        DeleteFolderMembership: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/members/{MemberType}/{MemberId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId", "MemberId", "MemberType" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    MemberId: {
                        location: "uri",
                        locationName: "MemberId"
                    },
                    MemberType: {
                        location: "uri",
                        locationName: "MemberType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DeleteGroup: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteGroupMembership: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}"
            },
            input: {
                type: "structure",
                required: [ "MemberName", "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    MemberName: {
                        location: "uri",
                        locationName: "MemberName"
                    },
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteIAMPolicyAssignment: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespace/{Namespace}/iam-policy-assignments/{AssignmentName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {
                        location: "uri",
                        locationName: "AssignmentName"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignmentName: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteIdentityPropagationConfig: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/identity-propagation-config/{Service}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Service" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Service: {
                        location: "uri",
                        locationName: "Service"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteNamespace: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteRefreshSchedule: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules/{ScheduleId}"
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "AwsAccountId", "ScheduleId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ScheduleId: {
                        location: "uri",
                        locationName: "ScheduleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    ScheduleId: {},
                    Arn: {}
                }
            }
        },
        DeleteRoleCustomPermission: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/custom-permission"
            },
            input: {
                type: "structure",
                required: [ "Role", "AwsAccountId", "Namespace" ],
                members: {
                    Role: {
                        location: "uri",
                        locationName: "Role"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        type: "integer"
                    }
                }
            }
        },
        DeleteRoleMembership: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/members/{MemberName}"
            },
            input: {
                type: "structure",
                required: [ "MemberName", "Role", "AwsAccountId", "Namespace" ],
                members: {
                    MemberName: {
                        location: "uri",
                        locationName: "MemberName"
                    },
                    Role: {
                        location: "uri",
                        locationName: "Role"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Arn: {},
                    TemplateId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteTemplateAlias: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    TemplateId: {},
                    AliasName: {},
                    Arn: {},
                    RequestId: {}
                }
            }
        },
        DeleteTheme: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    ThemeId: {}
                }
            }
        },
        DeleteThemeAlias: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AliasName: {},
                    Arn: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    ThemeId: {}
                }
            }
        },
        DeleteTopic: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    TopicId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteTopicRefreshSchedule: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}/schedules/{DatasetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId", "DatasetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    },
                    DatasetId: {
                        location: "uri",
                        locationName: "DatasetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicId: {},
                    TopicArn: {},
                    DatasetArn: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteUserByPrincipalId: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/user-principals/{PrincipalId}"
            },
            input: {
                type: "structure",
                required: [ "PrincipalId", "AwsAccountId", "Namespace" ],
                members: {
                    PrincipalId: {
                        location: "uri",
                        locationName: "PrincipalId"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DeleteVPCConnection: {
            http: {
                method: "DELETE",
                requestUri: "/accounts/{AwsAccountId}/vpc-connections/{VPCConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "VPCConnectionId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    VPCConnectionId: {
                        location: "uri",
                        locationName: "VPCConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VPCConnectionId: {},
                    DeletionStatus: {},
                    AvailabilityStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeAccountCustomization: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    Resolved: {
                        location: "querystring",
                        locationName: "resolved",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AwsAccountId: {},
                    Namespace: {},
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeAccountSettings: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/settings"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountSettings: {
                        type: "structure",
                        members: {
                            AccountName: {},
                            Edition: {},
                            DefaultNamespace: {},
                            NotificationEmail: {},
                            PublicSharingEnabled: {
                                type: "boolean"
                            },
                            TerminationProtectionEnabled: {
                                type: "boolean"
                            }
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeAccountSubscription: {
            http: {
                method: "GET",
                requestUri: "/account/{AwsAccountId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountInfo: {
                        type: "structure",
                        members: {
                            AccountName: {},
                            Edition: {},
                            NotificationEmail: {},
                            AuthenticationType: {},
                            AccountSubscriptionStatus: {},
                            IAMIdentityCenterInstanceArn: {}
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeAnalysis: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Analysis: {
                        type: "structure",
                        members: {
                            AnalysisId: {},
                            Arn: {},
                            Name: {},
                            Status: {},
                            Errors: {
                                shape: "Sy4"
                            },
                            DataSetArns: {
                                shape: "Sy9"
                            },
                            ThemeArn: {},
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            Sheets: {
                                shape: "Sya"
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeAnalysisDefinition: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}/definition"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisId: {},
                    Name: {},
                    Errors: {
                        shape: "Sy4"
                    },
                    ResourceStatus: {},
                    ThemeArn: {},
                    Definition: {
                        shape: "S1h"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeAnalysisPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisId: {},
                    AnalysisArn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeAssetBundleExportJob: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/asset-bundle-export-jobs/{AssetBundleExportJobId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssetBundleExportJobId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssetBundleExportJobId: {
                        location: "uri",
                        locationName: "AssetBundleExportJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    DownloadUrl: {
                        shape: "Syj"
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Type: {},
                                Message: {}
                            }
                        }
                    },
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    AssetBundleExportJobId: {},
                    AwsAccountId: {},
                    ResourceArns: {
                        shape: "Sym"
                    },
                    IncludeAllDependencies: {
                        type: "boolean"
                    },
                    ExportFormat: {},
                    CloudFormationOverridePropertyConfiguration: {
                        shape: "Syo"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    IncludePermissions: {
                        type: "boolean"
                    },
                    IncludeTags: {
                        type: "boolean"
                    },
                    ValidationStrategy: {
                        shape: "Szi"
                    },
                    Warnings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeAssetBundleImportJob: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/asset-bundle-import-jobs/{AssetBundleImportJobId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssetBundleImportJobId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssetBundleImportJobId: {
                        location: "uri",
                        locationName: "AssetBundleImportJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobStatus: {},
                    Errors: {
                        shape: "Szo"
                    },
                    RollbackErrors: {
                        shape: "Szo"
                    },
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    AssetBundleImportJobId: {},
                    AwsAccountId: {},
                    AssetBundleImportSource: {
                        type: "structure",
                        members: {
                            Body: {
                                shape: "Syj"
                            },
                            S3Uri: {}
                        }
                    },
                    OverrideParameters: {
                        shape: "Szs"
                    },
                    FailureAction: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    OverridePermissions: {
                        shape: "S10b"
                    },
                    OverrideTags: {
                        shape: "S10r"
                    },
                    OverrideValidationStrategy: {
                        shape: "S114"
                    }
                }
            }
        },
        DescribeDashboard: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Dashboard: {
                        type: "structure",
                        members: {
                            DashboardId: {},
                            Arn: {},
                            Name: {},
                            Version: {
                                type: "structure",
                                members: {
                                    CreatedTime: {
                                        type: "timestamp"
                                    },
                                    Errors: {
                                        shape: "S119"
                                    },
                                    VersionNumber: {
                                        type: "long"
                                    },
                                    Status: {},
                                    Arn: {},
                                    SourceEntityArn: {},
                                    DataSetArns: {
                                        shape: "Sy9"
                                    },
                                    Description: {},
                                    ThemeArn: {},
                                    Sheets: {
                                        shape: "Sya"
                                    }
                                }
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastPublishedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            LinkEntities: {
                                shape: "Smw"
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeDashboardDefinition: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/definition"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardId: {},
                    Errors: {
                        shape: "S119"
                    },
                    Name: {},
                    ResourceStatus: {},
                    ThemeArn: {},
                    Definition: {
                        shape: "Smu"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    DashboardPublishOptions: {
                        shape: "Smf"
                    }
                }
            }
        },
        DescribeDashboardPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardId: {},
                    DashboardArn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    LinkSharingConfiguration: {
                        shape: "Smv"
                    }
                }
            }
        },
        DescribeDashboardSnapshotJob: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/snapshot-jobs/{SnapshotJobId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "SnapshotJobId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    SnapshotJobId: {
                        location: "uri",
                        locationName: "SnapshotJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AwsAccountId: {},
                    DashboardId: {},
                    SnapshotJobId: {},
                    UserConfiguration: {
                        type: "structure",
                        members: {
                            AnonymousUsers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        RowLevelPermissionTagKeys: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SnapshotConfiguration: {
                        shape: "S11m"
                    },
                    Arn: {},
                    JobStatus: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    RequestId: {},
                    Status: {
                        type: "integer"
                    }
                }
            }
        },
        DescribeDashboardSnapshotJobResult: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/snapshot-jobs/{SnapshotJobId}/result"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "SnapshotJobId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    SnapshotJobId: {
                        location: "uri",
                        locationName: "SnapshotJobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    JobStatus: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Result: {
                        type: "structure",
                        members: {
                            AnonymousUsers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        FileGroups: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Files: {
                                                        shape: "S11p"
                                                    },
                                                    S3Results: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                S3DestinationConfiguration: {
                                                                    shape: "S11y"
                                                                },
                                                                S3Uri: {
                                                                    shape: "Syj"
                                                                },
                                                                ErrorInfo: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            ErrorMessage: {},
                                                                            ErrorType: {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ErrorInfo: {
                        type: "structure",
                        members: {
                            ErrorMessage: {},
                            ErrorType: {}
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSet: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSet: {
                        type: "structure",
                        members: {
                            Arn: {},
                            DataSetId: {},
                            Name: {},
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            PhysicalTableMap: {
                                shape: "Sn2"
                            },
                            LogicalTableMap: {
                                shape: "Snm"
                            },
                            OutputColumns: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Description: {},
                                        Type: {},
                                        SubType: {}
                                    }
                                }
                            },
                            ImportMode: {},
                            ConsumedSpiceCapacityInBytes: {
                                type: "long"
                            },
                            ColumnGroups: {
                                shape: "Sot"
                            },
                            FieldFolders: {
                                shape: "Soz"
                            },
                            RowLevelPermissionDataSet: {
                                shape: "Sp4"
                            },
                            RowLevelPermissionTagConfiguration: {
                                shape: "Sp8"
                            },
                            ColumnLevelPermissionRules: {
                                shape: "Spg"
                            },
                            DataSetUsageConfiguration: {
                                shape: "Spk"
                            },
                            DatasetParameters: {
                                shape: "Spl"
                            }
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSetPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetArn: {},
                    DataSetId: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSetRefreshProperties: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    DataSetRefreshProperties: {
                        shape: "S12m"
                    }
                }
            }
        },
        DescribeDataSource: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSource: {
                        shape: "S12u"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeDataSourcePermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceArn: {},
                    DataSourceId: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeFolder: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Folder: {
                        type: "structure",
                        members: {
                            FolderId: {},
                            Arn: {},
                            Name: {},
                            FolderType: {},
                            FolderPath: {
                                type: "list",
                                member: {}
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            SharingModel: {}
                        }
                    },
                    RequestId: {}
                }
            }
        },
        DescribeFolderPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderId: {},
                    Arn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    NextToken: {}
                }
            }
        },
        DescribeFolderResolvedPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/resolved-permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderId: {},
                    Arn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    NextToken: {}
                }
            }
        },
        DescribeGroup: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Ss5"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeGroupMembership: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members/{MemberName}"
            },
            input: {
                type: "structure",
                required: [ "MemberName", "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    MemberName: {
                        location: "uri",
                        locationName: "MemberName"
                    },
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupMember: {
                        shape: "Ss9"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeIAMPolicyAssignment: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {
                        location: "uri",
                        locationName: "AssignmentName"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IAMPolicyAssignment: {
                        type: "structure",
                        members: {
                            AwsAccountId: {},
                            AssignmentId: {},
                            AssignmentName: {},
                            PolicyArn: {},
                            Identities: {
                                shape: "Ssd"
                            },
                            AssignmentStatus: {}
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeIngestion: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions/{IngestionId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "IngestionId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    IngestionId: {
                        location: "uri",
                        locationName: "IngestionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ingestion: {
                        shape: "S13h"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeIpRestriction: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/ip-restriction"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AwsAccountId: {},
                    IpRestrictionRuleMap: {
                        shape: "S13q"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeNamespace: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespace: {
                        shape: "S13v"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeRefreshSchedule: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules/{ScheduleId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "ScheduleId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    ScheduleId: {
                        location: "uri",
                        locationName: "ScheduleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RefreshSchedule: {
                        shape: "Ssq"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    Arn: {}
                }
            }
        },
        DescribeRoleCustomPermission: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/custom-permission"
            },
            input: {
                type: "structure",
                required: [ "Role", "AwsAccountId", "Namespace" ],
                members: {
                    Role: {
                        location: "uri",
                        locationName: "Role"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomPermissionsName: {},
                    RequestId: {},
                    Status: {
                        type: "integer"
                    }
                }
            }
        },
        DescribeTemplate: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Template: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            Version: {
                                type: "structure",
                                members: {
                                    CreatedTime: {
                                        type: "timestamp"
                                    },
                                    Errors: {
                                        shape: "S147"
                                    },
                                    VersionNumber: {
                                        type: "long"
                                    },
                                    Status: {},
                                    DataSetConfigurations: {
                                        shape: "St6"
                                    },
                                    Description: {},
                                    SourceEntityArn: {},
                                    ThemeArn: {},
                                    Sheets: {
                                        shape: "Sya"
                                    }
                                }
                            },
                            TemplateId: {},
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            CreatedTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeTemplateAlias: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAlias: {
                        shape: "Stk"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeTemplateDefinition: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/definition"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    TemplateId: {},
                    Errors: {
                        shape: "S147"
                    },
                    ResourceStatus: {},
                    ThemeArn: {},
                    Definition: {
                        shape: "St5"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeTemplatePermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    TemplateArn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeTheme: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    VersionNumber: {
                        location: "querystring",
                        locationName: "version-number",
                        type: "long"
                    },
                    AliasName: {
                        location: "querystring",
                        locationName: "alias-name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Theme: {
                        type: "structure",
                        members: {
                            Arn: {},
                            Name: {},
                            ThemeId: {},
                            Version: {
                                type: "structure",
                                members: {
                                    VersionNumber: {
                                        type: "long"
                                    },
                                    Arn: {},
                                    Description: {},
                                    BaseThemeId: {},
                                    CreatedTime: {
                                        type: "timestamp"
                                    },
                                    Configuration: {
                                        shape: "Stn"
                                    },
                                    Errors: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Type: {},
                                                Message: {}
                                            }
                                        }
                                    },
                                    Status: {}
                                }
                            },
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            Type: {}
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeThemeAlias: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAlias: {
                        shape: "Su3"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeThemePermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeId: {},
                    ThemeArn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeTopic: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    TopicId: {},
                    Topic: {
                        shape: "Su6"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeTopicPermissions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicId: {},
                    TopicArn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeTopicRefresh: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}/refresh/{RefreshId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId", "RefreshId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    },
                    RefreshId: {
                        location: "uri",
                        locationName: "RefreshId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RefreshDetails: {
                        type: "structure",
                        members: {
                            RefreshArn: {},
                            RefreshId: {},
                            RefreshStatus: {}
                        }
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeTopicRefreshSchedule: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}/schedules/{DatasetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId", "DatasetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    },
                    DatasetId: {
                        location: "uri",
                        locationName: "DatasetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicId: {},
                    TopicArn: {},
                    DatasetArn: {},
                    RefreshSchedule: {
                        shape: "Svu"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        DescribeUser: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S155"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        DescribeVPCConnection: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/vpc-connections/{VPCConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "VPCConnectionId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    VPCConnectionId: {
                        location: "uri",
                        locationName: "VPCConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VPCConnection: {
                        type: "structure",
                        members: {
                            VPCConnectionId: {},
                            Arn: {},
                            Name: {},
                            VPCId: {},
                            SecurityGroupIds: {
                                shape: "Sw1"
                            },
                            DnsResolvers: {
                                shape: "Sun"
                            },
                            Status: {},
                            AvailabilityStatus: {},
                            NetworkInterfaces: {
                                shape: "S15b"
                            },
                            RoleArn: {},
                            CreatedTime: {
                                type: "timestamp"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    RequestId: {},
                    Status: {
                        type: "integer"
                    }
                }
            }
        },
        GenerateEmbedUrlForAnonymousUser: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/embed-url/anonymous-user"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace", "AuthorizedResourceArns", "ExperienceConfiguration" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    SessionLifetimeInMinutes: {
                        type: "long"
                    },
                    Namespace: {},
                    SessionTags: {
                        shape: "S15h"
                    },
                    AuthorizedResourceArns: {
                        type: "list",
                        member: {}
                    },
                    ExperienceConfiguration: {
                        type: "structure",
                        members: {
                            Dashboard: {
                                type: "structure",
                                required: [ "InitialDashboardId" ],
                                members: {
                                    InitialDashboardId: {}
                                }
                            },
                            DashboardVisual: {
                                type: "structure",
                                required: [ "InitialDashboardVisualId" ],
                                members: {
                                    InitialDashboardVisualId: {
                                        shape: "S15n"
                                    }
                                }
                            },
                            QSearchBar: {
                                type: "structure",
                                required: [ "InitialTopicId" ],
                                members: {
                                    InitialTopicId: {}
                                }
                            }
                        }
                    },
                    AllowedDomains: {
                        shape: "Sun"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EmbedUrl", "Status", "RequestId", "AnonymousUserArn" ],
                members: {
                    EmbedUrl: {
                        shape: "S15q"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    AnonymousUserArn: {}
                }
            }
        },
        GenerateEmbedUrlForRegisteredUser: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/embed-url/registered-user"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "UserArn", "ExperienceConfiguration" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    SessionLifetimeInMinutes: {
                        type: "long"
                    },
                    UserArn: {},
                    ExperienceConfiguration: {
                        type: "structure",
                        members: {
                            Dashboard: {
                                type: "structure",
                                required: [ "InitialDashboardId" ],
                                members: {
                                    InitialDashboardId: {},
                                    FeatureConfigurations: {
                                        type: "structure",
                                        members: {
                                            StatePersistence: {
                                                shape: "S15v"
                                            },
                                            Bookmarks: {
                                                type: "structure",
                                                required: [ "Enabled" ],
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            QuickSightConsole: {
                                type: "structure",
                                members: {
                                    InitialPath: {},
                                    FeatureConfigurations: {
                                        type: "structure",
                                        members: {
                                            StatePersistence: {
                                                shape: "S15v"
                                            }
                                        }
                                    }
                                }
                            },
                            QSearchBar: {
                                type: "structure",
                                members: {
                                    InitialTopicId: {}
                                }
                            },
                            DashboardVisual: {
                                type: "structure",
                                required: [ "InitialDashboardVisualId" ],
                                members: {
                                    InitialDashboardVisualId: {
                                        shape: "S15n"
                                    }
                                }
                            }
                        }
                    },
                    AllowedDomains: {
                        shape: "Sun"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EmbedUrl", "Status", "RequestId" ],
                members: {
                    EmbedUrl: {
                        shape: "S15q"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        GetDashboardEmbedUrl: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/embed-url"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "IdentityType" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    IdentityType: {
                        location: "querystring",
                        locationName: "creds-type"
                    },
                    SessionLifetimeInMinutes: {
                        location: "querystring",
                        locationName: "session-lifetime",
                        type: "long"
                    },
                    UndoRedoDisabled: {
                        location: "querystring",
                        locationName: "undo-redo-disabled",
                        type: "boolean"
                    },
                    ResetDisabled: {
                        location: "querystring",
                        locationName: "reset-disabled",
                        type: "boolean"
                    },
                    StatePersistenceEnabled: {
                        location: "querystring",
                        locationName: "state-persistence-enabled",
                        type: "boolean"
                    },
                    UserArn: {
                        location: "querystring",
                        locationName: "user-arn"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    AdditionalDashboardIds: {
                        location: "querystring",
                        locationName: "additional-dashboard-ids",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmbedUrl: {
                        shape: "S15q"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        GetSessionEmbedUrl: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/session-embed-url"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    EntryPoint: {
                        location: "querystring",
                        locationName: "entry-point"
                    },
                    SessionLifetimeInMinutes: {
                        location: "querystring",
                        locationName: "session-lifetime",
                        type: "long"
                    },
                    UserArn: {
                        location: "querystring",
                        locationName: "user-arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EmbedUrl: {
                        shape: "S15q"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListAnalyses: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/analyses"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisSummaryList: {
                        shape: "S16c"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListAssetBundleExportJobs: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/asset-bundle-export-jobs"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssetBundleExportJobSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobStatus: {},
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                AssetBundleExportJobId: {},
                                IncludeAllDependencies: {
                                    type: "boolean"
                                },
                                ExportFormat: {},
                                IncludePermissions: {
                                    type: "boolean"
                                },
                                IncludeTags: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListAssetBundleImportJobs: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/asset-bundle-import-jobs"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssetBundleImportJobSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobStatus: {},
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                AssetBundleImportJobId: {},
                                FailureAction: {}
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListDashboardVersions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                VersionNumber: {
                                    type: "long"
                                },
                                Status: {},
                                SourceEntityArn: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListDashboards: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/dashboards"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardSummaryList: {
                        shape: "S16s"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListDataSets: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetSummaries: {
                        shape: "S16w"
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListDataSources: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sources"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSources: {
                        type: "list",
                        member: {
                            shape: "S12u"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListFolderMembers: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/members"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderMemberList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MemberId: {},
                                MemberArn: {}
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {}
                }
            }
        },
        ListFolders: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/folders"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderSummaryList: {
                        shape: "S177"
                    },
                    NextToken: {},
                    RequestId: {}
                }
            }
        },
        ListGroupMemberships: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}/members"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupMemberList: {
                        type: "list",
                        member: {
                            shape: "Ss9"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListGroups: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupList: {
                        shape: "S17e"
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListIAMPolicyAssignments: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/v2/iam-policy-assignments"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentStatus: {
                        location: "querystring",
                        locationName: "assignment-status"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IAMPolicyAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssignmentName: {},
                                AssignmentStatus: {}
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListIAMPolicyAssignmentsForUser: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/iam-policy-assignments"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "UserName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActiveAssignments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssignmentName: {},
                                PolicyArn: {}
                            }
                        }
                    },
                    RequestId: {},
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListIdentityPropagationConfigs: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/identity-propagation-config"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Service: {},
                                AuthorizedTargets: {
                                    shape: "S17s"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListIngestions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/ingestions"
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "AwsAccountId" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ingestions: {
                        type: "list",
                        member: {
                            shape: "S13h"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListNamespaces: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Namespaces: {
                        type: "list",
                        member: {
                            shape: "S13v"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListRefreshSchedules: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RefreshSchedules: {
                        type: "list",
                        member: {
                            shape: "Ssq"
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListRoleMemberships: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/members"
            },
            input: {
                type: "structure",
                required: [ "Role", "AwsAccountId", "Namespace" ],
                members: {
                    Role: {
                        location: "uri",
                        locationName: "Role"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MembersList: {
                        shape: "Sk"
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/resources/{ResourceArn}/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListTemplateAliases: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-result",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAliasList: {
                        type: "list",
                        member: {
                            shape: "Stk"
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    NextToken: {}
                }
            }
        },
        ListTemplateVersions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/versions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                VersionNumber: {
                                    type: "long"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListTemplates: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/templates"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-result",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                TemplateId: {},
                                Name: {},
                                LatestVersionNumber: {
                                    type: "long"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListThemeAliases: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-result",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAliasList: {
                        type: "list",
                        member: {
                            shape: "Su3"
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    NextToken: {}
                }
            }
        },
        ListThemeVersions: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/versions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VersionNumber: {
                                    type: "long"
                                },
                                Arn: {},
                                Description: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListThemes: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/themes"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {},
                                ThemeId: {},
                                LatestVersionNumber: {
                                    type: "long"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListTopicRefreshSchedules: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}/schedules"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicId: {},
                    TopicArn: {},
                    RefreshSchedules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatasetId: {},
                                DatasetArn: {},
                                DatasetName: {},
                                RefreshSchedule: {
                                    shape: "Svu"
                                }
                            }
                        }
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        ListTopics: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/topics"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicsSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                TopicId: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListUserGroups: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}/groups"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupList: {
                        shape: "S17e"
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserList: {
                        type: "list",
                        member: {
                            shape: "S155"
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        ListVPCConnections: {
            http: {
                method: "GET",
                requestUri: "/accounts/{AwsAccountId}/vpc-connections"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VPCConnectionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VPCConnectionId: {},
                                Arn: {},
                                Name: {},
                                VPCId: {},
                                SecurityGroupIds: {
                                    shape: "Sw1"
                                },
                                DnsResolvers: {
                                    shape: "Sun"
                                },
                                Status: {},
                                AvailabilityStatus: {},
                                NetworkInterfaces: {
                                    shape: "S15b"
                                },
                                RoleArn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        PutDataSetRefreshProperties: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-properties"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "DataSetRefreshProperties" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    DataSetRefreshProperties: {
                        shape: "S12m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        RegisterUser: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users"
            },
            input: {
                type: "structure",
                required: [ "IdentityType", "Email", "UserRole", "AwsAccountId", "Namespace" ],
                members: {
                    IdentityType: {},
                    Email: {},
                    UserRole: {},
                    IamArn: {},
                    SessionName: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    UserName: {},
                    CustomPermissionsName: {},
                    ExternalLoginFederationProviderType: {},
                    CustomFederationProviderUrl: {},
                    ExternalLoginId: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S155"
                    },
                    UserInvitationUrl: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        RestoreAnalysis: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/restore/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    AnalysisId: {},
                    RequestId: {}
                }
            }
        },
        SearchAnalyses: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/analyses"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisSummaryList: {
                        shape: "S16c"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        SearchDashboards: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/dashboards"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Operator" ],
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardSummaryList: {
                        shape: "S16s"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        SearchDataSets: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/data-sets"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Operator", "Name", "Value" ],
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetSummaries: {
                        shape: "S16w"
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        SearchDataSources: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/data-sources"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Operator", "Name", "Value" ],
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                DataSourceId: {},
                                Name: {},
                                Type: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        SearchFolders: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/search/folders"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    FolderSummaryList: {
                        shape: "S177"
                    },
                    NextToken: {},
                    RequestId: {}
                }
            }
        },
        SearchGroups: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups-search"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Namespace", "Filters" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Operator", "Name", "Value" ],
                            members: {
                                Operator: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupList: {
                        shape: "S17e"
                    },
                    NextToken: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        StartAssetBundleExportJob: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/asset-bundle-export-jobs/export"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssetBundleExportJobId", "ResourceArns", "ExportFormat" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssetBundleExportJobId: {},
                    ResourceArns: {
                        shape: "Sym"
                    },
                    IncludeAllDependencies: {
                        type: "boolean"
                    },
                    ExportFormat: {},
                    CloudFormationOverridePropertyConfiguration: {
                        shape: "Syo"
                    },
                    IncludePermissions: {
                        type: "boolean"
                    },
                    IncludeTags: {
                        type: "boolean"
                    },
                    ValidationStrategy: {
                        shape: "Szi"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetBundleExportJobId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        StartAssetBundleImportJob: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/asset-bundle-import-jobs/import"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssetBundleImportJobId", "AssetBundleImportSource" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssetBundleImportJobId: {},
                    AssetBundleImportSource: {
                        type: "structure",
                        members: {
                            Body: {
                                type: "blob",
                                sensitive: true
                            },
                            S3Uri: {}
                        }
                    },
                    OverrideParameters: {
                        shape: "Szs"
                    },
                    FailureAction: {},
                    OverridePermissions: {
                        shape: "S10b"
                    },
                    OverrideTags: {
                        shape: "S10r"
                    },
                    OverrideValidationStrategy: {
                        shape: "S114"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssetBundleImportJobId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        StartDashboardSnapshotJob: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/snapshot-jobs"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "SnapshotJobId", "UserConfiguration", "SnapshotConfiguration" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    SnapshotJobId: {},
                    UserConfiguration: {
                        type: "structure",
                        members: {
                            AnonymousUsers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        RowLevelPermissionTags: {
                                            shape: "S15h"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SnapshotConfiguration: {
                        shape: "S11m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    SnapshotJobId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/resources/{ResourceArn}/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/resources/{ResourceArn}/tags"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "keys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateAccountCustomization: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/customizations"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AccountCustomization" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "querystring",
                        locationName: "namespace"
                    },
                    AccountCustomization: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AwsAccountId: {},
                    Namespace: {},
                    AccountCustomization: {
                        shape: "Sa"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateAccountSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/settings"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DefaultNamespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DefaultNamespace: {},
                    NotificationEmail: {},
                    TerminationProtectionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateAnalysis: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId", "Name" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    Name: {},
                    Parameters: {
                        shape: "Sr"
                    },
                    SourceEntity: {
                        shape: "S1d"
                    },
                    ThemeArn: {},
                    Definition: {
                        shape: "S1h"
                    },
                    ValidationStrategy: {
                        shape: "Sm5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AnalysisId: {},
                    UpdateStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateAnalysisPermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/analyses/{AnalysisId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AnalysisId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AnalysisId: {
                        location: "uri",
                        locationName: "AnalysisId"
                    },
                    GrantPermissions: {
                        shape: "S1b2"
                    },
                    RevokePermissions: {
                        shape: "S1b2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AnalysisArn: {},
                    AnalysisId: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDashboard: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "Name" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    Name: {},
                    SourceEntity: {
                        shape: "Smc"
                    },
                    Parameters: {
                        shape: "Sr"
                    },
                    VersionDescription: {},
                    DashboardPublishOptions: {
                        shape: "Smf"
                    },
                    ThemeArn: {},
                    Definition: {
                        shape: "Smu"
                    },
                    ValidationStrategy: {
                        shape: "Sm5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VersionArn: {},
                    DashboardId: {},
                    CreationStatus: {},
                    Status: {
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateDashboardLinks: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/linked-entities"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "LinkEntities" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    LinkEntities: {
                        shape: "Smw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    DashboardArn: {},
                    LinkEntities: {
                        shape: "Smw"
                    }
                }
            }
        },
        UpdateDashboardPermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    GrantPermissions: {
                        shape: "S1b2"
                    },
                    RevokePermissions: {
                        shape: "S1b2"
                    },
                    GrantLinkPermissions: {
                        shape: "S1b9"
                    },
                    RevokeLinkPermissions: {
                        shape: "S1b9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardArn: {},
                    DashboardId: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    LinkSharingConfiguration: {
                        shape: "Smv"
                    }
                }
            }
        },
        UpdateDashboardPublishedVersion: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/dashboards/{DashboardId}/versions/{VersionNumber}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DashboardId", "VersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DashboardId: {
                        location: "uri",
                        locationName: "DashboardId"
                    },
                    VersionNumber: {
                        location: "uri",
                        locationName: "VersionNumber",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DashboardId: {},
                    DashboardArn: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateDataSet: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId", "Name", "PhysicalTableMap", "ImportMode" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    Name: {},
                    PhysicalTableMap: {
                        shape: "Sn2"
                    },
                    LogicalTableMap: {
                        shape: "Snm"
                    },
                    ImportMode: {},
                    ColumnGroups: {
                        shape: "Sot"
                    },
                    FieldFolders: {
                        shape: "Soz"
                    },
                    RowLevelPermissionDataSet: {
                        shape: "Sp4"
                    },
                    RowLevelPermissionTagConfiguration: {
                        shape: "Sp8"
                    },
                    ColumnLevelPermissionRules: {
                        shape: "Spg"
                    },
                    DataSetUsageConfiguration: {
                        shape: "Spk"
                    },
                    DatasetParameters: {
                        shape: "Spl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    IngestionArn: {},
                    IngestionId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDataSetPermissions: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSetId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    GrantPermissions: {
                        shape: "S19"
                    },
                    RevokePermissions: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSetArn: {},
                    DataSetId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDataSource: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId", "Name" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    },
                    Name: {},
                    DataSourceParameters: {
                        shape: "Sq0"
                    },
                    Credentials: {
                        shape: "Srh"
                    },
                    VpcConnectionProperties: {
                        shape: "Sro"
                    },
                    SslProperties: {
                        shape: "Srp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSourceId: {},
                    UpdateStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateDataSourcePermissions: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/data-sources/{DataSourceId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "DataSourceId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    DataSourceId: {
                        location: "uri",
                        locationName: "DataSourceId"
                    },
                    GrantPermissions: {
                        shape: "S19"
                    },
                    RevokePermissions: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataSourceArn: {},
                    DataSourceId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateFolder: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId", "Name" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    Arn: {},
                    FolderId: {},
                    RequestId: {}
                }
            }
        },
        UpdateFolderPermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/folders/{FolderId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "FolderId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    GrantPermissions: {
                        shape: "S19"
                    },
                    RevokePermissions: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        type: "integer"
                    },
                    Arn: {},
                    FolderId: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateGroup: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/groups/{GroupName}"
            },
            input: {
                type: "structure",
                required: [ "GroupName", "AwsAccountId", "Namespace" ],
                members: {
                    GroupName: {
                        location: "uri",
                        locationName: "GroupName"
                    },
                    Description: {},
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "Ss5"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateIAMPolicyAssignment: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/iam-policy-assignments/{AssignmentName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "AssignmentName", "Namespace" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    AssignmentName: {
                        location: "uri",
                        locationName: "AssignmentName"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    AssignmentStatus: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "Ssd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignmentName: {},
                    AssignmentId: {},
                    PolicyArn: {},
                    Identities: {
                        shape: "Ssd"
                    },
                    AssignmentStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateIdentityPropagationConfig: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/identity-propagation-config/{Service}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "Service" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Service: {
                        location: "uri",
                        locationName: "Service"
                    },
                    AuthorizedTargets: {
                        shape: "S17s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateIpRestriction: {
            http: {
                requestUri: "/accounts/{AwsAccountId}/ip-restriction"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    IpRestrictionRuleMap: {
                        shape: "S13q"
                    },
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AwsAccountId: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdatePublicSharingSettings: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/public-sharing-settings"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    PublicSharingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateRefreshSchedule: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/data-sets/{DataSetId}/refresh-schedules"
            },
            input: {
                type: "structure",
                required: [ "DataSetId", "AwsAccountId", "Schedule" ],
                members: {
                    DataSetId: {
                        location: "uri",
                        locationName: "DataSetId"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Schedule: {
                        shape: "Ssq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {},
                    ScheduleId: {},
                    Arn: {}
                }
            }
        },
        UpdateRoleCustomPermission: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/roles/{Role}/custom-permission"
            },
            input: {
                type: "structure",
                required: [ "CustomPermissionsName", "Role", "AwsAccountId", "Namespace" ],
                members: {
                    CustomPermissionsName: {},
                    Role: {
                        location: "uri",
                        locationName: "Role"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    Status: {
                        type: "integer"
                    }
                }
            }
        },
        UpdateTemplate: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    SourceEntity: {
                        shape: "St2"
                    },
                    VersionDescription: {},
                    Name: {},
                    Definition: {
                        shape: "St5"
                    },
                    ValidationStrategy: {
                        shape: "Sm5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    Arn: {},
                    VersionArn: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateTemplateAlias: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId", "AliasName", "TemplateVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    TemplateVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateAlias: {
                        shape: "Stk"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateTemplatePermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/templates/{TemplateId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TemplateId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TemplateId: {
                        location: "uri",
                        locationName: "TemplateId"
                    },
                    GrantPermissions: {
                        shape: "S1b2"
                    },
                    RevokePermissions: {
                        shape: "S1b2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TemplateId: {},
                    TemplateArn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateTheme: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "BaseThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    Name: {},
                    BaseThemeId: {},
                    VersionDescription: {},
                    Configuration: {
                        shape: "Stn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeId: {},
                    Arn: {},
                    VersionArn: {},
                    CreationStatus: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateThemeAlias: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/aliases/{AliasName}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId", "AliasName", "ThemeVersionNumber" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    AliasName: {
                        location: "uri",
                        locationName: "AliasName"
                    },
                    ThemeVersionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeAlias: {
                        shape: "Su3"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateThemePermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/themes/{ThemeId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "ThemeId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    ThemeId: {
                        location: "uri",
                        locationName: "ThemeId"
                    },
                    GrantPermissions: {
                        shape: "S1b2"
                    },
                    RevokePermissions: {
                        shape: "S1b2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ThemeId: {},
                    ThemeArn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateTopic: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId", "Topic" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    },
                    Topic: {
                        shape: "Su6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicId: {},
                    Arn: {},
                    RefreshArn: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateTopicPermissions: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}/permissions"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    },
                    GrantPermissions: {
                        shape: "S1b2"
                    },
                    RevokePermissions: {
                        shape: "S1b2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicId: {},
                    TopicArn: {},
                    Permissions: {
                        shape: "S19"
                    },
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateTopicRefreshSchedule: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/topics/{TopicId}/schedules/{DatasetId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "TopicId", "DatasetId", "RefreshSchedule" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    TopicId: {
                        location: "uri",
                        locationName: "TopicId"
                    },
                    DatasetId: {
                        location: "uri",
                        locationName: "DatasetId"
                    },
                    RefreshSchedule: {
                        shape: "Svu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicId: {},
                    TopicArn: {},
                    DatasetArn: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    },
                    RequestId: {}
                }
            }
        },
        UpdateUser: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/namespaces/{Namespace}/users/{UserName}"
            },
            input: {
                type: "structure",
                required: [ "UserName", "AwsAccountId", "Namespace", "Email", "Role" ],
                members: {
                    UserName: {
                        location: "uri",
                        locationName: "UserName"
                    },
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    Email: {},
                    Role: {},
                    CustomPermissionsName: {},
                    UnapplyCustomPermissions: {
                        type: "boolean"
                    },
                    ExternalLoginFederationProviderType: {},
                    CustomFederationProviderUrl: {},
                    ExternalLoginId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S155"
                    },
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        },
        UpdateVPCConnection: {
            http: {
                method: "PUT",
                requestUri: "/accounts/{AwsAccountId}/vpc-connections/{VPCConnectionId}"
            },
            input: {
                type: "structure",
                required: [ "AwsAccountId", "VPCConnectionId", "Name", "SubnetIds", "SecurityGroupIds", "RoleArn" ],
                members: {
                    AwsAccountId: {
                        location: "uri",
                        locationName: "AwsAccountId"
                    },
                    VPCConnectionId: {
                        location: "uri",
                        locationName: "VPCConnectionId"
                    },
                    Name: {},
                    SubnetIds: {
                        shape: "Svz"
                    },
                    SecurityGroupIds: {
                        shape: "Sw1"
                    },
                    DnsResolvers: {
                        shape: "Sw3"
                    },
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    VPCConnectionId: {},
                    UpdateStatus: {},
                    AvailabilityStatus: {},
                    RequestId: {},
                    Status: {
                        location: "statusCode",
                        type: "integer"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            members: {
                DefaultTheme: {},
                DefaultEmailCustomizationTemplate: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sk: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "structure",
            members: {
                StringParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                shape: "Sv"
                            }
                        }
                    }
                },
                IntegerParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {
                                    shape: "S10"
                                }
                            }
                        }
                    }
                },
                DecimalParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                },
                DateTimeParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                type: "list",
                                member: {
                                    shape: "S18"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sv: {
            type: "list",
            member: {
                shape: "Sw"
            }
        },
        Sw: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "long",
            sensitive: true
        },
        S14: {
            type: "double",
            sensitive: true
        },
        S18: {
            type: "timestamp",
            sensitive: true
        },
        S19: {
            type: "list",
            member: {
                shape: "S1a"
            }
        },
        S1a: {
            type: "structure",
            required: [ "Principal", "Actions" ],
            members: {
                Principal: {},
                Actions: {
                    shape: "S1c"
                }
            }
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "structure",
            members: {
                SourceTemplate: {
                    type: "structure",
                    required: [ "DataSetReferences", "Arn" ],
                    members: {
                        DataSetReferences: {
                            shape: "S1f"
                        },
                        Arn: {}
                    }
                }
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataSetPlaceholder", "DataSetArn" ],
                members: {
                    DataSetPlaceholder: {},
                    DataSetArn: {}
                }
            }
        },
        S1h: {
            type: "structure",
            required: [ "DataSetIdentifierDeclarations" ],
            members: {
                DataSetIdentifierDeclarations: {
                    shape: "S1i"
                },
                Sheets: {
                    shape: "S1l"
                },
                CalculatedFields: {
                    shape: "Sk2"
                },
                ParameterDeclarations: {
                    shape: "Sk5"
                },
                FilterGroups: {
                    shape: "Skp"
                },
                ColumnConfigurations: {
                    shape: "Slp"
                },
                AnalysisDefaults: {
                    shape: "Slw"
                },
                Options: {
                    shape: "Sm3"
                }
            }
        },
        S1i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Identifier", "DataSetArn" ],
                members: {
                    Identifier: {},
                    DataSetArn: {}
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SheetId" ],
                members: {
                    SheetId: {},
                    Title: {},
                    Description: {},
                    Name: {},
                    ParameterControls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DateTimePicker: {
                                    type: "structure",
                                    required: [ "ParameterControlId", "Title", "SourceParameterName" ],
                                    members: {
                                        ParameterControlId: {},
                                        Title: {},
                                        SourceParameterName: {},
                                        DisplayOptions: {
                                            shape: "S1v"
                                        }
                                    }
                                },
                                List: {
                                    type: "structure",
                                    required: [ "ParameterControlId", "Title", "SourceParameterName" ],
                                    members: {
                                        ParameterControlId: {},
                                        Title: {},
                                        SourceParameterName: {},
                                        DisplayOptions: {
                                            shape: "S2a"
                                        },
                                        Type: {},
                                        SelectableValues: {
                                            shape: "S2e"
                                        },
                                        CascadingControlConfiguration: {
                                            shape: "S2i"
                                        }
                                    }
                                },
                                Dropdown: {
                                    type: "structure",
                                    required: [ "ParameterControlId", "Title", "SourceParameterName" ],
                                    members: {
                                        ParameterControlId: {},
                                        Title: {},
                                        SourceParameterName: {},
                                        DisplayOptions: {
                                            shape: "S2m"
                                        },
                                        Type: {},
                                        SelectableValues: {
                                            shape: "S2e"
                                        },
                                        CascadingControlConfiguration: {
                                            shape: "S2i"
                                        }
                                    }
                                },
                                TextField: {
                                    type: "structure",
                                    required: [ "ParameterControlId", "Title", "SourceParameterName" ],
                                    members: {
                                        ParameterControlId: {},
                                        Title: {},
                                        SourceParameterName: {},
                                        DisplayOptions: {
                                            shape: "S2o"
                                        }
                                    }
                                },
                                TextArea: {
                                    type: "structure",
                                    required: [ "ParameterControlId", "Title", "SourceParameterName" ],
                                    members: {
                                        ParameterControlId: {},
                                        Title: {},
                                        SourceParameterName: {},
                                        Delimiter: {},
                                        DisplayOptions: {
                                            shape: "S2s"
                                        }
                                    }
                                },
                                Slider: {
                                    type: "structure",
                                    required: [ "ParameterControlId", "Title", "SourceParameterName", "MaximumValue", "MinimumValue", "StepSize" ],
                                    members: {
                                        ParameterControlId: {},
                                        Title: {},
                                        SourceParameterName: {},
                                        DisplayOptions: {
                                            shape: "S2u"
                                        },
                                        MaximumValue: {
                                            type: "double"
                                        },
                                        MinimumValue: {
                                            type: "double"
                                        },
                                        StepSize: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    FilterControls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DateTimePicker: {
                                    type: "structure",
                                    required: [ "FilterControlId", "Title", "SourceFilterId" ],
                                    members: {
                                        FilterControlId: {},
                                        Title: {},
                                        SourceFilterId: {},
                                        DisplayOptions: {
                                            shape: "S1v"
                                        },
                                        Type: {}
                                    }
                                },
                                List: {
                                    type: "structure",
                                    required: [ "FilterControlId", "Title", "SourceFilterId" ],
                                    members: {
                                        FilterControlId: {},
                                        Title: {},
                                        SourceFilterId: {},
                                        DisplayOptions: {
                                            shape: "S2a"
                                        },
                                        Type: {},
                                        SelectableValues: {
                                            shape: "S31"
                                        },
                                        CascadingControlConfiguration: {
                                            shape: "S2i"
                                        }
                                    }
                                },
                                Dropdown: {
                                    type: "structure",
                                    required: [ "FilterControlId", "Title", "SourceFilterId" ],
                                    members: {
                                        FilterControlId: {},
                                        Title: {},
                                        SourceFilterId: {},
                                        DisplayOptions: {
                                            shape: "S2m"
                                        },
                                        Type: {},
                                        SelectableValues: {
                                            shape: "S31"
                                        },
                                        CascadingControlConfiguration: {
                                            shape: "S2i"
                                        }
                                    }
                                },
                                TextField: {
                                    type: "structure",
                                    required: [ "FilterControlId", "Title", "SourceFilterId" ],
                                    members: {
                                        FilterControlId: {},
                                        Title: {},
                                        SourceFilterId: {},
                                        DisplayOptions: {
                                            shape: "S2o"
                                        }
                                    }
                                },
                                TextArea: {
                                    type: "structure",
                                    required: [ "FilterControlId", "Title", "SourceFilterId" ],
                                    members: {
                                        FilterControlId: {},
                                        Title: {},
                                        SourceFilterId: {},
                                        Delimiter: {},
                                        DisplayOptions: {
                                            shape: "S2s"
                                        }
                                    }
                                },
                                Slider: {
                                    type: "structure",
                                    required: [ "FilterControlId", "Title", "SourceFilterId", "MaximumValue", "MinimumValue", "StepSize" ],
                                    members: {
                                        FilterControlId: {},
                                        Title: {},
                                        SourceFilterId: {},
                                        DisplayOptions: {
                                            shape: "S2u"
                                        },
                                        Type: {},
                                        MaximumValue: {
                                            type: "double"
                                        },
                                        MinimumValue: {
                                            type: "double"
                                        },
                                        StepSize: {
                                            type: "double"
                                        }
                                    }
                                },
                                RelativeDateTime: {
                                    type: "structure",
                                    required: [ "FilterControlId", "Title", "SourceFilterId" ],
                                    members: {
                                        FilterControlId: {},
                                        Title: {},
                                        SourceFilterId: {},
                                        DisplayOptions: {
                                            type: "structure",
                                            members: {
                                                TitleOptions: {
                                                    shape: "S1w"
                                                },
                                                DateTimeFormat: {},
                                                InfoIconLabelOptions: {
                                                    shape: "S27"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Visuals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TableVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        TableAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                GroupBy: {
                                                                    shape: "S3n"
                                                                },
                                                                Values: {
                                                                    shape: "S4f"
                                                                }
                                                            }
                                                        },
                                                        TableUnaggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Values: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        required: [ "FieldId", "Column" ],
                                                                        members: {
                                                                            FieldId: {},
                                                                            Column: {
                                                                                shape: "S2g"
                                                                            },
                                                                            FormatConfiguration: {
                                                                                shape: "S4v"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        RowSort: {
                                                            type: "list",
                                                            member: {
                                                                shape: "S4y"
                                                            }
                                                        },
                                                        PaginationConfiguration: {
                                                            shape: "S55"
                                                        }
                                                    }
                                                },
                                                TableOptions: {
                                                    type: "structure",
                                                    members: {
                                                        Orientation: {},
                                                        HeaderStyle: {
                                                            shape: "S5a"
                                                        },
                                                        CellStyle: {
                                                            shape: "S5a"
                                                        },
                                                        RowAlternateColorOptions: {
                                                            shape: "S5k"
                                                        }
                                                    }
                                                },
                                                TotalOptions: {
                                                    type: "structure",
                                                    members: {
                                                        TotalsVisibility: {},
                                                        Placement: {},
                                                        ScrollStatus: {},
                                                        CustomLabel: {},
                                                        TotalCellStyle: {
                                                            shape: "S5a"
                                                        },
                                                        TotalAggregationOptions: {
                                                            shape: "S5q"
                                                        }
                                                    }
                                                },
                                                FieldOptions: {
                                                    type: "structure",
                                                    members: {
                                                        SelectedFieldOptions: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                required: [ "FieldId" ],
                                                                members: {
                                                                    FieldId: {},
                                                                    Width: {},
                                                                    CustomLabel: {},
                                                                    Visibility: {},
                                                                    URLStyling: {
                                                                        type: "structure",
                                                                        members: {
                                                                            LinkConfiguration: {
                                                                                type: "structure",
                                                                                required: [ "Target", "Content" ],
                                                                                members: {
                                                                                    Target: {},
                                                                                    Content: {
                                                                                        type: "structure",
                                                                                        members: {
                                                                                            CustomTextContent: {
                                                                                                type: "structure",
                                                                                                required: [ "FontConfiguration" ],
                                                                                                members: {
                                                                                                    Value: {},
                                                                                                    FontConfiguration: {
                                                                                                        shape: "S1y"
                                                                                                    }
                                                                                                }
                                                                                            },
                                                                                            CustomIconContent: {
                                                                                                type: "structure",
                                                                                                members: {
                                                                                                    Icon: {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            },
                                                                            ImageConfiguration: {
                                                                                type: "structure",
                                                                                members: {
                                                                                    SizingOptions: {
                                                                                        type: "structure",
                                                                                        members: {
                                                                                            TableCellImageScalingConfiguration: {}
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Order: {
                                                            type: "list",
                                                            member: {}
                                                        },
                                                        PinnedFieldOptions: {
                                                            type: "structure",
                                                            members: {
                                                                PinnedLeftFields: {
                                                                    type: "list",
                                                                    member: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                PaginatedReportOptions: {
                                                    type: "structure",
                                                    members: {
                                                        VerticalOverflowVisibility: {},
                                                        OverflowColumnHeaderVisibility: {}
                                                    }
                                                },
                                                TableInlineVisualizations: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            DataBars: {
                                                                type: "structure",
                                                                required: [ "FieldId" ],
                                                                members: {
                                                                    FieldId: {},
                                                                    PositiveColor: {},
                                                                    NegativeColor: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        ConditionalFormatting: {
                                            type: "structure",
                                            members: {
                                                ConditionalFormattingOptions: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Cell: {
                                                                type: "structure",
                                                                required: [ "FieldId" ],
                                                                members: {
                                                                    FieldId: {},
                                                                    TextFormat: {
                                                                        shape: "S6k"
                                                                    }
                                                                }
                                                            },
                                                            Row: {
                                                                type: "structure",
                                                                members: {
                                                                    BackgroundColor: {
                                                                        shape: "S6l"
                                                                    },
                                                                    TextColor: {
                                                                        shape: "S6l"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        }
                                    }
                                },
                                PivotTableVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        PivotTableAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Rows: {
                                                                    shape: "S83"
                                                                },
                                                                Columns: {
                                                                    shape: "S83"
                                                                },
                                                                Values: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        FieldSortOptions: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                required: [ "FieldId", "SortBy" ],
                                                                members: {
                                                                    FieldId: {},
                                                                    SortBy: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Field: {
                                                                                shape: "S4z"
                                                                            },
                                                                            Column: {
                                                                                shape: "S51"
                                                                            },
                                                                            DataPath: {
                                                                                type: "structure",
                                                                                required: [ "Direction", "SortPaths" ],
                                                                                members: {
                                                                                    Direction: {},
                                                                                    SortPaths: {
                                                                                        shape: "S8a"
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                TableOptions: {
                                                    type: "structure",
                                                    members: {
                                                        MetricPlacement: {},
                                                        SingleMetricVisibility: {},
                                                        ColumnNamesVisibility: {},
                                                        ToggleButtonsVisibility: {},
                                                        ColumnHeaderStyle: {
                                                            shape: "S5a"
                                                        },
                                                        RowHeaderStyle: {
                                                            shape: "S5a"
                                                        },
                                                        CellStyle: {
                                                            shape: "S5a"
                                                        },
                                                        RowFieldNamesStyle: {
                                                            shape: "S5a"
                                                        },
                                                        RowAlternateColorOptions: {
                                                            shape: "S5k"
                                                        },
                                                        CollapsedRowDimensionsVisibility: {},
                                                        RowsLayout: {},
                                                        RowsLabelOptions: {
                                                            type: "structure",
                                                            members: {
                                                                Visibility: {},
                                                                CustomLabel: {}
                                                            }
                                                        },
                                                        DefaultCellWidth: {}
                                                    }
                                                },
                                                TotalOptions: {
                                                    type: "structure",
                                                    members: {
                                                        RowSubtotalOptions: {
                                                            shape: "S8l"
                                                        },
                                                        ColumnSubtotalOptions: {
                                                            shape: "S8l"
                                                        },
                                                        RowTotalOptions: {
                                                            shape: "S8s"
                                                        },
                                                        ColumnTotalOptions: {
                                                            shape: "S8s"
                                                        }
                                                    }
                                                },
                                                FieldOptions: {
                                                    type: "structure",
                                                    members: {
                                                        SelectedFieldOptions: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                required: [ "FieldId" ],
                                                                members: {
                                                                    FieldId: {},
                                                                    CustomLabel: {},
                                                                    Visibility: {}
                                                                }
                                                            }
                                                        },
                                                        DataPathOptions: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                required: [ "DataPathList" ],
                                                                members: {
                                                                    DataPathList: {
                                                                        shape: "S8a"
                                                                    },
                                                                    Width: {}
                                                                }
                                                            }
                                                        },
                                                        CollapseStateOptions: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                required: [ "Target" ],
                                                                members: {
                                                                    Target: {
                                                                        type: "structure",
                                                                        members: {
                                                                            FieldId: {},
                                                                            FieldDataPathValues: {
                                                                                shape: "S8a"
                                                                            }
                                                                        }
                                                                    },
                                                                    State: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                PaginatedReportOptions: {
                                                    type: "structure",
                                                    members: {
                                                        VerticalOverflowVisibility: {},
                                                        OverflowColumnHeaderVisibility: {}
                                                    }
                                                }
                                            }
                                        },
                                        ConditionalFormatting: {
                                            type: "structure",
                                            members: {
                                                ConditionalFormattingOptions: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Cell: {
                                                                type: "structure",
                                                                required: [ "FieldId" ],
                                                                members: {
                                                                    FieldId: {},
                                                                    TextFormat: {
                                                                        shape: "S6k"
                                                                    },
                                                                    Scope: {
                                                                        shape: "S97"
                                                                    },
                                                                    Scopes: {
                                                                        type: "list",
                                                                        member: {
                                                                            shape: "S97"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        }
                                    }
                                },
                                BarChartVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        BarChartAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Category: {
                                                                    shape: "S3n"
                                                                },
                                                                Values: {
                                                                    shape: "S4f"
                                                                },
                                                                Colors: {
                                                                    shape: "S3n"
                                                                },
                                                                SmallMultiples: {
                                                                    shape: "S9e"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        },
                                                        CategoryItemsLimit: {
                                                            shape: "S9h"
                                                        },
                                                        ColorSort: {
                                                            shape: "S9g"
                                                        },
                                                        ColorItemsLimit: {
                                                            shape: "S9h"
                                                        },
                                                        SmallMultiplesSort: {
                                                            shape: "S9g"
                                                        },
                                                        SmallMultiplesLimitConfiguration: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                Orientation: {},
                                                BarsArrangement: {},
                                                VisualPalette: {
                                                    shape: "S9l"
                                                },
                                                SmallMultiplesOptions: {
                                                    shape: "S9o"
                                                },
                                                CategoryAxis: {
                                                    shape: "S9y"
                                                },
                                                CategoryLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                ValueAxis: {
                                                    shape: "S9y"
                                                },
                                                ValueLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                ColorLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                ReferenceLines: {
                                                    shape: "Sb3"
                                                },
                                                ContributionAnalysisDefaults: {
                                                    shape: "Sbi"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                KPIVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        Values: {
                                                            shape: "S4f"
                                                        },
                                                        TargetValues: {
                                                            shape: "S4f"
                                                        },
                                                        TrendGroups: {
                                                            shape: "S3n"
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        TrendGroupSort: {
                                                            shape: "S9g"
                                                        }
                                                    }
                                                },
                                                KPIOptions: {
                                                    type: "structure",
                                                    members: {
                                                        ProgressBar: {
                                                            type: "structure",
                                                            members: {
                                                                Visibility: {}
                                                            }
                                                        },
                                                        TrendArrows: {
                                                            type: "structure",
                                                            members: {
                                                                Visibility: {}
                                                            }
                                                        },
                                                        SecondaryValue: {
                                                            type: "structure",
                                                            members: {
                                                                Visibility: {}
                                                            }
                                                        },
                                                        Comparison: {
                                                            shape: "Sc8"
                                                        },
                                                        PrimaryValueDisplayType: {},
                                                        PrimaryValueFontConfiguration: {
                                                            shape: "S1y"
                                                        },
                                                        SecondaryValueFontConfiguration: {
                                                            shape: "S1y"
                                                        },
                                                        Sparkline: {
                                                            type: "structure",
                                                            required: [ "Type" ],
                                                            members: {
                                                                Visibility: {},
                                                                Type: {},
                                                                Color: {},
                                                                TooltipVisibility: {}
                                                            }
                                                        },
                                                        VisualLayoutOptions: {
                                                            type: "structure",
                                                            members: {
                                                                StandardLayout: {
                                                                    type: "structure",
                                                                    required: [ "Type" ],
                                                                    members: {
                                                                        Type: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        ConditionalFormatting: {
                                            type: "structure",
                                            members: {
                                                ConditionalFormattingOptions: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            PrimaryValue: {
                                                                type: "structure",
                                                                members: {
                                                                    TextColor: {
                                                                        shape: "S6l"
                                                                    },
                                                                    Icon: {
                                                                        shape: "S6r"
                                                                    }
                                                                }
                                                            },
                                                            ProgressBar: {
                                                                type: "structure",
                                                                members: {
                                                                    ForegroundColor: {
                                                                        shape: "S6l"
                                                                    }
                                                                }
                                                            },
                                                            ActualValue: {
                                                                type: "structure",
                                                                members: {
                                                                    TextColor: {
                                                                        shape: "S6l"
                                                                    },
                                                                    Icon: {
                                                                        shape: "S6r"
                                                                    }
                                                                }
                                                            },
                                                            ComparisonValue: {
                                                                type: "structure",
                                                                members: {
                                                                    TextColor: {
                                                                        shape: "S6l"
                                                                    },
                                                                    Icon: {
                                                                        shape: "S6r"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                PieChartVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        PieChartAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Category: {
                                                                    shape: "S3n"
                                                                },
                                                                Values: {
                                                                    shape: "S4f"
                                                                },
                                                                SmallMultiples: {
                                                                    shape: "S9e"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        },
                                                        CategoryItemsLimit: {
                                                            shape: "S9h"
                                                        },
                                                        SmallMultiplesSort: {
                                                            shape: "S9g"
                                                        },
                                                        SmallMultiplesLimitConfiguration: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                DonutOptions: {
                                                    type: "structure",
                                                    members: {
                                                        ArcOptions: {
                                                            type: "structure",
                                                            members: {
                                                                ArcThickness: {}
                                                            }
                                                        },
                                                        DonutCenterOptions: {
                                                            type: "structure",
                                                            members: {
                                                                LabelVisibility: {}
                                                            }
                                                        }
                                                    }
                                                },
                                                SmallMultiplesOptions: {
                                                    shape: "S9o"
                                                },
                                                CategoryLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                ValueLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                },
                                                ContributionAnalysisDefaults: {
                                                    shape: "Sbi"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                GaugeChartVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        Values: {
                                                            shape: "S4f"
                                                        },
                                                        TargetValues: {
                                                            shape: "S4f"
                                                        }
                                                    }
                                                },
                                                GaugeChartOptions: {
                                                    type: "structure",
                                                    members: {
                                                        PrimaryValueDisplayType: {},
                                                        Comparison: {
                                                            shape: "Sc8"
                                                        },
                                                        ArcAxis: {
                                                            type: "structure",
                                                            members: {
                                                                Range: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Min: {
                                                                            type: "double"
                                                                        },
                                                                        Max: {
                                                                            type: "double"
                                                                        }
                                                                    }
                                                                },
                                                                ReserveRange: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        Arc: {
                                                            type: "structure",
                                                            members: {
                                                                ArcAngle: {
                                                                    type: "double"
                                                                },
                                                                ArcThickness: {}
                                                            }
                                                        },
                                                        PrimaryValueFontConfiguration: {
                                                            shape: "S1y"
                                                        }
                                                    }
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                },
                                                TooltipOptions: {
                                                    shape: "Sav"
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                }
                                            }
                                        },
                                        ConditionalFormatting: {
                                            type: "structure",
                                            members: {
                                                ConditionalFormattingOptions: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            PrimaryValue: {
                                                                type: "structure",
                                                                members: {
                                                                    TextColor: {
                                                                        shape: "S6l"
                                                                    },
                                                                    Icon: {
                                                                        shape: "S6r"
                                                                    }
                                                                }
                                                            },
                                                            Arc: {
                                                                type: "structure",
                                                                members: {
                                                                    ForegroundColor: {
                                                                        shape: "S6l"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        }
                                    }
                                },
                                LineChartVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        LineChartAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Category: {
                                                                    shape: "S3n"
                                                                },
                                                                Values: {
                                                                    shape: "S4f"
                                                                },
                                                                Colors: {
                                                                    shape: "S3n"
                                                                },
                                                                SmallMultiples: {
                                                                    shape: "S9e"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        },
                                                        CategoryItemsLimitConfiguration: {
                                                            shape: "S9h"
                                                        },
                                                        ColorItemsLimitConfiguration: {
                                                            shape: "S9h"
                                                        },
                                                        SmallMultiplesSort: {
                                                            shape: "S9g"
                                                        },
                                                        SmallMultiplesLimitConfiguration: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                ForecastConfigurations: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            ForecastProperties: {
                                                                type: "structure",
                                                                members: {
                                                                    PeriodsForward: {
                                                                        type: "integer"
                                                                    },
                                                                    PeriodsBackward: {
                                                                        type: "integer"
                                                                    },
                                                                    UpperBoundary: {
                                                                        type: "double"
                                                                    },
                                                                    LowerBoundary: {
                                                                        type: "double"
                                                                    },
                                                                    PredictionInterval: {
                                                                        type: "integer"
                                                                    },
                                                                    Seasonality: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            },
                                                            Scenario: {
                                                                type: "structure",
                                                                members: {
                                                                    WhatIfPointScenario: {
                                                                        type: "structure",
                                                                        required: [ "Date", "Value" ],
                                                                        members: {
                                                                            Date: {
                                                                                type: "timestamp"
                                                                            },
                                                                            Value: {
                                                                                type: "double"
                                                                            }
                                                                        }
                                                                    },
                                                                    WhatIfRangeScenario: {
                                                                        type: "structure",
                                                                        required: [ "StartDate", "EndDate", "Value" ],
                                                                        members: {
                                                                            StartDate: {
                                                                                type: "timestamp"
                                                                            },
                                                                            EndDate: {
                                                                                type: "timestamp"
                                                                            },
                                                                            Value: {
                                                                                type: "double"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                Type: {},
                                                SmallMultiplesOptions: {
                                                    shape: "S9o"
                                                },
                                                XAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                XAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                PrimaryYAxisDisplayOptions: {
                                                    shape: "Sdq"
                                                },
                                                PrimaryYAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                SecondaryYAxisDisplayOptions: {
                                                    shape: "Sdq"
                                                },
                                                SecondaryYAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                SingleAxisOptions: {
                                                    shape: "Sdu"
                                                },
                                                DefaultSeriesSettings: {
                                                    type: "structure",
                                                    members: {
                                                        AxisBinding: {},
                                                        LineStyleSettings: {
                                                            shape: "Sdy"
                                                        },
                                                        MarkerStyleSettings: {
                                                            shape: "Se1"
                                                        }
                                                    }
                                                },
                                                Series: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            FieldSeriesItem: {
                                                                type: "structure",
                                                                required: [ "FieldId", "AxisBinding" ],
                                                                members: {
                                                                    FieldId: {},
                                                                    AxisBinding: {},
                                                                    Settings: {
                                                                        shape: "Se6"
                                                                    }
                                                                }
                                                            },
                                                            DataFieldSeriesItem: {
                                                                type: "structure",
                                                                required: [ "FieldId", "AxisBinding" ],
                                                                members: {
                                                                    FieldId: {},
                                                                    FieldValue: {
                                                                        shape: "Sw"
                                                                    },
                                                                    AxisBinding: {},
                                                                    Settings: {
                                                                        shape: "Se6"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                },
                                                ReferenceLines: {
                                                    shape: "Sb3"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                ContributionAnalysisDefaults: {
                                                    shape: "Sbi"
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                HeatMapVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        HeatMapAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Rows: {
                                                                    shape: "Sec"
                                                                },
                                                                Columns: {
                                                                    shape: "Sec"
                                                                },
                                                                Values: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        HeatMapRowSort: {
                                                            shape: "S9g"
                                                        },
                                                        HeatMapColumnSort: {
                                                            shape: "S9g"
                                                        },
                                                        HeatMapRowItemsLimitConfiguration: {
                                                            shape: "S9h"
                                                        },
                                                        HeatMapColumnItemsLimitConfiguration: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                RowLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                ColumnLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                ColorScale: {
                                                    shape: "Sef"
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                }
                                            }
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        },
                                        Actions: {
                                            shape: "S71"
                                        }
                                    }
                                },
                                TreeMapVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        TreeMapAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Groups: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S3o"
                                                                    }
                                                                },
                                                                Sizes: {
                                                                    shape: "Seo"
                                                                },
                                                                Colors: {
                                                                    shape: "Seo"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        TreeMapSort: {
                                                            shape: "S9g"
                                                        },
                                                        TreeMapGroupItemsLimitConfiguration: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                GroupLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                SizeLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                ColorLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                ColorScale: {
                                                    shape: "Sef"
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                GeospatialMapVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        GeospatialMapAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Geospatial: {
                                                                    shape: "S3n"
                                                                },
                                                                Values: {
                                                                    shape: "S4f"
                                                                },
                                                                Colors: {
                                                                    shape: "S3n"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                WindowOptions: {
                                                    shape: "Seu"
                                                },
                                                MapStyleOptions: {
                                                    shape: "Sez"
                                                },
                                                PointStyleOptions: {
                                                    type: "structure",
                                                    members: {
                                                        SelectedPointStyle: {},
                                                        ClusterMarkerConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                ClusterMarker: {
                                                                    type: "structure",
                                                                    members: {
                                                                        SimpleClusterMarker: {
                                                                            type: "structure",
                                                                            members: {
                                                                                Color: {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        HeatmapConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                HeatmapColor: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Colors: {
                                                                            type: "list",
                                                                            member: {
                                                                                type: "structure",
                                                                                required: [ "Color" ],
                                                                                members: {
                                                                                    Color: {}
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                }
                                            }
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        },
                                        Actions: {
                                            shape: "S71"
                                        }
                                    }
                                },
                                FilledMapVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        FilledMapAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Geospatial: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S3o"
                                                                    }
                                                                },
                                                                Values: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        }
                                                    }
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                WindowOptions: {
                                                    shape: "Seu"
                                                },
                                                MapStyleOptions: {
                                                    shape: "Sez"
                                                }
                                            }
                                        },
                                        ConditionalFormatting: {
                                            type: "structure",
                                            required: [ "ConditionalFormattingOptions" ],
                                            members: {
                                                ConditionalFormattingOptions: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "Shape" ],
                                                        members: {
                                                            Shape: {
                                                                type: "structure",
                                                                required: [ "FieldId" ],
                                                                members: {
                                                                    FieldId: {},
                                                                    Format: {
                                                                        type: "structure",
                                                                        required: [ "BackgroundColor" ],
                                                                        members: {
                                                                            BackgroundColor: {
                                                                                shape: "S6l"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        },
                                        Actions: {
                                            shape: "S71"
                                        }
                                    }
                                },
                                FunnelChartVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        FunnelChartAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Category: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S3o"
                                                                    }
                                                                },
                                                                Values: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        },
                                                        CategoryItemsLimit: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                CategoryLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                ValueLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                DataLabelOptions: {
                                                    type: "structure",
                                                    members: {
                                                        Visibility: {},
                                                        CategoryLabelVisibility: {},
                                                        MeasureLabelVisibility: {},
                                                        Position: {},
                                                        LabelFontConfiguration: {
                                                            shape: "S1y"
                                                        },
                                                        LabelColor: {},
                                                        MeasureDataLabelStyle: {}
                                                    }
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                ScatterPlotVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        ScatterPlotCategoricallyAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                XAxis: {
                                                                    shape: "S4f"
                                                                },
                                                                YAxis: {
                                                                    shape: "S4f"
                                                                },
                                                                Category: {
                                                                    shape: "S3n"
                                                                },
                                                                Size: {
                                                                    shape: "S4f"
                                                                },
                                                                Label: {
                                                                    shape: "S3n"
                                                                }
                                                            }
                                                        },
                                                        ScatterPlotUnaggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                XAxis: {
                                                                    shape: "S3n"
                                                                },
                                                                YAxis: {
                                                                    shape: "S3n"
                                                                },
                                                                Size: {
                                                                    shape: "S4f"
                                                                },
                                                                Category: {
                                                                    shape: "S3n"
                                                                },
                                                                Label: {
                                                                    shape: "S3n"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        ScatterPlotLimitConfiguration: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                XAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                XAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                YAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                YAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                ComboChartVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        ComboChartAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Category: {
                                                                    shape: "S3n"
                                                                },
                                                                BarValues: {
                                                                    shape: "S4f"
                                                                },
                                                                Colors: {
                                                                    shape: "S3n"
                                                                },
                                                                LineValues: {
                                                                    shape: "S4f"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        },
                                                        CategoryItemsLimit: {
                                                            shape: "S9h"
                                                        },
                                                        ColorSort: {
                                                            shape: "S9g"
                                                        },
                                                        ColorItemsLimit: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                BarsArrangement: {},
                                                CategoryAxis: {
                                                    shape: "S9y"
                                                },
                                                CategoryLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                PrimaryYAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                PrimaryYAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                SecondaryYAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                SecondaryYAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                SingleAxisOptions: {
                                                    shape: "Sdu"
                                                },
                                                ColorLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                BarDataLabels: {
                                                    shape: "Sak"
                                                },
                                                LineDataLabels: {
                                                    shape: "Sak"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                ReferenceLines: {
                                                    shape: "Sb3"
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                BoxPlotVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        BoxPlotAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                GroupBy: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S3o"
                                                                    }
                                                                },
                                                                Values: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        },
                                                        PaginationConfiguration: {
                                                            shape: "S55"
                                                        }
                                                    }
                                                },
                                                BoxPlotOptions: {
                                                    type: "structure",
                                                    members: {
                                                        StyleOptions: {
                                                            type: "structure",
                                                            members: {
                                                                FillStyle: {}
                                                            }
                                                        },
                                                        OutlierVisibility: {},
                                                        AllDataPointsVisibility: {}
                                                    }
                                                },
                                                CategoryAxis: {
                                                    shape: "S9y"
                                                },
                                                CategoryLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                PrimaryYAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                PrimaryYAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                ReferenceLines: {
                                                    shape: "Sb3"
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                WaterfallVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        WaterfallChartAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Categories: {
                                                                    shape: "S3n"
                                                                },
                                                                Values: {
                                                                    shape: "S4f"
                                                                },
                                                                Breakdowns: {
                                                                    shape: "S3n"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        },
                                                        BreakdownItemsLimit: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                WaterfallChartOptions: {
                                                    type: "structure",
                                                    members: {
                                                        TotalBarLabel: {}
                                                    }
                                                },
                                                CategoryAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                CategoryAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                PrimaryYAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                PrimaryYAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                HistogramVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        HistogramAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Values: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                XAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                XAxisLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                YAxisDisplayOptions: {
                                                    shape: "S9y"
                                                },
                                                BinOptions: {
                                                    type: "structure",
                                                    members: {
                                                        SelectedBinType: {},
                                                        BinCount: {
                                                            type: "structure",
                                                            members: {
                                                                Value: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        BinWidth: {
                                                            type: "structure",
                                                            members: {
                                                                Value: {
                                                                    type: "double"
                                                                },
                                                                BinCountLimit: {
                                                                    type: "long"
                                                                }
                                                            }
                                                        },
                                                        StartValue: {
                                                            type: "double"
                                                        }
                                                    }
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                },
                                                Tooltip: {
                                                    shape: "Sav"
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        }
                                    }
                                },
                                WordCloudVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        WordCloudAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                GroupBy: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S3o"
                                                                    }
                                                                },
                                                                Size: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategoryItemsLimit: {
                                                            shape: "S9h"
                                                        },
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        }
                                                    }
                                                },
                                                CategoryLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                WordCloudOptions: {
                                                    type: "structure",
                                                    members: {
                                                        WordOrientation: {},
                                                        WordScaling: {},
                                                        CloudLayout: {},
                                                        WordCasing: {},
                                                        WordPadding: {},
                                                        MaximumStringLength: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                },
                                InsightVisual: {
                                    type: "structure",
                                    required: [ "VisualId", "DataSetIdentifier" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        InsightConfiguration: {
                                            type: "structure",
                                            members: {
                                                Computations: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            TopBottomRanked: {
                                                                type: "structure",
                                                                required: [ "ComputationId", "Type" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Category: {
                                                                        shape: "S3o"
                                                                    },
                                                                    Value: {
                                                                        shape: "S4g"
                                                                    },
                                                                    ResultSize: {
                                                                        type: "integer"
                                                                    },
                                                                    Type: {}
                                                                }
                                                            },
                                                            TopBottomMovers: {
                                                                type: "structure",
                                                                required: [ "ComputationId", "Type" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Time: {
                                                                        shape: "S3o"
                                                                    },
                                                                    Category: {
                                                                        shape: "S3o"
                                                                    },
                                                                    Value: {
                                                                        shape: "S4g"
                                                                    },
                                                                    MoverSize: {
                                                                        type: "integer"
                                                                    },
                                                                    SortOrder: {},
                                                                    Type: {}
                                                                }
                                                            },
                                                            TotalAggregation: {
                                                                type: "structure",
                                                                required: [ "ComputationId" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Value: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            },
                                                            MaximumMinimum: {
                                                                type: "structure",
                                                                required: [ "ComputationId", "Type" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Time: {
                                                                        shape: "S3o"
                                                                    },
                                                                    Value: {
                                                                        shape: "S4g"
                                                                    },
                                                                    Type: {}
                                                                }
                                                            },
                                                            MetricComparison: {
                                                                type: "structure",
                                                                required: [ "ComputationId" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Time: {
                                                                        shape: "S3o"
                                                                    },
                                                                    FromValue: {
                                                                        shape: "S4g"
                                                                    },
                                                                    TargetValue: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            },
                                                            PeriodOverPeriod: {
                                                                type: "structure",
                                                                required: [ "ComputationId" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Time: {
                                                                        shape: "S3o"
                                                                    },
                                                                    Value: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            },
                                                            PeriodToDate: {
                                                                type: "structure",
                                                                required: [ "ComputationId" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Time: {
                                                                        shape: "S3o"
                                                                    },
                                                                    Value: {
                                                                        shape: "S4g"
                                                                    },
                                                                    PeriodTimeGranularity: {}
                                                                }
                                                            },
                                                            GrowthRate: {
                                                                type: "structure",
                                                                required: [ "ComputationId" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Time: {
                                                                        shape: "S3o"
                                                                    },
                                                                    Value: {
                                                                        shape: "S4g"
                                                                    },
                                                                    PeriodSize: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            },
                                                            UniqueValues: {
                                                                type: "structure",
                                                                required: [ "ComputationId" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Category: {
                                                                        shape: "S3o"
                                                                    }
                                                                }
                                                            },
                                                            Forecast: {
                                                                type: "structure",
                                                                required: [ "ComputationId" ],
                                                                members: {
                                                                    ComputationId: {},
                                                                    Name: {},
                                                                    Time: {
                                                                        shape: "S3o"
                                                                    },
                                                                    Value: {
                                                                        shape: "S4g"
                                                                    },
                                                                    PeriodsForward: {
                                                                        type: "integer"
                                                                    },
                                                                    PeriodsBackward: {
                                                                        type: "integer"
                                                                    },
                                                                    UpperBoundary: {
                                                                        type: "double"
                                                                    },
                                                                    LowerBoundary: {
                                                                        type: "double"
                                                                    },
                                                                    PredictionInterval: {
                                                                        type: "integer"
                                                                    },
                                                                    Seasonality: {},
                                                                    CustomSeasonalityValue: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                CustomNarrative: {
                                                    type: "structure",
                                                    required: [ "Narrative" ],
                                                    members: {
                                                        Narrative: {}
                                                    }
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        DataSetIdentifier: {}
                                    }
                                },
                                SankeyDiagramVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        SankeyDiagramAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Source: {
                                                                    shape: "S3n"
                                                                },
                                                                Destination: {
                                                                    shape: "S3n"
                                                                },
                                                                Weight: {
                                                                    shape: "S4f"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        WeightSort: {
                                                            shape: "S9g"
                                                        },
                                                        SourceItemsLimit: {
                                                            shape: "S9h"
                                                        },
                                                        DestinationItemsLimit: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                DataLabels: {
                                                    shape: "Sak"
                                                }
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        }
                                    }
                                },
                                CustomContentVisual: {
                                    type: "structure",
                                    required: [ "VisualId", "DataSetIdentifier" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                ContentUrl: {},
                                                ContentType: {},
                                                ImageScaling: {}
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        DataSetIdentifier: {}
                                    }
                                },
                                EmptyVisual: {
                                    type: "structure",
                                    required: [ "VisualId", "DataSetIdentifier" ],
                                    members: {
                                        VisualId: {},
                                        DataSetIdentifier: {},
                                        Actions: {
                                            shape: "S71"
                                        }
                                    }
                                },
                                RadarChartVisual: {
                                    type: "structure",
                                    required: [ "VisualId" ],
                                    members: {
                                        VisualId: {},
                                        Title: {
                                            shape: "S3c"
                                        },
                                        Subtitle: {
                                            shape: "S3g"
                                        },
                                        ChartConfiguration: {
                                            type: "structure",
                                            members: {
                                                FieldWells: {
                                                    type: "structure",
                                                    members: {
                                                        RadarChartAggregatedFieldWells: {
                                                            type: "structure",
                                                            members: {
                                                                Category: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S3o"
                                                                    }
                                                                },
                                                                Color: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S3o"
                                                                    }
                                                                },
                                                                Values: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S4g"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                SortConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        CategorySort: {
                                                            shape: "S9g"
                                                        },
                                                        CategoryItemsLimit: {
                                                            shape: "S9h"
                                                        },
                                                        ColorSort: {
                                                            shape: "S9g"
                                                        },
                                                        ColorItemsLimit: {
                                                            shape: "S9h"
                                                        }
                                                    }
                                                },
                                                Shape: {},
                                                BaseSeriesSettings: {
                                                    type: "structure",
                                                    members: {
                                                        AreaStyleSettings: {
                                                            type: "structure",
                                                            members: {
                                                                Visibility: {}
                                                            }
                                                        }
                                                    }
                                                },
                                                StartAngle: {
                                                    type: "double"
                                                },
                                                VisualPalette: {
                                                    shape: "S9l"
                                                },
                                                AlternateBandColorsVisibility: {},
                                                AlternateBandEvenColor: {},
                                                AlternateBandOddColor: {},
                                                CategoryAxis: {
                                                    shape: "S9y"
                                                },
                                                CategoryLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                ColorAxis: {
                                                    shape: "S9y"
                                                },
                                                ColorLabelOptions: {
                                                    shape: "Sae"
                                                },
                                                Legend: {
                                                    shape: "Sai"
                                                },
                                                AxesRangeScale: {}
                                            }
                                        },
                                        Actions: {
                                            shape: "S71"
                                        },
                                        ColumnHierarchies: {
                                            shape: "Sbl"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    TextBoxes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SheetTextBoxId" ],
                            members: {
                                SheetTextBoxId: {},
                                Content: {}
                            }
                        }
                    },
                    Layouts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Configuration" ],
                            members: {
                                Configuration: {
                                    type: "structure",
                                    members: {
                                        GridLayout: {
                                            shape: "Sit"
                                        },
                                        FreeFormLayout: {
                                            type: "structure",
                                            required: [ "Elements" ],
                                            members: {
                                                Elements: {
                                                    shape: "Sj5"
                                                },
                                                CanvasSizeOptions: {
                                                    shape: "Sje"
                                                }
                                            }
                                        },
                                        SectionBasedLayout: {
                                            type: "structure",
                                            required: [ "HeaderSections", "BodySections", "FooterSections", "CanvasSizeOptions" ],
                                            members: {
                                                HeaderSections: {
                                                    shape: "Sjh"
                                                },
                                                BodySections: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "SectionId", "Content" ],
                                                        members: {
                                                            SectionId: {},
                                                            Content: {
                                                                type: "structure",
                                                                members: {
                                                                    Layout: {
                                                                        shape: "Sjj"
                                                                    }
                                                                }
                                                            },
                                                            Style: {
                                                                shape: "Sjl"
                                                            },
                                                            PageBreakConfiguration: {
                                                                type: "structure",
                                                                members: {
                                                                    After: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Status: {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                FooterSections: {
                                                    shape: "Sjh"
                                                },
                                                CanvasSizeOptions: {
                                                    shape: "Sju"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SheetControlLayouts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Configuration" ],
                            members: {
                                Configuration: {
                                    type: "structure",
                                    members: {
                                        GridLayout: {
                                            shape: "Sit"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ContentType: {}
                }
            }
        },
        S1v: {
            type: "structure",
            members: {
                TitleOptions: {
                    shape: "S1w"
                },
                DateTimeFormat: {},
                InfoIconLabelOptions: {
                    shape: "S27"
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                Visibility: {},
                FontConfiguration: {
                    shape: "S1y"
                },
                CustomLabel: {}
            }
        },
        S1y: {
            type: "structure",
            members: {
                FontSize: {
                    type: "structure",
                    members: {
                        Relative: {}
                    }
                },
                FontDecoration: {},
                FontColor: {},
                FontWeight: {
                    type: "structure",
                    members: {
                        Name: {}
                    }
                },
                FontStyle: {}
            }
        },
        S27: {
            type: "structure",
            members: {
                Visibility: {},
                InfoIconText: {}
            }
        },
        S2a: {
            type: "structure",
            members: {
                SearchOptions: {
                    type: "structure",
                    members: {
                        Visibility: {}
                    }
                },
                SelectAllOptions: {
                    shape: "S2c"
                },
                TitleOptions: {
                    shape: "S1w"
                },
                InfoIconLabelOptions: {
                    shape: "S27"
                }
            }
        },
        S2c: {
            type: "structure",
            members: {
                Visibility: {}
            }
        },
        S2e: {
            type: "structure",
            members: {
                Values: {
                    shape: "S2f"
                },
                LinkToDataSetColumn: {
                    shape: "S2g"
                }
            }
        },
        S2f: {
            type: "list",
            member: {}
        },
        S2g: {
            type: "structure",
            required: [ "DataSetIdentifier", "ColumnName" ],
            members: {
                DataSetIdentifier: {},
                ColumnName: {}
            }
        },
        S2i: {
            type: "structure",
            members: {
                SourceControls: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SourceSheetControlId: {},
                            ColumnToMatch: {
                                shape: "S2g"
                            }
                        }
                    }
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                SelectAllOptions: {
                    shape: "S2c"
                },
                TitleOptions: {
                    shape: "S1w"
                },
                InfoIconLabelOptions: {
                    shape: "S27"
                }
            }
        },
        S2o: {
            type: "structure",
            members: {
                TitleOptions: {
                    shape: "S1w"
                },
                PlaceholderOptions: {
                    shape: "S2p"
                },
                InfoIconLabelOptions: {
                    shape: "S27"
                }
            }
        },
        S2p: {
            type: "structure",
            members: {
                Visibility: {}
            }
        },
        S2s: {
            type: "structure",
            members: {
                TitleOptions: {
                    shape: "S1w"
                },
                PlaceholderOptions: {
                    shape: "S2p"
                },
                InfoIconLabelOptions: {
                    shape: "S27"
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                TitleOptions: {
                    shape: "S1w"
                },
                InfoIconLabelOptions: {
                    shape: "S27"
                }
            }
        },
        S31: {
            type: "structure",
            members: {
                Values: {
                    shape: "S2f"
                }
            }
        },
        S3c: {
            type: "structure",
            members: {
                Visibility: {},
                FormatText: {
                    type: "structure",
                    members: {
                        PlainText: {},
                        RichText: {}
                    }
                }
            }
        },
        S3g: {
            type: "structure",
            members: {
                Visibility: {},
                FormatText: {
                    type: "structure",
                    members: {
                        PlainText: {},
                        RichText: {}
                    }
                }
            }
        },
        S3n: {
            type: "list",
            member: {
                shape: "S3o"
            }
        },
        S3o: {
            type: "structure",
            members: {
                NumericalDimensionField: {
                    type: "structure",
                    required: [ "FieldId", "Column" ],
                    members: {
                        FieldId: {},
                        Column: {
                            shape: "S2g"
                        },
                        HierarchyId: {},
                        FormatConfiguration: {
                            shape: "S3s"
                        }
                    }
                },
                CategoricalDimensionField: {
                    type: "structure",
                    required: [ "FieldId", "Column" ],
                    members: {
                        FieldId: {},
                        Column: {
                            shape: "S2g"
                        },
                        HierarchyId: {},
                        FormatConfiguration: {
                            shape: "S4b"
                        }
                    }
                },
                DateDimensionField: {
                    type: "structure",
                    required: [ "FieldId", "Column" ],
                    members: {
                        FieldId: {},
                        Column: {
                            shape: "S2g"
                        },
                        DateGranularity: {},
                        HierarchyId: {},
                        FormatConfiguration: {
                            shape: "S4e"
                        }
                    }
                }
            }
        },
        S3s: {
            type: "structure",
            members: {
                FormatConfiguration: {
                    shape: "S3t"
                }
            }
        },
        S3t: {
            type: "structure",
            members: {
                NumberDisplayFormatConfiguration: {
                    shape: "S3u"
                },
                CurrencyDisplayFormatConfiguration: {
                    type: "structure",
                    members: {
                        Prefix: {
                            shape: "S3v"
                        },
                        Suffix: {
                            shape: "S3w"
                        },
                        SeparatorConfiguration: {
                            shape: "S3x"
                        },
                        Symbol: {},
                        DecimalPlacesConfiguration: {
                            shape: "S40"
                        },
                        NumberScale: {},
                        NegativeValueConfiguration: {
                            shape: "S43"
                        },
                        NullValueFormatConfiguration: {
                            shape: "S45"
                        }
                    }
                },
                PercentageDisplayFormatConfiguration: {
                    shape: "S49"
                }
            }
        },
        S3u: {
            type: "structure",
            members: {
                Prefix: {
                    shape: "S3v"
                },
                Suffix: {
                    shape: "S3w"
                },
                SeparatorConfiguration: {
                    shape: "S3x"
                },
                DecimalPlacesConfiguration: {
                    shape: "S40"
                },
                NumberScale: {},
                NegativeValueConfiguration: {
                    shape: "S43"
                },
                NullValueFormatConfiguration: {
                    shape: "S45"
                }
            }
        },
        S3v: {
            type: "string",
            sensitive: true
        },
        S3w: {
            type: "string",
            sensitive: true
        },
        S3x: {
            type: "structure",
            members: {
                DecimalSeparator: {},
                ThousandsSeparator: {
                    type: "structure",
                    members: {
                        Symbol: {},
                        Visibility: {}
                    }
                }
            }
        },
        S40: {
            type: "structure",
            required: [ "DecimalPlaces" ],
            members: {
                DecimalPlaces: {
                    type: "long"
                }
            }
        },
        S43: {
            type: "structure",
            required: [ "DisplayMode" ],
            members: {
                DisplayMode: {}
            }
        },
        S45: {
            type: "structure",
            required: [ "NullString" ],
            members: {
                NullString: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S49: {
            type: "structure",
            members: {
                Prefix: {
                    shape: "S3v"
                },
                Suffix: {
                    shape: "S3w"
                },
                SeparatorConfiguration: {
                    shape: "S3x"
                },
                DecimalPlacesConfiguration: {
                    shape: "S40"
                },
                NegativeValueConfiguration: {
                    shape: "S43"
                },
                NullValueFormatConfiguration: {
                    shape: "S45"
                }
            }
        },
        S4b: {
            type: "structure",
            members: {
                NullValueFormatConfiguration: {
                    shape: "S45"
                },
                NumericFormatConfiguration: {
                    shape: "S3t"
                }
            }
        },
        S4e: {
            type: "structure",
            members: {
                DateTimeFormat: {},
                NullValueFormatConfiguration: {
                    shape: "S45"
                },
                NumericFormatConfiguration: {
                    shape: "S3t"
                }
            }
        },
        S4f: {
            type: "list",
            member: {
                shape: "S4g"
            }
        },
        S4g: {
            type: "structure",
            members: {
                NumericalMeasureField: {
                    type: "structure",
                    required: [ "FieldId", "Column" ],
                    members: {
                        FieldId: {},
                        Column: {
                            shape: "S2g"
                        },
                        AggregationFunction: {
                            shape: "S4i"
                        },
                        FormatConfiguration: {
                            shape: "S3s"
                        }
                    }
                },
                CategoricalMeasureField: {
                    type: "structure",
                    required: [ "FieldId", "Column" ],
                    members: {
                        FieldId: {},
                        Column: {
                            shape: "S2g"
                        },
                        AggregationFunction: {},
                        FormatConfiguration: {
                            shape: "S4b"
                        }
                    }
                },
                DateMeasureField: {
                    type: "structure",
                    required: [ "FieldId", "Column" ],
                    members: {
                        FieldId: {},
                        Column: {
                            shape: "S2g"
                        },
                        AggregationFunction: {},
                        FormatConfiguration: {
                            shape: "S4e"
                        }
                    }
                },
                CalculatedMeasureField: {
                    type: "structure",
                    required: [ "FieldId", "Expression" ],
                    members: {
                        FieldId: {},
                        Expression: {
                            shape: "S4r"
                        }
                    }
                }
            }
        },
        S4i: {
            type: "structure",
            members: {
                SimpleNumericalAggregation: {},
                PercentileAggregation: {
                    type: "structure",
                    members: {
                        PercentileValue: {
                            type: "double"
                        }
                    }
                }
            }
        },
        S4r: {
            type: "string",
            sensitive: true
        },
        S4v: {
            type: "structure",
            members: {
                StringFormatConfiguration: {
                    shape: "S4b"
                },
                NumberFormatConfiguration: {
                    shape: "S3s"
                },
                DateTimeFormatConfiguration: {
                    shape: "S4e"
                }
            }
        },
        S4y: {
            type: "structure",
            members: {
                FieldSort: {
                    shape: "S4z"
                },
                ColumnSort: {
                    shape: "S51"
                }
            }
        },
        S4z: {
            type: "structure",
            required: [ "FieldId", "Direction" ],
            members: {
                FieldId: {},
                Direction: {}
            }
        },
        S51: {
            type: "structure",
            required: [ "SortBy", "Direction" ],
            members: {
                SortBy: {
                    shape: "S2g"
                },
                Direction: {},
                AggregationFunction: {
                    shape: "S52"
                }
            }
        },
        S52: {
            type: "structure",
            members: {
                NumericalAggregationFunction: {
                    shape: "S4i"
                },
                CategoricalAggregationFunction: {},
                DateAggregationFunction: {},
                AttributeAggregationFunction: {
                    type: "structure",
                    members: {
                        SimpleAttributeAggregation: {},
                        ValueForMultipleValues: {}
                    }
                }
            }
        },
        S55: {
            type: "structure",
            required: [ "PageSize", "PageNumber" ],
            members: {
                PageSize: {
                    type: "long"
                },
                PageNumber: {
                    type: "long"
                }
            }
        },
        S5a: {
            type: "structure",
            members: {
                Visibility: {},
                FontConfiguration: {
                    shape: "S1y"
                },
                TextWrap: {},
                HorizontalTextAlignment: {},
                VerticalTextAlignment: {},
                BackgroundColor: {},
                Height: {
                    type: "integer"
                },
                Border: {
                    type: "structure",
                    members: {
                        UniformBorder: {
                            shape: "S5g"
                        },
                        SideSpecificBorder: {
                            type: "structure",
                            members: {
                                InnerVertical: {
                                    shape: "S5g"
                                },
                                InnerHorizontal: {
                                    shape: "S5g"
                                },
                                Left: {
                                    shape: "S5g"
                                },
                                Right: {
                                    shape: "S5g"
                                },
                                Top: {
                                    shape: "S5g"
                                },
                                Bottom: {
                                    shape: "S5g"
                                }
                            }
                        }
                    }
                }
            }
        },
        S5g: {
            type: "structure",
            members: {
                Color: {},
                Thickness: {
                    type: "integer"
                },
                Style: {}
            }
        },
        S5k: {
            type: "structure",
            members: {
                Status: {},
                RowAlternateColors: {
                    type: "list",
                    member: {}
                },
                UsePrimaryBackgroundColor: {}
            }
        },
        S5q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "FieldId", "TotalAggregationFunction" ],
                members: {
                    FieldId: {},
                    TotalAggregationFunction: {
                        type: "structure",
                        members: {
                            SimpleTotalAggregationFunction: {}
                        }
                    }
                }
            }
        },
        S6k: {
            type: "structure",
            members: {
                BackgroundColor: {
                    shape: "S6l"
                },
                TextColor: {
                    shape: "S6l"
                },
                Icon: {
                    shape: "S6r"
                }
            }
        },
        S6l: {
            type: "structure",
            members: {
                Solid: {
                    type: "structure",
                    required: [ "Expression" ],
                    members: {
                        Expression: {
                            shape: "S4r"
                        },
                        Color: {}
                    }
                },
                Gradient: {
                    type: "structure",
                    required: [ "Expression", "Color" ],
                    members: {
                        Expression: {
                            shape: "S4r"
                        },
                        Color: {
                            type: "structure",
                            members: {
                                Stops: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "GradientOffset" ],
                                        members: {
                                            GradientOffset: {
                                                type: "double"
                                            },
                                            DataValue: {
                                                type: "double"
                                            },
                                            Color: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S6r: {
            type: "structure",
            members: {
                IconSet: {
                    type: "structure",
                    required: [ "Expression" ],
                    members: {
                        Expression: {
                            shape: "S4r"
                        },
                        IconSetType: {}
                    }
                },
                CustomCondition: {
                    type: "structure",
                    required: [ "Expression", "IconOptions" ],
                    members: {
                        Expression: {
                            shape: "S4r"
                        },
                        IconOptions: {
                            type: "structure",
                            members: {
                                Icon: {},
                                UnicodeIcon: {}
                            }
                        },
                        Color: {},
                        DisplayConfiguration: {
                            type: "structure",
                            members: {
                                IconDisplayOption: {}
                            }
                        }
                    }
                }
            }
        },
        S71: {
            type: "list",
            member: {
                type: "structure",
                required: [ "CustomActionId", "Name", "Trigger", "ActionOperations" ],
                members: {
                    CustomActionId: {},
                    Name: {},
                    Status: {},
                    Trigger: {},
                    ActionOperations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FilterOperation: {
                                    type: "structure",
                                    required: [ "SelectedFieldsConfiguration", "TargetVisualsConfiguration" ],
                                    members: {
                                        SelectedFieldsConfiguration: {
                                            type: "structure",
                                            members: {
                                                SelectedFields: {
                                                    type: "list",
                                                    member: {}
                                                },
                                                SelectedFieldOptions: {},
                                                SelectedColumns: {
                                                    type: "list",
                                                    member: {
                                                        shape: "S2g"
                                                    }
                                                }
                                            }
                                        },
                                        TargetVisualsConfiguration: {
                                            type: "structure",
                                            members: {
                                                SameSheetTargetVisualConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        TargetVisuals: {
                                                            type: "list",
                                                            member: {}
                                                        },
                                                        TargetVisualOptions: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                NavigationOperation: {
                                    type: "structure",
                                    members: {
                                        LocalNavigationConfiguration: {
                                            type: "structure",
                                            required: [ "TargetSheetId" ],
                                            members: {
                                                TargetSheetId: {}
                                            }
                                        }
                                    }
                                },
                                URLOperation: {
                                    type: "structure",
                                    required: [ "URLTemplate", "URLTarget" ],
                                    members: {
                                        URLTemplate: {},
                                        URLTarget: {}
                                    }
                                },
                                SetParametersOperation: {
                                    type: "structure",
                                    required: [ "ParameterValueConfigurations" ],
                                    members: {
                                        ParameterValueConfigurations: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "DestinationParameterName", "Value" ],
                                                members: {
                                                    DestinationParameterName: {},
                                                    Value: {
                                                        type: "structure",
                                                        members: {
                                                            CustomValuesConfiguration: {
                                                                type: "structure",
                                                                required: [ "CustomValues" ],
                                                                members: {
                                                                    IncludeNullValue: {
                                                                        type: "boolean"
                                                                    },
                                                                    CustomValues: {
                                                                        type: "structure",
                                                                        members: {
                                                                            StringValues: {
                                                                                shape: "S7r"
                                                                            },
                                                                            IntegerValues: {
                                                                                shape: "S7t"
                                                                            },
                                                                            DecimalValues: {
                                                                                shape: "S7v"
                                                                            },
                                                                            DateTimeValues: {
                                                                                shape: "S7x"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            SelectAllValueOptions: {},
                                                            SourceParameterName: {},
                                                            SourceField: {},
                                                            SourceColumn: {
                                                                shape: "S2g"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S7r: {
            type: "list",
            member: {
                type: "string",
                sensitive: true
            }
        },
        S7t: {
            type: "list",
            member: {
                type: "long",
                sensitive: true
            }
        },
        S7v: {
            type: "list",
            member: {
                type: "double",
                sensitive: true
            }
        },
        S7x: {
            type: "list",
            member: {
                shape: "S18"
            }
        },
        S83: {
            type: "list",
            member: {
                shape: "S3o"
            }
        },
        S8a: {
            type: "list",
            member: {
                shape: "S8b"
            }
        },
        S8b: {
            type: "structure",
            members: {
                FieldId: {},
                FieldValue: {
                    shape: "S8c"
                },
                DataPathType: {
                    type: "structure",
                    members: {
                        PivotTableDataPathType: {}
                    }
                }
            }
        },
        S8c: {
            type: "string",
            sensitive: true
        },
        S8l: {
            type: "structure",
            members: {
                TotalsVisibility: {},
                CustomLabel: {},
                FieldLevel: {},
                FieldLevelOptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            FieldId: {}
                        }
                    }
                },
                TotalCellStyle: {
                    shape: "S5a"
                },
                ValueCellStyle: {
                    shape: "S5a"
                },
                MetricHeaderCellStyle: {
                    shape: "S5a"
                },
                StyleTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "CellType" ],
                        members: {
                            CellType: {}
                        }
                    }
                }
            }
        },
        S8s: {
            type: "structure",
            members: {
                TotalsVisibility: {},
                Placement: {},
                ScrollStatus: {},
                CustomLabel: {},
                TotalCellStyle: {
                    shape: "S5a"
                },
                ValueCellStyle: {
                    shape: "S5a"
                },
                MetricHeaderCellStyle: {
                    shape: "S5a"
                },
                TotalAggregationOptions: {
                    shape: "S5q"
                }
            }
        },
        S97: {
            type: "structure",
            members: {
                Role: {}
            }
        },
        S9e: {
            type: "list",
            member: {
                shape: "S3o"
            }
        },
        S9g: {
            type: "list",
            member: {
                shape: "S4y"
            }
        },
        S9h: {
            type: "structure",
            members: {
                ItemsLimit: {
                    type: "long"
                },
                OtherCategories: {}
            }
        },
        S9l: {
            type: "structure",
            members: {
                ChartColor: {},
                ColorMap: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Element", "Color" ],
                        members: {
                            Element: {
                                shape: "S8b"
                            },
                            Color: {},
                            TimeGranularity: {}
                        }
                    }
                }
            }
        },
        S9o: {
            type: "structure",
            members: {
                MaxVisibleRows: {
                    type: "long"
                },
                MaxVisibleColumns: {
                    type: "long"
                },
                PanelConfiguration: {
                    type: "structure",
                    members: {
                        Title: {
                            type: "structure",
                            members: {
                                Visibility: {},
                                FontConfiguration: {
                                    shape: "S1y"
                                },
                                HorizontalTextAlignment: {}
                            }
                        },
                        BorderVisibility: {},
                        BorderThickness: {},
                        BorderStyle: {},
                        BorderColor: {},
                        GutterVisibility: {},
                        GutterSpacing: {},
                        BackgroundVisibility: {},
                        BackgroundColor: {}
                    }
                },
                XAxis: {
                    shape: "S9v"
                },
                YAxis: {
                    shape: "S9v"
                }
            }
        },
        S9v: {
            type: "structure",
            members: {
                Scale: {},
                Placement: {}
            }
        },
        S9y: {
            type: "structure",
            members: {
                TickLabelOptions: {
                    type: "structure",
                    members: {
                        LabelOptions: {
                            shape: "S1w"
                        },
                        RotationAngle: {
                            type: "double"
                        }
                    }
                },
                AxisLineVisibility: {},
                GridLineVisibility: {},
                DataOptions: {
                    type: "structure",
                    members: {
                        NumericAxisOptions: {
                            type: "structure",
                            members: {
                                Scale: {
                                    type: "structure",
                                    members: {
                                        Linear: {
                                            type: "structure",
                                            members: {
                                                StepCount: {
                                                    type: "integer"
                                                },
                                                StepSize: {
                                                    type: "double"
                                                }
                                            }
                                        },
                                        Logarithmic: {
                                            type: "structure",
                                            members: {
                                                Base: {
                                                    type: "double"
                                                }
                                            }
                                        }
                                    }
                                },
                                Range: {
                                    type: "structure",
                                    members: {
                                        MinMax: {
                                            type: "structure",
                                            members: {
                                                Minimum: {
                                                    type: "double"
                                                },
                                                Maximum: {
                                                    type: "double"
                                                }
                                            }
                                        },
                                        DataDriven: {
                                            type: "structure",
                                            members: {}
                                        }
                                    }
                                }
                            }
                        },
                        DateAxisOptions: {
                            type: "structure",
                            members: {
                                MissingDateVisibility: {}
                            }
                        }
                    }
                },
                ScrollbarOptions: {
                    type: "structure",
                    members: {
                        Visibility: {},
                        VisibleRange: {
                            type: "structure",
                            members: {
                                PercentRange: {
                                    type: "structure",
                                    members: {
                                        From: {
                                            type: "double"
                                        },
                                        To: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                AxisOffset: {}
            }
        },
        Sae: {
            type: "structure",
            members: {
                Visibility: {},
                SortIconVisibility: {},
                AxisLabelOptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            FontConfiguration: {
                                shape: "S1y"
                            },
                            CustomLabel: {},
                            ApplyTo: {
                                type: "structure",
                                required: [ "FieldId", "Column" ],
                                members: {
                                    FieldId: {},
                                    Column: {
                                        shape: "S2g"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sai: {
            type: "structure",
            members: {
                Visibility: {},
                Title: {
                    shape: "S1w"
                },
                Position: {},
                Width: {},
                Height: {}
            }
        },
        Sak: {
            type: "structure",
            members: {
                Visibility: {},
                CategoryLabelVisibility: {},
                MeasureLabelVisibility: {},
                DataLabelTypes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            FieldLabelType: {
                                type: "structure",
                                members: {
                                    FieldId: {},
                                    Visibility: {}
                                }
                            },
                            DataPathLabelType: {
                                type: "structure",
                                members: {
                                    FieldId: {},
                                    FieldValue: {
                                        shape: "S8c"
                                    },
                                    Visibility: {}
                                }
                            },
                            RangeEndsLabelType: {
                                type: "structure",
                                members: {
                                    Visibility: {}
                                }
                            },
                            MinimumLabelType: {
                                type: "structure",
                                members: {
                                    Visibility: {}
                                }
                            },
                            MaximumLabelType: {
                                type: "structure",
                                members: {
                                    Visibility: {}
                                }
                            }
                        }
                    }
                },
                Position: {},
                LabelContent: {},
                LabelFontConfiguration: {
                    shape: "S1y"
                },
                LabelColor: {},
                Overlap: {},
                TotalsVisibility: {}
            }
        },
        Sav: {
            type: "structure",
            members: {
                TooltipVisibility: {},
                SelectedTooltipType: {},
                FieldBasedTooltip: {
                    type: "structure",
                    members: {
                        AggregationVisibility: {},
                        TooltipTitleType: {},
                        TooltipFields: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    FieldTooltipItem: {
                                        type: "structure",
                                        required: [ "FieldId" ],
                                        members: {
                                            FieldId: {},
                                            Label: {},
                                            Visibility: {}
                                        }
                                    },
                                    ColumnTooltipItem: {
                                        type: "structure",
                                        required: [ "Column" ],
                                        members: {
                                            Column: {
                                                shape: "S2g"
                                            },
                                            Label: {},
                                            Visibility: {},
                                            Aggregation: {
                                                shape: "S52"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sb3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataConfiguration" ],
                members: {
                    Status: {},
                    DataConfiguration: {
                        type: "structure",
                        members: {
                            StaticConfiguration: {
                                type: "structure",
                                required: [ "Value" ],
                                members: {
                                    Value: {
                                        shape: "S14"
                                    }
                                }
                            },
                            DynamicConfiguration: {
                                type: "structure",
                                required: [ "Column", "Calculation" ],
                                members: {
                                    Column: {
                                        shape: "S2g"
                                    },
                                    MeasureAggregationFunction: {
                                        shape: "S52"
                                    },
                                    Calculation: {
                                        shape: "S4i"
                                    }
                                }
                            },
                            AxisBinding: {},
                            SeriesType: {}
                        }
                    },
                    StyleConfiguration: {
                        type: "structure",
                        members: {
                            Pattern: {},
                            Color: {}
                        }
                    },
                    LabelConfiguration: {
                        type: "structure",
                        members: {
                            ValueLabelConfiguration: {
                                type: "structure",
                                members: {
                                    RelativePosition: {},
                                    FormatConfiguration: {
                                        shape: "S3t"
                                    }
                                }
                            },
                            CustomLabelConfiguration: {
                                type: "structure",
                                required: [ "CustomLabel" ],
                                members: {
                                    CustomLabel: {}
                                }
                            },
                            FontConfiguration: {
                                shape: "S1y"
                            },
                            FontColor: {},
                            HorizontalPosition: {},
                            VerticalPosition: {}
                        }
                    }
                }
            }
        },
        Sbi: {
            type: "list",
            member: {
                type: "structure",
                required: [ "MeasureFieldId", "ContributorDimensions" ],
                members: {
                    MeasureFieldId: {},
                    ContributorDimensions: {
                        type: "list",
                        member: {
                            shape: "S2g"
                        }
                    }
                }
            }
        },
        Sbl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ExplicitHierarchy: {
                        type: "structure",
                        required: [ "HierarchyId", "Columns" ],
                        members: {
                            HierarchyId: {},
                            Columns: {
                                type: "list",
                                member: {
                                    shape: "S2g"
                                }
                            },
                            DrillDownFilters: {
                                shape: "Sbp"
                            }
                        }
                    },
                    DateTimeHierarchy: {
                        type: "structure",
                        required: [ "HierarchyId" ],
                        members: {
                            HierarchyId: {},
                            DrillDownFilters: {
                                shape: "Sbp"
                            }
                        }
                    },
                    PredefinedHierarchy: {
                        type: "structure",
                        required: [ "HierarchyId", "Columns" ],
                        members: {
                            HierarchyId: {},
                            Columns: {
                                type: "list",
                                member: {
                                    shape: "S2g"
                                }
                            },
                            DrillDownFilters: {
                                shape: "Sbp"
                            }
                        }
                    }
                }
            }
        },
        Sbp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    NumericEqualityFilter: {
                        type: "structure",
                        required: [ "Column", "Value" ],
                        members: {
                            Column: {
                                shape: "S2g"
                            },
                            Value: {
                                type: "double"
                            }
                        }
                    },
                    CategoryFilter: {
                        type: "structure",
                        required: [ "Column", "CategoryValues" ],
                        members: {
                            Column: {
                                shape: "S2g"
                            },
                            CategoryValues: {
                                shape: "Sbt"
                            }
                        }
                    },
                    TimeRangeFilter: {
                        type: "structure",
                        required: [ "Column", "RangeMinimum", "RangeMaximum", "TimeGranularity" ],
                        members: {
                            Column: {
                                shape: "S2g"
                            },
                            RangeMinimum: {
                                type: "timestamp"
                            },
                            RangeMaximum: {
                                type: "timestamp"
                            },
                            TimeGranularity: {}
                        }
                    }
                }
            }
        },
        Sbt: {
            type: "list",
            member: {}
        },
        Sc8: {
            type: "structure",
            members: {
                ComparisonMethod: {},
                ComparisonFormat: {
                    type: "structure",
                    members: {
                        NumberDisplayFormatConfiguration: {
                            shape: "S3u"
                        },
                        PercentageDisplayFormatConfiguration: {
                            shape: "S49"
                        }
                    }
                }
            }
        },
        Sdq: {
            type: "structure",
            members: {
                AxisOptions: {
                    shape: "S9y"
                },
                MissingDataConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            TreatmentOption: {}
                        }
                    }
                }
            }
        },
        Sdu: {
            type: "structure",
            members: {
                YAxisOptions: {
                    type: "structure",
                    required: [ "YAxis" ],
                    members: {
                        YAxis: {}
                    }
                }
            }
        },
        Sdy: {
            type: "structure",
            members: {
                LineVisibility: {},
                LineInterpolation: {},
                LineStyle: {},
                LineWidth: {}
            }
        },
        Se1: {
            type: "structure",
            members: {
                MarkerVisibility: {},
                MarkerShape: {},
                MarkerSize: {},
                MarkerColor: {}
            }
        },
        Se6: {
            type: "structure",
            members: {
                LineStyleSettings: {
                    shape: "Sdy"
                },
                MarkerStyleSettings: {
                    shape: "Se1"
                }
            }
        },
        Sec: {
            type: "list",
            member: {
                shape: "S3o"
            }
        },
        Sef: {
            type: "structure",
            required: [ "Colors", "ColorFillType" ],
            members: {
                Colors: {
                    type: "list",
                    member: {
                        shape: "Seh"
                    }
                },
                ColorFillType: {},
                NullValueColor: {
                    shape: "Seh"
                }
            }
        },
        Seh: {
            type: "structure",
            members: {
                Color: {},
                DataValue: {
                    type: "double"
                }
            }
        },
        Seo: {
            type: "list",
            member: {
                shape: "S4g"
            }
        },
        Seu: {
            type: "structure",
            members: {
                Bounds: {
                    type: "structure",
                    required: [ "North", "South", "West", "East" ],
                    members: {
                        North: {
                            type: "double"
                        },
                        South: {
                            type: "double"
                        },
                        West: {
                            type: "double"
                        },
                        East: {
                            type: "double"
                        }
                    }
                },
                MapZoomMode: {}
            }
        },
        Sez: {
            type: "structure",
            members: {
                BaseMapStyle: {}
            }
        },
        Sit: {
            type: "structure",
            required: [ "Elements" ],
            members: {
                Elements: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ElementId", "ElementType", "ColumnSpan", "RowSpan" ],
                        members: {
                            ElementId: {},
                            ElementType: {},
                            ColumnIndex: {
                                type: "integer"
                            },
                            ColumnSpan: {
                                type: "integer"
                            },
                            RowIndex: {
                                type: "integer"
                            },
                            RowSpan: {
                                type: "integer"
                            }
                        }
                    }
                },
                CanvasSizeOptions: {
                    shape: "Sj1"
                }
            }
        },
        Sj1: {
            type: "structure",
            members: {
                ScreenCanvasSizeOptions: {
                    type: "structure",
                    required: [ "ResizeOption" ],
                    members: {
                        ResizeOption: {},
                        OptimizedViewPortWidth: {}
                    }
                }
            }
        },
        Sj5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ElementId", "ElementType", "XAxisLocation", "YAxisLocation", "Width", "Height" ],
                members: {
                    ElementId: {},
                    ElementType: {},
                    XAxisLocation: {},
                    YAxisLocation: {},
                    Width: {},
                    Height: {},
                    Visibility: {},
                    RenderingRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Expression", "ConfigurationOverrides" ],
                            members: {
                                Expression: {
                                    shape: "S4r"
                                },
                                ConfigurationOverrides: {
                                    type: "structure",
                                    members: {
                                        Visibility: {}
                                    }
                                }
                            }
                        }
                    },
                    BorderStyle: {
                        shape: "Sjb"
                    },
                    SelectedBorderStyle: {
                        shape: "Sjb"
                    },
                    BackgroundStyle: {
                        type: "structure",
                        members: {
                            Visibility: {},
                            Color: {}
                        }
                    },
                    LoadingAnimation: {
                        type: "structure",
                        members: {
                            Visibility: {}
                        }
                    }
                }
            }
        },
        Sjb: {
            type: "structure",
            members: {
                Visibility: {},
                Color: {}
            }
        },
        Sje: {
            type: "structure",
            members: {
                ScreenCanvasSizeOptions: {
                    type: "structure",
                    required: [ "OptimizedViewPortWidth" ],
                    members: {
                        OptimizedViewPortWidth: {}
                    }
                }
            }
        },
        Sjh: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SectionId", "Layout" ],
                members: {
                    SectionId: {},
                    Layout: {
                        shape: "Sjj"
                    },
                    Style: {
                        shape: "Sjl"
                    }
                }
            }
        },
        Sjj: {
            type: "structure",
            required: [ "FreeFormLayout" ],
            members: {
                FreeFormLayout: {
                    type: "structure",
                    required: [ "Elements" ],
                    members: {
                        Elements: {
                            shape: "Sj5"
                        }
                    }
                }
            }
        },
        Sjl: {
            type: "structure",
            members: {
                Height: {},
                Padding: {
                    shape: "Sjm"
                }
            }
        },
        Sjm: {
            type: "structure",
            members: {
                Top: {},
                Bottom: {},
                Left: {},
                Right: {}
            }
        },
        Sju: {
            type: "structure",
            members: {
                PaperCanvasSizeOptions: {
                    type: "structure",
                    members: {
                        PaperSize: {},
                        PaperOrientation: {},
                        PaperMargin: {
                            shape: "Sjm"
                        }
                    }
                }
            }
        },
        Sk2: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataSetIdentifier", "Name", "Expression" ],
                members: {
                    DataSetIdentifier: {},
                    Name: {},
                    Expression: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Sk5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StringParameterDeclaration: {
                        type: "structure",
                        required: [ "ParameterValueType", "Name" ],
                        members: {
                            ParameterValueType: {},
                            Name: {},
                            DefaultValues: {
                                type: "structure",
                                members: {
                                    DynamicValue: {
                                        shape: "Ska"
                                    },
                                    StaticValues: {
                                        shape: "S7r"
                                    }
                                }
                            },
                            ValueWhenUnset: {
                                type: "structure",
                                members: {
                                    ValueWhenUnsetOption: {},
                                    CustomValue: {
                                        shape: "Sw"
                                    }
                                }
                            },
                            MappedDataSetParameters: {
                                shape: "Skd"
                            }
                        }
                    },
                    DecimalParameterDeclaration: {
                        type: "structure",
                        required: [ "ParameterValueType", "Name" ],
                        members: {
                            ParameterValueType: {},
                            Name: {},
                            DefaultValues: {
                                type: "structure",
                                members: {
                                    DynamicValue: {
                                        shape: "Ska"
                                    },
                                    StaticValues: {
                                        shape: "S7v"
                                    }
                                }
                            },
                            ValueWhenUnset: {
                                type: "structure",
                                members: {
                                    ValueWhenUnsetOption: {},
                                    CustomValue: {
                                        shape: "S14"
                                    }
                                }
                            },
                            MappedDataSetParameters: {
                                shape: "Skd"
                            }
                        }
                    },
                    IntegerParameterDeclaration: {
                        type: "structure",
                        required: [ "ParameterValueType", "Name" ],
                        members: {
                            ParameterValueType: {},
                            Name: {},
                            DefaultValues: {
                                type: "structure",
                                members: {
                                    DynamicValue: {
                                        shape: "Ska"
                                    },
                                    StaticValues: {
                                        shape: "S7t"
                                    }
                                }
                            },
                            ValueWhenUnset: {
                                type: "structure",
                                members: {
                                    ValueWhenUnsetOption: {},
                                    CustomValue: {
                                        shape: "S10"
                                    }
                                }
                            },
                            MappedDataSetParameters: {
                                shape: "Skd"
                            }
                        }
                    },
                    DateTimeParameterDeclaration: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            DefaultValues: {
                                type: "structure",
                                members: {
                                    DynamicValue: {
                                        shape: "Ska"
                                    },
                                    StaticValues: {
                                        shape: "S7x"
                                    },
                                    RollingDate: {
                                        shape: "Skn"
                                    }
                                }
                            },
                            TimeGranularity: {},
                            ValueWhenUnset: {
                                type: "structure",
                                members: {
                                    ValueWhenUnsetOption: {},
                                    CustomValue: {
                                        shape: "S18"
                                    }
                                }
                            },
                            MappedDataSetParameters: {
                                shape: "Skd"
                            }
                        }
                    }
                }
            }
        },
        Ska: {
            type: "structure",
            required: [ "DefaultValueColumn" ],
            members: {
                UserNameColumn: {
                    shape: "S2g"
                },
                GroupNameColumn: {
                    shape: "S2g"
                },
                DefaultValueColumn: {
                    shape: "S2g"
                }
            }
        },
        Skd: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataSetIdentifier", "DataSetParameterName" ],
                members: {
                    DataSetIdentifier: {},
                    DataSetParameterName: {}
                }
            }
        },
        Skn: {
            type: "structure",
            required: [ "Expression" ],
            members: {
                DataSetIdentifier: {},
                Expression: {
                    shape: "S4r"
                }
            }
        },
        Skp: {
            type: "list",
            member: {
                type: "structure",
                required: [ "FilterGroupId", "Filters", "ScopeConfiguration", "CrossDataset" ],
                members: {
                    FilterGroupId: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CategoryFilter: {
                                    type: "structure",
                                    required: [ "FilterId", "Column", "Configuration" ],
                                    members: {
                                        FilterId: {},
                                        Column: {
                                            shape: "S2g"
                                        },
                                        Configuration: {
                                            type: "structure",
                                            members: {
                                                FilterListConfiguration: {
                                                    type: "structure",
                                                    required: [ "MatchOperator" ],
                                                    members: {
                                                        MatchOperator: {},
                                                        CategoryValues: {
                                                            shape: "Sbt"
                                                        },
                                                        SelectAllOptions: {},
                                                        NullOption: {}
                                                    }
                                                },
                                                CustomFilterListConfiguration: {
                                                    type: "structure",
                                                    required: [ "MatchOperator", "NullOption" ],
                                                    members: {
                                                        MatchOperator: {},
                                                        CategoryValues: {
                                                            shape: "Sbt"
                                                        },
                                                        SelectAllOptions: {},
                                                        NullOption: {}
                                                    }
                                                },
                                                CustomFilterConfiguration: {
                                                    type: "structure",
                                                    required: [ "MatchOperator", "NullOption" ],
                                                    members: {
                                                        MatchOperator: {},
                                                        CategoryValue: {},
                                                        SelectAllOptions: {},
                                                        ParameterName: {},
                                                        NullOption: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                NumericRangeFilter: {
                                    type: "structure",
                                    required: [ "FilterId", "Column", "NullOption" ],
                                    members: {
                                        FilterId: {},
                                        Column: {
                                            shape: "S2g"
                                        },
                                        IncludeMinimum: {
                                            type: "boolean"
                                        },
                                        IncludeMaximum: {
                                            type: "boolean"
                                        },
                                        RangeMinimum: {
                                            shape: "Sl2"
                                        },
                                        RangeMaximum: {
                                            shape: "Sl2"
                                        },
                                        SelectAllOptions: {},
                                        AggregationFunction: {
                                            shape: "S52"
                                        },
                                        NullOption: {}
                                    }
                                },
                                NumericEqualityFilter: {
                                    type: "structure",
                                    required: [ "FilterId", "Column", "MatchOperator", "NullOption" ],
                                    members: {
                                        FilterId: {},
                                        Column: {
                                            shape: "S2g"
                                        },
                                        Value: {
                                            type: "double"
                                        },
                                        SelectAllOptions: {},
                                        MatchOperator: {},
                                        AggregationFunction: {
                                            shape: "S52"
                                        },
                                        ParameterName: {},
                                        NullOption: {}
                                    }
                                },
                                TimeEqualityFilter: {
                                    type: "structure",
                                    required: [ "FilterId", "Column" ],
                                    members: {
                                        FilterId: {},
                                        Column: {
                                            shape: "S2g"
                                        },
                                        Value: {
                                            type: "timestamp"
                                        },
                                        ParameterName: {},
                                        TimeGranularity: {},
                                        RollingDate: {
                                            shape: "Skn"
                                        }
                                    }
                                },
                                TimeRangeFilter: {
                                    type: "structure",
                                    required: [ "FilterId", "Column", "NullOption" ],
                                    members: {
                                        FilterId: {},
                                        Column: {
                                            shape: "S2g"
                                        },
                                        IncludeMinimum: {
                                            type: "boolean"
                                        },
                                        IncludeMaximum: {
                                            type: "boolean"
                                        },
                                        RangeMinimumValue: {
                                            shape: "Sl8"
                                        },
                                        RangeMaximumValue: {
                                            shape: "Sl8"
                                        },
                                        NullOption: {},
                                        ExcludePeriodConfiguration: {
                                            shape: "Sl9"
                                        },
                                        TimeGranularity: {}
                                    }
                                },
                                RelativeDatesFilter: {
                                    type: "structure",
                                    required: [ "FilterId", "Column", "AnchorDateConfiguration", "TimeGranularity", "RelativeDateType", "NullOption" ],
                                    members: {
                                        FilterId: {},
                                        Column: {
                                            shape: "S2g"
                                        },
                                        AnchorDateConfiguration: {
                                            type: "structure",
                                            members: {
                                                AnchorOption: {},
                                                ParameterName: {}
                                            }
                                        },
                                        MinimumGranularity: {},
                                        TimeGranularity: {},
                                        RelativeDateType: {},
                                        RelativeDateValue: {
                                            type: "integer"
                                        },
                                        ParameterName: {},
                                        NullOption: {},
                                        ExcludePeriodConfiguration: {
                                            shape: "Sl9"
                                        }
                                    }
                                },
                                TopBottomFilter: {
                                    type: "structure",
                                    required: [ "FilterId", "Column", "AggregationSortConfigurations" ],
                                    members: {
                                        FilterId: {},
                                        Column: {
                                            shape: "S2g"
                                        },
                                        Limit: {
                                            type: "integer"
                                        },
                                        AggregationSortConfigurations: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "Column", "SortDirection" ],
                                                members: {
                                                    Column: {
                                                        shape: "S2g"
                                                    },
                                                    SortDirection: {},
                                                    AggregationFunction: {
                                                        shape: "S52"
                                                    }
                                                }
                                            }
                                        },
                                        TimeGranularity: {},
                                        ParameterName: {}
                                    }
                                }
                            }
                        }
                    },
                    ScopeConfiguration: {
                        type: "structure",
                        members: {
                            SelectedSheets: {
                                type: "structure",
                                members: {
                                    SheetVisualScopingConfigurations: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "SheetId", "Scope" ],
                                            members: {
                                                SheetId: {},
                                                Scope: {},
                                                VisualIds: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            AllSheets: {
                                type: "structure",
                                members: {}
                            }
                        }
                    },
                    Status: {},
                    CrossDataset: {}
                }
            }
        },
        Sl2: {
            type: "structure",
            members: {
                StaticValue: {
                    type: "double"
                },
                Parameter: {}
            }
        },
        Sl8: {
            type: "structure",
            members: {
                StaticValue: {
                    type: "timestamp"
                },
                RollingDate: {
                    shape: "Skn"
                },
                Parameter: {}
            }
        },
        Sl9: {
            type: "structure",
            required: [ "Amount", "Granularity" ],
            members: {
                Amount: {
                    type: "integer"
                },
                Granularity: {},
                Status: {}
            }
        },
        Slp: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Column" ],
                members: {
                    Column: {
                        shape: "S2g"
                    },
                    FormatConfiguration: {
                        shape: "S4v"
                    },
                    Role: {},
                    ColorsConfiguration: {
                        type: "structure",
                        members: {
                            CustomColors: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Color" ],
                                    members: {
                                        FieldValue: {
                                            shape: "S8c"
                                        },
                                        Color: {},
                                        SpecialValue: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Slw: {
            type: "structure",
            required: [ "DefaultNewSheetConfiguration" ],
            members: {
                DefaultNewSheetConfiguration: {
                    type: "structure",
                    members: {
                        InteractiveLayoutConfiguration: {
                            type: "structure",
                            members: {
                                Grid: {
                                    type: "structure",
                                    required: [ "CanvasSizeOptions" ],
                                    members: {
                                        CanvasSizeOptions: {
                                            shape: "Sj1"
                                        }
                                    }
                                },
                                FreeForm: {
                                    type: "structure",
                                    required: [ "CanvasSizeOptions" ],
                                    members: {
                                        CanvasSizeOptions: {
                                            shape: "Sje"
                                        }
                                    }
                                }
                            }
                        },
                        PaginatedLayoutConfiguration: {
                            type: "structure",
                            members: {
                                SectionBased: {
                                    type: "structure",
                                    required: [ "CanvasSizeOptions" ],
                                    members: {
                                        CanvasSizeOptions: {
                                            shape: "Sju"
                                        }
                                    }
                                }
                            }
                        },
                        SheetContentType: {}
                    }
                }
            }
        },
        Sm3: {
            type: "structure",
            members: {
                Timezone: {},
                WeekStart: {}
            }
        },
        Sm5: {
            type: "structure",
            required: [ "Mode" ],
            members: {
                Mode: {}
            }
        },
        Sm7: {
            type: "list",
            member: {}
        },
        Smc: {
            type: "structure",
            members: {
                SourceTemplate: {
                    type: "structure",
                    required: [ "DataSetReferences", "Arn" ],
                    members: {
                        DataSetReferences: {
                            shape: "S1f"
                        },
                        Arn: {}
                    }
                }
            }
        },
        Smf: {
            type: "structure",
            members: {
                AdHocFilteringOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                ExportToCSVOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                SheetControlsOption: {
                    type: "structure",
                    members: {
                        VisibilityState: {}
                    }
                },
                VisualPublishOptions: {
                    deprecated: true,
                    deprecatedMessage: "VisualPublishOptions property will reach its end of standard support in a future release. To perform this action, use ExportWithHiddenFields.",
                    type: "structure",
                    members: {
                        ExportHiddenFieldsOption: {
                            type: "structure",
                            members: {
                                AvailabilityStatus: {}
                            }
                        }
                    }
                },
                SheetLayoutElementMaximizationOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                VisualMenuOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                VisualAxisSortOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                ExportWithHiddenFieldsOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                DataPointDrillUpDownOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                DataPointMenuLabelOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                },
                DataPointTooltipOption: {
                    type: "structure",
                    members: {
                        AvailabilityStatus: {}
                    }
                }
            }
        },
        Smu: {
            type: "structure",
            required: [ "DataSetIdentifierDeclarations" ],
            members: {
                DataSetIdentifierDeclarations: {
                    shape: "S1i"
                },
                Sheets: {
                    shape: "S1l"
                },
                CalculatedFields: {
                    shape: "Sk2"
                },
                ParameterDeclarations: {
                    shape: "Sk5"
                },
                FilterGroups: {
                    shape: "Skp"
                },
                ColumnConfigurations: {
                    shape: "Slp"
                },
                AnalysisDefaults: {
                    shape: "Slw"
                },
                Options: {
                    shape: "Sm3"
                }
            }
        },
        Smv: {
            type: "structure",
            members: {
                Permissions: {
                    shape: "S19"
                }
            }
        },
        Smw: {
            type: "list",
            member: {}
        },
        Sn2: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    RelationalTable: {
                        type: "structure",
                        required: [ "DataSourceArn", "Name", "InputColumns" ],
                        members: {
                            DataSourceArn: {},
                            Catalog: {},
                            Schema: {},
                            Name: {},
                            InputColumns: {
                                shape: "Sn9"
                            }
                        }
                    },
                    CustomSql: {
                        type: "structure",
                        required: [ "DataSourceArn", "Name", "SqlQuery" ],
                        members: {
                            DataSourceArn: {},
                            Name: {},
                            SqlQuery: {},
                            Columns: {
                                shape: "Sn9"
                            }
                        }
                    },
                    S3Source: {
                        type: "structure",
                        required: [ "DataSourceArn", "InputColumns" ],
                        members: {
                            DataSourceArn: {},
                            UploadSettings: {
                                type: "structure",
                                members: {
                                    Format: {},
                                    StartFromRow: {
                                        type: "integer"
                                    },
                                    ContainsHeader: {
                                        type: "boolean"
                                    },
                                    TextQualifier: {},
                                    Delimiter: {}
                                }
                            },
                            InputColumns: {
                                shape: "Sn9"
                            }
                        }
                    }
                }
            }
        },
        Sn9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Name: {},
                    Type: {},
                    SubType: {}
                }
            }
        },
        Snm: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Alias", "Source" ],
                members: {
                    Alias: {},
                    DataTransforms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProjectOperation: {
                                    type: "structure",
                                    required: [ "ProjectedColumns" ],
                                    members: {
                                        ProjectedColumns: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                FilterOperation: {
                                    type: "structure",
                                    required: [ "ConditionExpression" ],
                                    members: {
                                        ConditionExpression: {
                                            shape: "S4r"
                                        }
                                    }
                                },
                                CreateColumnsOperation: {
                                    type: "structure",
                                    required: [ "Columns" ],
                                    members: {
                                        Columns: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "ColumnName", "ColumnId", "Expression" ],
                                                members: {
                                                    ColumnName: {},
                                                    ColumnId: {},
                                                    Expression: {
                                                        shape: "S4r"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                RenameColumnOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "NewColumnName" ],
                                    members: {
                                        ColumnName: {},
                                        NewColumnName: {}
                                    }
                                },
                                CastColumnTypeOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "NewColumnType" ],
                                    members: {
                                        ColumnName: {},
                                        NewColumnType: {},
                                        SubType: {},
                                        Format: {}
                                    }
                                },
                                TagColumnOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "Tags" ],
                                    members: {
                                        ColumnName: {},
                                        Tags: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    ColumnGeographicRole: {},
                                                    ColumnDescription: {
                                                        type: "structure",
                                                        members: {
                                                            Text: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                UntagColumnOperation: {
                                    type: "structure",
                                    required: [ "ColumnName", "TagNames" ],
                                    members: {
                                        ColumnName: {},
                                        TagNames: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                OverrideDatasetParameterOperation: {
                                    type: "structure",
                                    required: [ "ParameterName" ],
                                    members: {
                                        ParameterName: {},
                                        NewParameterName: {},
                                        NewDefaultValues: {
                                            type: "structure",
                                            members: {
                                                StringStaticValues: {
                                                    shape: "Sof"
                                                },
                                                DecimalStaticValues: {
                                                    shape: "Soh"
                                                },
                                                DateTimeStaticValues: {
                                                    shape: "Soj"
                                                },
                                                IntegerStaticValues: {
                                                    shape: "Sol"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Source: {
                        type: "structure",
                        members: {
                            JoinInstruction: {
                                type: "structure",
                                required: [ "LeftOperand", "RightOperand", "Type", "OnClause" ],
                                members: {
                                    LeftOperand: {},
                                    RightOperand: {},
                                    LeftJoinKeyProperties: {
                                        shape: "Sop"
                                    },
                                    RightJoinKeyProperties: {
                                        shape: "Sop"
                                    },
                                    Type: {},
                                    OnClause: {}
                                }
                            },
                            PhysicalTableId: {},
                            DataSetArn: {}
                        }
                    }
                }
            }
        },
        Sof: {
            type: "list",
            member: {}
        },
        Soh: {
            type: "list",
            member: {
                type: "double"
            }
        },
        Soj: {
            type: "list",
            member: {
                type: "timestamp"
            }
        },
        Sol: {
            type: "list",
            member: {
                type: "long"
            }
        },
        Sop: {
            type: "structure",
            members: {
                UniqueKey: {
                    type: "boolean"
                }
            }
        },
        Sot: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    GeoSpatialColumnGroup: {
                        type: "structure",
                        required: [ "Name", "Columns" ],
                        members: {
                            Name: {},
                            CountryCode: {},
                            Columns: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        Soz: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    description: {},
                    columns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Sp4: {
            type: "structure",
            required: [ "Arn", "PermissionPolicy" ],
            members: {
                Namespace: {},
                Arn: {},
                PermissionPolicy: {},
                FormatVersion: {},
                Status: {}
            }
        },
        Sp8: {
            type: "structure",
            required: [ "TagRules" ],
            members: {
                Status: {},
                TagRules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "TagKey", "ColumnName" ],
                        members: {
                            TagKey: {},
                            ColumnName: {},
                            TagMultiValueDelimiter: {},
                            MatchAllValue: {
                                shape: "Spd"
                            }
                        }
                    }
                },
                TagRuleConfigurations: {
                    type: "list",
                    member: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Spd: {
            type: "string",
            sensitive: true
        },
        Spg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Principals: {
                        type: "list",
                        member: {}
                    },
                    ColumnNames: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Spk: {
            type: "structure",
            members: {
                DisableUseAsDirectQuerySource: {
                    type: "boolean"
                },
                DisableUseAsImportedSource: {
                    type: "boolean"
                }
            }
        },
        Spl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StringDatasetParameter: {
                        type: "structure",
                        required: [ "Id", "Name", "ValueType" ],
                        members: {
                            Id: {},
                            Name: {},
                            ValueType: {},
                            DefaultValues: {
                                type: "structure",
                                members: {
                                    StaticValues: {
                                        shape: "Sof"
                                    }
                                }
                            }
                        }
                    },
                    DecimalDatasetParameter: {
                        type: "structure",
                        required: [ "Id", "Name", "ValueType" ],
                        members: {
                            Id: {},
                            Name: {},
                            ValueType: {},
                            DefaultValues: {
                                type: "structure",
                                members: {
                                    StaticValues: {
                                        shape: "Soh"
                                    }
                                }
                            }
                        }
                    },
                    IntegerDatasetParameter: {
                        type: "structure",
                        required: [ "Id", "Name", "ValueType" ],
                        members: {
                            Id: {},
                            Name: {},
                            ValueType: {},
                            DefaultValues: {
                                type: "structure",
                                members: {
                                    StaticValues: {
                                        shape: "Sol"
                                    }
                                }
                            }
                        }
                    },
                    DateTimeDatasetParameter: {
                        type: "structure",
                        required: [ "Id", "Name", "ValueType" ],
                        members: {
                            Id: {},
                            Name: {},
                            ValueType: {},
                            TimeGranularity: {},
                            DefaultValues: {
                                type: "structure",
                                members: {
                                    StaticValues: {
                                        shape: "Soj"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sq0: {
            type: "structure",
            members: {
                AmazonElasticsearchParameters: {
                    type: "structure",
                    required: [ "Domain" ],
                    members: {
                        Domain: {}
                    }
                },
                AthenaParameters: {
                    type: "structure",
                    members: {
                        WorkGroup: {},
                        RoleArn: {}
                    }
                },
                AuroraParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                AuroraPostgreSqlParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                AwsIotAnalyticsParameters: {
                    type: "structure",
                    required: [ "DataSetName" ],
                    members: {
                        DataSetName: {}
                    }
                },
                JiraParameters: {
                    type: "structure",
                    required: [ "SiteBaseUrl" ],
                    members: {
                        SiteBaseUrl: {}
                    }
                },
                MariaDbParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                MySqlParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                OracleParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                PostgreSqlParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                PrestoParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Catalog" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Catalog: {}
                    }
                },
                RdsParameters: {
                    type: "structure",
                    required: [ "InstanceId", "Database" ],
                    members: {
                        InstanceId: {},
                        Database: {}
                    }
                },
                RedshiftParameters: {
                    type: "structure",
                    required: [ "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {},
                        ClusterId: {},
                        IAMParameters: {
                            type: "structure",
                            required: [ "RoleArn", "DatabaseUser" ],
                            members: {
                                RoleArn: {},
                                DatabaseUser: {},
                                DatabaseGroups: {
                                    type: "list",
                                    member: {}
                                },
                                AutoCreateDatabaseUser: {
                                    type: "boolean"
                                }
                            }
                        },
                        IdentityCenterConfiguration: {
                            type: "structure",
                            members: {
                                EnableIdentityPropagation: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                S3Parameters: {
                    type: "structure",
                    required: [ "ManifestFileLocation" ],
                    members: {
                        ManifestFileLocation: {
                            type: "structure",
                            required: [ "Bucket", "Key" ],
                            members: {
                                Bucket: {},
                                Key: {}
                            }
                        },
                        RoleArn: {}
                    }
                },
                ServiceNowParameters: {
                    type: "structure",
                    required: [ "SiteBaseUrl" ],
                    members: {
                        SiteBaseUrl: {}
                    }
                },
                SnowflakeParameters: {
                    type: "structure",
                    required: [ "Host", "Database", "Warehouse" ],
                    members: {
                        Host: {},
                        Database: {},
                        Warehouse: {}
                    }
                },
                SparkParameters: {
                    type: "structure",
                    required: [ "Host", "Port" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        }
                    }
                },
                SqlServerParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                TeradataParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Database" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Database: {}
                    }
                },
                TwitterParameters: {
                    type: "structure",
                    required: [ "Query", "MaxRows" ],
                    members: {
                        Query: {},
                        MaxRows: {
                            type: "integer"
                        }
                    }
                },
                AmazonOpenSearchParameters: {
                    type: "structure",
                    required: [ "Domain" ],
                    members: {
                        Domain: {}
                    }
                },
                ExasolParameters: {
                    type: "structure",
                    required: [ "Host", "Port" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        }
                    }
                },
                DatabricksParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "SqlEndpointPath" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        SqlEndpointPath: {}
                    }
                },
                StarburstParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Catalog" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Catalog: {},
                        ProductType: {}
                    }
                },
                TrinoParameters: {
                    type: "structure",
                    required: [ "Host", "Port", "Catalog" ],
                    members: {
                        Host: {},
                        Port: {
                            type: "integer"
                        },
                        Catalog: {}
                    }
                },
                BigQueryParameters: {
                    type: "structure",
                    required: [ "ProjectId" ],
                    members: {
                        ProjectId: {},
                        DataSetRegion: {}
                    }
                }
            }
        },
        Srh: {
            type: "structure",
            members: {
                CredentialPair: {
                    type: "structure",
                    required: [ "Username", "Password" ],
                    members: {
                        Username: {},
                        Password: {},
                        AlternateDataSourceParameters: {
                            shape: "Srl"
                        }
                    }
                },
                CopySourceArn: {},
                SecretArn: {}
            },
            sensitive: true
        },
        Srl: {
            type: "list",
            member: {
                shape: "Sq0"
            }
        },
        Sro: {
            type: "structure",
            required: [ "VpcConnectionArn" ],
            members: {
                VpcConnectionArn: {}
            }
        },
        Srp: {
            type: "structure",
            members: {
                DisableSsl: {
                    type: "boolean"
                }
            }
        },
        Ss5: {
            type: "structure",
            members: {
                Arn: {},
                GroupName: {},
                Description: {},
                PrincipalId: {}
            }
        },
        Ss9: {
            type: "structure",
            members: {
                Arn: {},
                MemberName: {}
            }
        },
        Ssd: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        Ssq: {
            type: "structure",
            required: [ "ScheduleId", "ScheduleFrequency", "RefreshType" ],
            members: {
                ScheduleId: {},
                ScheduleFrequency: {
                    type: "structure",
                    required: [ "Interval" ],
                    members: {
                        Interval: {},
                        RefreshOnDay: {
                            type: "structure",
                            members: {
                                DayOfWeek: {},
                                DayOfMonth: {}
                            }
                        },
                        Timezone: {},
                        TimeOfTheDay: {}
                    }
                },
                StartAfterDateTime: {
                    type: "timestamp"
                },
                RefreshType: {},
                Arn: {}
            }
        },
        St2: {
            type: "structure",
            members: {
                SourceAnalysis: {
                    type: "structure",
                    required: [ "Arn", "DataSetReferences" ],
                    members: {
                        Arn: {},
                        DataSetReferences: {
                            shape: "S1f"
                        }
                    }
                },
                SourceTemplate: {
                    type: "structure",
                    required: [ "Arn" ],
                    members: {
                        Arn: {}
                    }
                }
            }
        },
        St5: {
            type: "structure",
            required: [ "DataSetConfigurations" ],
            members: {
                DataSetConfigurations: {
                    shape: "St6"
                },
                Sheets: {
                    shape: "S1l"
                },
                CalculatedFields: {
                    shape: "Sk2"
                },
                ParameterDeclarations: {
                    shape: "Sk5"
                },
                FilterGroups: {
                    shape: "Skp"
                },
                ColumnConfigurations: {
                    shape: "Slp"
                },
                AnalysisDefaults: {
                    shape: "Slw"
                },
                Options: {
                    shape: "Sm3"
                }
            }
        },
        St6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Placeholder: {},
                    DataSetSchema: {
                        type: "structure",
                        members: {
                            ColumnSchemaList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        DataType: {},
                                        GeographicRole: {}
                                    }
                                }
                            }
                        }
                    },
                    ColumnGroupSchemaList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                ColumnGroupColumnSchemaList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Stk: {
            type: "structure",
            members: {
                AliasName: {},
                Arn: {},
                TemplateVersionNumber: {
                    type: "long"
                }
            }
        },
        Stn: {
            type: "structure",
            members: {
                DataColorPalette: {
                    type: "structure",
                    members: {
                        Colors: {
                            shape: "Stp"
                        },
                        MinMaxGradient: {
                            shape: "Stp"
                        },
                        EmptyFillColor: {}
                    }
                },
                UIColorPalette: {
                    type: "structure",
                    members: {
                        PrimaryForeground: {},
                        PrimaryBackground: {},
                        SecondaryForeground: {},
                        SecondaryBackground: {},
                        Accent: {},
                        AccentForeground: {},
                        Danger: {},
                        DangerForeground: {},
                        Warning: {},
                        WarningForeground: {},
                        Success: {},
                        SuccessForeground: {},
                        Dimension: {},
                        DimensionForeground: {},
                        Measure: {},
                        MeasureForeground: {}
                    }
                },
                Sheet: {
                    type: "structure",
                    members: {
                        Tile: {
                            type: "structure",
                            members: {
                                Border: {
                                    type: "structure",
                                    members: {
                                        Show: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        },
                        TileLayout: {
                            type: "structure",
                            members: {
                                Gutter: {
                                    type: "structure",
                                    members: {
                                        Show: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                Margin: {
                                    type: "structure",
                                    members: {
                                        Show: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Typography: {
                    type: "structure",
                    members: {
                        FontFamilies: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    FontFamily: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        Stp: {
            type: "list",
            member: {}
        },
        Su3: {
            type: "structure",
            members: {
                Arn: {},
                AliasName: {},
                ThemeVersionNumber: {
                    type: "long"
                }
            }
        },
        Su6: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                DataSets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DatasetArn" ],
                        members: {
                            DatasetArn: {},
                            DatasetName: {},
                            DatasetDescription: {},
                            DataAggregation: {
                                type: "structure",
                                members: {
                                    DatasetRowDateGranularity: {},
                                    DefaultDateColumnName: {}
                                }
                            },
                            Filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "FilterName", "OperandFieldName" ],
                                    members: {
                                        FilterDescription: {},
                                        FilterClass: {},
                                        FilterName: {},
                                        FilterSynonyms: {
                                            shape: "Suf"
                                        },
                                        OperandFieldName: {},
                                        FilterType: {},
                                        CategoryFilter: {
                                            type: "structure",
                                            members: {
                                                CategoryFilterFunction: {},
                                                CategoryFilterType: {},
                                                Constant: {
                                                    type: "structure",
                                                    members: {
                                                        ConstantType: {},
                                                        SingularConstant: {},
                                                        CollectiveConstant: {
                                                            type: "structure",
                                                            members: {
                                                                ValueList: {
                                                                    shape: "Sun"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    sensitive: true
                                                },
                                                Inverse: {
                                                    type: "boolean"
                                                }
                                            }
                                        },
                                        NumericEqualityFilter: {
                                            type: "structure",
                                            members: {
                                                Constant: {
                                                    shape: "Sup"
                                                },
                                                Aggregation: {}
                                            }
                                        },
                                        NumericRangeFilter: {
                                            type: "structure",
                                            members: {
                                                Inclusive: {
                                                    type: "boolean"
                                                },
                                                Constant: {
                                                    shape: "Sus"
                                                },
                                                Aggregation: {}
                                            }
                                        },
                                        DateRangeFilter: {
                                            type: "structure",
                                            members: {
                                                Inclusive: {
                                                    type: "boolean"
                                                },
                                                Constant: {
                                                    shape: "Sus"
                                                }
                                            }
                                        },
                                        RelativeDateFilter: {
                                            type: "structure",
                                            members: {
                                                TimeGranularity: {},
                                                RelativeDateFilterFunction: {},
                                                Constant: {
                                                    shape: "Sup"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Columns: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "ColumnName" ],
                                    members: {
                                        ColumnName: {},
                                        ColumnFriendlyName: {},
                                        ColumnDescription: {},
                                        ColumnSynonyms: {
                                            shape: "Suf"
                                        },
                                        ColumnDataRole: {},
                                        Aggregation: {},
                                        IsIncludedInTopic: {
                                            type: "boolean"
                                        },
                                        DisableIndexing: {
                                            type: "boolean"
                                        },
                                        ComparativeOrder: {
                                            shape: "Sv2"
                                        },
                                        SemanticType: {
                                            shape: "Sv5"
                                        },
                                        TimeGranularity: {},
                                        AllowedAggregations: {
                                            shape: "Sv7"
                                        },
                                        NotAllowedAggregations: {
                                            shape: "Sv7"
                                        },
                                        DefaultFormatting: {
                                            shape: "Sv9"
                                        },
                                        NeverAggregateInFilter: {
                                            type: "boolean"
                                        },
                                        CellValueSynonyms: {
                                            shape: "Sve"
                                        },
                                        NonAdditive: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            },
                            CalculatedFields: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "CalculatedFieldName", "Expression" ],
                                    members: {
                                        CalculatedFieldName: {},
                                        CalculatedFieldDescription: {},
                                        Expression: {
                                            shape: "S4r"
                                        },
                                        CalculatedFieldSynonyms: {
                                            shape: "Suf"
                                        },
                                        IsIncludedInTopic: {
                                            type: "boolean"
                                        },
                                        DisableIndexing: {
                                            type: "boolean"
                                        },
                                        ColumnDataRole: {},
                                        TimeGranularity: {},
                                        DefaultFormatting: {
                                            shape: "Sv9"
                                        },
                                        Aggregation: {},
                                        ComparativeOrder: {
                                            shape: "Sv2"
                                        },
                                        SemanticType: {
                                            shape: "Sv5"
                                        },
                                        AllowedAggregations: {
                                            shape: "Sv7"
                                        },
                                        NotAllowedAggregations: {
                                            shape: "Sv7"
                                        },
                                        NeverAggregateInFilter: {
                                            type: "boolean"
                                        },
                                        CellValueSynonyms: {
                                            shape: "Sve"
                                        },
                                        NonAdditive: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            },
                            NamedEntities: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "EntityName" ],
                                    members: {
                                        EntityName: {},
                                        EntityDescription: {},
                                        EntitySynonyms: {
                                            shape: "Suf"
                                        },
                                        SemanticEntityType: {
                                            type: "structure",
                                            members: {
                                                TypeName: {},
                                                SubTypeName: {},
                                                TypeParameters: {
                                                    shape: "Sv6"
                                                }
                                            }
                                        },
                                        Definition: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    FieldName: {},
                                                    PropertyName: {},
                                                    PropertyRole: {},
                                                    PropertyUsage: {},
                                                    Metric: {
                                                        type: "structure",
                                                        members: {
                                                            Aggregation: {},
                                                            AggregationFunctionParameters: {
                                                                type: "map",
                                                                key: {},
                                                                value: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Suf: {
            type: "list",
            member: {}
        },
        Sun: {
            type: "list",
            member: {}
        },
        Sup: {
            type: "structure",
            members: {
                ConstantType: {},
                SingularConstant: {}
            },
            sensitive: true
        },
        Sus: {
            type: "structure",
            members: {
                ConstantType: {},
                RangeConstant: {
                    type: "structure",
                    members: {
                        Minimum: {},
                        Maximum: {}
                    }
                }
            },
            sensitive: true
        },
        Sv2: {
            type: "structure",
            members: {
                UseOrdering: {},
                SpecifedOrder: {
                    shape: "Sun"
                },
                TreatUndefinedSpecifiedValues: {}
            }
        },
        Sv5: {
            type: "structure",
            members: {
                TypeName: {},
                SubTypeName: {},
                TypeParameters: {
                    shape: "Sv6"
                },
                TruthyCellValue: {
                    shape: "Sw"
                },
                TruthyCellValueSynonyms: {
                    shape: "Sv"
                },
                FalseyCellValue: {
                    shape: "Sw"
                },
                FalseyCellValueSynonyms: {
                    shape: "Sv"
                }
            }
        },
        Sv6: {
            type: "map",
            key: {},
            value: {}
        },
        Sv7: {
            type: "list",
            member: {}
        },
        Sv9: {
            type: "structure",
            members: {
                DisplayFormat: {},
                DisplayFormatOptions: {
                    type: "structure",
                    members: {
                        UseBlankCellFormat: {
                            type: "boolean"
                        },
                        BlankCellFormat: {},
                        DateFormat: {},
                        DecimalSeparator: {},
                        GroupingSeparator: {},
                        UseGrouping: {
                            type: "boolean"
                        },
                        FractionDigits: {
                            type: "integer"
                        },
                        Prefix: {},
                        Suffix: {},
                        UnitScaler: {},
                        NegativeFormat: {
                            type: "structure",
                            members: {
                                Prefix: {},
                                Suffix: {}
                            }
                        },
                        CurrencySymbol: {}
                    }
                }
            }
        },
        Sve: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CellValue: {},
                    Synonyms: {
                        shape: "Sun"
                    }
                }
            }
        },
        Svu: {
            type: "structure",
            required: [ "IsEnabled", "BasedOnSpiceSchedule" ],
            members: {
                IsEnabled: {
                    type: "boolean"
                },
                BasedOnSpiceSchedule: {
                    type: "boolean"
                },
                StartingAt: {
                    type: "timestamp"
                },
                Timezone: {},
                RepeatAt: {},
                TopicScheduleType: {}
            }
        },
        Svz: {
            type: "list",
            member: {}
        },
        Sw1: {
            type: "list",
            member: {}
        },
        Sw3: {
            type: "list",
            member: {}
        },
        Sy4: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Message: {},
                    ViolatedEntities: {
                        shape: "Sy7"
                    }
                }
            }
        },
        Sy7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Path: {}
                }
            }
        },
        Sy9: {
            type: "list",
            member: {}
        },
        Sya: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SheetId: {},
                    Name: {}
                }
            }
        },
        Syj: {
            type: "string",
            sensitive: true
        },
        Sym: {
            type: "list",
            member: {}
        },
        Syo: {
            type: "structure",
            members: {
                ResourceIdOverrideConfiguration: {
                    type: "structure",
                    members: {
                        PrefixForAllResources: {
                            type: "boolean"
                        }
                    }
                },
                VPCConnections: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Arn", "Properties" ],
                        members: {
                            Arn: {},
                            Properties: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                RefreshSchedules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Arn", "Properties" ],
                        members: {
                            Arn: {},
                            Properties: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                DataSources: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Arn", "Properties" ],
                        members: {
                            Arn: {},
                            Properties: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                DataSets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Arn", "Properties" ],
                        members: {
                            Arn: {},
                            Properties: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                Themes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Arn", "Properties" ],
                        members: {
                            Arn: {},
                            Properties: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                Analyses: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Arn", "Properties" ],
                        members: {
                            Arn: {},
                            Properties: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                Dashboards: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Arn", "Properties" ],
                        members: {
                            Arn: {},
                            Properties: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        Szi: {
            type: "structure",
            members: {
                StrictModeForAllResources: {
                    type: "boolean"
                }
            }
        },
        Szo: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    Type: {},
                    Message: {}
                }
            }
        },
        Szs: {
            type: "structure",
            members: {
                ResourceIdOverrideConfiguration: {
                    type: "structure",
                    members: {
                        PrefixForAllResources: {}
                    }
                },
                VPCConnections: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "VPCConnectionId" ],
                        members: {
                            VPCConnectionId: {},
                            Name: {},
                            SubnetIds: {
                                shape: "Svz"
                            },
                            SecurityGroupIds: {
                                shape: "Sw1"
                            },
                            DnsResolvers: {
                                shape: "Sw3"
                            },
                            RoleArn: {}
                        }
                    }
                },
                RefreshSchedules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DataSetId", "ScheduleId" ],
                        members: {
                            DataSetId: {},
                            ScheduleId: {},
                            StartAfterDateTime: {
                                type: "timestamp"
                            }
                        }
                    }
                },
                DataSources: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DataSourceId" ],
                        members: {
                            DataSourceId: {},
                            Name: {},
                            DataSourceParameters: {
                                shape: "Sq0"
                            },
                            VpcConnectionProperties: {
                                shape: "Sro"
                            },
                            SslProperties: {
                                shape: "Srp"
                            },
                            Credentials: {
                                type: "structure",
                                members: {
                                    CredentialPair: {
                                        type: "structure",
                                        required: [ "Username", "Password" ],
                                        members: {
                                            Username: {},
                                            Password: {}
                                        },
                                        sensitive: true
                                    },
                                    SecretArn: {}
                                }
                            }
                        }
                    }
                },
                DataSets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DataSetId" ],
                        members: {
                            DataSetId: {},
                            Name: {}
                        }
                    }
                },
                Themes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ThemeId" ],
                        members: {
                            ThemeId: {},
                            Name: {}
                        }
                    }
                },
                Analyses: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AnalysisId" ],
                        members: {
                            AnalysisId: {},
                            Name: {}
                        }
                    }
                },
                Dashboards: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DashboardId" ],
                        members: {
                            DashboardId: {},
                            Name: {}
                        }
                    }
                }
            }
        },
        S10b: {
            type: "structure",
            members: {
                DataSources: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DataSourceIds", "Permissions" ],
                        members: {
                            DataSourceIds: {
                                shape: "S10e"
                            },
                            Permissions: {
                                shape: "S10g"
                            }
                        }
                    }
                },
                DataSets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DataSetIds", "Permissions" ],
                        members: {
                            DataSetIds: {
                                shape: "S10e"
                            },
                            Permissions: {
                                shape: "S10g"
                            }
                        }
                    }
                },
                Themes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ThemeIds", "Permissions" ],
                        members: {
                            ThemeIds: {
                                shape: "S10e"
                            },
                            Permissions: {
                                shape: "S10g"
                            }
                        }
                    }
                },
                Analyses: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AnalysisIds", "Permissions" ],
                        members: {
                            AnalysisIds: {
                                shape: "S10e"
                            },
                            Permissions: {
                                shape: "S10g"
                            }
                        }
                    }
                },
                Dashboards: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DashboardIds" ],
                        members: {
                            DashboardIds: {
                                shape: "S10e"
                            },
                            Permissions: {
                                shape: "S10g"
                            },
                            LinkSharingConfiguration: {
                                type: "structure",
                                members: {
                                    Permissions: {
                                        shape: "S10g"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S10e: {
            type: "list",
            member: {}
        },
        S10g: {
            type: "structure",
            required: [ "Principals", "Actions" ],
            members: {
                Principals: {
                    type: "list",
                    member: {}
                },
                Actions: {
                    shape: "S1c"
                }
            }
        },
        S10r: {
            type: "structure",
            members: {
                VPCConnections: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "VPCConnectionIds", "Tags" ],
                        members: {
                            VPCConnectionIds: {
                                shape: "S10e"
                            },
                            Tags: {
                                shape: "Sb"
                            }
                        }
                    }
                },
                DataSources: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DataSourceIds", "Tags" ],
                        members: {
                            DataSourceIds: {
                                shape: "S10e"
                            },
                            Tags: {
                                shape: "Sb"
                            }
                        }
                    }
                },
                DataSets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DataSetIds", "Tags" ],
                        members: {
                            DataSetIds: {
                                shape: "S10e"
                            },
                            Tags: {
                                shape: "Sb"
                            }
                        }
                    }
                },
                Themes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ThemeIds", "Tags" ],
                        members: {
                            ThemeIds: {
                                shape: "S10e"
                            },
                            Tags: {
                                shape: "Sb"
                            }
                        }
                    }
                },
                Analyses: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AnalysisIds", "Tags" ],
                        members: {
                            AnalysisIds: {
                                shape: "S10e"
                            },
                            Tags: {
                                shape: "Sb"
                            }
                        }
                    }
                },
                Dashboards: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DashboardIds", "Tags" ],
                        members: {
                            DashboardIds: {
                                shape: "S10e"
                            },
                            Tags: {
                                shape: "Sb"
                            }
                        }
                    }
                }
            }
        },
        S114: {
            type: "structure",
            members: {
                StrictModeForAllResources: {
                    type: "boolean"
                }
            }
        },
        S119: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Message: {},
                    ViolatedEntities: {
                        shape: "Sy7"
                    }
                }
            }
        },
        S11m: {
            type: "structure",
            required: [ "FileGroups" ],
            members: {
                FileGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Files: {
                                shape: "S11p"
                            }
                        }
                    }
                },
                DestinationConfiguration: {
                    type: "structure",
                    members: {
                        S3Destinations: {
                            type: "list",
                            member: {
                                shape: "S11y"
                            }
                        }
                    }
                },
                Parameters: {
                    shape: "Sr"
                }
            }
        },
        S11p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SheetSelections", "FormatType" ],
                members: {
                    SheetSelections: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SheetId", "SelectionScope" ],
                            members: {
                                SheetId: {},
                                SelectionScope: {},
                                VisualIds: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    FormatType: {}
                }
            }
        },
        S11y: {
            type: "structure",
            required: [ "BucketConfiguration" ],
            members: {
                BucketConfiguration: {
                    type: "structure",
                    required: [ "BucketName", "BucketPrefix", "BucketRegion" ],
                    members: {
                        BucketName: {},
                        BucketPrefix: {},
                        BucketRegion: {}
                    }
                }
            }
        },
        S12m: {
            type: "structure",
            required: [ "RefreshConfiguration" ],
            members: {
                RefreshConfiguration: {
                    type: "structure",
                    required: [ "IncrementalRefresh" ],
                    members: {
                        IncrementalRefresh: {
                            type: "structure",
                            required: [ "LookbackWindow" ],
                            members: {
                                LookbackWindow: {
                                    type: "structure",
                                    required: [ "ColumnName", "Size", "SizeUnit" ],
                                    members: {
                                        ColumnName: {},
                                        Size: {
                                            type: "long"
                                        },
                                        SizeUnit: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S12u: {
            type: "structure",
            members: {
                Arn: {},
                DataSourceId: {},
                Name: {},
                Type: {},
                Status: {},
                CreatedTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                DataSourceParameters: {
                    shape: "Sq0"
                },
                AlternateDataSourceParameters: {
                    shape: "Srl"
                },
                VpcConnectionProperties: {
                    shape: "Sro"
                },
                SslProperties: {
                    shape: "Srp"
                },
                ErrorInfo: {
                    type: "structure",
                    members: {
                        Type: {},
                        Message: {}
                    }
                },
                SecretArn: {}
            }
        },
        S13h: {
            type: "structure",
            required: [ "Arn", "IngestionStatus", "CreatedTime" ],
            members: {
                Arn: {},
                IngestionId: {},
                IngestionStatus: {},
                ErrorInfo: {
                    type: "structure",
                    members: {
                        Type: {},
                        Message: {}
                    }
                },
                RowInfo: {
                    type: "structure",
                    members: {
                        RowsIngested: {
                            type: "long"
                        },
                        RowsDropped: {
                            type: "long"
                        },
                        TotalRowsInDataset: {
                            type: "long"
                        }
                    }
                },
                QueueInfo: {
                    type: "structure",
                    required: [ "WaitingOnIngestion", "QueuedIngestion" ],
                    members: {
                        WaitingOnIngestion: {},
                        QueuedIngestion: {}
                    }
                },
                CreatedTime: {
                    type: "timestamp"
                },
                IngestionTimeInSeconds: {
                    type: "long"
                },
                IngestionSizeInBytes: {
                    type: "long"
                },
                RequestSource: {},
                RequestType: {}
            }
        },
        S13q: {
            type: "map",
            key: {},
            value: {}
        },
        S13v: {
            type: "structure",
            members: {
                Name: {},
                Arn: {},
                CapacityRegion: {},
                CreationStatus: {},
                IdentityStore: {},
                NamespaceError: {
                    type: "structure",
                    members: {
                        Type: {},
                        Message: {}
                    }
                }
            }
        },
        S147: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Message: {},
                    ViolatedEntities: {
                        shape: "Sy7"
                    }
                }
            }
        },
        S155: {
            type: "structure",
            members: {
                Arn: {},
                UserName: {},
                Email: {},
                Role: {},
                IdentityType: {},
                Active: {
                    type: "boolean"
                },
                PrincipalId: {},
                CustomPermissionsName: {},
                ExternalLoginFederationProviderType: {},
                ExternalLoginFederationProviderUrl: {},
                ExternalLoginId: {}
            }
        },
        S15b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SubnetId: {},
                    AvailabilityZone: {},
                    ErrorMessage: {},
                    Status: {},
                    NetworkInterfaceId: {}
                }
            }
        },
        S15h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {
                        shape: "Spd"
                    }
                }
            }
        },
        S15n: {
            type: "structure",
            required: [ "DashboardId", "SheetId", "VisualId" ],
            members: {
                DashboardId: {},
                SheetId: {},
                VisualId: {}
            }
        },
        S15q: {
            type: "string",
            sensitive: true
        },
        S15v: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S16c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    AnalysisId: {},
                    Name: {},
                    Status: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S16s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    DashboardId: {},
                    Name: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    PublishedVersionNumber: {
                        type: "long"
                    },
                    LastPublishedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S16w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    DataSetId: {},
                    Name: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    ImportMode: {},
                    RowLevelPermissionDataSet: {
                        shape: "Sp4"
                    },
                    RowLevelPermissionTagConfigurationApplied: {
                        type: "boolean"
                    },
                    ColumnLevelPermissionRulesApplied: {
                        type: "boolean"
                    }
                }
            }
        },
        S177: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    FolderId: {},
                    Name: {},
                    FolderType: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    SharingModel: {}
                }
            }
        },
        S17e: {
            type: "list",
            member: {
                shape: "Ss5"
            }
        },
        S17s: {
            type: "list",
            member: {}
        },
        S1b2: {
            type: "list",
            member: {
                shape: "S1a"
            }
        },
        S1b9: {
            type: "list",
            member: {
                shape: "S1a"
            }
        }
    },
    paginators: {
        DescribeFolderPermissions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Permissions"
        },
        DescribeFolderResolvedPermissions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Permissions"
        },
        ListAnalyses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AnalysisSummaryList"
        },
        ListAssetBundleExportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AssetBundleExportJobSummaryList"
        },
        ListAssetBundleImportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AssetBundleImportJobSummaryList"
        },
        ListDashboardVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DashboardVersionSummaryList"
        },
        ListDashboards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DashboardSummaryList"
        },
        ListDataSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSetSummaries"
        },
        ListDataSources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSources"
        },
        ListFolderMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FolderMemberList"
        },
        ListFolders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FolderSummaryList"
        },
        ListGroupMemberships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GroupMemberList"
        },
        ListGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GroupList"
        },
        ListIAMPolicyAssignments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "IAMPolicyAssignments"
        },
        ListIAMPolicyAssignmentsForUser: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ActiveAssignments"
        },
        ListIngestions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Ingestions"
        },
        ListNamespaces: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Namespaces"
        },
        ListRoleMemberships: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MembersList"
        },
        ListTemplateAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TemplateAliasList"
        },
        ListTemplateVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TemplateVersionSummaryList"
        },
        ListTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TemplateSummaryList"
        },
        ListThemeVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ThemeVersionSummaryList"
        },
        ListThemes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ThemeSummaryList"
        },
        ListTopics: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListUserGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GroupList"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "UserList"
        },
        ListVPCConnections: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        SearchAnalyses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AnalysisSummaryList"
        },
        SearchDashboards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DashboardSummaryList"
        },
        SearchDataSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSetSummaries"
        },
        SearchDataSources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DataSourceSummaries"
        },
        SearchFolders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FolderSummaryList"
        },
        SearchGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GroupList"
        }
    }
};

AWS.apiLoader.services["rdsdataservice"] = {};

AWS.RDSDataService = AWS.Service.defineService("rdsdataservice", [ "2018-08-01" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    112: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.RDSDataService.prototype, {
            retryableError: function retryableError(error) {
                if (error.code === "BadRequestException" && error.message && error.message.match(/^Communications link failure/) && error.statusCode === 400) {
                    return true;
                } else {
                    var _super = AWS.Service.prototype.retryableError;
                    return _super.call(this, error);
                }
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 112 ]);

AWS.apiLoader.services["rdsdataservice"]["2018-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-08-01",
        endpointPrefix: "rds-data",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS RDS DataService",
        serviceId: "RDS Data",
        signatureVersion: "v4",
        signingName: "rds-data",
        uid: "rds-data-2018-08-01"
    },
    operations: {
        BatchExecuteStatement: {
            http: {
                requestUri: "/BatchExecute",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn", "sql" ],
                members: {
                    resourceArn: {},
                    secretArn: {},
                    sql: {},
                    database: {},
                    schema: {},
                    parameterSets: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    },
                    transactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    updateResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                generatedFields: {
                                    shape: "Sq"
                                }
                            }
                        }
                    }
                }
            }
        },
        BeginTransaction: {
            http: {
                requestUri: "/BeginTransaction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn" ],
                members: {
                    resourceArn: {},
                    secretArn: {},
                    database: {},
                    schema: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    transactionId: {}
                }
            }
        },
        CommitTransaction: {
            http: {
                requestUri: "/CommitTransaction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn", "transactionId" ],
                members: {
                    resourceArn: {},
                    secretArn: {},
                    transactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    transactionStatus: {}
                }
            }
        },
        ExecuteSql: {
            http: {
                requestUri: "/ExecuteSql",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dbClusterOrInstanceArn", "awsSecretStoreArn", "sqlStatements" ],
                members: {
                    dbClusterOrInstanceArn: {},
                    awsSecretStoreArn: {},
                    sqlStatements: {},
                    database: {},
                    schema: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sqlStatementResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resultFrame: {
                                    type: "structure",
                                    members: {
                                        resultSetMetadata: {
                                            type: "structure",
                                            members: {
                                                columnCount: {
                                                    type: "long"
                                                },
                                                columnMetadata: {
                                                    shape: "S13"
                                                }
                                            }
                                        },
                                        records: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    values: {
                                                        type: "list",
                                                        member: {
                                                            shape: "S1a"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                numberOfRecordsUpdated: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "The ExecuteSql API is deprecated, please use the ExecuteStatement API."
        },
        ExecuteStatement: {
            http: {
                requestUri: "/Execute",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn", "sql" ],
                members: {
                    resourceArn: {},
                    secretArn: {},
                    sql: {},
                    database: {},
                    schema: {},
                    parameters: {
                        shape: "S6"
                    },
                    transactionId: {},
                    includeResultMetadata: {
                        type: "boolean"
                    },
                    continueAfterTimeout: {
                        type: "boolean"
                    },
                    resultSetOptions: {
                        type: "structure",
                        members: {
                            decimalReturnType: {},
                            longReturnType: {}
                        }
                    },
                    formatRecordsAs: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    records: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    columnMetadata: {
                        shape: "S13"
                    },
                    numberOfRecordsUpdated: {
                        type: "long"
                    },
                    generatedFields: {
                        shape: "Sq"
                    },
                    formattedRecords: {}
                }
            }
        },
        RollbackTransaction: {
            http: {
                requestUri: "/RollbackTransaction",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "secretArn", "transactionId" ],
                members: {
                    resourceArn: {},
                    secretArn: {},
                    transactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    transactionStatus: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    value: {
                        shape: "S9"
                    },
                    typeHint: {}
                }
            }
        },
        S9: {
            type: "structure",
            members: {
                isNull: {
                    type: "boolean"
                },
                booleanValue: {
                    type: "boolean"
                },
                longValue: {
                    type: "long"
                },
                doubleValue: {
                    type: "double"
                },
                stringValue: {},
                blobValue: {
                    type: "blob"
                },
                arrayValue: {
                    shape: "Sf"
                }
            },
            union: true
        },
        Sf: {
            type: "structure",
            members: {
                booleanValues: {
                    type: "list",
                    member: {
                        type: "boolean"
                    }
                },
                longValues: {
                    type: "list",
                    member: {
                        type: "long"
                    }
                },
                doubleValues: {
                    type: "list",
                    member: {
                        type: "double"
                    }
                },
                stringValues: {
                    type: "list",
                    member: {}
                },
                arrayValues: {
                    type: "list",
                    member: {
                        shape: "Sf"
                    }
                }
            },
            union: true
        },
        Sq: {
            type: "list",
            member: {
                shape: "S9"
            }
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    type: {
                        type: "integer"
                    },
                    typeName: {},
                    label: {},
                    schemaName: {},
                    tableName: {},
                    isAutoIncrement: {
                        type: "boolean"
                    },
                    isSigned: {
                        type: "boolean"
                    },
                    isCurrency: {
                        type: "boolean"
                    },
                    isCaseSensitive: {
                        type: "boolean"
                    },
                    nullable: {
                        type: "integer"
                    },
                    precision: {
                        type: "integer"
                    },
                    scale: {
                        type: "integer"
                    },
                    arrayBaseColumnType: {
                        type: "integer"
                    }
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                isNull: {
                    type: "boolean"
                },
                bitValue: {
                    type: "boolean"
                },
                bigIntValue: {
                    type: "long"
                },
                intValue: {
                    type: "integer"
                },
                doubleValue: {
                    type: "double"
                },
                realValue: {
                    type: "float"
                },
                stringValue: {},
                blobValue: {
                    type: "blob"
                },
                arrayValues: {
                    shape: "S1d"
                },
                structValue: {
                    type: "structure",
                    members: {
                        attributes: {
                            shape: "S1d"
                        }
                    }
                }
            },
            union: true
        },
        S1d: {
            type: "list",
            member: {
                shape: "S1a"
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["amplify"] = {};

AWS.Amplify = AWS.Service.defineService("amplify", [ "2017-07-25" ]);

AWS.apiLoader.services["amplify"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "amplify",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Amplify",
        serviceFullName: "AWS Amplify",
        serviceId: "Amplify",
        signatureVersion: "v4",
        signingName: "amplify",
        uid: "amplify-2017-07-25"
    },
    operations: {
        CreateApp: {
            http: {
                requestUri: "/apps"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    repository: {},
                    platform: {},
                    iamServiceRoleArn: {},
                    oauthToken: {
                        shape: "S7"
                    },
                    accessToken: {
                        shape: "S8"
                    },
                    environmentVariables: {
                        shape: "S9"
                    },
                    enableBranchAutoBuild: {
                        type: "boolean"
                    },
                    enableBranchAutoDeletion: {
                        type: "boolean"
                    },
                    enableBasicAuth: {
                        type: "boolean"
                    },
                    basicAuthCredentials: {
                        shape: "Sf"
                    },
                    customRules: {
                        shape: "Sg"
                    },
                    tags: {
                        shape: "Sm"
                    },
                    buildSpec: {
                        shape: "Sp"
                    },
                    customHeaders: {},
                    enableAutoBranchCreation: {
                        type: "boolean"
                    },
                    autoBranchCreationPatterns: {
                        shape: "Ss"
                    },
                    autoBranchCreationConfig: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateBackendEnvironment: {
            http: {
                requestUri: "/apps/{appId}/backendenvironments"
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {},
                    stackName: {},
                    deploymentArtifacts: {}
                }
            },
            output: {
                type: "structure",
                required: [ "backendEnvironment" ],
                members: {
                    backendEnvironment: {
                        shape: "S1i"
                    }
                }
            }
        },
        CreateBranch: {
            http: {
                requestUri: "/apps/{appId}/branches"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {},
                    description: {},
                    stage: {},
                    framework: {},
                    enableNotification: {
                        type: "boolean"
                    },
                    enableAutoBuild: {
                        type: "boolean"
                    },
                    environmentVariables: {
                        shape: "S9"
                    },
                    basicAuthCredentials: {
                        shape: "Sf"
                    },
                    enableBasicAuth: {
                        type: "boolean"
                    },
                    enablePerformanceMode: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "Sm"
                    },
                    buildSpec: {
                        shape: "Sp"
                    },
                    ttl: {},
                    displayName: {},
                    enablePullRequestPreview: {
                        type: "boolean"
                    },
                    pullRequestEnvironmentName: {},
                    backendEnvironmentArn: {},
                    backend: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "branch" ],
                members: {
                    branch: {
                        shape: "S1r"
                    }
                }
            }
        },
        CreateDeployment: {
            http: {
                requestUri: "/apps/{appId}/branches/{branchName}/deployments"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    fileMap: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "fileUploadUrls", "zipUploadUrl" ],
                members: {
                    jobId: {},
                    fileUploadUrls: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    zipUploadUrl: {}
                }
            }
        },
        CreateDomainAssociation: {
            http: {
                requestUri: "/apps/{appId}/domains"
            },
            input: {
                type: "structure",
                required: [ "appId", "domainName", "subDomainSettings" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    domainName: {},
                    enableAutoSubDomain: {
                        type: "boolean"
                    },
                    subDomainSettings: {
                        shape: "S2a"
                    },
                    autoSubDomainCreationPatterns: {
                        shape: "S2d"
                    },
                    autoSubDomainIAMRole: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociation" ],
                members: {
                    domainAssociation: {
                        shape: "S2h"
                    }
                }
            }
        },
        CreateWebhook: {
            http: {
                requestUri: "/apps/{appId}/webhooks"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "webhook" ],
                members: {
                    webhook: {
                        shape: "S2s"
                    }
                }
            }
        },
        DeleteApp: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S12"
                    }
                }
            }
        },
        DeleteBackendEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/backendenvironments/{environmentName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "backendEnvironment" ],
                members: {
                    backendEnvironment: {
                        shape: "S1i"
                    }
                }
            }
        },
        DeleteBranch: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/branches/{branchName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "branch" ],
                members: {
                    branch: {
                        shape: "S1r"
                    }
                }
            }
        },
        DeleteDomainAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/domains/{domainName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "domainName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociation" ],
                members: {
                    domainAssociation: {
                        shape: "S2h"
                    }
                }
            }
        },
        DeleteJob: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummary" ],
                members: {
                    jobSummary: {
                        shape: "S36"
                    }
                }
            }
        },
        DeleteWebhook: {
            http: {
                method: "DELETE",
                requestUri: "/webhooks/{webhookId}"
            },
            input: {
                type: "structure",
                required: [ "webhookId" ],
                members: {
                    webhookId: {
                        location: "uri",
                        locationName: "webhookId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "webhook" ],
                members: {
                    webhook: {
                        shape: "S2s"
                    }
                }
            }
        },
        GenerateAccessLogs: {
            http: {
                requestUri: "/apps/{appId}/accesslogs"
            },
            input: {
                type: "structure",
                required: [ "domainName", "appId" ],
                members: {
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    domainName: {},
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    logUrl: {}
                }
            }
        },
        GetApp: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S12"
                    }
                }
            }
        },
        GetArtifactUrl: {
            http: {
                method: "GET",
                requestUri: "/artifacts/{artifactId}"
            },
            input: {
                type: "structure",
                required: [ "artifactId" ],
                members: {
                    artifactId: {
                        location: "uri",
                        locationName: "artifactId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "artifactId", "artifactUrl" ],
                members: {
                    artifactId: {},
                    artifactUrl: {}
                }
            }
        },
        GetBackendEnvironment: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/backendenvironments/{environmentName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "backendEnvironment" ],
                members: {
                    backendEnvironment: {
                        shape: "S1i"
                    }
                }
            }
        },
        GetBranch: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches/{branchName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "branch" ],
                members: {
                    branch: {
                        shape: "S1r"
                    }
                }
            }
        },
        GetDomainAssociation: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/domains/{domainName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "domainName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociation" ],
                members: {
                    domainAssociation: {
                        shape: "S2h"
                    }
                }
            }
        },
        GetJob: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {
                        type: "structure",
                        required: [ "summary", "steps" ],
                        members: {
                            summary: {
                                shape: "S36"
                            },
                            steps: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "stepName", "startTime", "status", "endTime" ],
                                    members: {
                                        stepName: {},
                                        startTime: {
                                            type: "timestamp"
                                        },
                                        status: {},
                                        endTime: {
                                            type: "timestamp"
                                        },
                                        logUrl: {},
                                        artifactsUrl: {},
                                        testArtifactsUrl: {},
                                        testConfigUrl: {},
                                        screenshots: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        },
                                        statusReason: {},
                                        context: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetWebhook: {
            http: {
                method: "GET",
                requestUri: "/webhooks/{webhookId}"
            },
            input: {
                type: "structure",
                required: [ "webhookId" ],
                members: {
                    webhookId: {
                        location: "uri",
                        locationName: "webhookId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "webhook" ],
                members: {
                    webhook: {
                        shape: "S2s"
                    }
                }
            }
        },
        ListApps: {
            http: {
                method: "GET",
                requestUri: "/apps"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "apps" ],
                members: {
                    apps: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListArtifacts: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs/{jobId}/artifacts"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "artifacts" ],
                members: {
                    artifacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "artifactFileName", "artifactId" ],
                            members: {
                                artifactFileName: {},
                                artifactId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBackendEnvironments: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/backendenvironments"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "querystring",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "backendEnvironments" ],
                members: {
                    backendEnvironments: {
                        type: "list",
                        member: {
                            shape: "S1i"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBranches: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "branches" ],
                members: {
                    branches: {
                        type: "list",
                        member: {
                            shape: "S1r"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDomainAssociations: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/domains"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociations" ],
                members: {
                    domainAssociations: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummaries" ],
                members: {
                    jobSummaries: {
                        type: "list",
                        member: {
                            shape: "S36"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sm"
                    }
                }
            }
        },
        ListWebhooks: {
            http: {
                method: "GET",
                requestUri: "/apps/{appId}/webhooks"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "webhooks" ],
                members: {
                    webhooks: {
                        type: "list",
                        member: {
                            shape: "S2s"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartDeployment: {
            http: {
                requestUri: "/apps/{appId}/branches/{branchName}/deployments/start"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {},
                    sourceUrl: {}
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummary" ],
                members: {
                    jobSummary: {
                        shape: "S36"
                    }
                }
            }
        },
        StartJob: {
            http: {
                requestUri: "/apps/{appId}/branches/{branchName}/jobs"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobType" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {},
                    jobType: {},
                    jobReason: {},
                    commitId: {},
                    commitMessage: {},
                    commitTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummary" ],
                members: {
                    jobSummary: {
                        shape: "S36"
                    }
                }
            }
        },
        StopJob: {
            http: {
                method: "DELETE",
                requestUri: "/apps/{appId}/branches/{branchName}/jobs/{jobId}/stop"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName", "jobId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummary" ],
                members: {
                    jobSummary: {
                        shape: "S36"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApp: {
            http: {
                requestUri: "/apps/{appId}"
            },
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    name: {},
                    description: {},
                    platform: {},
                    iamServiceRoleArn: {},
                    environmentVariables: {
                        shape: "S9"
                    },
                    enableBranchAutoBuild: {
                        type: "boolean"
                    },
                    enableBranchAutoDeletion: {
                        type: "boolean"
                    },
                    enableBasicAuth: {
                        type: "boolean"
                    },
                    basicAuthCredentials: {
                        shape: "Sf"
                    },
                    customRules: {
                        shape: "Sg"
                    },
                    buildSpec: {
                        shape: "Sp"
                    },
                    customHeaders: {},
                    enableAutoBranchCreation: {
                        type: "boolean"
                    },
                    autoBranchCreationPatterns: {
                        shape: "Ss"
                    },
                    autoBranchCreationConfig: {
                        shape: "Su"
                    },
                    repository: {},
                    oauthToken: {
                        shape: "S7"
                    },
                    accessToken: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "S12"
                    }
                }
            }
        },
        UpdateBranch: {
            http: {
                requestUri: "/apps/{appId}/branches/{branchName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "branchName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    branchName: {
                        location: "uri",
                        locationName: "branchName"
                    },
                    description: {},
                    framework: {},
                    stage: {},
                    enableNotification: {
                        type: "boolean"
                    },
                    enableAutoBuild: {
                        type: "boolean"
                    },
                    environmentVariables: {
                        shape: "S9"
                    },
                    basicAuthCredentials: {
                        shape: "Sf"
                    },
                    enableBasicAuth: {
                        type: "boolean"
                    },
                    enablePerformanceMode: {
                        type: "boolean"
                    },
                    buildSpec: {
                        shape: "Sp"
                    },
                    ttl: {},
                    displayName: {},
                    enablePullRequestPreview: {
                        type: "boolean"
                    },
                    pullRequestEnvironmentName: {},
                    backendEnvironmentArn: {},
                    backend: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "branch" ],
                members: {
                    branch: {
                        shape: "S1r"
                    }
                }
            }
        },
        UpdateDomainAssociation: {
            http: {
                requestUri: "/apps/{appId}/domains/{domainName}"
            },
            input: {
                type: "structure",
                required: [ "appId", "domainName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    enableAutoSubDomain: {
                        type: "boolean"
                    },
                    subDomainSettings: {
                        shape: "S2a"
                    },
                    autoSubDomainCreationPatterns: {
                        shape: "S2d"
                    },
                    autoSubDomainIAMRole: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainAssociation" ],
                members: {
                    domainAssociation: {
                        shape: "S2h"
                    }
                }
            }
        },
        UpdateWebhook: {
            http: {
                requestUri: "/webhooks/{webhookId}"
            },
            input: {
                type: "structure",
                required: [ "webhookId" ],
                members: {
                    webhookId: {
                        location: "uri",
                        locationName: "webhookId"
                    },
                    branchName: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "webhook" ],
                members: {
                    webhook: {
                        shape: "S2s"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "string",
            sensitive: true
        },
        S9: {
            type: "map",
            key: {},
            value: {}
        },
        Sf: {
            type: "string",
            sensitive: true
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "source", "target" ],
                members: {
                    source: {},
                    target: {},
                    status: {},
                    condition: {}
                }
            }
        },
        Sm: {
            type: "map",
            key: {},
            value: {}
        },
        Sp: {
            type: "string",
            sensitive: true
        },
        Ss: {
            type: "list",
            member: {}
        },
        Su: {
            type: "structure",
            members: {
                stage: {},
                framework: {},
                enableAutoBuild: {
                    type: "boolean"
                },
                environmentVariables: {
                    shape: "S9"
                },
                basicAuthCredentials: {
                    shape: "Sf"
                },
                enableBasicAuth: {
                    type: "boolean"
                },
                enablePerformanceMode: {
                    type: "boolean"
                },
                buildSpec: {
                    shape: "Sp"
                },
                enablePullRequestPreview: {
                    type: "boolean"
                },
                pullRequestEnvironmentName: {}
            }
        },
        S12: {
            type: "structure",
            required: [ "appId", "appArn", "name", "description", "repository", "platform", "createTime", "updateTime", "environmentVariables", "defaultDomain", "enableBranchAutoBuild", "enableBasicAuth" ],
            members: {
                appId: {},
                appArn: {},
                name: {},
                tags: {
                    shape: "Sm"
                },
                description: {},
                repository: {},
                platform: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                iamServiceRoleArn: {},
                environmentVariables: {
                    shape: "S9"
                },
                defaultDomain: {},
                enableBranchAutoBuild: {
                    type: "boolean"
                },
                enableBranchAutoDeletion: {
                    type: "boolean"
                },
                enableBasicAuth: {
                    type: "boolean"
                },
                basicAuthCredentials: {
                    shape: "Sf"
                },
                customRules: {
                    shape: "Sg"
                },
                productionBranch: {
                    type: "structure",
                    members: {
                        lastDeployTime: {
                            type: "timestamp"
                        },
                        status: {},
                        thumbnailUrl: {},
                        branchName: {}
                    }
                },
                buildSpec: {
                    shape: "Sp"
                },
                customHeaders: {},
                enableAutoBranchCreation: {
                    type: "boolean"
                },
                autoBranchCreationPatterns: {
                    shape: "Ss"
                },
                autoBranchCreationConfig: {
                    shape: "Su"
                },
                repositoryCloneMethod: {}
            }
        },
        S1i: {
            type: "structure",
            required: [ "backendEnvironmentArn", "environmentName", "createTime", "updateTime" ],
            members: {
                backendEnvironmentArn: {},
                environmentName: {},
                stackName: {},
                deploymentArtifacts: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                stackArn: {}
            }
        },
        S1r: {
            type: "structure",
            required: [ "branchArn", "branchName", "description", "stage", "displayName", "enableNotification", "createTime", "updateTime", "environmentVariables", "enableAutoBuild", "customDomains", "framework", "activeJobId", "totalNumberOfJobs", "enableBasicAuth", "ttl", "enablePullRequestPreview" ],
            members: {
                branchArn: {},
                branchName: {},
                description: {},
                tags: {
                    shape: "Sm"
                },
                stage: {},
                displayName: {},
                enableNotification: {
                    type: "boolean"
                },
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                },
                environmentVariables: {
                    shape: "S9"
                },
                enableAutoBuild: {
                    type: "boolean"
                },
                customDomains: {
                    type: "list",
                    member: {}
                },
                framework: {},
                activeJobId: {},
                totalNumberOfJobs: {},
                enableBasicAuth: {
                    type: "boolean"
                },
                enablePerformanceMode: {
                    type: "boolean"
                },
                thumbnailUrl: {},
                basicAuthCredentials: {
                    shape: "Sf"
                },
                buildSpec: {
                    shape: "Sp"
                },
                ttl: {},
                associatedResources: {
                    type: "list",
                    member: {}
                },
                enablePullRequestPreview: {
                    type: "boolean"
                },
                pullRequestEnvironmentName: {},
                destinationBranch: {},
                sourceBranch: {},
                backendEnvironmentArn: {},
                backend: {
                    shape: "S1o"
                }
            }
        },
        S2a: {
            type: "list",
            member: {
                shape: "S2b"
            }
        },
        S2b: {
            type: "structure",
            required: [ "prefix", "branchName" ],
            members: {
                prefix: {},
                branchName: {}
            }
        },
        S2d: {
            type: "list",
            member: {}
        },
        S2h: {
            type: "structure",
            required: [ "domainAssociationArn", "domainName", "enableAutoSubDomain", "domainStatus", "statusReason", "subDomains" ],
            members: {
                domainAssociationArn: {},
                domainName: {},
                enableAutoSubDomain: {
                    type: "boolean"
                },
                autoSubDomainCreationPatterns: {
                    shape: "S2d"
                },
                autoSubDomainIAMRole: {},
                domainStatus: {},
                statusReason: {},
                certificateVerificationDNSRecord: {},
                subDomains: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "subDomainSetting", "verified", "dnsRecord" ],
                        members: {
                            subDomainSetting: {
                                shape: "S2b"
                            },
                            verified: {
                                type: "boolean"
                            },
                            dnsRecord: {}
                        }
                    }
                }
            }
        },
        S2s: {
            type: "structure",
            required: [ "webhookArn", "webhookId", "webhookUrl", "branchName", "description", "createTime", "updateTime" ],
            members: {
                webhookArn: {},
                webhookId: {},
                webhookUrl: {},
                branchName: {},
                description: {},
                createTime: {
                    type: "timestamp"
                },
                updateTime: {
                    type: "timestamp"
                }
            }
        },
        S36: {
            type: "structure",
            required: [ "jobArn", "jobId", "commitId", "commitMessage", "commitTime", "startTime", "status", "jobType" ],
            members: {
                jobArn: {},
                jobId: {},
                commitId: {},
                commitMessage: {},
                commitTime: {
                    type: "timestamp"
                },
                startTime: {
                    type: "timestamp"
                },
                status: {},
                endTime: {
                    type: "timestamp"
                },
                jobType: {}
            }
        }
    },
    paginators: {
        ListApps: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "apps"
        },
        ListBranches: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "branches"
        },
        ListDomainAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "domainAssociations"
        },
        ListJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobSummaries"
        }
    }
};

AWS.apiLoader.services["datasync"] = {};

AWS.DataSync = AWS.Service.defineService("datasync", [ "2018-11-09" ]);

AWS.apiLoader.services["datasync"]["2018-11-09"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-09",
        endpointPrefix: "datasync",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "DataSync",
        serviceFullName: "AWS DataSync",
        serviceId: "DataSync",
        signatureVersion: "v4",
        signingName: "datasync",
        targetPrefix: "FmrsService",
        uid: "datasync-2018-11-09"
    },
    operations: {
        AddStorageSystem: {
            input: {
                type: "structure",
                required: [ "ServerConfiguration", "SystemType", "AgentArns", "ClientToken", "Credentials" ],
                members: {
                    ServerConfiguration: {
                        shape: "S2"
                    },
                    SystemType: {},
                    AgentArns: {
                        shape: "S6"
                    },
                    CloudWatchLogGroupArn: {},
                    Tags: {
                        shape: "S9"
                    },
                    Name: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Credentials: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StorageSystemArn" ],
                members: {
                    StorageSystemArn: {}
                }
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        CancelTaskExecution: {
            input: {
                type: "structure",
                required: [ "TaskExecutionArn" ],
                members: {
                    TaskExecutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAgent: {
            input: {
                type: "structure",
                required: [ "ActivationKey" ],
                members: {
                    ActivationKey: {},
                    AgentName: {},
                    Tags: {
                        shape: "S9"
                    },
                    VpcEndpointId: {},
                    SubnetArns: {
                        shape: "Sq"
                    },
                    SecurityGroupArns: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AgentArn: {}
                }
            }
        },
        CreateLocationAzureBlob: {
            input: {
                type: "structure",
                required: [ "ContainerUrl", "AuthenticationType", "AgentArns" ],
                members: {
                    ContainerUrl: {},
                    AuthenticationType: {},
                    SasConfiguration: {
                        shape: "Sy"
                    },
                    BlobType: {},
                    AccessTier: {},
                    Subdirectory: {},
                    AgentArns: {
                        shape: "S13"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationEfs: {
            input: {
                type: "structure",
                required: [ "EfsFilesystemArn", "Ec2Config" ],
                members: {
                    Subdirectory: {},
                    EfsFilesystemArn: {},
                    Ec2Config: {
                        shape: "S19"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    AccessPointArn: {},
                    FileSystemAccessRoleArn: {},
                    InTransitEncryption: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationFsxLustre: {
            input: {
                type: "structure",
                required: [ "FsxFilesystemArn", "SecurityGroupArns" ],
                members: {
                    FsxFilesystemArn: {},
                    SecurityGroupArns: {
                        shape: "S1a"
                    },
                    Subdirectory: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationFsxOntap: {
            input: {
                type: "structure",
                required: [ "Protocol", "SecurityGroupArns", "StorageVirtualMachineArn" ],
                members: {
                    Protocol: {
                        shape: "S1k"
                    },
                    SecurityGroupArns: {
                        shape: "S1a"
                    },
                    StorageVirtualMachineArn: {},
                    Subdirectory: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationFsxOpenZfs: {
            input: {
                type: "structure",
                required: [ "FsxFilesystemArn", "Protocol", "SecurityGroupArns" ],
                members: {
                    FsxFilesystemArn: {},
                    Protocol: {
                        shape: "S1k"
                    },
                    SecurityGroupArns: {
                        shape: "S1a"
                    },
                    Subdirectory: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationFsxWindows: {
            input: {
                type: "structure",
                required: [ "FsxFilesystemArn", "SecurityGroupArns", "User", "Password" ],
                members: {
                    Subdirectory: {},
                    FsxFilesystemArn: {},
                    SecurityGroupArns: {
                        shape: "S1a"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    User: {},
                    Domain: {},
                    Password: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationHdfs: {
            input: {
                type: "structure",
                required: [ "NameNodes", "AuthenticationType", "AgentArns" ],
                members: {
                    Subdirectory: {},
                    NameNodes: {
                        shape: "S25"
                    },
                    BlockSize: {
                        type: "integer"
                    },
                    ReplicationFactor: {
                        type: "integer"
                    },
                    KmsKeyProviderUri: {},
                    QopConfiguration: {
                        shape: "S2c"
                    },
                    AuthenticationType: {},
                    SimpleUser: {},
                    KerberosPrincipal: {},
                    KerberosKeytab: {
                        type: "blob"
                    },
                    KerberosKrb5Conf: {
                        type: "blob"
                    },
                    AgentArns: {
                        shape: "S13"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationNfs: {
            input: {
                type: "structure",
                required: [ "Subdirectory", "ServerHostname", "OnPremConfig" ],
                members: {
                    Subdirectory: {},
                    ServerHostname: {},
                    OnPremConfig: {
                        shape: "S2o"
                    },
                    MountOptions: {
                        shape: "S1m"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationObjectStorage: {
            input: {
                type: "structure",
                required: [ "ServerHostname", "BucketName", "AgentArns" ],
                members: {
                    ServerHostname: {},
                    ServerPort: {
                        type: "integer"
                    },
                    ServerProtocol: {},
                    Subdirectory: {},
                    BucketName: {},
                    AccessKey: {},
                    SecretKey: {
                        shape: "S2w"
                    },
                    AgentArns: {
                        shape: "S13"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    ServerCertificate: {
                        type: "blob"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationS3: {
            input: {
                type: "structure",
                required: [ "S3BucketArn", "S3Config" ],
                members: {
                    Subdirectory: {},
                    S3BucketArn: {},
                    S3StorageClass: {},
                    S3Config: {
                        shape: "S32"
                    },
                    AgentArns: {
                        shape: "S13"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateLocationSmb: {
            input: {
                type: "structure",
                required: [ "Subdirectory", "ServerHostname", "User", "Password", "AgentArns" ],
                members: {
                    Subdirectory: {},
                    ServerHostname: {},
                    User: {},
                    Domain: {},
                    Password: {
                        shape: "S1s"
                    },
                    AgentArns: {
                        shape: "S13"
                    },
                    MountOptions: {
                        shape: "S1q"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {}
                }
            }
        },
        CreateTask: {
            input: {
                type: "structure",
                required: [ "SourceLocationArn", "DestinationLocationArn" ],
                members: {
                    SourceLocationArn: {},
                    DestinationLocationArn: {},
                    CloudWatchLogGroupArn: {},
                    Name: {},
                    Options: {
                        shape: "S38"
                    },
                    Excludes: {
                        shape: "S3o"
                    },
                    Schedule: {
                        shape: "S3s"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    Includes: {
                        shape: "S3o"
                    },
                    TaskReportConfig: {
                        shape: "S3u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskArn: {}
                }
            }
        },
        DeleteAgent: {
            input: {
                type: "structure",
                required: [ "AgentArn" ],
                members: {
                    AgentArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLocation: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTask: {
            input: {
                type: "structure",
                required: [ "TaskArn" ],
                members: {
                    TaskArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAgent: {
            input: {
                type: "structure",
                required: [ "AgentArn" ],
                members: {
                    AgentArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AgentArn: {},
                    Name: {},
                    Status: {},
                    LastConnectionTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    EndpointType: {},
                    PrivateLinkConfig: {
                        type: "structure",
                        members: {
                            VpcEndpointId: {},
                            PrivateLinkEndpoint: {},
                            SubnetArns: {
                                shape: "Sq"
                            },
                            SecurityGroupArns: {
                                shape: "Ss"
                            }
                        }
                    },
                    Platform: {
                        shape: "S4h"
                    }
                }
            }
        },
        DescribeDiscoveryJob: {
            input: {
                type: "structure",
                required: [ "DiscoveryJobArn" ],
                members: {
                    DiscoveryJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageSystemArn: {},
                    DiscoveryJobArn: {},
                    CollectionDurationMinutes: {
                        type: "integer"
                    },
                    Status: {},
                    JobStartTime: {
                        type: "timestamp"
                    },
                    JobEndTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        DescribeLocationAzureBlob: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    AuthenticationType: {},
                    BlobType: {},
                    AccessTier: {},
                    AgentArns: {
                        shape: "S13"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationEfs: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    Ec2Config: {
                        shape: "S19"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    AccessPointArn: {},
                    FileSystemAccessRoleArn: {},
                    InTransitEncryption: {}
                }
            }
        },
        DescribeLocationFsxLustre: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    SecurityGroupArns: {
                        shape: "S1a"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationFsxOntap: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CreationTime: {
                        type: "timestamp"
                    },
                    LocationArn: {},
                    LocationUri: {},
                    Protocol: {
                        shape: "S1k"
                    },
                    SecurityGroupArns: {
                        shape: "S1a"
                    },
                    StorageVirtualMachineArn: {},
                    FsxFilesystemArn: {}
                }
            }
        },
        DescribeLocationFsxOpenZfs: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    SecurityGroupArns: {
                        shape: "S1a"
                    },
                    Protocol: {
                        shape: "S1k"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationFsxWindows: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    SecurityGroupArns: {
                        shape: "S1a"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    User: {},
                    Domain: {}
                }
            }
        },
        DescribeLocationHdfs: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    NameNodes: {
                        shape: "S25"
                    },
                    BlockSize: {
                        type: "integer"
                    },
                    ReplicationFactor: {
                        type: "integer"
                    },
                    KmsKeyProviderUri: {},
                    QopConfiguration: {
                        shape: "S2c"
                    },
                    AuthenticationType: {},
                    SimpleUser: {},
                    KerberosPrincipal: {},
                    AgentArns: {
                        shape: "S13"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationNfs: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    OnPremConfig: {
                        shape: "S2o"
                    },
                    MountOptions: {
                        shape: "S1m"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationObjectStorage: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    AccessKey: {},
                    ServerPort: {
                        type: "integer"
                    },
                    ServerProtocol: {},
                    AgentArns: {
                        shape: "S13"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    ServerCertificate: {
                        type: "blob"
                    }
                }
            }
        },
        DescribeLocationS3: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    S3StorageClass: {},
                    S3Config: {
                        shape: "S32"
                    },
                    AgentArns: {
                        shape: "S13"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeLocationSmb: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LocationArn: {},
                    LocationUri: {},
                    AgentArns: {
                        shape: "S13"
                    },
                    User: {},
                    Domain: {},
                    MountOptions: {
                        shape: "S1q"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeStorageSystem: {
            input: {
                type: "structure",
                required: [ "StorageSystemArn" ],
                members: {
                    StorageSystemArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageSystemArn: {},
                    ServerConfiguration: {
                        shape: "S2"
                    },
                    SystemType: {},
                    AgentArns: {
                        shape: "S6"
                    },
                    Name: {},
                    ErrorMessage: {},
                    ConnectivityStatus: {},
                    CloudWatchLogGroupArn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    SecretsManagerArn: {}
                }
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        DescribeStorageSystemResourceMetrics: {
            input: {
                type: "structure",
                required: [ "DiscoveryJobArn", "ResourceType", "ResourceId" ],
                members: {
                    DiscoveryJobArn: {},
                    ResourceType: {},
                    ResourceId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Metrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                P95Metrics: {
                                    type: "structure",
                                    members: {
                                        IOPS: {
                                            type: "structure",
                                            members: {
                                                Read: {
                                                    type: "double"
                                                },
                                                Write: {
                                                    type: "double"
                                                },
                                                Other: {
                                                    type: "double"
                                                },
                                                Total: {
                                                    type: "double"
                                                }
                                            }
                                        },
                                        Throughput: {
                                            type: "structure",
                                            members: {
                                                Read: {
                                                    type: "double"
                                                },
                                                Write: {
                                                    type: "double"
                                                },
                                                Other: {
                                                    type: "double"
                                                },
                                                Total: {
                                                    type: "double"
                                                }
                                            }
                                        },
                                        Latency: {
                                            type: "structure",
                                            members: {
                                                Read: {
                                                    type: "double"
                                                },
                                                Write: {
                                                    type: "double"
                                                },
                                                Other: {
                                                    type: "double"
                                                }
                                            }
                                        }
                                    }
                                },
                                Capacity: {
                                    type: "structure",
                                    members: {
                                        Used: {
                                            type: "long"
                                        },
                                        Provisioned: {
                                            type: "long"
                                        },
                                        LogicalUsed: {
                                            type: "long"
                                        },
                                        ClusterCloudStorageUsed: {
                                            type: "long"
                                        }
                                    }
                                },
                                ResourceId: {},
                                ResourceType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        DescribeStorageSystemResources: {
            input: {
                type: "structure",
                required: [ "DiscoveryJobArn", "ResourceType" ],
                members: {
                    DiscoveryJobArn: {},
                    ResourceType: {},
                    ResourceIds: {
                        shape: "S5y"
                    },
                    Filter: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceDetails: {
                        type: "structure",
                        members: {
                            NetAppONTAPSVMs: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ClusterUuid: {},
                                        ResourceId: {},
                                        SvmName: {},
                                        CifsShareCount: {
                                            type: "long"
                                        },
                                        EnabledProtocols: {
                                            type: "list",
                                            member: {}
                                        },
                                        TotalCapacityUsed: {
                                            type: "long"
                                        },
                                        TotalCapacityProvisioned: {
                                            type: "long"
                                        },
                                        TotalLogicalCapacityUsed: {
                                            type: "long"
                                        },
                                        MaxP95Performance: {
                                            shape: "S68"
                                        },
                                        Recommendations: {
                                            shape: "S69"
                                        },
                                        NfsExportedVolumes: {
                                            type: "long"
                                        },
                                        RecommendationStatus: {},
                                        TotalSnapshotCapacityUsed: {
                                            type: "long"
                                        },
                                        LunCount: {
                                            type: "long"
                                        }
                                    }
                                }
                            },
                            NetAppONTAPVolumes: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        VolumeName: {},
                                        ResourceId: {},
                                        CifsShareCount: {
                                            type: "long"
                                        },
                                        SecurityStyle: {},
                                        SvmUuid: {},
                                        SvmName: {},
                                        CapacityUsed: {
                                            type: "long"
                                        },
                                        CapacityProvisioned: {
                                            type: "long"
                                        },
                                        LogicalCapacityUsed: {
                                            type: "long"
                                        },
                                        NfsExported: {
                                            type: "boolean"
                                        },
                                        SnapshotCapacityUsed: {
                                            type: "long"
                                        },
                                        MaxP95Performance: {
                                            shape: "S68"
                                        },
                                        Recommendations: {
                                            shape: "S69"
                                        },
                                        RecommendationStatus: {},
                                        LunCount: {
                                            type: "long"
                                        }
                                    }
                                }
                            },
                            NetAppONTAPClusters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        CifsShareCount: {
                                            type: "long"
                                        },
                                        NfsExportedVolumes: {
                                            type: "long"
                                        },
                                        ResourceId: {},
                                        ClusterName: {},
                                        MaxP95Performance: {
                                            shape: "S68"
                                        },
                                        ClusterBlockStorageSize: {
                                            type: "long"
                                        },
                                        ClusterBlockStorageUsed: {
                                            type: "long"
                                        },
                                        ClusterBlockStorageLogicalUsed: {
                                            type: "long"
                                        },
                                        Recommendations: {
                                            shape: "S69"
                                        },
                                        RecommendationStatus: {},
                                        LunCount: {
                                            type: "long"
                                        },
                                        ClusterCloudStorageUsed: {
                                            type: "long"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        DescribeTask: {
            input: {
                type: "structure",
                required: [ "TaskArn" ],
                members: {
                    TaskArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskArn: {},
                    Status: {},
                    Name: {},
                    CurrentTaskExecutionArn: {},
                    SourceLocationArn: {},
                    DestinationLocationArn: {},
                    CloudWatchLogGroupArn: {},
                    SourceNetworkInterfaceArns: {
                        type: "list",
                        member: {}
                    },
                    DestinationNetworkInterfaceArns: {
                        type: "list",
                        member: {}
                    },
                    Options: {
                        shape: "S38"
                    },
                    Excludes: {
                        shape: "S3o"
                    },
                    Schedule: {
                        shape: "S3s"
                    },
                    ErrorCode: {},
                    ErrorDetail: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    Includes: {
                        shape: "S3o"
                    },
                    TaskReportConfig: {
                        shape: "S3u"
                    }
                }
            }
        },
        DescribeTaskExecution: {
            input: {
                type: "structure",
                required: [ "TaskExecutionArn" ],
                members: {
                    TaskExecutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskExecutionArn: {},
                    Status: {},
                    Options: {
                        shape: "S38"
                    },
                    Excludes: {
                        shape: "S3o"
                    },
                    Includes: {
                        shape: "S3o"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EstimatedFilesToTransfer: {
                        type: "long"
                    },
                    EstimatedBytesToTransfer: {
                        type: "long"
                    },
                    FilesTransferred: {
                        type: "long"
                    },
                    BytesWritten: {
                        type: "long"
                    },
                    BytesTransferred: {
                        type: "long"
                    },
                    Result: {
                        type: "structure",
                        members: {
                            PrepareDuration: {
                                type: "long"
                            },
                            PrepareStatus: {},
                            TotalDuration: {
                                type: "long"
                            },
                            TransferDuration: {
                                type: "long"
                            },
                            TransferStatus: {},
                            VerifyDuration: {
                                type: "long"
                            },
                            VerifyStatus: {},
                            ErrorCode: {},
                            ErrorDetail: {}
                        }
                    },
                    BytesCompressed: {
                        type: "long"
                    },
                    TaskReportConfig: {
                        shape: "S3u"
                    },
                    FilesDeleted: {
                        type: "long"
                    },
                    FilesSkipped: {
                        type: "long"
                    },
                    FilesVerified: {
                        type: "long"
                    },
                    ReportResult: {
                        type: "structure",
                        members: {
                            Status: {},
                            ErrorCode: {},
                            ErrorDetail: {}
                        }
                    },
                    EstimatedFilesToDelete: {
                        type: "long"
                    }
                }
            }
        },
        GenerateRecommendations: {
            input: {
                type: "structure",
                required: [ "DiscoveryJobArn", "ResourceIds", "ResourceType" ],
                members: {
                    DiscoveryJobArn: {},
                    ResourceIds: {
                        shape: "S5y"
                    },
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        ListAgents: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Agents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AgentArn: {},
                                Name: {},
                                Status: {},
                                Platform: {
                                    shape: "S4h"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDiscoveryJobs: {
            input: {
                type: "structure",
                members: {
                    StorageSystemArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DiscoveryJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DiscoveryJobArn: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        ListLocations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values", "Operator" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S7d"
                                },
                                Operator: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Locations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LocationArn: {},
                                LocationUri: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStorageSystems: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageSystems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StorageSystemArn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        type: "list",
                        member: {
                            shape: "Sa"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTaskExecutions: {
            input: {
                type: "structure",
                members: {
                    TaskArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TaskExecutionArn: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTasks: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values", "Operator" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S7d"
                                },
                                Operator: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TaskArn: {},
                                Status: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        RemoveStorageSystem: {
            input: {
                type: "structure",
                required: [ "StorageSystemArn" ],
                members: {
                    StorageSystemArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        StartDiscoveryJob: {
            input: {
                type: "structure",
                required: [ "StorageSystemArn", "CollectionDurationMinutes", "ClientToken" ],
                members: {
                    StorageSystemArn: {},
                    CollectionDurationMinutes: {
                        type: "integer"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DiscoveryJobArn: {}
                }
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        StartTaskExecution: {
            input: {
                type: "structure",
                required: [ "TaskArn" ],
                members: {
                    TaskArn: {},
                    OverrideOptions: {
                        shape: "S38"
                    },
                    Includes: {
                        shape: "S3o"
                    },
                    Excludes: {
                        shape: "S3o"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    TaskReportConfig: {
                        shape: "S3u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskExecutionArn: {}
                }
            }
        },
        StopDiscoveryJob: {
            input: {
                type: "structure",
                required: [ "DiscoveryJobArn" ],
                members: {
                    DiscoveryJobArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Keys" ],
                members: {
                    ResourceArn: {},
                    Keys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAgent: {
            input: {
                type: "structure",
                required: [ "AgentArn" ],
                members: {
                    AgentArn: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDiscoveryJob: {
            input: {
                type: "structure",
                required: [ "DiscoveryJobArn", "CollectionDurationMinutes" ],
                members: {
                    DiscoveryJobArn: {},
                    CollectionDurationMinutes: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        UpdateLocationAzureBlob: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {},
                    Subdirectory: {},
                    AuthenticationType: {},
                    SasConfiguration: {
                        shape: "Sy"
                    },
                    BlobType: {},
                    AccessTier: {},
                    AgentArns: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLocationHdfs: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {},
                    Subdirectory: {},
                    NameNodes: {
                        shape: "S25"
                    },
                    BlockSize: {
                        type: "integer"
                    },
                    ReplicationFactor: {
                        type: "integer"
                    },
                    KmsKeyProviderUri: {},
                    QopConfiguration: {
                        shape: "S2c"
                    },
                    AuthenticationType: {},
                    SimpleUser: {},
                    KerberosPrincipal: {},
                    KerberosKeytab: {
                        type: "blob"
                    },
                    KerberosKrb5Conf: {
                        type: "blob"
                    },
                    AgentArns: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLocationNfs: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {},
                    Subdirectory: {},
                    OnPremConfig: {
                        shape: "S2o"
                    },
                    MountOptions: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLocationObjectStorage: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {},
                    ServerPort: {
                        type: "integer"
                    },
                    ServerProtocol: {},
                    Subdirectory: {},
                    AccessKey: {},
                    SecretKey: {
                        shape: "S2w"
                    },
                    AgentArns: {
                        shape: "S13"
                    },
                    ServerCertificate: {
                        type: "blob"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLocationSmb: {
            input: {
                type: "structure",
                required: [ "LocationArn" ],
                members: {
                    LocationArn: {},
                    Subdirectory: {},
                    User: {},
                    Domain: {},
                    Password: {
                        shape: "S1s"
                    },
                    AgentArns: {
                        shape: "S13"
                    },
                    MountOptions: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateStorageSystem: {
            input: {
                type: "structure",
                required: [ "StorageSystemArn" ],
                members: {
                    StorageSystemArn: {},
                    ServerConfiguration: {
                        shape: "S2"
                    },
                    AgentArns: {
                        shape: "S6"
                    },
                    Name: {},
                    CloudWatchLogGroupArn: {},
                    Credentials: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "discovery-"
            }
        },
        UpdateTask: {
            input: {
                type: "structure",
                required: [ "TaskArn" ],
                members: {
                    TaskArn: {},
                    Options: {
                        shape: "S38"
                    },
                    Excludes: {
                        shape: "S3o"
                    },
                    Schedule: {
                        shape: "S3s"
                    },
                    Name: {},
                    CloudWatchLogGroupArn: {},
                    Includes: {
                        shape: "S3o"
                    },
                    TaskReportConfig: {
                        shape: "S3u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTaskExecution: {
            input: {
                type: "structure",
                required: [ "TaskExecutionArn", "Options" ],
                members: {
                    TaskExecutionArn: {},
                    Options: {
                        shape: "S38"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "ServerHostname" ],
            members: {
                ServerHostname: {},
                ServerPort: {
                    type: "integer"
                }
            }
        },
        S6: {
            type: "list",
            member: {}
        },
        S9: {
            type: "list",
            member: {
                shape: "Sa"
            }
        },
        Sa: {
            type: "structure",
            required: [ "Key" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        Sf: {
            type: "structure",
            required: [ "Username", "Password" ],
            members: {
                Username: {
                    type: "string",
                    sensitive: true
                },
                Password: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Sq: {
            type: "list",
            member: {}
        },
        Ss: {
            type: "list",
            member: {}
        },
        Sy: {
            type: "structure",
            required: [ "Token" ],
            members: {
                Token: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S13: {
            type: "list",
            member: {}
        },
        S19: {
            type: "structure",
            required: [ "SubnetArn", "SecurityGroupArns" ],
            members: {
                SubnetArn: {},
                SecurityGroupArns: {
                    shape: "S1a"
                }
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "structure",
            members: {
                NFS: {
                    type: "structure",
                    members: {
                        MountOptions: {
                            shape: "S1m"
                        }
                    }
                },
                SMB: {
                    type: "structure",
                    required: [ "Password", "User" ],
                    members: {
                        Domain: {},
                        MountOptions: {
                            shape: "S1q"
                        },
                        Password: {
                            shape: "S1s"
                        },
                        User: {}
                    }
                }
            }
        },
        S1m: {
            type: "structure",
            members: {
                Version: {}
            }
        },
        S1q: {
            type: "structure",
            members: {
                Version: {}
            }
        },
        S1s: {
            type: "string",
            sensitive: true
        },
        S25: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Hostname", "Port" ],
                members: {
                    Hostname: {},
                    Port: {
                        type: "integer"
                    }
                }
            }
        },
        S2c: {
            type: "structure",
            members: {
                RpcProtection: {},
                DataTransferProtection: {}
            }
        },
        S2o: {
            type: "structure",
            required: [ "AgentArns" ],
            members: {
                AgentArns: {
                    shape: "S13"
                }
            }
        },
        S2w: {
            type: "string",
            sensitive: true
        },
        S32: {
            type: "structure",
            required: [ "BucketAccessRoleArn" ],
            members: {
                BucketAccessRoleArn: {}
            }
        },
        S38: {
            type: "structure",
            members: {
                VerifyMode: {},
                OverwriteMode: {},
                Atime: {},
                Mtime: {},
                Uid: {},
                Gid: {},
                PreserveDeletedFiles: {},
                PreserveDevices: {},
                PosixPermissions: {},
                BytesPerSecond: {
                    type: "long"
                },
                TaskQueueing: {},
                LogLevel: {},
                TransferMode: {},
                SecurityDescriptorCopyFlags: {},
                ObjectTags: {}
            }
        },
        S3o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FilterType: {},
                    Value: {}
                }
            }
        },
        S3s: {
            type: "structure",
            required: [ "ScheduleExpression" ],
            members: {
                ScheduleExpression: {}
            }
        },
        S3u: {
            type: "structure",
            members: {
                Destination: {
                    type: "structure",
                    members: {
                        S3: {
                            type: "structure",
                            required: [ "S3BucketArn", "BucketAccessRoleArn" ],
                            members: {
                                Subdirectory: {},
                                S3BucketArn: {},
                                BucketAccessRoleArn: {}
                            }
                        }
                    }
                },
                OutputType: {},
                ReportLevel: {},
                ObjectVersionIds: {},
                Overrides: {
                    type: "structure",
                    members: {
                        Transferred: {
                            shape: "S41"
                        },
                        Verified: {
                            shape: "S41"
                        },
                        Deleted: {
                            shape: "S41"
                        },
                        Skipped: {
                            shape: "S41"
                        }
                    }
                }
            }
        },
        S41: {
            type: "structure",
            members: {
                ReportLevel: {}
            }
        },
        S4h: {
            type: "structure",
            members: {
                Version: {}
            }
        },
        S5y: {
            type: "list",
            member: {}
        },
        S68: {
            type: "structure",
            members: {
                IopsRead: {
                    type: "double"
                },
                IopsWrite: {
                    type: "double"
                },
                IopsOther: {
                    type: "double"
                },
                IopsTotal: {
                    type: "double"
                },
                ThroughputRead: {
                    type: "double"
                },
                ThroughputWrite: {
                    type: "double"
                },
                ThroughputOther: {
                    type: "double"
                },
                ThroughputTotal: {
                    type: "double"
                },
                LatencyRead: {
                    type: "double"
                },
                LatencyWrite: {
                    type: "double"
                },
                LatencyOther: {
                    type: "double"
                }
            }
        },
        S69: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StorageType: {},
                    StorageConfiguration: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    EstimatedMonthlyStorageCost: {}
                }
            }
        },
        S7d: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeStorageSystemResourceMetrics: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Metrics"
        },
        DescribeStorageSystemResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAgents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Agents"
        },
        ListDiscoveryJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DiscoveryJobs"
        },
        ListLocations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Locations"
        },
        ListStorageSystems: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "StorageSystems"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        },
        ListTaskExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TaskExecutions"
        },
        ListTasks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tasks"
        }
    }
};

AWS.apiLoader.services["robomaker"] = {};

AWS.RoboMaker = AWS.Service.defineService("robomaker", [ "2018-06-29" ]);

AWS.apiLoader.services["robomaker"]["2018-06-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-06-29",
        endpointPrefix: "robomaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "RoboMaker",
        serviceFullName: "AWS RoboMaker",
        serviceId: "RoboMaker",
        signatureVersion: "v4",
        signingName: "robomaker",
        uid: "robomaker-2018-06-29"
    },
    operations: {
        BatchDeleteWorlds: {
            http: {
                requestUri: "/batchDeleteWorlds"
            },
            input: {
                type: "structure",
                required: [ "worlds" ],
                members: {
                    worlds: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    unprocessedWorlds: {
                        shape: "S2"
                    }
                }
            }
        },
        BatchDescribeSimulationJob: {
            http: {
                requestUri: "/batchDescribeSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "jobs" ],
                members: {
                    jobs: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                status: {},
                                lastStartedAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                failureBehavior: {},
                                failureCode: {},
                                failureReason: {},
                                clientRequestToken: {},
                                outputLocation: {
                                    shape: "Sh"
                                },
                                loggingConfig: {
                                    shape: "Sk"
                                },
                                maxJobDurationInSeconds: {
                                    type: "long"
                                },
                                simulationTimeMillis: {
                                    type: "long"
                                },
                                iamRole: {},
                                robotApplications: {
                                    shape: "Sp"
                                },
                                simulationApplications: {
                                    shape: "S1d"
                                },
                                dataSources: {
                                    shape: "S1h"
                                },
                                tags: {
                                    shape: "S1o"
                                },
                                vpcConfig: {
                                    shape: "S1r"
                                },
                                networkInterface: {
                                    shape: "S1u"
                                },
                                compute: {
                                    shape: "S1v"
                                }
                            }
                        }
                    },
                    unprocessedJobs: {
                        shape: "S2"
                    }
                }
            }
        },
        CancelDeploymentJob: {
            http: {
                requestUri: "/cancelDeploymentJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {},
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        CancelSimulationJob: {
            http: {
                requestUri: "/cancelSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelSimulationJobBatch: {
            http: {
                requestUri: "/cancelSimulationJobBatch"
            },
            input: {
                type: "structure",
                required: [ "batch" ],
                members: {
                    batch: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelWorldExportJob: {
            http: {
                requestUri: "/cancelWorldExportJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelWorldGenerationJob: {
            http: {
                requestUri: "/cancelWorldGenerationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDeploymentJob: {
            http: {
                requestUri: "/createDeploymentJob"
            },
            input: {
                type: "structure",
                required: [ "clientRequestToken", "fleet", "deploymentApplicationConfigs" ],
                members: {
                    deploymentConfig: {
                        shape: "S2a"
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    fleet: {},
                    deploymentApplicationConfigs: {
                        shape: "S2e"
                    },
                    tags: {
                        shape: "S1o"
                    }
                },
                deprecated: true,
                deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    fleet: {},
                    status: {},
                    deploymentApplicationConfigs: {
                        shape: "S2e"
                    },
                    failureReason: {},
                    failureCode: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    deploymentConfig: {
                        shape: "S2a"
                    },
                    tags: {
                        shape: "S1o"
                    }
                },
                deprecated: true,
                deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        CreateFleet: {
            http: {
                requestUri: "/createFleet"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    tags: {
                        shape: "S1o"
                    }
                },
                deprecated: true,
                deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1o"
                    }
                },
                deprecated: true,
                deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        CreateRobot: {
            http: {
                requestUri: "/createRobot"
            },
            input: {
                type: "structure",
                required: [ "name", "architecture", "greengrassGroupId" ],
                members: {
                    name: {},
                    architecture: {},
                    greengrassGroupId: {},
                    tags: {
                        shape: "S1o"
                    }
                },
                deprecated: true,
                deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    greengrassGroupId: {},
                    architecture: {},
                    tags: {
                        shape: "S1o"
                    }
                },
                deprecated: true,
                deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        CreateRobotApplication: {
            http: {
                requestUri: "/createRobotApplication"
            },
            input: {
                type: "structure",
                required: [ "name", "robotSoftwareSuite" ],
                members: {
                    name: {},
                    sources: {
                        shape: "S2t"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    environment: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S31"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    tags: {
                        shape: "S1o"
                    },
                    environment: {
                        shape: "S2y"
                    }
                }
            }
        },
        CreateRobotApplicationVersion: {
            http: {
                requestUri: "/createRobotApplicationVersion"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    currentRevisionId: {},
                    s3Etags: {
                        shape: "S35"
                    },
                    imageDigest: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S31"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    environment: {
                        shape: "S2y"
                    }
                }
            }
        },
        CreateSimulationApplication: {
            http: {
                requestUri: "/createSimulationApplication"
            },
            input: {
                type: "structure",
                required: [ "name", "simulationSoftwareSuite", "robotSoftwareSuite" ],
                members: {
                    name: {},
                    sources: {
                        shape: "S2t"
                    },
                    simulationSoftwareSuite: {
                        shape: "S39"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    renderingEngine: {
                        shape: "S3c"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    environment: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S31"
                    },
                    simulationSoftwareSuite: {
                        shape: "S39"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    renderingEngine: {
                        shape: "S3c"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    tags: {
                        shape: "S1o"
                    },
                    environment: {
                        shape: "S2y"
                    }
                }
            }
        },
        CreateSimulationApplicationVersion: {
            http: {
                requestUri: "/createSimulationApplicationVersion"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    currentRevisionId: {},
                    s3Etags: {
                        shape: "S35"
                    },
                    imageDigest: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S31"
                    },
                    simulationSoftwareSuite: {
                        shape: "S39"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    renderingEngine: {
                        shape: "S3c"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    environment: {
                        shape: "S2y"
                    }
                }
            }
        },
        CreateSimulationJob: {
            http: {
                requestUri: "/createSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "maxJobDurationInSeconds", "iamRole" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    outputLocation: {
                        shape: "Sh"
                    },
                    loggingConfig: {
                        shape: "Sk"
                    },
                    maxJobDurationInSeconds: {
                        type: "long"
                    },
                    iamRole: {},
                    failureBehavior: {},
                    robotApplications: {
                        shape: "Sp"
                    },
                    simulationApplications: {
                        shape: "S1d"
                    },
                    dataSources: {
                        shape: "S3j"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    vpcConfig: {
                        shape: "S3m"
                    },
                    compute: {
                        shape: "S3n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    lastStartedAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    failureBehavior: {},
                    failureCode: {},
                    clientRequestToken: {},
                    outputLocation: {
                        shape: "Sh"
                    },
                    loggingConfig: {
                        shape: "Sk"
                    },
                    maxJobDurationInSeconds: {
                        type: "long"
                    },
                    simulationTimeMillis: {
                        type: "long"
                    },
                    iamRole: {},
                    robotApplications: {
                        shape: "Sp"
                    },
                    simulationApplications: {
                        shape: "S1d"
                    },
                    dataSources: {
                        shape: "S1h"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    vpcConfig: {
                        shape: "S1r"
                    },
                    compute: {
                        shape: "S1v"
                    }
                }
            }
        },
        CreateWorldExportJob: {
            http: {
                requestUri: "/createWorldExportJob"
            },
            input: {
                type: "structure",
                required: [ "worlds", "outputLocation", "iamRole" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    worlds: {
                        shape: "S2"
                    },
                    outputLocation: {
                        shape: "Sh"
                    },
                    iamRole: {},
                    tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    failureCode: {},
                    clientRequestToken: {},
                    outputLocation: {
                        shape: "Sh"
                    },
                    iamRole: {},
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        CreateWorldGenerationJob: {
            http: {
                requestUri: "/createWorldGenerationJob"
            },
            input: {
                type: "structure",
                required: [ "template", "worldCount" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    template: {},
                    worldCount: {
                        shape: "S3u"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    worldTags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    failureCode: {},
                    clientRequestToken: {},
                    template: {},
                    worldCount: {
                        shape: "S3u"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    worldTags: {
                        shape: "S1o"
                    }
                }
            }
        },
        CreateWorldTemplate: {
            http: {
                requestUri: "/createWorldTemplate"
            },
            input: {
                type: "structure",
                members: {
                    clientRequestToken: {},
                    name: {},
                    templateBody: {},
                    templateLocation: {
                        shape: "S43"
                    },
                    tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    clientRequestToken: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    name: {},
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        DeleteFleet: {
            http: {
                requestUri: "/deleteFleet"
            },
            input: {
                type: "structure",
                required: [ "fleet" ],
                members: {
                    fleet: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {},
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        DeleteRobot: {
            http: {
                requestUri: "/deleteRobot"
            },
            input: {
                type: "structure",
                required: [ "robot" ],
                members: {
                    robot: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {},
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        DeleteRobotApplication: {
            http: {
                requestUri: "/deleteRobotApplication"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    applicationVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSimulationApplication: {
            http: {
                requestUri: "/deleteSimulationApplication"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    applicationVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorldTemplate: {
            http: {
                requestUri: "/deleteWorldTemplate"
            },
            input: {
                type: "structure",
                required: [ "template" ],
                members: {
                    template: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterRobot: {
            http: {
                requestUri: "/deregisterRobot"
            },
            input: {
                type: "structure",
                required: [ "fleet", "robot" ],
                members: {
                    fleet: {},
                    robot: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    fleet: {},
                    robot: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        DescribeDeploymentJob: {
            http: {
                requestUri: "/describeDeploymentJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    fleet: {},
                    status: {},
                    deploymentConfig: {
                        shape: "S2a"
                    },
                    deploymentApplicationConfigs: {
                        shape: "S2e"
                    },
                    failureReason: {},
                    failureCode: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    robotDeploymentSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                deploymentStartTime: {
                                    type: "timestamp"
                                },
                                deploymentFinishTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                progressDetail: {
                                    type: "structure",
                                    members: {
                                        currentProgress: {},
                                        percentDone: {
                                            type: "float"
                                        },
                                        estimatedTimeRemainingSeconds: {
                                            type: "integer"
                                        },
                                        targetResource: {}
                                    }
                                },
                                failureReason: {},
                                failureCode: {}
                            }
                        }
                    },
                    tags: {
                        shape: "S1o"
                    }
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        DescribeFleet: {
            http: {
                requestUri: "/describeFleet"
            },
            input: {
                type: "structure",
                required: [ "fleet" ],
                members: {
                    fleet: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {},
                    robots: {
                        shape: "S4s"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    lastDeploymentStatus: {},
                    lastDeploymentJob: {},
                    lastDeploymentTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1o"
                    }
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        DescribeRobot: {
            http: {
                requestUri: "/describeRobot"
            },
            input: {
                type: "structure",
                required: [ "robot" ],
                members: {
                    robot: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    fleetArn: {},
                    status: {},
                    greengrassGroupId: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    architecture: {},
                    lastDeploymentJob: {},
                    lastDeploymentTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1o"
                    }
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        DescribeRobotApplication: {
            http: {
                requestUri: "/describeRobotApplication"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    applicationVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S31"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    revisionId: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    environment: {
                        shape: "S2y"
                    },
                    imageDigest: {}
                }
            }
        },
        DescribeSimulationApplication: {
            http: {
                requestUri: "/describeSimulationApplication"
            },
            input: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {},
                    applicationVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S31"
                    },
                    simulationSoftwareSuite: {
                        shape: "S39"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    renderingEngine: {
                        shape: "S3c"
                    },
                    revisionId: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    environment: {
                        shape: "S2y"
                    },
                    imageDigest: {}
                }
            }
        },
        DescribeSimulationJob: {
            http: {
                requestUri: "/describeSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    status: {},
                    lastStartedAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    failureBehavior: {},
                    failureCode: {},
                    failureReason: {},
                    clientRequestToken: {},
                    outputLocation: {
                        shape: "Sh"
                    },
                    loggingConfig: {
                        shape: "Sk"
                    },
                    maxJobDurationInSeconds: {
                        type: "long"
                    },
                    simulationTimeMillis: {
                        type: "long"
                    },
                    iamRole: {},
                    robotApplications: {
                        shape: "Sp"
                    },
                    simulationApplications: {
                        shape: "S1d"
                    },
                    dataSources: {
                        shape: "S1h"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    vpcConfig: {
                        shape: "S1r"
                    },
                    networkInterface: {
                        shape: "S1u"
                    },
                    compute: {
                        shape: "S1v"
                    }
                }
            }
        },
        DescribeSimulationJobBatch: {
            http: {
                requestUri: "/describeSimulationJobBatch"
            },
            input: {
                type: "structure",
                required: [ "batch" ],
                members: {
                    batch: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    createdAt: {
                        type: "timestamp"
                    },
                    clientRequestToken: {},
                    batchPolicy: {
                        shape: "S55"
                    },
                    failureCode: {},
                    failureReason: {},
                    failedRequests: {
                        shape: "S59"
                    },
                    pendingRequests: {
                        shape: "S5d"
                    },
                    createdRequests: {
                        shape: "S5e"
                    },
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        DescribeWorld: {
            http: {
                requestUri: "/describeWorld"
            },
            input: {
                type: "structure",
                required: [ "world" ],
                members: {
                    world: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    generationJob: {},
                    template: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    worldDescriptionBody: {}
                }
            }
        },
        DescribeWorldExportJob: {
            http: {
                requestUri: "/describeWorldExportJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    failureCode: {},
                    failureReason: {},
                    clientRequestToken: {},
                    worlds: {
                        shape: "S2"
                    },
                    outputLocation: {
                        shape: "Sh"
                    },
                    iamRole: {},
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        DescribeWorldGenerationJob: {
            http: {
                requestUri: "/describeWorldGenerationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    failureCode: {},
                    failureReason: {},
                    clientRequestToken: {},
                    template: {},
                    worldCount: {
                        shape: "S3u"
                    },
                    finishedWorldsSummary: {
                        type: "structure",
                        members: {
                            finishedCount: {
                                type: "integer"
                            },
                            succeededWorlds: {
                                shape: "S2"
                            },
                            failureSummary: {
                                type: "structure",
                                members: {
                                    totalFailureCount: {
                                        type: "integer"
                                    },
                                    failures: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                failureCode: {},
                                                sampleFailureReason: {},
                                                failureCount: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "S1o"
                    },
                    worldTags: {
                        shape: "S1o"
                    }
                }
            }
        },
        DescribeWorldTemplate: {
            http: {
                requestUri: "/describeWorldTemplate"
            },
            input: {
                type: "structure",
                required: [ "template" ],
                members: {
                    template: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    clientRequestToken: {},
                    name: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "S1o"
                    },
                    version: {}
                }
            }
        },
        GetWorldTemplateBody: {
            http: {
                requestUri: "/getWorldTemplateBody"
            },
            input: {
                type: "structure",
                members: {
                    template: {},
                    generationJob: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    templateBody: {}
                }
            }
        },
        ListDeploymentJobs: {
            http: {
                requestUri: "/listDeploymentJobs"
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        shape: "S5z"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    deploymentJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                fleet: {},
                                status: {},
                                deploymentApplicationConfigs: {
                                    shape: "S2e"
                                },
                                deploymentConfig: {
                                    shape: "S2a"
                                },
                                failureReason: {},
                                failureCode: {},
                                createdAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        ListFleets: {
            http: {
                requestUri: "/listFleets"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5z"
                    }
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    fleetDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastDeploymentStatus: {},
                                lastDeploymentJob: {},
                                lastDeploymentTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        ListRobotApplications: {
            http: {
                requestUri: "/listRobotApplications"
            },
            input: {
                type: "structure",
                members: {
                    versionQualifier: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    robotApplicationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                version: {},
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                robotSoftwareSuite: {
                                    shape: "S2v"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRobots: {
            http: {
                requestUri: "/listRobots"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5z"
                    }
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    robots: {
                        shape: "S4s"
                    },
                    nextToken: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        ListSimulationApplications: {
            http: {
                requestUri: "/listSimulationApplications"
            },
            input: {
                type: "structure",
                members: {
                    versionQualifier: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    simulationApplicationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                version: {},
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                robotSoftwareSuite: {
                                    shape: "S2v"
                                },
                                simulationSoftwareSuite: {
                                    shape: "S39"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSimulationJobBatches: {
            http: {
                requestUri: "/listSimulationJobBatches"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    simulationJobBatchSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                createdAt: {
                                    type: "timestamp"
                                },
                                status: {},
                                failedRequestCount: {
                                    type: "integer"
                                },
                                pendingRequestCount: {
                                    type: "integer"
                                },
                                createdRequestCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSimulationJobs: {
            http: {
                requestUri: "/listSimulationJobs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "simulationJobSummaries" ],
                members: {
                    simulationJobSummaries: {
                        shape: "S5e"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        ListWorldExportJobs: {
            http: {
                requestUri: "/listWorldExportJobs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "worldExportJobSummaries" ],
                members: {
                    worldExportJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                status: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                worlds: {
                                    shape: "S2"
                                },
                                outputLocation: {
                                    shape: "Sh"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorldGenerationJobs: {
            http: {
                requestUri: "/listWorldGenerationJobs"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "worldGenerationJobSummaries" ],
                members: {
                    worldGenerationJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                template: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                status: {},
                                worldCount: {
                                    shape: "S3u"
                                },
                                succeededWorldCount: {
                                    type: "integer"
                                },
                                failedWorldCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorldTemplates: {
            http: {
                requestUri: "/listWorldTemplates"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    templateSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                name: {},
                                version: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorlds: {
            http: {
                requestUri: "/listWorlds"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filters: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    worldSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                generationJob: {},
                                template: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        RegisterRobot: {
            http: {
                requestUri: "/registerRobot"
            },
            input: {
                type: "structure",
                required: [ "fleet", "robot" ],
                members: {
                    fleet: {},
                    robot: {}
                },
                deprecated: true,
                deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    fleet: {},
                    robot: {}
                },
                deprecated: true,
                deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        RestartSimulationJob: {
            http: {
                requestUri: "/restartSimulationJob"
            },
            input: {
                type: "structure",
                required: [ "job" ],
                members: {
                    job: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartSimulationJobBatch: {
            http: {
                requestUri: "/startSimulationJobBatch"
            },
            input: {
                type: "structure",
                required: [ "createSimulationJobRequests" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    batchPolicy: {
                        shape: "S55"
                    },
                    createSimulationJobRequests: {
                        shape: "S5d"
                    },
                    tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    status: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    clientRequestToken: {},
                    batchPolicy: {
                        shape: "S55"
                    },
                    failureCode: {},
                    failureReason: {},
                    failedRequests: {
                        shape: "S59"
                    },
                    pendingRequests: {
                        shape: "S5d"
                    },
                    createdRequests: {
                        shape: "S5e"
                    },
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        SyncDeploymentJob: {
            http: {
                requestUri: "/syncDeploymentJob"
            },
            input: {
                type: "structure",
                required: [ "clientRequestToken", "fleet" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    fleet: {}
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    fleet: {},
                    status: {},
                    deploymentConfig: {
                        shape: "S2a"
                    },
                    deploymentApplicationConfigs: {
                        shape: "S2e"
                    },
                    failureReason: {},
                    failureCode: {},
                    createdAt: {
                        type: "timestamp"
                    }
                },
                deprecated: true,
                deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
            },
            deprecated: true,
            deprecatedMessage: "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRobotApplication: {
            http: {
                requestUri: "/updateRobotApplication"
            },
            input: {
                type: "structure",
                required: [ "application", "robotSoftwareSuite" ],
                members: {
                    application: {},
                    sources: {
                        shape: "S2t"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    currentRevisionId: {},
                    environment: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S31"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    environment: {
                        shape: "S2y"
                    }
                }
            }
        },
        UpdateSimulationApplication: {
            http: {
                requestUri: "/updateSimulationApplication"
            },
            input: {
                type: "structure",
                required: [ "application", "simulationSoftwareSuite", "robotSoftwareSuite" ],
                members: {
                    application: {},
                    sources: {
                        shape: "S2t"
                    },
                    simulationSoftwareSuite: {
                        shape: "S39"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    renderingEngine: {
                        shape: "S3c"
                    },
                    currentRevisionId: {},
                    environment: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    version: {},
                    sources: {
                        shape: "S31"
                    },
                    simulationSoftwareSuite: {
                        shape: "S39"
                    },
                    robotSoftwareSuite: {
                        shape: "S2v"
                    },
                    renderingEngine: {
                        shape: "S3c"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    environment: {
                        shape: "S2y"
                    }
                }
            }
        },
        UpdateWorldTemplate: {
            http: {
                requestUri: "/updateWorldTemplate"
            },
            input: {
                type: "structure",
                required: [ "template" ],
                members: {
                    template: {},
                    name: {},
                    templateBody: {},
                    templateLocation: {
                        shape: "S43"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    lastUpdatedAt: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        Sh: {
            type: "structure",
            members: {
                s3Bucket: {},
                s3Prefix: {}
            }
        },
        Sk: {
            type: "structure",
            members: {
                recordAllRosTopics: {
                    deprecated: true,
                    deprecatedMessage: "AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html.",
                    type: "boolean"
                }
            }
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                required: [ "application", "launchConfig" ],
                members: {
                    application: {},
                    applicationVersion: {},
                    launchConfig: {
                        shape: "Ss"
                    },
                    uploadConfigurations: {
                        shape: "S15"
                    },
                    useDefaultUploadConfigurations: {
                        deprecated: true,
                        deprecatedMessage: "AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html.",
                        type: "boolean"
                    },
                    tools: {
                        shape: "S19"
                    },
                    useDefaultTools: {
                        deprecated: true,
                        deprecatedMessage: "AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html.",
                        type: "boolean"
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                packageName: {},
                launchFile: {},
                environmentVariables: {
                    shape: "Su"
                },
                portForwardingConfig: {
                    type: "structure",
                    members: {
                        portMappings: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "jobPort", "applicationPort" ],
                                members: {
                                    jobPort: {
                                        type: "integer"
                                    },
                                    applicationPort: {
                                        type: "integer"
                                    },
                                    enableOnPublicIp: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                streamUI: {
                    type: "boolean"
                },
                command: {
                    type: "list",
                    member: {}
                }
            }
        },
        Su: {
            type: "map",
            key: {},
            value: {}
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "path", "uploadBehavior" ],
                members: {
                    name: {},
                    path: {},
                    uploadBehavior: {}
                }
            }
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "command" ],
                members: {
                    streamUI: {
                        type: "boolean"
                    },
                    name: {},
                    command: {},
                    streamOutputToCloudWatch: {
                        type: "boolean"
                    },
                    exitBehavior: {}
                }
            }
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "application", "launchConfig" ],
                members: {
                    application: {},
                    applicationVersion: {},
                    launchConfig: {
                        shape: "Ss"
                    },
                    uploadConfigurations: {
                        shape: "S15"
                    },
                    worldConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                world: {}
                            }
                        }
                    },
                    useDefaultUploadConfigurations: {
                        deprecated: true,
                        deprecatedMessage: "AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html.",
                        type: "boolean"
                    },
                    tools: {
                        shape: "S19"
                    },
                    useDefaultTools: {
                        deprecated: true,
                        deprecatedMessage: "AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html.",
                        type: "boolean"
                    }
                }
            }
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    s3Bucket: {},
                    s3Keys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                s3Key: {},
                                etag: {}
                            }
                        }
                    },
                    type: {},
                    destination: {}
                }
            }
        },
        S1o: {
            type: "map",
            key: {},
            value: {}
        },
        S1r: {
            type: "structure",
            members: {
                subnets: {
                    shape: "S1s"
                },
                securityGroups: {
                    shape: "S1t"
                },
                vpcId: {},
                assignPublicIp: {
                    type: "boolean"
                }
            }
        },
        S1s: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "list",
            member: {}
        },
        S1u: {
            type: "structure",
            members: {
                networkInterfaceId: {},
                privateIpAddress: {},
                publicIpAddress: {}
            }
        },
        S1v: {
            type: "structure",
            members: {
                simulationUnitLimit: {
                    type: "integer"
                },
                computeType: {},
                gpuUnitLimit: {
                    type: "integer"
                }
            }
        },
        S2a: {
            type: "structure",
            members: {
                concurrentDeploymentPercentage: {
                    type: "integer"
                },
                failureThresholdPercentage: {
                    type: "integer"
                },
                robotDeploymentTimeoutInSeconds: {
                    type: "long"
                },
                downloadConditionFile: {
                    type: "structure",
                    required: [ "bucket", "key" ],
                    members: {
                        bucket: {},
                        key: {},
                        etag: {}
                    }
                }
            }
        },
        S2e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "application", "applicationVersion", "launchConfig" ],
                members: {
                    application: {},
                    applicationVersion: {},
                    launchConfig: {
                        type: "structure",
                        required: [ "packageName", "launchFile" ],
                        members: {
                            packageName: {},
                            preLaunchFile: {},
                            launchFile: {},
                            postLaunchFile: {},
                            environmentVariables: {
                                shape: "Su"
                            }
                        }
                    }
                }
            }
        },
        S2t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    s3Bucket: {},
                    s3Key: {},
                    architecture: {}
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                name: {},
                version: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                uri: {}
            }
        },
        S31: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    s3Bucket: {},
                    s3Key: {},
                    etag: {},
                    architecture: {}
                }
            }
        },
        S35: {
            type: "list",
            member: {}
        },
        S39: {
            type: "structure",
            members: {
                name: {},
                version: {}
            }
        },
        S3c: {
            type: "structure",
            members: {
                name: {},
                version: {}
            }
        },
        S3j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "s3Bucket", "s3Keys" ],
                members: {
                    name: {},
                    s3Bucket: {},
                    s3Keys: {
                        type: "list",
                        member: {}
                    },
                    type: {},
                    destination: {}
                }
            }
        },
        S3m: {
            type: "structure",
            required: [ "subnets" ],
            members: {
                subnets: {
                    shape: "S1s"
                },
                securityGroups: {
                    shape: "S1t"
                },
                assignPublicIp: {
                    type: "boolean"
                }
            }
        },
        S3n: {
            type: "structure",
            members: {
                simulationUnitLimit: {
                    type: "integer"
                },
                computeType: {},
                gpuUnitLimit: {
                    type: "integer"
                }
            }
        },
        S3u: {
            type: "structure",
            members: {
                floorplanCount: {
                    type: "integer"
                },
                interiorCountPerFloorplan: {
                    type: "integer"
                }
            }
        },
        S43: {
            type: "structure",
            required: [ "s3Bucket", "s3Key" ],
            members: {
                s3Bucket: {},
                s3Key: {}
            }
        },
        S4s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    fleetArn: {},
                    status: {},
                    greenGrassGroupId: {},
                    createdAt: {
                        type: "timestamp"
                    },
                    architecture: {},
                    lastDeploymentJob: {},
                    lastDeploymentTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S55: {
            type: "structure",
            members: {
                timeoutInSeconds: {
                    type: "long"
                },
                maxConcurrency: {
                    type: "integer"
                }
            }
        },
        S59: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    request: {
                        shape: "S5b"
                    },
                    failureReason: {},
                    failureCode: {},
                    failedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        S5b: {
            type: "structure",
            required: [ "maxJobDurationInSeconds" ],
            members: {
                outputLocation: {
                    shape: "Sh"
                },
                loggingConfig: {
                    shape: "Sk"
                },
                maxJobDurationInSeconds: {
                    type: "long"
                },
                iamRole: {},
                failureBehavior: {},
                useDefaultApplications: {
                    type: "boolean"
                },
                robotApplications: {
                    shape: "Sp"
                },
                simulationApplications: {
                    shape: "S1d"
                },
                dataSources: {
                    shape: "S3j"
                },
                vpcConfig: {
                    shape: "S3m"
                },
                compute: {
                    shape: "S3n"
                },
                tags: {
                    shape: "S1o"
                }
            }
        },
        S5d: {
            type: "list",
            member: {
                shape: "S5b"
            }
        },
        S5e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {},
                    lastUpdatedAt: {
                        type: "timestamp"
                    },
                    name: {},
                    status: {},
                    simulationApplicationNames: {
                        type: "list",
                        member: {}
                    },
                    robotApplicationNames: {
                        type: "list",
                        member: {}
                    },
                    dataSourceNames: {
                        type: "list",
                        member: {}
                    },
                    computeType: {}
                }
            }
        },
        S5z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    paginators: {
        ListDeploymentJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deploymentJobs"
        },
        ListFleets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "fleetDetails"
        },
        ListRobotApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "robotApplicationSummaries"
        },
        ListRobots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "robots"
        },
        ListSimulationApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "simulationApplicationSummaries"
        },
        ListSimulationJobBatches: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "simulationJobBatchSummaries"
        },
        ListSimulationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "simulationJobSummaries"
        },
        ListWorldExportJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "worldExportJobSummaries"
        },
        ListWorldGenerationJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "worldGenerationJobSummaries"
        },
        ListWorldTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateSummaries"
        },
        ListWorlds: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "worldSummaries"
        }
    }
};

AWS.apiLoader.services["transfer"] = {};

AWS.Transfer = AWS.Service.defineService("transfer", [ "2018-11-05" ]);

AWS.apiLoader.services["transfer"]["2018-11-05"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-11-05",
        endpointPrefix: "transfer",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWS Transfer",
        serviceFullName: "AWS Transfer Family",
        serviceId: "Transfer",
        signatureVersion: "v4",
        signingName: "transfer",
        targetPrefix: "TransferService",
        uid: "transfer-2018-11-05"
    },
    operations: {
        CreateAccess: {
            input: {
                type: "structure",
                required: [ "Role", "ServerId", "ExternalId" ],
                members: {
                    HomeDirectory: {},
                    HomeDirectoryType: {},
                    HomeDirectoryMappings: {
                        shape: "S4"
                    },
                    Policy: {},
                    PosixProfile: {
                        shape: "Sa"
                    },
                    Role: {},
                    ServerId: {},
                    ExternalId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    ServerId: {},
                    ExternalId: {}
                }
            }
        },
        CreateAgreement: {
            input: {
                type: "structure",
                required: [ "ServerId", "LocalProfileId", "PartnerProfileId", "BaseDirectory", "AccessRole" ],
                members: {
                    Description: {},
                    ServerId: {},
                    LocalProfileId: {},
                    PartnerProfileId: {},
                    BaseDirectory: {},
                    AccessRole: {},
                    Status: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AgreementId" ],
                members: {
                    AgreementId: {}
                }
            }
        },
        CreateConnector: {
            input: {
                type: "structure",
                required: [ "Url", "AccessRole" ],
                members: {
                    Url: {},
                    As2Config: {
                        shape: "St"
                    },
                    AccessRole: {},
                    LoggingRole: {},
                    Tags: {
                        shape: "Sl"
                    },
                    SftpConfig: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ConnectorId" ],
                members: {
                    ConnectorId: {}
                }
            }
        },
        CreateProfile: {
            input: {
                type: "structure",
                required: [ "As2Id", "ProfileType" ],
                members: {
                    As2Id: {},
                    ProfileType: {},
                    CertificateIds: {
                        shape: "S1a"
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProfileId" ],
                members: {
                    ProfileId: {}
                }
            }
        },
        CreateServer: {
            input: {
                type: "structure",
                members: {
                    Certificate: {},
                    Domain: {},
                    EndpointDetails: {
                        shape: "S1g"
                    },
                    EndpointType: {},
                    HostKey: {
                        shape: "S1q"
                    },
                    IdentityProviderDetails: {
                        shape: "S1r"
                    },
                    IdentityProviderType: {},
                    LoggingRole: {},
                    PostAuthenticationLoginBanner: {},
                    PreAuthenticationLoginBanner: {},
                    Protocols: {
                        shape: "S1z"
                    },
                    ProtocolDetails: {
                        shape: "S21"
                    },
                    SecurityPolicyName: {},
                    Tags: {
                        shape: "Sl"
                    },
                    WorkflowDetails: {
                        shape: "S28"
                    },
                    StructuredLogDestinations: {
                        shape: "S2d"
                    },
                    S3StorageOptions: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "Role", "ServerId", "UserName" ],
                members: {
                    HomeDirectory: {},
                    HomeDirectoryType: {},
                    HomeDirectoryMappings: {
                        shape: "S4"
                    },
                    Policy: {},
                    PosixProfile: {
                        shape: "Sa"
                    },
                    Role: {},
                    ServerId: {},
                    SshPublicKeyBody: {},
                    Tags: {
                        shape: "Sl"
                    },
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    UserName: {}
                }
            }
        },
        CreateWorkflow: {
            input: {
                type: "structure",
                required: [ "Steps" ],
                members: {
                    Description: {},
                    Steps: {
                        shape: "S2o"
                    },
                    OnExceptionSteps: {
                        shape: "S2o"
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "WorkflowId" ],
                members: {
                    WorkflowId: {}
                }
            }
        },
        DeleteAccess: {
            input: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    ServerId: {},
                    ExternalId: {}
                }
            }
        },
        DeleteAgreement: {
            input: {
                type: "structure",
                required: [ "AgreementId", "ServerId" ],
                members: {
                    AgreementId: {},
                    ServerId: {}
                }
            }
        },
        DeleteCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateId" ],
                members: {
                    CertificateId: {}
                }
            }
        },
        DeleteConnector: {
            input: {
                type: "structure",
                required: [ "ConnectorId" ],
                members: {
                    ConnectorId: {}
                }
            }
        },
        DeleteHostKey: {
            input: {
                type: "structure",
                required: [ "ServerId", "HostKeyId" ],
                members: {
                    ServerId: {},
                    HostKeyId: {}
                }
            }
        },
        DeleteProfile: {
            input: {
                type: "structure",
                required: [ "ProfileId" ],
                members: {
                    ProfileId: {}
                }
            }
        },
        DeleteServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        DeleteSshPublicKey: {
            input: {
                type: "structure",
                required: [ "ServerId", "SshPublicKeyId", "UserName" ],
                members: {
                    ServerId: {},
                    SshPublicKeyId: {},
                    UserName: {}
                }
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    UserName: {}
                }
            }
        },
        DeleteWorkflow: {
            input: {
                type: "structure",
                required: [ "WorkflowId" ],
                members: {
                    WorkflowId: {}
                }
            }
        },
        DescribeAccess: {
            input: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    ServerId: {},
                    ExternalId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "Access" ],
                members: {
                    ServerId: {},
                    Access: {
                        type: "structure",
                        members: {
                            HomeDirectory: {},
                            HomeDirectoryMappings: {
                                shape: "S4"
                            },
                            HomeDirectoryType: {},
                            Policy: {},
                            PosixProfile: {
                                shape: "Sa"
                            },
                            Role: {},
                            ExternalId: {}
                        }
                    }
                }
            }
        },
        DescribeAgreement: {
            input: {
                type: "structure",
                required: [ "AgreementId", "ServerId" ],
                members: {
                    AgreementId: {},
                    ServerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Agreement" ],
                members: {
                    Agreement: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            AgreementId: {},
                            Description: {},
                            Status: {},
                            ServerId: {},
                            LocalProfileId: {},
                            PartnerProfileId: {},
                            BaseDirectory: {},
                            AccessRole: {},
                            Tags: {
                                shape: "Sl"
                            }
                        }
                    }
                }
            }
        },
        DescribeCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateId" ],
                members: {
                    CertificateId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Certificate" ],
                members: {
                    Certificate: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            CertificateId: {},
                            Usage: {},
                            Status: {},
                            Certificate: {
                                shape: "S41"
                            },
                            CertificateChain: {
                                shape: "S42"
                            },
                            ActiveDate: {
                                type: "timestamp"
                            },
                            InactiveDate: {
                                type: "timestamp"
                            },
                            Serial: {},
                            NotBeforeDate: {
                                type: "timestamp"
                            },
                            NotAfterDate: {
                                type: "timestamp"
                            },
                            Type: {},
                            Description: {},
                            Tags: {
                                shape: "Sl"
                            }
                        }
                    }
                }
            }
        },
        DescribeConnector: {
            input: {
                type: "structure",
                required: [ "ConnectorId" ],
                members: {
                    ConnectorId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Connector" ],
                members: {
                    Connector: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            ConnectorId: {},
                            Url: {},
                            As2Config: {
                                shape: "St"
                            },
                            AccessRole: {},
                            LoggingRole: {},
                            Tags: {
                                shape: "Sl"
                            },
                            SftpConfig: {
                                shape: "S11"
                            }
                        }
                    }
                }
            }
        },
        DescribeExecution: {
            input: {
                type: "structure",
                required: [ "ExecutionId", "WorkflowId" ],
                members: {
                    ExecutionId: {},
                    WorkflowId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "WorkflowId", "Execution" ],
                members: {
                    WorkflowId: {},
                    Execution: {
                        type: "structure",
                        members: {
                            ExecutionId: {},
                            InitialFileLocation: {
                                shape: "S4d"
                            },
                            ServiceMetadata: {
                                shape: "S4h"
                            },
                            ExecutionRole: {},
                            LoggingConfiguration: {
                                type: "structure",
                                members: {
                                    LoggingRole: {},
                                    LogGroupName: {}
                                }
                            },
                            PosixProfile: {
                                shape: "Sa"
                            },
                            Status: {},
                            Results: {
                                type: "structure",
                                members: {
                                    Steps: {
                                        shape: "S4o"
                                    },
                                    OnExceptionSteps: {
                                        shape: "S4o"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeHostKey: {
            input: {
                type: "structure",
                required: [ "ServerId", "HostKeyId" ],
                members: {
                    ServerId: {},
                    HostKeyId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HostKey" ],
                members: {
                    HostKey: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            HostKeyId: {},
                            HostKeyFingerprint: {},
                            Description: {},
                            Type: {},
                            DateImported: {
                                type: "timestamp"
                            },
                            Tags: {
                                shape: "Sl"
                            }
                        }
                    }
                }
            }
        },
        DescribeProfile: {
            input: {
                type: "structure",
                required: [ "ProfileId" ],
                members: {
                    ProfileId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Profile" ],
                members: {
                    Profile: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            ProfileId: {},
                            ProfileType: {},
                            As2Id: {},
                            CertificateIds: {
                                shape: "S1a"
                            },
                            Tags: {
                                shape: "Sl"
                            }
                        }
                    }
                }
            }
        },
        DescribeSecurityPolicy: {
            input: {
                type: "structure",
                required: [ "SecurityPolicyName" ],
                members: {
                    SecurityPolicyName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SecurityPolicy" ],
                members: {
                    SecurityPolicy: {
                        type: "structure",
                        required: [ "SecurityPolicyName" ],
                        members: {
                            Fips: {
                                type: "boolean"
                            },
                            SecurityPolicyName: {},
                            SshCiphers: {
                                shape: "S58"
                            },
                            SshKexs: {
                                shape: "S58"
                            },
                            SshMacs: {
                                shape: "S58"
                            },
                            TlsCiphers: {
                                shape: "S58"
                            }
                        }
                    }
                }
            }
        },
        DescribeServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Server" ],
                members: {
                    Server: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            Certificate: {},
                            ProtocolDetails: {
                                shape: "S21"
                            },
                            Domain: {},
                            EndpointDetails: {
                                shape: "S1g"
                            },
                            EndpointType: {},
                            HostKeyFingerprint: {},
                            IdentityProviderDetails: {
                                shape: "S1r"
                            },
                            IdentityProviderType: {},
                            LoggingRole: {},
                            PostAuthenticationLoginBanner: {},
                            PreAuthenticationLoginBanner: {},
                            Protocols: {
                                shape: "S1z"
                            },
                            SecurityPolicyName: {},
                            ServerId: {},
                            State: {},
                            Tags: {
                                shape: "Sl"
                            },
                            UserCount: {
                                type: "integer"
                            },
                            WorkflowDetails: {
                                shape: "S28"
                            },
                            StructuredLogDestinations: {
                                shape: "S2d"
                            },
                            S3StorageOptions: {
                                shape: "S2f"
                            }
                        }
                    }
                }
            }
        },
        DescribeUser: {
            input: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "User" ],
                members: {
                    ServerId: {},
                    User: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            HomeDirectory: {},
                            HomeDirectoryMappings: {
                                shape: "S4"
                            },
                            HomeDirectoryType: {},
                            Policy: {},
                            PosixProfile: {
                                shape: "Sa"
                            },
                            Role: {},
                            SshPublicKeys: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "DateImported", "SshPublicKeyBody", "SshPublicKeyId" ],
                                    members: {
                                        DateImported: {
                                            type: "timestamp"
                                        },
                                        SshPublicKeyBody: {},
                                        SshPublicKeyId: {}
                                    }
                                }
                            },
                            Tags: {
                                shape: "Sl"
                            },
                            UserName: {}
                        }
                    }
                }
            }
        },
        DescribeWorkflow: {
            input: {
                type: "structure",
                required: [ "WorkflowId" ],
                members: {
                    WorkflowId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Workflow" ],
                members: {
                    Workflow: {
                        type: "structure",
                        required: [ "Arn" ],
                        members: {
                            Arn: {},
                            Description: {},
                            Steps: {
                                shape: "S2o"
                            },
                            OnExceptionSteps: {
                                shape: "S2o"
                            },
                            WorkflowId: {},
                            Tags: {
                                shape: "Sl"
                            }
                        }
                    }
                }
            }
        },
        ImportCertificate: {
            input: {
                type: "structure",
                required: [ "Usage", "Certificate" ],
                members: {
                    Usage: {},
                    Certificate: {
                        shape: "S41"
                    },
                    CertificateChain: {
                        shape: "S42"
                    },
                    PrivateKey: {
                        type: "string",
                        sensitive: true
                    },
                    ActiveDate: {
                        type: "timestamp"
                    },
                    InactiveDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CertificateId" ],
                members: {
                    CertificateId: {}
                }
            }
        },
        ImportHostKey: {
            input: {
                type: "structure",
                required: [ "ServerId", "HostKeyBody" ],
                members: {
                    ServerId: {},
                    HostKeyBody: {
                        shape: "S1q"
                    },
                    Description: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "HostKeyId" ],
                members: {
                    ServerId: {},
                    HostKeyId: {}
                }
            }
        },
        ImportSshPublicKey: {
            input: {
                type: "structure",
                required: [ "ServerId", "SshPublicKeyBody", "UserName" ],
                members: {
                    ServerId: {},
                    SshPublicKeyBody: {},
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "SshPublicKeyId", "UserName" ],
                members: {
                    ServerId: {},
                    SshPublicKeyId: {},
                    UserName: {}
                }
            }
        },
        ListAccesses: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ServerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "Accesses" ],
                members: {
                    NextToken: {},
                    ServerId: {},
                    Accesses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                HomeDirectory: {},
                                HomeDirectoryType: {},
                                Role: {},
                                ExternalId: {}
                            }
                        }
                    }
                }
            }
        },
        ListAgreements: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ServerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Agreements" ],
                members: {
                    NextToken: {},
                    Agreements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                AgreementId: {},
                                Description: {},
                                Status: {},
                                ServerId: {},
                                LocalProfileId: {},
                                PartnerProfileId: {}
                            }
                        }
                    }
                }
            }
        },
        ListCertificates: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Certificates" ],
                members: {
                    NextToken: {},
                    Certificates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CertificateId: {},
                                Usage: {},
                                Status: {},
                                ActiveDate: {
                                    type: "timestamp"
                                },
                                InactiveDate: {
                                    type: "timestamp"
                                },
                                Type: {},
                                Description: {}
                            }
                        }
                    }
                }
            }
        },
        ListConnectors: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Connectors" ],
                members: {
                    NextToken: {},
                    Connectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                ConnectorId: {},
                                Url: {}
                            }
                        }
                    }
                }
            }
        },
        ListExecutions: {
            input: {
                type: "structure",
                required: [ "WorkflowId" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    WorkflowId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "WorkflowId", "Executions" ],
                members: {
                    NextToken: {},
                    WorkflowId: {},
                    Executions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExecutionId: {},
                                InitialFileLocation: {
                                    shape: "S4d"
                                },
                                ServiceMetadata: {
                                    shape: "S4h"
                                },
                                Status: {}
                            }
                        }
                    }
                }
            }
        },
        ListHostKeys: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ServerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "HostKeys" ],
                members: {
                    NextToken: {},
                    ServerId: {},
                    HostKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn" ],
                            members: {
                                Arn: {},
                                HostKeyId: {},
                                Fingerprint: {},
                                Description: {},
                                Type: {},
                                DateImported: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListProfiles: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ProfileType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Profiles" ],
                members: {
                    NextToken: {},
                    Profiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                ProfileId: {},
                                As2Id: {},
                                ProfileType: {}
                            }
                        }
                    }
                }
            }
        },
        ListSecurityPolicies: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SecurityPolicyNames" ],
                members: {
                    NextToken: {},
                    SecurityPolicyNames: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListServers: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Servers" ],
                members: {
                    NextToken: {},
                    Servers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn" ],
                            members: {
                                Arn: {},
                                Domain: {},
                                IdentityProviderType: {},
                                EndpointType: {},
                                LoggingRole: {},
                                ServerId: {},
                                State: {},
                                UserCount: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    NextToken: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ServerId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "Users" ],
                members: {
                    NextToken: {},
                    ServerId: {},
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Arn" ],
                            members: {
                                Arn: {},
                                HomeDirectory: {},
                                HomeDirectoryType: {},
                                Role: {},
                                SshPublicKeyCount: {
                                    type: "integer"
                                },
                                UserName: {}
                            }
                        }
                    }
                }
            }
        },
        ListWorkflows: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Workflows" ],
                members: {
                    NextToken: {},
                    Workflows: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkflowId: {},
                                Description: {},
                                Arn: {}
                            }
                        }
                    }
                }
            }
        },
        SendWorkflowStepState: {
            input: {
                type: "structure",
                required: [ "WorkflowId", "ExecutionId", "Token", "Status" ],
                members: {
                    WorkflowId: {},
                    ExecutionId: {},
                    Token: {},
                    Status: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartFileTransfer: {
            input: {
                type: "structure",
                required: [ "ConnectorId" ],
                members: {
                    ConnectorId: {},
                    SendFilePaths: {
                        shape: "S7b"
                    },
                    RetrieveFilePaths: {
                        shape: "S7b"
                    },
                    LocalDirectoryPath: {},
                    RemoteDirectoryPath: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TransferId" ],
                members: {
                    TransferId: {}
                }
            }
        },
        StartServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        StopServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "Arn", "Tags" ],
                members: {
                    Arn: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            }
        },
        TestConnection: {
            input: {
                type: "structure",
                required: [ "ConnectorId" ],
                members: {
                    ConnectorId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectorId: {},
                    Status: {},
                    StatusMessage: {}
                }
            }
        },
        TestIdentityProvider: {
            input: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    ServerProtocol: {},
                    SourceIp: {},
                    UserName: {},
                    UserPassword: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StatusCode", "Url" ],
                members: {
                    Response: {},
                    StatusCode: {
                        type: "integer"
                    },
                    Message: {},
                    Url: {}
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "Arn", "TagKeys" ],
                members: {
                    Arn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateAccess: {
            input: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    HomeDirectory: {},
                    HomeDirectoryType: {},
                    HomeDirectoryMappings: {
                        shape: "S4"
                    },
                    Policy: {},
                    PosixProfile: {
                        shape: "Sa"
                    },
                    Role: {},
                    ServerId: {},
                    ExternalId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "ExternalId" ],
                members: {
                    ServerId: {},
                    ExternalId: {}
                }
            }
        },
        UpdateAgreement: {
            input: {
                type: "structure",
                required: [ "AgreementId", "ServerId" ],
                members: {
                    AgreementId: {},
                    ServerId: {},
                    Description: {},
                    Status: {},
                    LocalProfileId: {},
                    PartnerProfileId: {},
                    BaseDirectory: {},
                    AccessRole: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AgreementId" ],
                members: {
                    AgreementId: {}
                }
            }
        },
        UpdateCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateId" ],
                members: {
                    CertificateId: {},
                    ActiveDate: {
                        type: "timestamp"
                    },
                    InactiveDate: {
                        type: "timestamp"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CertificateId" ],
                members: {
                    CertificateId: {}
                }
            }
        },
        UpdateConnector: {
            input: {
                type: "structure",
                required: [ "ConnectorId" ],
                members: {
                    ConnectorId: {},
                    Url: {},
                    As2Config: {
                        shape: "St"
                    },
                    AccessRole: {},
                    LoggingRole: {},
                    SftpConfig: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ConnectorId" ],
                members: {
                    ConnectorId: {}
                }
            }
        },
        UpdateHostKey: {
            input: {
                type: "structure",
                required: [ "ServerId", "HostKeyId", "Description" ],
                members: {
                    ServerId: {},
                    HostKeyId: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "HostKeyId" ],
                members: {
                    ServerId: {},
                    HostKeyId: {}
                }
            }
        },
        UpdateProfile: {
            input: {
                type: "structure",
                required: [ "ProfileId" ],
                members: {
                    ProfileId: {},
                    CertificateIds: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProfileId" ],
                members: {
                    ProfileId: {}
                }
            }
        },
        UpdateServer: {
            input: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    Certificate: {},
                    ProtocolDetails: {
                        shape: "S21"
                    },
                    EndpointDetails: {
                        shape: "S1g"
                    },
                    EndpointType: {},
                    HostKey: {
                        shape: "S1q"
                    },
                    IdentityProviderDetails: {
                        shape: "S1r"
                    },
                    LoggingRole: {},
                    PostAuthenticationLoginBanner: {},
                    PreAuthenticationLoginBanner: {},
                    Protocols: {
                        shape: "S1z"
                    },
                    SecurityPolicyName: {},
                    ServerId: {},
                    WorkflowDetails: {
                        shape: "S28"
                    },
                    StructuredLogDestinations: {
                        shape: "S2d"
                    },
                    S3StorageOptions: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId" ],
                members: {
                    ServerId: {}
                }
            }
        },
        UpdateUser: {
            input: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    HomeDirectory: {},
                    HomeDirectoryType: {},
                    HomeDirectoryMappings: {
                        shape: "S4"
                    },
                    Policy: {},
                    PosixProfile: {
                        shape: "Sa"
                    },
                    Role: {},
                    ServerId: {},
                    UserName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServerId", "UserName" ],
                members: {
                    ServerId: {},
                    UserName: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Entry", "Target" ],
                members: {
                    Entry: {},
                    Target: {},
                    Type: {}
                }
            }
        },
        Sa: {
            type: "structure",
            required: [ "Uid", "Gid" ],
            members: {
                Uid: {
                    type: "long"
                },
                Gid: {
                    type: "long"
                },
                SecondaryGids: {
                    type: "list",
                    member: {
                        type: "long"
                    }
                }
            }
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        St: {
            type: "structure",
            members: {
                LocalProfileId: {},
                PartnerProfileId: {},
                MessageSubject: {},
                Compression: {},
                EncryptionAlgorithm: {},
                SigningAlgorithm: {},
                MdnSigningAlgorithm: {},
                MdnResponse: {},
                BasicAuthSecretId: {}
            }
        },
        S11: {
            type: "structure",
            members: {
                UserSecretId: {},
                TrustedHostKeys: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "structure",
            members: {
                AddressAllocationIds: {
                    type: "list",
                    member: {}
                },
                SubnetIds: {
                    type: "list",
                    member: {}
                },
                VpcEndpointId: {},
                VpcId: {},
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1q: {
            type: "string",
            sensitive: true
        },
        S1r: {
            type: "structure",
            members: {
                Url: {},
                InvocationRole: {},
                DirectoryId: {},
                Function: {},
                SftpAuthenticationMethods: {}
            }
        },
        S1z: {
            type: "list",
            member: {}
        },
        S21: {
            type: "structure",
            members: {
                PassiveIp: {},
                TlsSessionResumptionMode: {},
                SetStatOption: {},
                As2Transports: {
                    type: "list",
                    member: {}
                }
            }
        },
        S28: {
            type: "structure",
            members: {
                OnUpload: {
                    type: "list",
                    member: {
                        shape: "S2a"
                    }
                },
                OnPartialUpload: {
                    type: "list",
                    member: {
                        shape: "S2a"
                    }
                }
            }
        },
        S2a: {
            type: "structure",
            required: [ "WorkflowId", "ExecutionRole" ],
            members: {
                WorkflowId: {},
                ExecutionRole: {}
            }
        },
        S2d: {
            type: "list",
            member: {}
        },
        S2f: {
            type: "structure",
            members: {
                DirectoryListingOptimization: {}
            }
        },
        S2o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    CopyStepDetails: {
                        type: "structure",
                        members: {
                            Name: {},
                            DestinationFileLocation: {
                                shape: "S2t"
                            },
                            OverwriteExisting: {},
                            SourceFileLocation: {}
                        }
                    },
                    CustomStepDetails: {
                        type: "structure",
                        members: {
                            Name: {},
                            Target: {},
                            TimeoutSeconds: {
                                type: "integer"
                            },
                            SourceFileLocation: {}
                        }
                    },
                    DeleteStepDetails: {
                        type: "structure",
                        members: {
                            Name: {},
                            SourceFileLocation: {}
                        }
                    },
                    TagStepDetails: {
                        type: "structure",
                        members: {
                            Name: {},
                            Tags: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Key", "Value" ],
                                    members: {
                                        Key: {},
                                        Value: {}
                                    }
                                }
                            },
                            SourceFileLocation: {}
                        }
                    },
                    DecryptStepDetails: {
                        type: "structure",
                        required: [ "Type", "DestinationFileLocation" ],
                        members: {
                            Name: {},
                            Type: {},
                            SourceFileLocation: {},
                            OverwriteExisting: {},
                            DestinationFileLocation: {
                                shape: "S2t"
                            }
                        }
                    }
                }
            }
        },
        S2t: {
            type: "structure",
            members: {
                S3FileLocation: {
                    type: "structure",
                    members: {
                        Bucket: {},
                        Key: {}
                    }
                },
                EfsFileLocation: {
                    shape: "S2x"
                }
            }
        },
        S2x: {
            type: "structure",
            members: {
                FileSystemId: {},
                Path: {}
            }
        },
        S41: {
            type: "string",
            sensitive: true
        },
        S42: {
            type: "string",
            sensitive: true
        },
        S4d: {
            type: "structure",
            members: {
                S3FileLocation: {
                    type: "structure",
                    members: {
                        Bucket: {},
                        Key: {},
                        VersionId: {},
                        Etag: {}
                    }
                },
                EfsFileLocation: {
                    shape: "S2x"
                }
            }
        },
        S4h: {
            type: "structure",
            required: [ "UserDetails" ],
            members: {
                UserDetails: {
                    type: "structure",
                    required: [ "UserName", "ServerId" ],
                    members: {
                        UserName: {},
                        ServerId: {},
                        SessionId: {}
                    }
                }
            }
        },
        S4o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StepType: {},
                    Outputs: {},
                    Error: {
                        type: "structure",
                        required: [ "Type", "Message" ],
                        members: {
                            Type: {},
                            Message: {}
                        }
                    }
                }
            }
        },
        S58: {
            type: "list",
            member: {}
        },
        S7b: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAccesses: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Accesses"
        },
        ListAgreements: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Agreements"
        },
        ListCertificates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Certificates"
        },
        ListConnectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Connectors"
        },
        ListExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Executions"
        },
        ListProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Profiles"
        },
        ListSecurityPolicies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SecurityPolicyNames"
        },
        ListServers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Servers"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        },
        ListUsers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Users"
        },
        ListWorkflows: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Workflows"
        }
    },
    waiters: {
        ServerOffline: {
            delay: 30,
            maxAttempts: 120,
            operation: "DescribeServer",
            acceptors: [ {
                matcher: "path",
                argument: "Server.State",
                state: "success",
                expected: "OFFLINE"
            }, {
                matcher: "path",
                argument: "Server.State",
                state: "failure",
                expected: "STOP_FAILED"
            } ]
        },
        ServerOnline: {
            delay: 30,
            maxAttempts: 120,
            operation: "DescribeServer",
            acceptors: [ {
                matcher: "path",
                argument: "Server.State",
                state: "success",
                expected: "ONLINE"
            }, {
                matcher: "path",
                argument: "Server.State",
                state: "failure",
                expected: "START_FAILED"
            } ]
        }
    }
};

AWS.apiLoader.services["globalaccelerator"] = {};

AWS.GlobalAccelerator = AWS.Service.defineService("globalaccelerator", [ "2018-08-08" ]);

AWS.apiLoader.services["globalaccelerator"]["2018-08-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-08-08",
        endpointPrefix: "globalaccelerator",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Global Accelerator",
        serviceId: "Global Accelerator",
        signatureVersion: "v4",
        signingName: "globalaccelerator",
        targetPrefix: "GlobalAccelerator_V20180706",
        uid: "globalaccelerator-2018-08-08"
    },
    operations: {
        AddCustomRoutingEndpoints: {
            input: {
                type: "structure",
                required: [ "EndpointConfigurations", "EndpointGroupArn" ],
                members: {
                    EndpointConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EndpointId: {},
                                AttachmentArn: {}
                            }
                        }
                    },
                    EndpointGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointDescriptions: {
                        shape: "S6"
                    },
                    EndpointGroupArn: {}
                }
            }
        },
        AddEndpoints: {
            input: {
                type: "structure",
                required: [ "EndpointConfigurations", "EndpointGroupArn" ],
                members: {
                    EndpointConfigurations: {
                        shape: "S9"
                    },
                    EndpointGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointDescriptions: {
                        shape: "Se"
                    },
                    EndpointGroupArn: {}
                }
            }
        },
        AdvertiseByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "Sj"
                    }
                }
            }
        },
        AllowCustomRoutingTraffic: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn", "EndpointId" ],
                members: {
                    EndpointGroupArn: {},
                    EndpointId: {},
                    DestinationAddresses: {
                        shape: "Sp"
                    },
                    DestinationPorts: {
                        shape: "Sr"
                    },
                    AllowAllTrafficToEndpoint: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateAccelerator: {
            input: {
                type: "structure",
                required: [ "Name", "IdempotencyToken" ],
                members: {
                    Name: {},
                    IpAddressType: {},
                    IpAddresses: {
                        shape: "Sv"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "S12"
                    }
                }
            }
        },
        CreateCrossAccountAttachment: {
            input: {
                type: "structure",
                required: [ "Name", "IdempotencyToken" ],
                members: {
                    Name: {},
                    Principals: {
                        shape: "S1b"
                    },
                    Resources: {
                        shape: "S1d"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossAccountAttachment: {
                        shape: "S1g"
                    }
                }
            }
        },
        CreateCustomRoutingAccelerator: {
            input: {
                type: "structure",
                required: [ "Name", "IdempotencyToken" ],
                members: {
                    Name: {},
                    IpAddressType: {},
                    IpAddresses: {
                        shape: "Sv"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "S1j"
                    }
                }
            }
        },
        CreateCustomRoutingEndpointGroup: {
            input: {
                type: "structure",
                required: [ "ListenerArn", "EndpointGroupRegion", "DestinationConfigurations", "IdempotencyToken" ],
                members: {
                    ListenerArn: {},
                    EndpointGroupRegion: {},
                    DestinationConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FromPort", "ToPort", "Protocols" ],
                            members: {
                                FromPort: {
                                    type: "integer"
                                },
                                ToPort: {
                                    type: "integer"
                                },
                                Protocols: {
                                    shape: "S1o"
                                }
                            }
                        }
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S1r"
                    }
                }
            }
        },
        CreateCustomRoutingListener: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn", "PortRanges", "IdempotencyToken" ],
                members: {
                    AcceleratorArn: {},
                    PortRanges: {
                        shape: "S1x"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S20"
                    }
                }
            }
        },
        CreateEndpointGroup: {
            input: {
                type: "structure",
                required: [ "ListenerArn", "EndpointGroupRegion", "IdempotencyToken" ],
                members: {
                    ListenerArn: {},
                    EndpointGroupRegion: {},
                    EndpointConfigurations: {
                        shape: "S9"
                    },
                    TrafficDialPercentage: {
                        type: "float"
                    },
                    HealthCheckPort: {
                        type: "integer"
                    },
                    HealthCheckProtocol: {},
                    HealthCheckPath: {},
                    HealthCheckIntervalSeconds: {
                        type: "integer"
                    },
                    ThresholdCount: {
                        type: "integer"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    PortOverrides: {
                        shape: "S28"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S2b"
                    }
                }
            }
        },
        CreateListener: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn", "PortRanges", "Protocol", "IdempotencyToken" ],
                members: {
                    AcceleratorArn: {},
                    PortRanges: {
                        shape: "S1x"
                    },
                    Protocol: {},
                    ClientAffinity: {},
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S2f"
                    }
                }
            }
        },
        DeleteAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            }
        },
        DeleteCrossAccountAttachment: {
            input: {
                type: "structure",
                required: [ "AttachmentArn" ],
                members: {
                    AttachmentArn: {}
                }
            }
        },
        DeleteCustomRoutingAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            }
        },
        DeleteCustomRoutingEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {}
                }
            }
        },
        DeleteCustomRoutingListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {}
                }
            }
        },
        DeleteEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {}
                }
            }
        },
        DeleteListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {}
                }
            }
        },
        DenyCustomRoutingTraffic: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn", "EndpointId" ],
                members: {
                    EndpointGroupArn: {},
                    EndpointId: {},
                    DestinationAddresses: {
                        shape: "Sp"
                    },
                    DestinationPorts: {
                        shape: "Sr"
                    },
                    DenyAllTrafficToEndpoint: {
                        type: "boolean"
                    }
                }
            }
        },
        DeprovisionByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "Sj"
                    }
                }
            }
        },
        DescribeAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "S12"
                    }
                }
            }
        },
        DescribeAcceleratorAttributes: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AcceleratorAttributes: {
                        shape: "S2u"
                    }
                }
            }
        },
        DescribeCrossAccountAttachment: {
            input: {
                type: "structure",
                required: [ "AttachmentArn" ],
                members: {
                    AttachmentArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossAccountAttachment: {
                        shape: "S1g"
                    }
                }
            }
        },
        DescribeCustomRoutingAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "S1j"
                    }
                }
            }
        },
        DescribeCustomRoutingAcceleratorAttributes: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AcceleratorAttributes: {
                        shape: "S31"
                    }
                }
            }
        },
        DescribeCustomRoutingEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S1r"
                    }
                }
            }
        },
        DescribeCustomRoutingListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S20"
                    }
                }
            }
        },
        DescribeEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S2b"
                    }
                }
            }
        },
        DescribeListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S2f"
                    }
                }
            }
        },
        ListAccelerators: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerators: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListByoipCidrs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidrs: {
                        type: "list",
                        member: {
                            shape: "Sj"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCrossAccountAttachments: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossAccountAttachments: {
                        type: "list",
                        member: {
                            shape: "S1g"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCrossAccountResourceAccounts: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ResourceOwnerAwsAccountIds: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListCrossAccountResources: {
            input: {
                type: "structure",
                required: [ "ResourceOwnerAwsAccountId" ],
                members: {
                    AcceleratorArn: {},
                    ResourceOwnerAwsAccountId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossAccountResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EndpointId: {},
                                AttachmentArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingAccelerators: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerators: {
                        type: "list",
                        member: {
                            shape: "S1j"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingEndpointGroups: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroups: {
                        type: "list",
                        member: {
                            shape: "S1r"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingListeners: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listeners: {
                        type: "list",
                        member: {
                            shape: "S20"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingPortMappings: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    EndpointGroupArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PortMappings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AcceleratorPort: {
                                    type: "integer"
                                },
                                EndpointGroupArn: {},
                                EndpointId: {},
                                DestinationSocketAddress: {
                                    shape: "S46"
                                },
                                Protocols: {
                                    shape: "S1o"
                                },
                                DestinationTrafficState: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomRoutingPortMappingsByDestination: {
            input: {
                type: "structure",
                required: [ "EndpointId", "DestinationAddress" ],
                members: {
                    EndpointId: {},
                    DestinationAddress: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DestinationPortMappings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AcceleratorArn: {},
                                AcceleratorSocketAddresses: {
                                    type: "list",
                                    member: {
                                        shape: "S46"
                                    }
                                },
                                EndpointGroupArn: {},
                                EndpointId: {},
                                EndpointGroupRegion: {},
                                DestinationSocketAddress: {
                                    shape: "S46"
                                },
                                IpAddressType: {},
                                DestinationTrafficState: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEndpointGroups: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroups: {
                        type: "list",
                        member: {
                            shape: "S2b"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListListeners: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listeners: {
                        type: "list",
                        member: {
                            shape: "S2f"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        ProvisionByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr", "CidrAuthorizationContext" ],
                members: {
                    Cidr: {},
                    CidrAuthorizationContext: {
                        type: "structure",
                        required: [ "Message", "Signature" ],
                        members: {
                            Message: {},
                            Signature: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "Sj"
                    }
                }
            }
        },
        RemoveCustomRoutingEndpoints: {
            input: {
                type: "structure",
                required: [ "EndpointIds", "EndpointGroupArn" ],
                members: {
                    EndpointIds: {
                        type: "list",
                        member: {}
                    },
                    EndpointGroupArn: {}
                }
            }
        },
        RemoveEndpoints: {
            input: {
                type: "structure",
                required: [ "EndpointIdentifiers", "EndpointGroupArn" ],
                members: {
                    EndpointIdentifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EndpointId" ],
                            members: {
                                EndpointId: {},
                                ClientIPPreservationEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    EndpointGroupArn: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    Name: {},
                    IpAddressType: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "S12"
                    }
                }
            }
        },
        UpdateAcceleratorAttributes: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    FlowLogsEnabled: {
                        type: "boolean"
                    },
                    FlowLogsS3Bucket: {},
                    FlowLogsS3Prefix: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AcceleratorAttributes: {
                        shape: "S2u"
                    }
                }
            }
        },
        UpdateCrossAccountAttachment: {
            input: {
                type: "structure",
                required: [ "AttachmentArn" ],
                members: {
                    AttachmentArn: {},
                    Name: {},
                    AddPrincipals: {
                        shape: "S1b"
                    },
                    RemovePrincipals: {
                        shape: "S1b"
                    },
                    AddResources: {
                        shape: "S1d"
                    },
                    RemoveResources: {
                        shape: "S1d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrossAccountAttachment: {
                        shape: "S1g"
                    }
                }
            }
        },
        UpdateCustomRoutingAccelerator: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    Name: {},
                    IpAddressType: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accelerator: {
                        shape: "S1j"
                    }
                }
            }
        },
        UpdateCustomRoutingAcceleratorAttributes: {
            input: {
                type: "structure",
                required: [ "AcceleratorArn" ],
                members: {
                    AcceleratorArn: {},
                    FlowLogsEnabled: {
                        type: "boolean"
                    },
                    FlowLogsS3Bucket: {},
                    FlowLogsS3Prefix: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AcceleratorAttributes: {
                        shape: "S31"
                    }
                }
            }
        },
        UpdateCustomRoutingListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn", "PortRanges" ],
                members: {
                    ListenerArn: {},
                    PortRanges: {
                        shape: "S1x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S20"
                    }
                }
            }
        },
        UpdateEndpointGroup: {
            input: {
                type: "structure",
                required: [ "EndpointGroupArn" ],
                members: {
                    EndpointGroupArn: {},
                    EndpointConfigurations: {
                        shape: "S9"
                    },
                    TrafficDialPercentage: {
                        type: "float"
                    },
                    HealthCheckPort: {
                        type: "integer"
                    },
                    HealthCheckProtocol: {},
                    HealthCheckPath: {},
                    HealthCheckIntervalSeconds: {
                        type: "integer"
                    },
                    ThresholdCount: {
                        type: "integer"
                    },
                    PortOverrides: {
                        shape: "S28"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointGroup: {
                        shape: "S2b"
                    }
                }
            }
        },
        UpdateListener: {
            input: {
                type: "structure",
                required: [ "ListenerArn" ],
                members: {
                    ListenerArn: {},
                    PortRanges: {
                        shape: "S1x"
                    },
                    Protocol: {},
                    ClientAffinity: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Listener: {
                        shape: "S2f"
                    }
                }
            }
        },
        WithdrawByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "Sj"
                    }
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndpointId: {}
                }
            }
        },
        S9: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndpointId: {},
                    Weight: {
                        type: "integer"
                    },
                    ClientIPPreservationEnabled: {
                        type: "boolean"
                    },
                    AttachmentArn: {}
                }
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndpointId: {},
                    Weight: {
                        type: "integer"
                    },
                    HealthState: {},
                    HealthReason: {},
                    ClientIPPreservationEnabled: {
                        type: "boolean"
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                Cidr: {},
                State: {},
                Events: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Message: {},
                            Timestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        Sp: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        Sv: {
            type: "list",
            member: {}
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                AcceleratorArn: {},
                Name: {},
                IpAddressType: {},
                Enabled: {
                    type: "boolean"
                },
                IpSets: {
                    shape: "S13"
                },
                DnsName: {},
                Status: {},
                CreatedTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                DualStackDnsName: {},
                Events: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Message: {},
                            Timestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IpFamily: {
                        deprecated: true,
                        deprecatedMessage: "IpFamily has been replaced by IpAddressFamily"
                    },
                    IpAddresses: {
                        shape: "Sv"
                    },
                    IpAddressFamily: {}
                }
            }
        },
        S1b: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "EndpointId" ],
                members: {
                    EndpointId: {},
                    Region: {}
                }
            }
        },
        S1g: {
            type: "structure",
            members: {
                AttachmentArn: {},
                Name: {},
                Principals: {
                    shape: "S1b"
                },
                Resources: {
                    shape: "S1d"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                CreatedTime: {
                    type: "timestamp"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                AcceleratorArn: {},
                Name: {},
                IpAddressType: {},
                Enabled: {
                    type: "boolean"
                },
                IpSets: {
                    shape: "S13"
                },
                DnsName: {},
                Status: {},
                CreatedTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                }
            }
        },
        S1o: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "structure",
            members: {
                EndpointGroupArn: {},
                EndpointGroupRegion: {},
                DestinationDescriptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            FromPort: {
                                type: "integer"
                            },
                            ToPort: {
                                type: "integer"
                            },
                            Protocols: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                EndpointDescriptions: {
                    shape: "S6"
                }
            }
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FromPort: {
                        type: "integer"
                    },
                    ToPort: {
                        type: "integer"
                    }
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                ListenerArn: {},
                PortRanges: {
                    shape: "S1x"
                }
            }
        },
        S28: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ListenerPort: {
                        type: "integer"
                    },
                    EndpointPort: {
                        type: "integer"
                    }
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                EndpointGroupArn: {},
                EndpointGroupRegion: {},
                EndpointDescriptions: {
                    shape: "Se"
                },
                TrafficDialPercentage: {
                    type: "float"
                },
                HealthCheckPort: {
                    type: "integer"
                },
                HealthCheckProtocol: {},
                HealthCheckPath: {},
                HealthCheckIntervalSeconds: {
                    type: "integer"
                },
                ThresholdCount: {
                    type: "integer"
                },
                PortOverrides: {
                    shape: "S28"
                }
            }
        },
        S2f: {
            type: "structure",
            members: {
                ListenerArn: {},
                PortRanges: {
                    shape: "S1x"
                },
                Protocol: {},
                ClientAffinity: {}
            }
        },
        S2u: {
            type: "structure",
            members: {
                FlowLogsEnabled: {
                    type: "boolean"
                },
                FlowLogsS3Bucket: {},
                FlowLogsS3Prefix: {}
            }
        },
        S31: {
            type: "structure",
            members: {
                FlowLogsEnabled: {
                    type: "boolean"
                },
                FlowLogsS3Bucket: {},
                FlowLogsS3Prefix: {}
            }
        },
        S46: {
            type: "structure",
            members: {
                IpAddress: {},
                Port: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        ListAccelerators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Accelerators"
        },
        ListByoipCidrs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ByoipCidrs"
        },
        ListCrossAccountAttachments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CrossAccountAttachments"
        },
        ListCrossAccountResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CrossAccountResources"
        },
        ListCustomRoutingAccelerators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Accelerators"
        },
        ListCustomRoutingEndpointGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EndpointGroups"
        },
        ListCustomRoutingListeners: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Listeners"
        },
        ListCustomRoutingPortMappings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PortMappings"
        },
        ListCustomRoutingPortMappingsByDestination: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DestinationPortMappings"
        },
        ListEndpointGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EndpointGroups"
        },
        ListListeners: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Listeners"
        }
    }
};

AWS.apiLoader.services["comprehendmedical"] = {};

AWS.ComprehendMedical = AWS.Service.defineService("comprehendmedical", [ "2018-10-30" ]);

AWS.apiLoader.services["comprehendmedical"]["2018-10-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-30",
        endpointPrefix: "comprehendmedical",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "ComprehendMedical",
        serviceFullName: "AWS Comprehend Medical",
        serviceId: "ComprehendMedical",
        signatureVersion: "v4",
        signingName: "comprehendmedical",
        targetPrefix: "ComprehendMedical_20181030",
        uid: "comprehendmedical-2018-10-30"
    },
    operations: {
        DescribeEntitiesDetectionV2Job: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobProperties: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribeICD10CMInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobProperties: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribePHIDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobProperties: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribeRxNormInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobProperties: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribeSNOMEDCTInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobProperties: {
                        shape: "S4"
                    }
                }
            }
        },
        DetectEntities: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities", "ModelVersion" ],
                members: {
                    Entities: {
                        shape: "St"
                    },
                    UnmappedAttributes: {
                        shape: "S16"
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This operation is deprecated, use DetectEntitiesV2 instead."
        },
        DetectEntitiesV2: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities", "ModelVersion" ],
                members: {
                    Entities: {
                        shape: "St"
                    },
                    UnmappedAttributes: {
                        shape: "S16"
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            }
        },
        DetectPHI: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities", "ModelVersion" ],
                members: {
                    Entities: {
                        shape: "St"
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            }
        },
        InferICD10CM: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities" ],
                members: {
                    Entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {
                                    type: "integer"
                                },
                                Text: {},
                                Category: {},
                                Type: {},
                                Score: {
                                    type: "float"
                                },
                                BeginOffset: {
                                    type: "integer"
                                },
                                EndOffset: {
                                    type: "integer"
                                },
                                Attributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Type: {},
                                            Score: {
                                                type: "float"
                                            },
                                            RelationshipScore: {
                                                type: "float"
                                            },
                                            Id: {
                                                type: "integer"
                                            },
                                            BeginOffset: {
                                                type: "integer"
                                            },
                                            EndOffset: {
                                                type: "integer"
                                            },
                                            Text: {},
                                            Traits: {
                                                shape: "S1m"
                                            },
                                            Category: {},
                                            RelationshipType: {}
                                        }
                                    }
                                },
                                Traits: {
                                    shape: "S1m"
                                },
                                ICD10CMConcepts: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Description: {},
                                            Code: {},
                                            Score: {
                                                type: "float"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            }
        },
        InferRxNorm: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities" ],
                members: {
                    Entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {
                                    type: "integer"
                                },
                                Text: {},
                                Category: {},
                                Type: {},
                                Score: {
                                    type: "float"
                                },
                                BeginOffset: {
                                    type: "integer"
                                },
                                EndOffset: {
                                    type: "integer"
                                },
                                Attributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Type: {},
                                            Score: {
                                                type: "float"
                                            },
                                            RelationshipScore: {
                                                type: "float"
                                            },
                                            Id: {
                                                type: "integer"
                                            },
                                            BeginOffset: {
                                                type: "integer"
                                            },
                                            EndOffset: {
                                                type: "integer"
                                            },
                                            Text: {},
                                            Traits: {
                                                shape: "S21"
                                            }
                                        }
                                    }
                                },
                                Traits: {
                                    shape: "S21"
                                },
                                RxNormConcepts: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Description: {},
                                            Code: {},
                                            Score: {
                                                type: "float"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    PaginationToken: {},
                    ModelVersion: {}
                }
            }
        },
        InferSNOMEDCT: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Entities" ],
                members: {
                    Entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {
                                    type: "integer"
                                },
                                Text: {},
                                Category: {},
                                Type: {},
                                Score: {
                                    type: "float"
                                },
                                BeginOffset: {
                                    type: "integer"
                                },
                                EndOffset: {
                                    type: "integer"
                                },
                                Attributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Category: {},
                                            Type: {},
                                            Score: {
                                                type: "float"
                                            },
                                            RelationshipScore: {
                                                type: "float"
                                            },
                                            RelationshipType: {},
                                            Id: {
                                                type: "integer"
                                            },
                                            BeginOffset: {
                                                type: "integer"
                                            },
                                            EndOffset: {
                                                type: "integer"
                                            },
                                            Text: {},
                                            Traits: {
                                                shape: "S2g"
                                            },
                                            SNOMEDCTConcepts: {
                                                shape: "S2j"
                                            }
                                        }
                                    }
                                },
                                Traits: {
                                    shape: "S2g"
                                },
                                SNOMEDCTConcepts: {
                                    shape: "S2j"
                                }
                            }
                        }
                    },
                    PaginationToken: {},
                    ModelVersion: {},
                    SNOMEDCTDetails: {
                        type: "structure",
                        members: {
                            Edition: {},
                            Language: {},
                            VersionDate: {}
                        }
                    },
                    Characters: {
                        type: "structure",
                        members: {
                            OriginalTextCharacters: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        ListEntitiesDetectionV2Jobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S2o"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobPropertiesList: {
                        shape: "S2r"
                    },
                    NextToken: {}
                }
            }
        },
        ListICD10CMInferenceJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S2o"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobPropertiesList: {
                        shape: "S2r"
                    },
                    NextToken: {}
                }
            }
        },
        ListPHIDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S2o"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobPropertiesList: {
                        shape: "S2r"
                    },
                    NextToken: {}
                }
            }
        },
        ListRxNormInferenceJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S2o"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobPropertiesList: {
                        shape: "S2r"
                    },
                    NextToken: {}
                }
            }
        },
        ListSNOMEDCTInferenceJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S2o"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComprehendMedicalAsyncJobPropertiesList: {
                        shape: "S2r"
                    },
                    NextToken: {}
                }
            }
        },
        StartEntitiesDetectionV2Job: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S9"
                    },
                    OutputDataConfig: {
                        shape: "Sc"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    KMSKey: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartICD10CMInferenceJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S9"
                    },
                    OutputDataConfig: {
                        shape: "Sc"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    KMSKey: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartPHIDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S9"
                    },
                    OutputDataConfig: {
                        shape: "Sc"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    KMSKey: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartRxNormInferenceJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S9"
                    },
                    OutputDataConfig: {
                        shape: "Sc"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    KMSKey: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StartSNOMEDCTInferenceJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S9"
                    },
                    OutputDataConfig: {
                        shape: "Sc"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    KMSKey: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StopEntitiesDetectionV2Job: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StopICD10CMInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StopPHIDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StopRxNormInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        StopSNOMEDCTInferenceJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                JobId: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                ExpirationTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S9"
                },
                OutputDataConfig: {
                    shape: "Sc"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                ManifestFilePath: {},
                KMSKey: {},
                ModelVersion: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "S3Bucket" ],
            members: {
                S3Bucket: {},
                S3Key: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "S3Bucket" ],
            members: {
                S3Bucket: {},
                S3Key: {}
            }
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {
                        type: "integer"
                    },
                    BeginOffset: {
                        type: "integer"
                    },
                    EndOffset: {
                        type: "integer"
                    },
                    Score: {
                        type: "float"
                    },
                    Text: {},
                    Category: {},
                    Type: {},
                    Traits: {
                        shape: "S10"
                    },
                    Attributes: {
                        type: "list",
                        member: {
                            shape: "S14"
                        }
                    }
                }
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                Type: {},
                Score: {
                    type: "float"
                },
                RelationshipScore: {
                    type: "float"
                },
                RelationshipType: {},
                Id: {
                    type: "integer"
                },
                BeginOffset: {
                    type: "integer"
                },
                EndOffset: {
                    type: "integer"
                },
                Text: {},
                Category: {},
                Traits: {
                    shape: "S10"
                }
            }
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Attribute: {
                        shape: "S14"
                    }
                }
            }
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        S2g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        S2j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Description: {},
                    Code: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        S2o: {
            type: "structure",
            members: {
                JobName: {},
                JobStatus: {},
                SubmitTimeBefore: {
                    type: "timestamp"
                },
                SubmitTimeAfter: {
                    type: "timestamp"
                }
            }
        },
        S2r: {
            type: "list",
            member: {
                shape: "S4"
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["kinesisanalyticsv2"] = {};

AWS.KinesisAnalyticsV2 = AWS.Service.defineService("kinesisanalyticsv2", [ "2018-05-23" ]);

AWS.apiLoader.services["kinesisanalyticsv2"]["2018-05-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-23",
        endpointPrefix: "kinesisanalytics",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Kinesis Analytics V2",
        serviceFullName: "Amazon Kinesis Analytics",
        serviceId: "Kinesis Analytics V2",
        signatureVersion: "v4",
        signingName: "kinesisanalytics",
        targetPrefix: "KinesisAnalytics_20180523",
        uid: "kinesisanalyticsv2-2018-05-23"
    },
    operations: {
        AddApplicationCloudWatchLoggingOption: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CloudWatchLoggingOption" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOption: {
                        shape: "S4"
                    },
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOptionDescriptions: {
                        shape: "S9"
                    }
                }
            }
        },
        AddApplicationInput: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "Input" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    Input: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    InputDescriptions: {
                        shape: "S12"
                    }
                }
            }
        },
        AddApplicationInputProcessingConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "InputId", "InputProcessingConfiguration" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    InputId: {},
                    InputProcessingConfiguration: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    InputId: {},
                    InputProcessingConfigurationDescription: {
                        shape: "S15"
                    }
                }
            }
        },
        AddApplicationOutput: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "Output" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    Output: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    OutputDescriptions: {
                        shape: "S1k"
                    }
                }
            }
        },
        AddApplicationReferenceDataSource: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "ReferenceDataSource" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    ReferenceDataSource: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    ReferenceDataSourceDescriptions: {
                        shape: "S1w"
                    }
                }
            }
        },
        AddApplicationVpcConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "VpcConfiguration" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    VpcConfiguration: {
                        shape: "S20"
                    },
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    VpcConfigurationDescription: {
                        shape: "S26"
                    }
                }
            }
        },
        CreateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "RuntimeEnvironment", "ServiceExecutionRole" ],
                members: {
                    ApplicationName: {},
                    ApplicationDescription: {},
                    RuntimeEnvironment: {},
                    ServiceExecutionRole: {},
                    ApplicationConfiguration: {
                        type: "structure",
                        members: {
                            SqlApplicationConfiguration: {
                                type: "structure",
                                members: {
                                    Inputs: {
                                        type: "list",
                                        member: {
                                            shape: "Se"
                                        }
                                    },
                                    Outputs: {
                                        type: "list",
                                        member: {
                                            shape: "S1e"
                                        }
                                    },
                                    ReferenceDataSources: {
                                        type: "list",
                                        member: {
                                            shape: "S1q"
                                        }
                                    }
                                }
                            },
                            FlinkApplicationConfiguration: {
                                type: "structure",
                                members: {
                                    CheckpointConfiguration: {
                                        type: "structure",
                                        required: [ "ConfigurationType" ],
                                        members: {
                                            ConfigurationType: {},
                                            CheckpointingEnabled: {
                                                type: "boolean"
                                            },
                                            CheckpointInterval: {
                                                type: "long"
                                            },
                                            MinPauseBetweenCheckpoints: {
                                                type: "long"
                                            }
                                        }
                                    },
                                    MonitoringConfiguration: {
                                        type: "structure",
                                        required: [ "ConfigurationType" ],
                                        members: {
                                            ConfigurationType: {},
                                            MetricsLevel: {},
                                            LogLevel: {}
                                        }
                                    },
                                    ParallelismConfiguration: {
                                        type: "structure",
                                        required: [ "ConfigurationType" ],
                                        members: {
                                            ConfigurationType: {},
                                            Parallelism: {
                                                type: "integer"
                                            },
                                            ParallelismPerKPU: {
                                                type: "integer"
                                            },
                                            AutoScalingEnabled: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            EnvironmentProperties: {
                                type: "structure",
                                required: [ "PropertyGroups" ],
                                members: {
                                    PropertyGroups: {
                                        shape: "S2t"
                                    }
                                }
                            },
                            ApplicationCodeConfiguration: {
                                type: "structure",
                                required: [ "CodeContentType" ],
                                members: {
                                    CodeContent: {
                                        type: "structure",
                                        members: {
                                            TextContent: {},
                                            ZipFileContent: {
                                                type: "blob"
                                            },
                                            S3ContentLocation: {
                                                shape: "S32"
                                            }
                                        }
                                    },
                                    CodeContentType: {}
                                }
                            },
                            ApplicationSnapshotConfiguration: {
                                type: "structure",
                                required: [ "SnapshotsEnabled" ],
                                members: {
                                    SnapshotsEnabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            VpcConfigurations: {
                                type: "list",
                                member: {
                                    shape: "S20"
                                }
                            },
                            ZeppelinApplicationConfiguration: {
                                type: "structure",
                                members: {
                                    MonitoringConfiguration: {
                                        type: "structure",
                                        required: [ "LogLevel" ],
                                        members: {
                                            LogLevel: {}
                                        }
                                    },
                                    CatalogConfiguration: {
                                        type: "structure",
                                        required: [ "GlueDataCatalogConfiguration" ],
                                        members: {
                                            GlueDataCatalogConfiguration: {
                                                type: "structure",
                                                required: [ "DatabaseARN" ],
                                                members: {
                                                    DatabaseARN: {}
                                                }
                                            }
                                        }
                                    },
                                    DeployAsApplicationConfiguration: {
                                        type: "structure",
                                        required: [ "S3ContentLocation" ],
                                        members: {
                                            S3ContentLocation: {
                                                type: "structure",
                                                required: [ "BucketARN" ],
                                                members: {
                                                    BucketARN: {},
                                                    BasePath: {}
                                                }
                                            }
                                        }
                                    },
                                    CustomArtifactsConfiguration: {
                                        shape: "S3f"
                                    }
                                }
                            }
                        }
                    },
                    CloudWatchLoggingOptions: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    Tags: {
                        shape: "S3n"
                    },
                    ApplicationMode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationDetail" ],
                members: {
                    ApplicationDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        CreateApplicationPresignedUrl: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "UrlType" ],
                members: {
                    ApplicationName: {},
                    UrlType: {},
                    SessionExpirationDurationInSeconds: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthorizedUrl: {}
                }
            }
        },
        CreateApplicationSnapshot: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "SnapshotName" ],
                members: {
                    ApplicationName: {},
                    SnapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CreateTimestamp" ],
                members: {
                    ApplicationName: {},
                    CreateTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplicationCloudWatchLoggingOption: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CloudWatchLoggingOptionId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOptionId: {},
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    },
                    CloudWatchLoggingOptionDescriptions: {
                        shape: "S9"
                    }
                }
            }
        },
        DeleteApplicationInputProcessingConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "InputId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    InputId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            }
        },
        DeleteApplicationOutput: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "OutputId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    OutputId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            }
        },
        DeleteApplicationReferenceDataSource: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId", "ReferenceId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    ReferenceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            }
        },
        DeleteApplicationSnapshot: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "SnapshotName", "SnapshotCreationTimestamp" ],
                members: {
                    ApplicationName: {},
                    SnapshotName: {},
                    SnapshotCreationTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplicationVpcConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "VpcConfigurationId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    VpcConfigurationId: {},
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            }
        },
        DescribeApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    IncludeAdditionalDetails: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationDetail" ],
                members: {
                    ApplicationDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        DescribeApplicationSnapshot: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "SnapshotName" ],
                members: {
                    ApplicationName: {},
                    SnapshotName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SnapshotDetails" ],
                members: {
                    SnapshotDetails: {
                        shape: "S5g"
                    }
                }
            }
        },
        DescribeApplicationVersion: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "ApplicationVersionId" ],
                members: {
                    ApplicationName: {},
                    ApplicationVersionId: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationVersionDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        DiscoverInputSchema: {
            input: {
                type: "structure",
                required: [ "ServiceExecutionRole" ],
                members: {
                    ResourceARN: {},
                    ServiceExecutionRole: {},
                    InputStartingPositionConfiguration: {
                        shape: "S19"
                    },
                    S3Configuration: {
                        type: "structure",
                        required: [ "BucketARN", "FileKey" ],
                        members: {
                            BucketARN: {},
                            FileKey: {}
                        }
                    },
                    InputProcessingConfiguration: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InputSchema: {
                        shape: "Sm"
                    },
                    ParsedInputRecords: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {}
                        }
                    },
                    ProcessedInputRecords: {
                        type: "list",
                        member: {}
                    },
                    RawInputRecords: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListApplicationSnapshots: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotSummaries: {
                        type: "list",
                        member: {
                            shape: "S5g"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplicationVersions: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ApplicationVersionId", "ApplicationStatus" ],
                            members: {
                                ApplicationVersionId: {
                                    type: "long"
                                },
                                ApplicationStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListApplications: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationSummaries" ],
                members: {
                    ApplicationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ApplicationName", "ApplicationARN", "ApplicationStatus", "ApplicationVersionId", "RuntimeEnvironment" ],
                            members: {
                                ApplicationName: {},
                                ApplicationARN: {},
                                ApplicationStatus: {},
                                ApplicationVersionId: {
                                    type: "long"
                                },
                                RuntimeEnvironment: {},
                                ApplicationMode: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S3n"
                    }
                }
            }
        },
        RollbackApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "CurrentApplicationVersionId" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationDetail" ],
                members: {
                    ApplicationDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        StartApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    RunConfiguration: {
                        type: "structure",
                        members: {
                            FlinkRunConfiguration: {
                                shape: "S47"
                            },
                            SqlRunConfigurations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "InputId", "InputStartingPositionConfiguration" ],
                                    members: {
                                        InputId: {},
                                        InputStartingPositionConfiguration: {
                                            shape: "S19"
                                        }
                                    }
                                }
                            },
                            ApplicationRestoreConfiguration: {
                                shape: "S44"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S3n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                required: [ "ApplicationName" ],
                members: {
                    ApplicationName: {},
                    CurrentApplicationVersionId: {
                        type: "long"
                    },
                    ApplicationConfigurationUpdate: {
                        type: "structure",
                        members: {
                            SqlApplicationConfigurationUpdate: {
                                type: "structure",
                                members: {
                                    InputUpdates: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "InputId" ],
                                            members: {
                                                InputId: {},
                                                NamePrefixUpdate: {},
                                                InputProcessingConfigurationUpdate: {
                                                    type: "structure",
                                                    required: [ "InputLambdaProcessorUpdate" ],
                                                    members: {
                                                        InputLambdaProcessorUpdate: {
                                                            type: "structure",
                                                            required: [ "ResourceARNUpdate" ],
                                                            members: {
                                                                ResourceARNUpdate: {}
                                                            }
                                                        }
                                                    }
                                                },
                                                KinesisStreamsInputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                KinesisFirehoseInputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                InputSchemaUpdate: {
                                                    type: "structure",
                                                    members: {
                                                        RecordFormatUpdate: {
                                                            shape: "Sn"
                                                        },
                                                        RecordEncodingUpdate: {},
                                                        RecordColumnUpdates: {
                                                            shape: "Sw"
                                                        }
                                                    }
                                                },
                                                InputParallelismUpdate: {
                                                    type: "structure",
                                                    required: [ "CountUpdate" ],
                                                    members: {
                                                        CountUpdate: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    OutputUpdates: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "OutputId" ],
                                            members: {
                                                OutputId: {},
                                                NameUpdate: {},
                                                KinesisStreamsOutputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                KinesisFirehoseOutputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                LambdaOutputUpdate: {
                                                    type: "structure",
                                                    required: [ "ResourceARNUpdate" ],
                                                    members: {
                                                        ResourceARNUpdate: {}
                                                    }
                                                },
                                                DestinationSchemaUpdate: {
                                                    shape: "S1i"
                                                }
                                            }
                                        }
                                    },
                                    ReferenceDataSourceUpdates: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "ReferenceId" ],
                                            members: {
                                                ReferenceId: {},
                                                TableNameUpdate: {},
                                                S3ReferenceDataSourceUpdate: {
                                                    type: "structure",
                                                    members: {
                                                        BucketARNUpdate: {},
                                                        FileKeyUpdate: {}
                                                    }
                                                },
                                                ReferenceSchemaUpdate: {
                                                    shape: "Sm"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            ApplicationCodeConfigurationUpdate: {
                                type: "structure",
                                members: {
                                    CodeContentTypeUpdate: {},
                                    CodeContentUpdate: {
                                        type: "structure",
                                        members: {
                                            TextContentUpdate: {},
                                            ZipFileContentUpdate: {
                                                type: "blob"
                                            },
                                            S3ContentLocationUpdate: {
                                                type: "structure",
                                                members: {
                                                    BucketARNUpdate: {},
                                                    FileKeyUpdate: {},
                                                    ObjectVersionUpdate: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            FlinkApplicationConfigurationUpdate: {
                                type: "structure",
                                members: {
                                    CheckpointConfigurationUpdate: {
                                        type: "structure",
                                        members: {
                                            ConfigurationTypeUpdate: {},
                                            CheckpointingEnabledUpdate: {
                                                type: "boolean"
                                            },
                                            CheckpointIntervalUpdate: {
                                                type: "long"
                                            },
                                            MinPauseBetweenCheckpointsUpdate: {
                                                type: "long"
                                            }
                                        }
                                    },
                                    MonitoringConfigurationUpdate: {
                                        type: "structure",
                                        members: {
                                            ConfigurationTypeUpdate: {},
                                            MetricsLevelUpdate: {},
                                            LogLevelUpdate: {}
                                        }
                                    },
                                    ParallelismConfigurationUpdate: {
                                        type: "structure",
                                        members: {
                                            ConfigurationTypeUpdate: {},
                                            ParallelismUpdate: {
                                                type: "integer"
                                            },
                                            ParallelismPerKPUUpdate: {
                                                type: "integer"
                                            },
                                            AutoScalingEnabledUpdate: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            EnvironmentPropertyUpdates: {
                                type: "structure",
                                required: [ "PropertyGroups" ],
                                members: {
                                    PropertyGroups: {
                                        shape: "S2t"
                                    }
                                }
                            },
                            ApplicationSnapshotConfigurationUpdate: {
                                type: "structure",
                                required: [ "SnapshotsEnabledUpdate" ],
                                members: {
                                    SnapshotsEnabledUpdate: {
                                        type: "boolean"
                                    }
                                }
                            },
                            VpcConfigurationUpdates: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "VpcConfigurationId" ],
                                    members: {
                                        VpcConfigurationId: {},
                                        SubnetIdUpdates: {
                                            shape: "S21"
                                        },
                                        SecurityGroupIdUpdates: {
                                            shape: "S23"
                                        }
                                    }
                                }
                            },
                            ZeppelinApplicationConfigurationUpdate: {
                                type: "structure",
                                members: {
                                    MonitoringConfigurationUpdate: {
                                        type: "structure",
                                        required: [ "LogLevelUpdate" ],
                                        members: {
                                            LogLevelUpdate: {}
                                        }
                                    },
                                    CatalogConfigurationUpdate: {
                                        type: "structure",
                                        required: [ "GlueDataCatalogConfigurationUpdate" ],
                                        members: {
                                            GlueDataCatalogConfigurationUpdate: {
                                                type: "structure",
                                                required: [ "DatabaseARNUpdate" ],
                                                members: {
                                                    DatabaseARNUpdate: {}
                                                }
                                            }
                                        }
                                    },
                                    DeployAsApplicationConfigurationUpdate: {
                                        type: "structure",
                                        members: {
                                            S3ContentLocationUpdate: {
                                                type: "structure",
                                                members: {
                                                    BucketARNUpdate: {},
                                                    BasePathUpdate: {}
                                                }
                                            }
                                        }
                                    },
                                    CustomArtifactsConfigurationUpdate: {
                                        shape: "S3f"
                                    }
                                }
                            }
                        }
                    },
                    ServiceExecutionRoleUpdate: {},
                    RunConfigurationUpdate: {
                        type: "structure",
                        members: {
                            FlinkRunConfiguration: {
                                shape: "S47"
                            },
                            ApplicationRestoreConfiguration: {
                                shape: "S44"
                            }
                        }
                    },
                    CloudWatchLoggingOptionUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CloudWatchLoggingOptionId" ],
                            members: {
                                CloudWatchLoggingOptionId: {},
                                LogStreamARNUpdate: {}
                            }
                        }
                    },
                    ConditionalToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationDetail" ],
                members: {
                    ApplicationDetail: {
                        shape: "S3t"
                    }
                }
            }
        },
        UpdateApplicationMaintenanceConfiguration: {
            input: {
                type: "structure",
                required: [ "ApplicationName", "ApplicationMaintenanceConfigurationUpdate" ],
                members: {
                    ApplicationName: {},
                    ApplicationMaintenanceConfigurationUpdate: {
                        type: "structure",
                        required: [ "ApplicationMaintenanceWindowStartTimeUpdate" ],
                        members: {
                            ApplicationMaintenanceWindowStartTimeUpdate: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationARN: {},
                    ApplicationMaintenanceConfigurationDescription: {
                        shape: "S4o"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "LogStreamARN" ],
            members: {
                LogStreamARN: {}
            }
        },
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "LogStreamARN" ],
                members: {
                    CloudWatchLoggingOptionId: {},
                    LogStreamARN: {},
                    RoleARN: {}
                }
            }
        },
        Se: {
            type: "structure",
            required: [ "NamePrefix", "InputSchema" ],
            members: {
                NamePrefix: {},
                InputProcessingConfiguration: {
                    shape: "Sg"
                },
                KinesisStreamsInput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                KinesisFirehoseInput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                InputParallelism: {
                    shape: "Sk"
                },
                InputSchema: {
                    shape: "Sm"
                }
            }
        },
        Sg: {
            type: "structure",
            required: [ "InputLambdaProcessor" ],
            members: {
                InputLambdaProcessor: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                }
            }
        },
        Sk: {
            type: "structure",
            members: {
                Count: {
                    type: "integer"
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "RecordFormat", "RecordColumns" ],
            members: {
                RecordFormat: {
                    shape: "Sn"
                },
                RecordEncoding: {},
                RecordColumns: {
                    shape: "Sw"
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "RecordFormatType" ],
            members: {
                RecordFormatType: {},
                MappingParameters: {
                    type: "structure",
                    members: {
                        JSONMappingParameters: {
                            type: "structure",
                            required: [ "RecordRowPath" ],
                            members: {
                                RecordRowPath: {}
                            }
                        },
                        CSVMappingParameters: {
                            type: "structure",
                            required: [ "RecordRowDelimiter", "RecordColumnDelimiter" ],
                            members: {
                                RecordRowDelimiter: {},
                                RecordColumnDelimiter: {}
                            }
                        }
                    }
                }
            }
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "SqlType" ],
                members: {
                    Name: {},
                    Mapping: {},
                    SqlType: {}
                }
            }
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    InputId: {},
                    NamePrefix: {},
                    InAppStreamNames: {
                        type: "list",
                        member: {}
                    },
                    InputProcessingConfigurationDescription: {
                        shape: "S15"
                    },
                    KinesisStreamsInputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    KinesisFirehoseInputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    InputSchema: {
                        shape: "Sm"
                    },
                    InputParallelism: {
                        shape: "Sk"
                    },
                    InputStartingPositionConfiguration: {
                        shape: "S19"
                    }
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                InputLambdaProcessorDescription: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {},
                        RoleARN: {}
                    }
                }
            }
        },
        S19: {
            type: "structure",
            members: {
                InputStartingPosition: {}
            }
        },
        S1e: {
            type: "structure",
            required: [ "Name", "DestinationSchema" ],
            members: {
                Name: {},
                KinesisStreamsOutput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                KinesisFirehoseOutput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                LambdaOutput: {
                    type: "structure",
                    required: [ "ResourceARN" ],
                    members: {
                        ResourceARN: {}
                    }
                },
                DestinationSchema: {
                    shape: "S1i"
                }
            }
        },
        S1i: {
            type: "structure",
            required: [ "RecordFormatType" ],
            members: {
                RecordFormatType: {}
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    OutputId: {},
                    Name: {},
                    KinesisStreamsOutputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    KinesisFirehoseOutputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    LambdaOutputDescription: {
                        type: "structure",
                        required: [ "ResourceARN" ],
                        members: {
                            ResourceARN: {},
                            RoleARN: {}
                        }
                    },
                    DestinationSchema: {
                        shape: "S1i"
                    }
                }
            }
        },
        S1q: {
            type: "structure",
            required: [ "TableName", "ReferenceSchema" ],
            members: {
                TableName: {},
                S3ReferenceDataSource: {
                    type: "structure",
                    members: {
                        BucketARN: {},
                        FileKey: {}
                    }
                },
                ReferenceSchema: {
                    shape: "Sm"
                }
            }
        },
        S1w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ReferenceId", "TableName", "S3ReferenceDataSourceDescription" ],
                members: {
                    ReferenceId: {},
                    TableName: {},
                    S3ReferenceDataSourceDescription: {
                        type: "structure",
                        required: [ "BucketARN", "FileKey" ],
                        members: {
                            BucketARN: {},
                            FileKey: {},
                            ReferenceRoleARN: {}
                        }
                    },
                    ReferenceSchema: {
                        shape: "Sm"
                    }
                }
            }
        },
        S20: {
            type: "structure",
            required: [ "SubnetIds", "SecurityGroupIds" ],
            members: {
                SubnetIds: {
                    shape: "S21"
                },
                SecurityGroupIds: {
                    shape: "S23"
                }
            }
        },
        S21: {
            type: "list",
            member: {}
        },
        S23: {
            type: "list",
            member: {}
        },
        S26: {
            type: "structure",
            required: [ "VpcConfigurationId", "VpcId", "SubnetIds", "SecurityGroupIds" ],
            members: {
                VpcConfigurationId: {},
                VpcId: {},
                SubnetIds: {
                    shape: "S21"
                },
                SecurityGroupIds: {
                    shape: "S23"
                }
            }
        },
        S2t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "PropertyGroupId", "PropertyMap" ],
                members: {
                    PropertyGroupId: {},
                    PropertyMap: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S32: {
            type: "structure",
            required: [ "BucketARN", "FileKey" ],
            members: {
                BucketARN: {},
                FileKey: {},
                ObjectVersion: {}
            }
        },
        S3f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ArtifactType" ],
                members: {
                    ArtifactType: {},
                    S3ContentLocation: {
                        shape: "S32"
                    },
                    MavenReference: {
                        shape: "S3i"
                    }
                }
            }
        },
        S3i: {
            type: "structure",
            required: [ "GroupId", "ArtifactId", "Version" ],
            members: {
                GroupId: {},
                ArtifactId: {},
                Version: {}
            }
        },
        S3n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S3t: {
            type: "structure",
            required: [ "ApplicationARN", "ApplicationName", "RuntimeEnvironment", "ApplicationStatus", "ApplicationVersionId" ],
            members: {
                ApplicationARN: {},
                ApplicationDescription: {},
                ApplicationName: {},
                RuntimeEnvironment: {},
                ServiceExecutionRole: {},
                ApplicationStatus: {},
                ApplicationVersionId: {
                    type: "long"
                },
                CreateTimestamp: {
                    type: "timestamp"
                },
                LastUpdateTimestamp: {
                    type: "timestamp"
                },
                ApplicationConfigurationDescription: {
                    type: "structure",
                    members: {
                        SqlApplicationConfigurationDescription: {
                            type: "structure",
                            members: {
                                InputDescriptions: {
                                    shape: "S12"
                                },
                                OutputDescriptions: {
                                    shape: "S1k"
                                },
                                ReferenceDataSourceDescriptions: {
                                    shape: "S1w"
                                }
                            }
                        },
                        ApplicationCodeConfigurationDescription: {
                            type: "structure",
                            required: [ "CodeContentType" ],
                            members: {
                                CodeContentType: {},
                                CodeContentDescription: {
                                    type: "structure",
                                    members: {
                                        TextContent: {},
                                        CodeMD5: {},
                                        CodeSize: {
                                            type: "long"
                                        },
                                        S3ApplicationCodeLocationDescription: {
                                            type: "structure",
                                            required: [ "BucketARN", "FileKey" ],
                                            members: {
                                                BucketARN: {},
                                                FileKey: {},
                                                ObjectVersion: {}
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        RunConfigurationDescription: {
                            type: "structure",
                            members: {
                                ApplicationRestoreConfigurationDescription: {
                                    shape: "S44"
                                },
                                FlinkRunConfigurationDescription: {
                                    shape: "S47"
                                }
                            }
                        },
                        FlinkApplicationConfigurationDescription: {
                            type: "structure",
                            members: {
                                CheckpointConfigurationDescription: {
                                    type: "structure",
                                    members: {
                                        ConfigurationType: {},
                                        CheckpointingEnabled: {
                                            type: "boolean"
                                        },
                                        CheckpointInterval: {
                                            type: "long"
                                        },
                                        MinPauseBetweenCheckpoints: {
                                            type: "long"
                                        }
                                    }
                                },
                                MonitoringConfigurationDescription: {
                                    type: "structure",
                                    members: {
                                        ConfigurationType: {},
                                        MetricsLevel: {},
                                        LogLevel: {}
                                    }
                                },
                                ParallelismConfigurationDescription: {
                                    type: "structure",
                                    members: {
                                        ConfigurationType: {},
                                        Parallelism: {
                                            type: "integer"
                                        },
                                        ParallelismPerKPU: {
                                            type: "integer"
                                        },
                                        CurrentParallelism: {
                                            type: "integer"
                                        },
                                        AutoScalingEnabled: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                JobPlanDescription: {}
                            }
                        },
                        EnvironmentPropertyDescriptions: {
                            type: "structure",
                            members: {
                                PropertyGroupDescriptions: {
                                    shape: "S2t"
                                }
                            }
                        },
                        ApplicationSnapshotConfigurationDescription: {
                            type: "structure",
                            required: [ "SnapshotsEnabled" ],
                            members: {
                                SnapshotsEnabled: {
                                    type: "boolean"
                                }
                            }
                        },
                        VpcConfigurationDescriptions: {
                            type: "list",
                            member: {
                                shape: "S26"
                            }
                        },
                        ZeppelinApplicationConfigurationDescription: {
                            type: "structure",
                            required: [ "MonitoringConfigurationDescription" ],
                            members: {
                                MonitoringConfigurationDescription: {
                                    type: "structure",
                                    members: {
                                        LogLevel: {}
                                    }
                                },
                                CatalogConfigurationDescription: {
                                    type: "structure",
                                    required: [ "GlueDataCatalogConfigurationDescription" ],
                                    members: {
                                        GlueDataCatalogConfigurationDescription: {
                                            type: "structure",
                                            required: [ "DatabaseARN" ],
                                            members: {
                                                DatabaseARN: {}
                                            }
                                        }
                                    }
                                },
                                DeployAsApplicationConfigurationDescription: {
                                    type: "structure",
                                    required: [ "S3ContentLocationDescription" ],
                                    members: {
                                        S3ContentLocationDescription: {
                                            type: "structure",
                                            required: [ "BucketARN" ],
                                            members: {
                                                BucketARN: {},
                                                BasePath: {}
                                            }
                                        }
                                    }
                                },
                                CustomArtifactsConfigurationDescription: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ArtifactType: {},
                                            S3ContentLocationDescription: {
                                                shape: "S32"
                                            },
                                            MavenReferenceDescription: {
                                                shape: "S3i"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                CloudWatchLoggingOptionDescriptions: {
                    shape: "S9"
                },
                ApplicationMaintenanceConfigurationDescription: {
                    shape: "S4o"
                },
                ApplicationVersionUpdatedFrom: {
                    type: "long"
                },
                ApplicationVersionRolledBackFrom: {
                    type: "long"
                },
                ConditionalToken: {},
                ApplicationVersionRolledBackTo: {
                    type: "long"
                },
                ApplicationMode: {}
            }
        },
        S44: {
            type: "structure",
            required: [ "ApplicationRestoreType" ],
            members: {
                ApplicationRestoreType: {},
                SnapshotName: {}
            }
        },
        S47: {
            type: "structure",
            members: {
                AllowNonRestoredState: {
                    type: "boolean"
                }
            }
        },
        S4o: {
            type: "structure",
            required: [ "ApplicationMaintenanceWindowStartTime", "ApplicationMaintenanceWindowEndTime" ],
            members: {
                ApplicationMaintenanceWindowStartTime: {},
                ApplicationMaintenanceWindowEndTime: {}
            }
        },
        S5g: {
            type: "structure",
            required: [ "SnapshotName", "SnapshotStatus", "ApplicationVersionId" ],
            members: {
                SnapshotName: {},
                SnapshotStatus: {},
                ApplicationVersionId: {
                    type: "long"
                },
                SnapshotCreationTimestamp: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["mediaconnect"] = {};

AWS.MediaConnect = AWS.Service.defineService("mediaconnect", [ "2018-11-14" ]);

AWS.apiLoader.services["mediaconnect"]["2018-11-14"] = {
    metadata: {
        apiVersion: "2018-11-14",
        endpointPrefix: "mediaconnect",
        signingName: "mediaconnect",
        serviceFullName: "AWS MediaConnect",
        serviceId: "MediaConnect",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "mediaconnect-2018-11-14",
        signatureVersion: "v4"
    },
    operations: {
        AddBridgeOutputs: {
            http: {
                requestUri: "/v1/bridges/{bridgeArn}/outputs",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    },
                    Outputs: {
                        shape: "S3",
                        locationName: "outputs"
                    }
                },
                required: [ "BridgeArn", "Outputs" ]
            },
            output: {
                type: "structure",
                members: {
                    BridgeArn: {
                        locationName: "bridgeArn"
                    },
                    Outputs: {
                        shape: "S9",
                        locationName: "outputs"
                    }
                }
            }
        },
        AddBridgeSources: {
            http: {
                requestUri: "/v1/bridges/{bridgeArn}/sources",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    },
                    Sources: {
                        shape: "Se",
                        locationName: "sources"
                    }
                },
                required: [ "BridgeArn", "Sources" ]
            },
            output: {
                type: "structure",
                members: {
                    BridgeArn: {
                        locationName: "bridgeArn"
                    },
                    Sources: {
                        shape: "Sk",
                        locationName: "sources"
                    }
                }
            }
        },
        AddFlowMediaStreams: {
            http: {
                requestUri: "/v1/flows/{flowArn}/mediaStreams",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    MediaStreams: {
                        shape: "Sp",
                        locationName: "mediaStreams"
                    }
                },
                required: [ "FlowArn", "MediaStreams" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    MediaStreams: {
                        shape: "Sz",
                        locationName: "mediaStreams"
                    }
                }
            }
        },
        AddFlowOutputs: {
            http: {
                requestUri: "/v1/flows/{flowArn}/outputs",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    Outputs: {
                        shape: "S14",
                        locationName: "outputs"
                    }
                },
                required: [ "FlowArn", "Outputs" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Outputs: {
                        shape: "S1k",
                        locationName: "outputs"
                    }
                }
            }
        },
        AddFlowSources: {
            http: {
                requestUri: "/v1/flows/{flowArn}/source",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    Sources: {
                        shape: "S1v",
                        locationName: "sources"
                    }
                },
                required: [ "FlowArn", "Sources" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Sources: {
                        shape: "S23",
                        locationName: "sources"
                    }
                }
            }
        },
        AddFlowVpcInterfaces: {
            http: {
                requestUri: "/v1/flows/{flowArn}/vpcInterfaces",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    VpcInterfaces: {
                        shape: "S2b",
                        locationName: "vpcInterfaces"
                    }
                },
                required: [ "FlowArn", "VpcInterfaces" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    VpcInterfaces: {
                        shape: "S2f",
                        locationName: "vpcInterfaces"
                    }
                }
            }
        },
        CreateBridge: {
            http: {
                requestUri: "/v1/bridges",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    EgressGatewayBridge: {
                        locationName: "egressGatewayBridge",
                        type: "structure",
                        members: {
                            MaxBitrate: {
                                locationName: "maxBitrate",
                                type: "integer"
                            }
                        },
                        required: [ "MaxBitrate" ]
                    },
                    IngressGatewayBridge: {
                        locationName: "ingressGatewayBridge",
                        type: "structure",
                        members: {
                            MaxBitrate: {
                                locationName: "maxBitrate",
                                type: "integer"
                            },
                            MaxOutputs: {
                                locationName: "maxOutputs",
                                type: "integer"
                            }
                        },
                        required: [ "MaxOutputs", "MaxBitrate" ]
                    },
                    Name: {
                        locationName: "name"
                    },
                    Outputs: {
                        shape: "S3",
                        locationName: "outputs"
                    },
                    PlacementArn: {
                        locationName: "placementArn"
                    },
                    SourceFailoverConfig: {
                        shape: "S2k",
                        locationName: "sourceFailoverConfig"
                    },
                    Sources: {
                        shape: "Se",
                        locationName: "sources"
                    }
                },
                required: [ "Sources", "PlacementArn", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Bridge: {
                        shape: "S2p",
                        locationName: "bridge"
                    }
                }
            }
        },
        CreateFlow: {
            http: {
                requestUri: "/v1/flows",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AvailabilityZone: {
                        locationName: "availabilityZone"
                    },
                    Entitlements: {
                        shape: "S2w",
                        locationName: "entitlements"
                    },
                    MediaStreams: {
                        shape: "Sp",
                        locationName: "mediaStreams"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Outputs: {
                        shape: "S14",
                        locationName: "outputs"
                    },
                    Source: {
                        shape: "S1w",
                        locationName: "source"
                    },
                    SourceFailoverConfig: {
                        shape: "S2k",
                        locationName: "sourceFailoverConfig"
                    },
                    Sources: {
                        shape: "S1v",
                        locationName: "sources"
                    },
                    VpcInterfaces: {
                        shape: "S2b",
                        locationName: "vpcInterfaces"
                    },
                    Maintenance: {
                        locationName: "maintenance",
                        type: "structure",
                        members: {
                            MaintenanceDay: {
                                locationName: "maintenanceDay"
                            },
                            MaintenanceStartHour: {
                                locationName: "maintenanceStartHour"
                            }
                        },
                        required: [ "MaintenanceDay", "MaintenanceStartHour" ]
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Flow: {
                        shape: "S32",
                        locationName: "flow"
                    }
                }
            }
        },
        CreateGateway: {
            http: {
                requestUri: "/v1/gateways",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    EgressCidrBlocks: {
                        shape: "S16",
                        locationName: "egressCidrBlocks"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Networks: {
                        shape: "S38",
                        locationName: "networks"
                    }
                },
                required: [ "Networks", "EgressCidrBlocks", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Gateway: {
                        shape: "S3b",
                        locationName: "gateway"
                    }
                }
            }
        },
        DeleteBridge: {
            http: {
                method: "DELETE",
                requestUri: "/v1/bridges/{bridgeArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    }
                },
                required: [ "BridgeArn" ]
            },
            output: {
                type: "structure",
                members: {
                    BridgeArn: {
                        locationName: "bridgeArn"
                    }
                }
            }
        },
        DeleteFlow: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        DeleteGateway: {
            http: {
                method: "DELETE",
                requestUri: "/v1/gateways/{gatewayArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GatewayArn: {
                        location: "uri",
                        locationName: "gatewayArn"
                    }
                },
                required: [ "GatewayArn" ]
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {
                        locationName: "gatewayArn"
                    }
                }
            }
        },
        DeregisterGatewayInstance: {
            http: {
                method: "DELETE",
                requestUri: "/v1/gateway-instances/{gatewayInstanceArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Force: {
                        location: "querystring",
                        locationName: "force",
                        type: "boolean"
                    },
                    GatewayInstanceArn: {
                        location: "uri",
                        locationName: "gatewayInstanceArn"
                    }
                },
                required: [ "GatewayInstanceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    GatewayInstanceArn: {
                        locationName: "gatewayInstanceArn"
                    },
                    InstanceState: {
                        locationName: "instanceState"
                    }
                }
            }
        },
        DescribeBridge: {
            http: {
                method: "GET",
                requestUri: "/v1/bridges/{bridgeArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    }
                },
                required: [ "BridgeArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Bridge: {
                        shape: "S2p",
                        locationName: "bridge"
                    }
                }
            }
        },
        DescribeFlow: {
            http: {
                method: "GET",
                requestUri: "/v1/flows/{flowArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Flow: {
                        shape: "S32",
                        locationName: "flow"
                    },
                    Messages: {
                        locationName: "messages",
                        type: "structure",
                        members: {
                            Errors: {
                                shape: "S16",
                                locationName: "errors"
                            }
                        },
                        required: [ "Errors" ]
                    }
                }
            }
        },
        DescribeGateway: {
            http: {
                method: "GET",
                requestUri: "/v1/gateways/{gatewayArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GatewayArn: {
                        location: "uri",
                        locationName: "gatewayArn"
                    }
                },
                required: [ "GatewayArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Gateway: {
                        shape: "S3b",
                        locationName: "gateway"
                    }
                }
            }
        },
        DescribeGatewayInstance: {
            http: {
                method: "GET",
                requestUri: "/v1/gateway-instances/{gatewayInstanceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GatewayInstanceArn: {
                        location: "uri",
                        locationName: "gatewayInstanceArn"
                    }
                },
                required: [ "GatewayInstanceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    GatewayInstance: {
                        locationName: "gatewayInstance",
                        type: "structure",
                        members: {
                            BridgePlacement: {
                                locationName: "bridgePlacement"
                            },
                            ConnectionStatus: {
                                locationName: "connectionStatus"
                            },
                            GatewayArn: {
                                locationName: "gatewayArn"
                            },
                            GatewayInstanceArn: {
                                locationName: "gatewayInstanceArn"
                            },
                            InstanceId: {
                                locationName: "instanceId"
                            },
                            InstanceMessages: {
                                shape: "S2q",
                                locationName: "instanceMessages"
                            },
                            InstanceState: {
                                locationName: "instanceState"
                            },
                            RunningBridgeCount: {
                                locationName: "runningBridgeCount",
                                type: "integer"
                            }
                        },
                        required: [ "GatewayArn", "InstanceState", "GatewayInstanceArn", "InstanceId", "RunningBridgeCount", "BridgePlacement", "ConnectionStatus" ]
                    }
                }
            }
        },
        DescribeOffering: {
            http: {
                method: "GET",
                requestUri: "/v1/offerings/{offeringArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    OfferingArn: {
                        location: "uri",
                        locationName: "offeringArn"
                    }
                },
                required: [ "OfferingArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Offering: {
                        shape: "S41",
                        locationName: "offering"
                    }
                }
            }
        },
        DescribeReservation: {
            http: {
                method: "GET",
                requestUri: "/v1/reservations/{reservationArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReservationArn: {
                        location: "uri",
                        locationName: "reservationArn"
                    }
                },
                required: [ "ReservationArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Reservation: {
                        shape: "S48",
                        locationName: "reservation"
                    }
                }
            }
        },
        GrantFlowEntitlements: {
            http: {
                requestUri: "/v1/flows/{flowArn}/entitlements",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Entitlements: {
                        shape: "S2w",
                        locationName: "entitlements"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn", "Entitlements" ]
            },
            output: {
                type: "structure",
                members: {
                    Entitlements: {
                        shape: "S33",
                        locationName: "entitlements"
                    },
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        ListBridges: {
            http: {
                method: "GET",
                requestUri: "/v1/bridges",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FilterArn: {
                        location: "querystring",
                        locationName: "filterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Bridges: {
                        locationName: "bridges",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BridgeArn: {
                                    locationName: "bridgeArn"
                                },
                                BridgeState: {
                                    locationName: "bridgeState"
                                },
                                BridgeType: {
                                    locationName: "bridgeType"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                PlacementArn: {
                                    locationName: "placementArn"
                                }
                            },
                            required: [ "BridgeArn", "BridgeState", "PlacementArn", "BridgeType", "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListEntitlements: {
            http: {
                method: "GET",
                requestUri: "/v1/entitlements",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entitlements: {
                        locationName: "entitlements",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DataTransferSubscriberFeePercent: {
                                    locationName: "dataTransferSubscriberFeePercent",
                                    type: "integer"
                                },
                                EntitlementArn: {
                                    locationName: "entitlementArn"
                                },
                                EntitlementName: {
                                    locationName: "entitlementName"
                                }
                            },
                            required: [ "EntitlementArn", "EntitlementName" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFlows: {
            http: {
                method: "GET",
                requestUri: "/v1/flows",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Flows: {
                        locationName: "flows",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                FlowArn: {
                                    locationName: "flowArn"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                SourceType: {
                                    locationName: "sourceType"
                                },
                                Status: {
                                    locationName: "status"
                                },
                                Maintenance: {
                                    shape: "S36",
                                    locationName: "maintenance"
                                }
                            },
                            required: [ "Status", "Description", "SourceType", "AvailabilityZone", "FlowArn", "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListGatewayInstances: {
            http: {
                method: "GET",
                requestUri: "/v1/gateway-instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FilterArn: {
                        location: "querystring",
                        locationName: "filterArn"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        locationName: "instances",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GatewayArn: {
                                    locationName: "gatewayArn"
                                },
                                GatewayInstanceArn: {
                                    locationName: "gatewayInstanceArn"
                                },
                                InstanceId: {
                                    locationName: "instanceId"
                                },
                                InstanceState: {
                                    locationName: "instanceState"
                                }
                            },
                            required: [ "GatewayArn", "GatewayInstanceArn", "InstanceId" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListGateways: {
            http: {
                method: "GET",
                requestUri: "/v1/gateways",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateways: {
                        locationName: "gateways",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GatewayArn: {
                                    locationName: "gatewayArn"
                                },
                                GatewayState: {
                                    locationName: "gatewayState"
                                },
                                Name: {
                                    locationName: "name"
                                }
                            },
                            required: [ "GatewayArn", "GatewayState", "Name" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListOfferings: {
            http: {
                method: "GET",
                requestUri: "/v1/offerings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Offerings: {
                        locationName: "offerings",
                        type: "list",
                        member: {
                            shape: "S41"
                        }
                    }
                }
            }
        },
        ListReservations: {
            http: {
                method: "GET",
                requestUri: "/v1/reservations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Reservations: {
                        locationName: "reservations",
                        type: "list",
                        member: {
                            shape: "S48"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S56",
                        locationName: "tags"
                    }
                }
            }
        },
        PurchaseOffering: {
            http: {
                requestUri: "/v1/offerings/{offeringArn}",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    OfferingArn: {
                        location: "uri",
                        locationName: "offeringArn"
                    },
                    ReservationName: {
                        locationName: "reservationName"
                    },
                    Start: {
                        locationName: "start"
                    }
                },
                required: [ "OfferingArn", "Start", "ReservationName" ]
            },
            output: {
                type: "structure",
                members: {
                    Reservation: {
                        shape: "S48",
                        locationName: "reservation"
                    }
                }
            }
        },
        RemoveBridgeOutput: {
            http: {
                method: "DELETE",
                requestUri: "/v1/bridges/{bridgeArn}/outputs/{outputName}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    },
                    OutputName: {
                        location: "uri",
                        locationName: "outputName"
                    }
                },
                required: [ "OutputName", "BridgeArn" ]
            },
            output: {
                type: "structure",
                members: {
                    BridgeArn: {
                        locationName: "bridgeArn"
                    },
                    OutputName: {
                        locationName: "outputName"
                    }
                }
            }
        },
        RemoveBridgeSource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/bridges/{bridgeArn}/sources/{sourceName}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    },
                    SourceName: {
                        location: "uri",
                        locationName: "sourceName"
                    }
                },
                required: [ "BridgeArn", "SourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    BridgeArn: {
                        locationName: "bridgeArn"
                    },
                    SourceName: {
                        locationName: "sourceName"
                    }
                }
            }
        },
        RemoveFlowMediaStream: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/mediaStreams/{mediaStreamName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    MediaStreamName: {
                        location: "uri",
                        locationName: "mediaStreamName"
                    }
                },
                required: [ "FlowArn", "MediaStreamName" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    MediaStreamName: {
                        locationName: "mediaStreamName"
                    }
                }
            }
        },
        RemoveFlowOutput: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/outputs/{outputArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    OutputArn: {
                        location: "uri",
                        locationName: "outputArn"
                    }
                },
                required: [ "FlowArn", "OutputArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    OutputArn: {
                        locationName: "outputArn"
                    }
                }
            }
        },
        RemoveFlowSource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/source/{sourceArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    SourceArn: {
                        location: "uri",
                        locationName: "sourceArn"
                    }
                },
                required: [ "FlowArn", "SourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    SourceArn: {
                        locationName: "sourceArn"
                    }
                }
            }
        },
        RemoveFlowVpcInterface: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/vpcInterfaces/{vpcInterfaceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    VpcInterfaceName: {
                        location: "uri",
                        locationName: "vpcInterfaceName"
                    }
                },
                required: [ "FlowArn", "VpcInterfaceName" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    NonDeletedNetworkInterfaceIds: {
                        shape: "S16",
                        locationName: "nonDeletedNetworkInterfaceIds"
                    },
                    VpcInterfaceName: {
                        locationName: "vpcInterfaceName"
                    }
                }
            }
        },
        RevokeFlowEntitlement: {
            http: {
                method: "DELETE",
                requestUri: "/v1/flows/{flowArn}/entitlements/{entitlementArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    EntitlementArn: {
                        location: "uri",
                        locationName: "entitlementArn"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn", "EntitlementArn" ]
            },
            output: {
                type: "structure",
                members: {
                    EntitlementArn: {
                        locationName: "entitlementArn"
                    },
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        StartFlow: {
            http: {
                requestUri: "/v1/flows/start/{flowArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        StopFlow: {
            http: {
                requestUri: "/v1/flows/stop/{flowArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S56",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn", "Tags" ]
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        shape: "S16",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateBridge: {
            http: {
                method: "PUT",
                requestUri: "/v1/bridges/{bridgeArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    },
                    EgressGatewayBridge: {
                        locationName: "egressGatewayBridge",
                        type: "structure",
                        members: {
                            MaxBitrate: {
                                locationName: "maxBitrate",
                                type: "integer"
                            }
                        }
                    },
                    IngressGatewayBridge: {
                        locationName: "ingressGatewayBridge",
                        type: "structure",
                        members: {
                            MaxBitrate: {
                                locationName: "maxBitrate",
                                type: "integer"
                            },
                            MaxOutputs: {
                                locationName: "maxOutputs",
                                type: "integer"
                            }
                        }
                    },
                    SourceFailoverConfig: {
                        shape: "S5w",
                        locationName: "sourceFailoverConfig"
                    }
                },
                required: [ "BridgeArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Bridge: {
                        shape: "S2p",
                        locationName: "bridge"
                    }
                }
            }
        },
        UpdateBridgeOutput: {
            http: {
                method: "PUT",
                requestUri: "/v1/bridges/{bridgeArn}/outputs/{outputName}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    },
                    NetworkOutput: {
                        locationName: "networkOutput",
                        type: "structure",
                        members: {
                            IpAddress: {
                                locationName: "ipAddress"
                            },
                            NetworkName: {
                                locationName: "networkName"
                            },
                            Port: {
                                locationName: "port",
                                type: "integer"
                            },
                            Protocol: {
                                locationName: "protocol"
                            },
                            Ttl: {
                                locationName: "ttl",
                                type: "integer"
                            }
                        }
                    },
                    OutputName: {
                        location: "uri",
                        locationName: "outputName"
                    }
                },
                required: [ "OutputName", "BridgeArn" ]
            },
            output: {
                type: "structure",
                members: {
                    BridgeArn: {
                        locationName: "bridgeArn"
                    },
                    Output: {
                        shape: "Sa",
                        locationName: "output"
                    }
                }
            }
        },
        UpdateBridgeSource: {
            http: {
                method: "PUT",
                requestUri: "/v1/bridges/{bridgeArn}/sources/{sourceName}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    },
                    FlowSource: {
                        locationName: "flowSource",
                        type: "structure",
                        members: {
                            FlowArn: {
                                locationName: "flowArn"
                            },
                            FlowVpcInterfaceAttachment: {
                                shape: "Sh",
                                locationName: "flowVpcInterfaceAttachment"
                            }
                        }
                    },
                    NetworkSource: {
                        locationName: "networkSource",
                        type: "structure",
                        members: {
                            MulticastIp: {
                                locationName: "multicastIp"
                            },
                            NetworkName: {
                                locationName: "networkName"
                            },
                            Port: {
                                locationName: "port",
                                type: "integer"
                            },
                            Protocol: {
                                locationName: "protocol"
                            }
                        }
                    },
                    SourceName: {
                        location: "uri",
                        locationName: "sourceName"
                    }
                },
                required: [ "BridgeArn", "SourceName" ]
            },
            output: {
                type: "structure",
                members: {
                    BridgeArn: {
                        locationName: "bridgeArn"
                    },
                    Source: {
                        shape: "Sl",
                        locationName: "source"
                    }
                }
            }
        },
        UpdateBridgeState: {
            http: {
                method: "PUT",
                requestUri: "/v1/bridges/{bridgeArn}/state",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    BridgeArn: {
                        location: "uri",
                        locationName: "bridgeArn"
                    },
                    DesiredState: {
                        locationName: "desiredState"
                    }
                },
                required: [ "BridgeArn", "DesiredState" ]
            },
            output: {
                type: "structure",
                members: {
                    BridgeArn: {
                        locationName: "bridgeArn"
                    },
                    DesiredState: {
                        locationName: "desiredState"
                    }
                }
            }
        },
        UpdateFlow: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    SourceFailoverConfig: {
                        shape: "S5w",
                        locationName: "sourceFailoverConfig"
                    },
                    Maintenance: {
                        locationName: "maintenance",
                        type: "structure",
                        members: {
                            MaintenanceDay: {
                                locationName: "maintenanceDay"
                            },
                            MaintenanceScheduledDate: {
                                locationName: "maintenanceScheduledDate"
                            },
                            MaintenanceStartHour: {
                                locationName: "maintenanceStartHour"
                            }
                        }
                    }
                },
                required: [ "FlowArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Flow: {
                        shape: "S32",
                        locationName: "flow"
                    }
                }
            }
        },
        UpdateFlowEntitlement: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}/entitlements/{entitlementArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Encryption: {
                        shape: "S6c",
                        locationName: "encryption"
                    },
                    EntitlementArn: {
                        location: "uri",
                        locationName: "entitlementArn"
                    },
                    EntitlementStatus: {
                        locationName: "entitlementStatus"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    Subscribers: {
                        shape: "S16",
                        locationName: "subscribers"
                    }
                },
                required: [ "FlowArn", "EntitlementArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Entitlement: {
                        shape: "S34",
                        locationName: "entitlement"
                    },
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        UpdateFlowMediaStream: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}/mediaStreams/{mediaStreamName}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "Sr",
                        locationName: "attributes"
                    },
                    ClockRate: {
                        locationName: "clockRate",
                        type: "integer"
                    },
                    Description: {
                        locationName: "description"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    MediaStreamName: {
                        location: "uri",
                        locationName: "mediaStreamName"
                    },
                    MediaStreamType: {
                        locationName: "mediaStreamType"
                    },
                    VideoFormat: {
                        locationName: "videoFormat"
                    }
                },
                required: [ "FlowArn", "MediaStreamName" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    MediaStream: {
                        shape: "S10",
                        locationName: "mediaStream"
                    }
                }
            }
        },
        UpdateFlowOutput: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}/outputs/{outputArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    CidrAllowList: {
                        shape: "S16",
                        locationName: "cidrAllowList"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Destination: {
                        locationName: "destination"
                    },
                    Encryption: {
                        shape: "S6c",
                        locationName: "encryption"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    MaxLatency: {
                        locationName: "maxLatency",
                        type: "integer"
                    },
                    MediaStreamOutputConfigurations: {
                        shape: "S1a",
                        locationName: "mediaStreamOutputConfigurations"
                    },
                    MinLatency: {
                        locationName: "minLatency",
                        type: "integer"
                    },
                    OutputArn: {
                        location: "uri",
                        locationName: "outputArn"
                    },
                    Port: {
                        locationName: "port",
                        type: "integer"
                    },
                    Protocol: {
                        locationName: "protocol"
                    },
                    RemoteId: {
                        locationName: "remoteId"
                    },
                    SenderControlPort: {
                        locationName: "senderControlPort",
                        type: "integer"
                    },
                    SenderIpAddress: {
                        locationName: "senderIpAddress"
                    },
                    SmoothingLatency: {
                        locationName: "smoothingLatency",
                        type: "integer"
                    },
                    StreamId: {
                        locationName: "streamId"
                    },
                    VpcInterfaceAttachment: {
                        shape: "Sh",
                        locationName: "vpcInterfaceAttachment"
                    }
                },
                required: [ "FlowArn", "OutputArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Output: {
                        shape: "S1l",
                        locationName: "output"
                    }
                }
            }
        },
        UpdateFlowSource: {
            http: {
                method: "PUT",
                requestUri: "/v1/flows/{flowArn}/source/{sourceArn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Decryption: {
                        shape: "S6c",
                        locationName: "decryption"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EntitlementArn: {
                        locationName: "entitlementArn"
                    },
                    FlowArn: {
                        location: "uri",
                        locationName: "flowArn"
                    },
                    IngestPort: {
                        locationName: "ingestPort",
                        type: "integer"
                    },
                    MaxBitrate: {
                        locationName: "maxBitrate",
                        type: "integer"
                    },
                    MaxLatency: {
                        locationName: "maxLatency",
                        type: "integer"
                    },
                    MaxSyncBuffer: {
                        locationName: "maxSyncBuffer",
                        type: "integer"
                    },
                    MediaStreamSourceConfigurations: {
                        shape: "S1x",
                        locationName: "mediaStreamSourceConfigurations"
                    },
                    MinLatency: {
                        locationName: "minLatency",
                        type: "integer"
                    },
                    Protocol: {
                        locationName: "protocol"
                    },
                    SenderControlPort: {
                        locationName: "senderControlPort",
                        type: "integer"
                    },
                    SenderIpAddress: {
                        locationName: "senderIpAddress"
                    },
                    SourceArn: {
                        location: "uri",
                        locationName: "sourceArn"
                    },
                    SourceListenerAddress: {
                        locationName: "sourceListenerAddress"
                    },
                    SourceListenerPort: {
                        locationName: "sourceListenerPort",
                        type: "integer"
                    },
                    StreamId: {
                        locationName: "streamId"
                    },
                    VpcInterfaceName: {
                        locationName: "vpcInterfaceName"
                    },
                    WhitelistCidr: {
                        locationName: "whitelistCidr"
                    },
                    GatewayBridgeSource: {
                        locationName: "gatewayBridgeSource",
                        type: "structure",
                        members: {
                            BridgeArn: {
                                locationName: "bridgeArn"
                            },
                            VpcInterfaceAttachment: {
                                shape: "Sh",
                                locationName: "vpcInterfaceAttachment"
                            }
                        }
                    }
                },
                required: [ "FlowArn", "SourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    },
                    Source: {
                        shape: "S24",
                        locationName: "source"
                    }
                }
            }
        },
        UpdateGatewayInstance: {
            http: {
                method: "PUT",
                requestUri: "/v1/gateway-instances/{gatewayInstanceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BridgePlacement: {
                        locationName: "bridgePlacement"
                    },
                    GatewayInstanceArn: {
                        location: "uri",
                        locationName: "gatewayInstanceArn"
                    }
                },
                required: [ "GatewayInstanceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    BridgePlacement: {
                        locationName: "bridgePlacement"
                    },
                    GatewayInstanceArn: {
                        locationName: "gatewayInstanceArn"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    NetworkOutput: {
                        locationName: "networkOutput",
                        type: "structure",
                        members: {
                            IpAddress: {
                                locationName: "ipAddress"
                            },
                            Name: {
                                locationName: "name"
                            },
                            NetworkName: {
                                locationName: "networkName"
                            },
                            Port: {
                                locationName: "port",
                                type: "integer"
                            },
                            Protocol: {
                                locationName: "protocol"
                            },
                            Ttl: {
                                locationName: "ttl",
                                type: "integer"
                            }
                        },
                        required: [ "NetworkName", "Port", "IpAddress", "Protocol", "Ttl", "Name" ]
                    }
                }
            }
        },
        S9: {
            type: "list",
            member: {
                shape: "Sa"
            }
        },
        Sa: {
            type: "structure",
            members: {
                FlowOutput: {
                    locationName: "flowOutput",
                    type: "structure",
                    members: {
                        FlowArn: {
                            locationName: "flowArn"
                        },
                        FlowSourceArn: {
                            locationName: "flowSourceArn"
                        },
                        Name: {
                            locationName: "name"
                        }
                    },
                    required: [ "FlowSourceArn", "FlowArn", "Name" ]
                },
                NetworkOutput: {
                    locationName: "networkOutput",
                    type: "structure",
                    members: {
                        IpAddress: {
                            locationName: "ipAddress"
                        },
                        Name: {
                            locationName: "name"
                        },
                        NetworkName: {
                            locationName: "networkName"
                        },
                        Port: {
                            locationName: "port",
                            type: "integer"
                        },
                        Protocol: {
                            locationName: "protocol"
                        },
                        Ttl: {
                            locationName: "ttl",
                            type: "integer"
                        }
                    },
                    required: [ "NetworkName", "Port", "IpAddress", "Protocol", "Ttl", "Name" ]
                }
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FlowSource: {
                        locationName: "flowSource",
                        type: "structure",
                        members: {
                            FlowArn: {
                                locationName: "flowArn"
                            },
                            FlowVpcInterfaceAttachment: {
                                shape: "Sh",
                                locationName: "flowVpcInterfaceAttachment"
                            },
                            Name: {
                                locationName: "name"
                            }
                        },
                        required: [ "FlowArn", "Name" ]
                    },
                    NetworkSource: {
                        locationName: "networkSource",
                        type: "structure",
                        members: {
                            MulticastIp: {
                                locationName: "multicastIp"
                            },
                            Name: {
                                locationName: "name"
                            },
                            NetworkName: {
                                locationName: "networkName"
                            },
                            Port: {
                                locationName: "port",
                                type: "integer"
                            },
                            Protocol: {
                                locationName: "protocol"
                            }
                        },
                        required: [ "NetworkName", "MulticastIp", "Port", "Protocol", "Name" ]
                    }
                }
            }
        },
        Sh: {
            type: "structure",
            members: {
                VpcInterfaceName: {
                    locationName: "vpcInterfaceName"
                }
            }
        },
        Sk: {
            type: "list",
            member: {
                shape: "Sl"
            }
        },
        Sl: {
            type: "structure",
            members: {
                FlowSource: {
                    locationName: "flowSource",
                    type: "structure",
                    members: {
                        FlowArn: {
                            locationName: "flowArn"
                        },
                        FlowVpcInterfaceAttachment: {
                            shape: "Sh",
                            locationName: "flowVpcInterfaceAttachment"
                        },
                        Name: {
                            locationName: "name"
                        },
                        OutputArn: {
                            locationName: "outputArn"
                        }
                    },
                    required: [ "FlowArn", "Name" ]
                },
                NetworkSource: {
                    locationName: "networkSource",
                    type: "structure",
                    members: {
                        MulticastIp: {
                            locationName: "multicastIp"
                        },
                        Name: {
                            locationName: "name"
                        },
                        NetworkName: {
                            locationName: "networkName"
                        },
                        Port: {
                            locationName: "port",
                            type: "integer"
                        },
                        Protocol: {
                            locationName: "protocol"
                        }
                    },
                    required: [ "NetworkName", "MulticastIp", "Port", "Protocol", "Name" ]
                }
            }
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "Sr",
                        locationName: "attributes"
                    },
                    ClockRate: {
                        locationName: "clockRate",
                        type: "integer"
                    },
                    Description: {
                        locationName: "description"
                    },
                    MediaStreamId: {
                        locationName: "mediaStreamId",
                        type: "integer"
                    },
                    MediaStreamName: {
                        locationName: "mediaStreamName"
                    },
                    MediaStreamType: {
                        locationName: "mediaStreamType"
                    },
                    VideoFormat: {
                        locationName: "videoFormat"
                    }
                },
                required: [ "MediaStreamType", "MediaStreamId", "MediaStreamName" ]
            }
        },
        Sr: {
            type: "structure",
            members: {
                Fmtp: {
                    locationName: "fmtp",
                    type: "structure",
                    members: {
                        ChannelOrder: {
                            locationName: "channelOrder"
                        },
                        Colorimetry: {
                            locationName: "colorimetry"
                        },
                        ExactFramerate: {
                            locationName: "exactFramerate"
                        },
                        Par: {
                            locationName: "par"
                        },
                        Range: {
                            locationName: "range"
                        },
                        ScanMode: {
                            locationName: "scanMode"
                        },
                        Tcs: {
                            locationName: "tcs"
                        }
                    }
                },
                Lang: {
                    locationName: "lang"
                }
            }
        },
        Sz: {
            type: "list",
            member: {
                shape: "S10"
            }
        },
        S10: {
            type: "structure",
            members: {
                Attributes: {
                    locationName: "attributes",
                    type: "structure",
                    members: {
                        Fmtp: {
                            locationName: "fmtp",
                            type: "structure",
                            members: {
                                ChannelOrder: {
                                    locationName: "channelOrder"
                                },
                                Colorimetry: {
                                    locationName: "colorimetry"
                                },
                                ExactFramerate: {
                                    locationName: "exactFramerate"
                                },
                                Par: {
                                    locationName: "par"
                                },
                                Range: {
                                    locationName: "range"
                                },
                                ScanMode: {
                                    locationName: "scanMode"
                                },
                                Tcs: {
                                    locationName: "tcs"
                                }
                            }
                        },
                        Lang: {
                            locationName: "lang"
                        }
                    },
                    required: [ "Fmtp" ]
                },
                ClockRate: {
                    locationName: "clockRate",
                    type: "integer"
                },
                Description: {
                    locationName: "description"
                },
                Fmt: {
                    locationName: "fmt",
                    type: "integer"
                },
                MediaStreamId: {
                    locationName: "mediaStreamId",
                    type: "integer"
                },
                MediaStreamName: {
                    locationName: "mediaStreamName"
                },
                MediaStreamType: {
                    locationName: "mediaStreamType"
                },
                VideoFormat: {
                    locationName: "videoFormat"
                }
            },
            required: [ "MediaStreamType", "MediaStreamId", "MediaStreamName", "Fmt" ]
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CidrAllowList: {
                        shape: "S16",
                        locationName: "cidrAllowList"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Destination: {
                        locationName: "destination"
                    },
                    Encryption: {
                        shape: "S17",
                        locationName: "encryption"
                    },
                    MaxLatency: {
                        locationName: "maxLatency",
                        type: "integer"
                    },
                    MediaStreamOutputConfigurations: {
                        shape: "S1a",
                        locationName: "mediaStreamOutputConfigurations"
                    },
                    MinLatency: {
                        locationName: "minLatency",
                        type: "integer"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Port: {
                        locationName: "port",
                        type: "integer"
                    },
                    Protocol: {
                        locationName: "protocol"
                    },
                    RemoteId: {
                        locationName: "remoteId"
                    },
                    SenderControlPort: {
                        locationName: "senderControlPort",
                        type: "integer"
                    },
                    SmoothingLatency: {
                        locationName: "smoothingLatency",
                        type: "integer"
                    },
                    StreamId: {
                        locationName: "streamId"
                    },
                    VpcInterfaceAttachment: {
                        shape: "Sh",
                        locationName: "vpcInterfaceAttachment"
                    }
                },
                required: [ "Protocol" ]
            }
        },
        S16: {
            type: "list",
            member: {}
        },
        S17: {
            type: "structure",
            members: {
                Algorithm: {
                    locationName: "algorithm"
                },
                ConstantInitializationVector: {
                    locationName: "constantInitializationVector"
                },
                DeviceId: {
                    locationName: "deviceId"
                },
                KeyType: {
                    locationName: "keyType"
                },
                Region: {
                    locationName: "region"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                SecretArn: {
                    locationName: "secretArn"
                },
                Url: {
                    locationName: "url"
                }
            },
            required: [ "RoleArn" ]
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DestinationConfigurations: {
                        locationName: "destinationConfigurations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DestinationIp: {
                                    locationName: "destinationIp"
                                },
                                DestinationPort: {
                                    locationName: "destinationPort",
                                    type: "integer"
                                },
                                Interface: {
                                    shape: "S1e",
                                    locationName: "interface"
                                }
                            },
                            required: [ "DestinationIp", "DestinationPort", "Interface" ]
                        }
                    },
                    EncodingName: {
                        locationName: "encodingName"
                    },
                    EncodingParameters: {
                        locationName: "encodingParameters",
                        type: "structure",
                        members: {
                            CompressionFactor: {
                                locationName: "compressionFactor",
                                type: "double"
                            },
                            EncoderProfile: {
                                locationName: "encoderProfile"
                            }
                        },
                        required: [ "EncoderProfile", "CompressionFactor" ]
                    },
                    MediaStreamName: {
                        locationName: "mediaStreamName"
                    }
                },
                required: [ "MediaStreamName", "EncodingName" ]
            }
        },
        S1e: {
            type: "structure",
            members: {
                Name: {
                    locationName: "name"
                }
            },
            required: [ "Name" ]
        },
        S1k: {
            type: "list",
            member: {
                shape: "S1l"
            }
        },
        S1l: {
            type: "structure",
            members: {
                DataTransferSubscriberFeePercent: {
                    locationName: "dataTransferSubscriberFeePercent",
                    type: "integer"
                },
                Description: {
                    locationName: "description"
                },
                Destination: {
                    locationName: "destination"
                },
                Encryption: {
                    shape: "S17",
                    locationName: "encryption"
                },
                EntitlementArn: {
                    locationName: "entitlementArn"
                },
                ListenerAddress: {
                    locationName: "listenerAddress"
                },
                MediaLiveInputArn: {
                    locationName: "mediaLiveInputArn"
                },
                MediaStreamOutputConfigurations: {
                    locationName: "mediaStreamOutputConfigurations",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            DestinationConfigurations: {
                                locationName: "destinationConfigurations",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        DestinationIp: {
                                            locationName: "destinationIp"
                                        },
                                        DestinationPort: {
                                            locationName: "destinationPort",
                                            type: "integer"
                                        },
                                        Interface: {
                                            shape: "S1q",
                                            locationName: "interface"
                                        },
                                        OutboundIp: {
                                            locationName: "outboundIp"
                                        }
                                    },
                                    required: [ "DestinationIp", "DestinationPort", "Interface", "OutboundIp" ]
                                }
                            },
                            EncodingName: {
                                locationName: "encodingName"
                            },
                            EncodingParameters: {
                                locationName: "encodingParameters",
                                type: "structure",
                                members: {
                                    CompressionFactor: {
                                        locationName: "compressionFactor",
                                        type: "double"
                                    },
                                    EncoderProfile: {
                                        locationName: "encoderProfile"
                                    }
                                },
                                required: [ "EncoderProfile", "CompressionFactor" ]
                            },
                            MediaStreamName: {
                                locationName: "mediaStreamName"
                            }
                        },
                        required: [ "MediaStreamName", "EncodingName" ]
                    }
                },
                Name: {
                    locationName: "name"
                },
                OutputArn: {
                    locationName: "outputArn"
                },
                Port: {
                    locationName: "port",
                    type: "integer"
                },
                Transport: {
                    shape: "S1s",
                    locationName: "transport"
                },
                VpcInterfaceAttachment: {
                    shape: "Sh",
                    locationName: "vpcInterfaceAttachment"
                },
                BridgeArn: {
                    locationName: "bridgeArn"
                },
                BridgePorts: {
                    locationName: "bridgePorts",
                    type: "list",
                    member: {
                        type: "integer"
                    }
                }
            },
            required: [ "OutputArn", "Name" ]
        },
        S1q: {
            type: "structure",
            members: {
                Name: {
                    locationName: "name"
                }
            },
            required: [ "Name" ]
        },
        S1s: {
            type: "structure",
            members: {
                CidrAllowList: {
                    shape: "S16",
                    locationName: "cidrAllowList"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                },
                MaxLatency: {
                    locationName: "maxLatency",
                    type: "integer"
                },
                MaxSyncBuffer: {
                    locationName: "maxSyncBuffer",
                    type: "integer"
                },
                MinLatency: {
                    locationName: "minLatency",
                    type: "integer"
                },
                Protocol: {
                    locationName: "protocol"
                },
                RemoteId: {
                    locationName: "remoteId"
                },
                SenderControlPort: {
                    locationName: "senderControlPort",
                    type: "integer"
                },
                SenderIpAddress: {
                    locationName: "senderIpAddress"
                },
                SmoothingLatency: {
                    locationName: "smoothingLatency",
                    type: "integer"
                },
                SourceListenerAddress: {
                    locationName: "sourceListenerAddress"
                },
                SourceListenerPort: {
                    locationName: "sourceListenerPort",
                    type: "integer"
                },
                StreamId: {
                    locationName: "streamId"
                }
            },
            required: [ "Protocol" ]
        },
        S1v: {
            type: "list",
            member: {
                shape: "S1w"
            }
        },
        S1w: {
            type: "structure",
            members: {
                Decryption: {
                    shape: "S17",
                    locationName: "decryption"
                },
                Description: {
                    locationName: "description"
                },
                EntitlementArn: {
                    locationName: "entitlementArn"
                },
                IngestPort: {
                    locationName: "ingestPort",
                    type: "integer"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                },
                MaxLatency: {
                    locationName: "maxLatency",
                    type: "integer"
                },
                MaxSyncBuffer: {
                    locationName: "maxSyncBuffer",
                    type: "integer"
                },
                MediaStreamSourceConfigurations: {
                    shape: "S1x",
                    locationName: "mediaStreamSourceConfigurations"
                },
                MinLatency: {
                    locationName: "minLatency",
                    type: "integer"
                },
                Name: {
                    locationName: "name"
                },
                Protocol: {
                    locationName: "protocol"
                },
                SenderControlPort: {
                    locationName: "senderControlPort",
                    type: "integer"
                },
                SenderIpAddress: {
                    locationName: "senderIpAddress"
                },
                SourceListenerAddress: {
                    locationName: "sourceListenerAddress"
                },
                SourceListenerPort: {
                    locationName: "sourceListenerPort",
                    type: "integer"
                },
                StreamId: {
                    locationName: "streamId"
                },
                VpcInterfaceName: {
                    locationName: "vpcInterfaceName"
                },
                WhitelistCidr: {
                    locationName: "whitelistCidr"
                },
                GatewayBridgeSource: {
                    locationName: "gatewayBridgeSource",
                    type: "structure",
                    members: {
                        BridgeArn: {
                            locationName: "bridgeArn"
                        },
                        VpcInterfaceAttachment: {
                            shape: "Sh",
                            locationName: "vpcInterfaceAttachment"
                        }
                    },
                    required: [ "BridgeArn" ]
                }
            }
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EncodingName: {
                        locationName: "encodingName"
                    },
                    InputConfigurations: {
                        locationName: "inputConfigurations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InputPort: {
                                    locationName: "inputPort",
                                    type: "integer"
                                },
                                Interface: {
                                    shape: "S1e",
                                    locationName: "interface"
                                }
                            },
                            required: [ "InputPort", "Interface" ]
                        }
                    },
                    MediaStreamName: {
                        locationName: "mediaStreamName"
                    }
                },
                required: [ "MediaStreamName", "EncodingName" ]
            }
        },
        S23: {
            type: "list",
            member: {
                shape: "S24"
            }
        },
        S24: {
            type: "structure",
            members: {
                DataTransferSubscriberFeePercent: {
                    locationName: "dataTransferSubscriberFeePercent",
                    type: "integer"
                },
                Decryption: {
                    shape: "S17",
                    locationName: "decryption"
                },
                Description: {
                    locationName: "description"
                },
                EntitlementArn: {
                    locationName: "entitlementArn"
                },
                IngestIp: {
                    locationName: "ingestIp"
                },
                IngestPort: {
                    locationName: "ingestPort",
                    type: "integer"
                },
                MediaStreamSourceConfigurations: {
                    locationName: "mediaStreamSourceConfigurations",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            EncodingName: {
                                locationName: "encodingName"
                            },
                            InputConfigurations: {
                                locationName: "inputConfigurations",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        InputIp: {
                                            locationName: "inputIp"
                                        },
                                        InputPort: {
                                            locationName: "inputPort",
                                            type: "integer"
                                        },
                                        Interface: {
                                            shape: "S1q",
                                            locationName: "interface"
                                        }
                                    },
                                    required: [ "InputPort", "InputIp", "Interface" ]
                                }
                            },
                            MediaStreamName: {
                                locationName: "mediaStreamName"
                            }
                        },
                        required: [ "MediaStreamName", "EncodingName" ]
                    }
                },
                Name: {
                    locationName: "name"
                },
                SenderControlPort: {
                    locationName: "senderControlPort",
                    type: "integer"
                },
                SenderIpAddress: {
                    locationName: "senderIpAddress"
                },
                SourceArn: {
                    locationName: "sourceArn"
                },
                Transport: {
                    shape: "S1s",
                    locationName: "transport"
                },
                VpcInterfaceName: {
                    locationName: "vpcInterfaceName"
                },
                WhitelistCidr: {
                    locationName: "whitelistCidr"
                },
                GatewayBridgeSource: {
                    locationName: "gatewayBridgeSource",
                    type: "structure",
                    members: {
                        BridgeArn: {
                            locationName: "bridgeArn"
                        },
                        VpcInterfaceAttachment: {
                            shape: "Sh",
                            locationName: "vpcInterfaceAttachment"
                        }
                    },
                    required: [ "BridgeArn" ]
                }
            },
            required: [ "Name", "SourceArn" ]
        },
        S2b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    NetworkInterfaceType: {
                        locationName: "networkInterfaceType"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    SecurityGroupIds: {
                        shape: "S16",
                        locationName: "securityGroupIds"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    }
                },
                required: [ "SubnetId", "SecurityGroupIds", "RoleArn", "Name" ]
            }
        },
        S2f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    NetworkInterfaceIds: {
                        shape: "S16",
                        locationName: "networkInterfaceIds"
                    },
                    NetworkInterfaceType: {
                        locationName: "networkInterfaceType"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    SecurityGroupIds: {
                        shape: "S16",
                        locationName: "securityGroupIds"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    }
                },
                required: [ "NetworkInterfaceType", "NetworkInterfaceIds", "SubnetId", "SecurityGroupIds", "RoleArn", "Name" ]
            }
        },
        S2k: {
            type: "structure",
            members: {
                FailoverMode: {
                    locationName: "failoverMode"
                },
                RecoveryWindow: {
                    locationName: "recoveryWindow",
                    type: "integer"
                },
                SourcePriority: {
                    shape: "S2m",
                    locationName: "sourcePriority"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                PrimarySource: {
                    locationName: "primarySource"
                }
            }
        },
        S2p: {
            type: "structure",
            members: {
                BridgeArn: {
                    locationName: "bridgeArn"
                },
                BridgeMessages: {
                    shape: "S2q",
                    locationName: "bridgeMessages"
                },
                BridgeState: {
                    locationName: "bridgeState"
                },
                EgressGatewayBridge: {
                    locationName: "egressGatewayBridge",
                    type: "structure",
                    members: {
                        InstanceId: {
                            locationName: "instanceId"
                        },
                        MaxBitrate: {
                            locationName: "maxBitrate",
                            type: "integer"
                        }
                    },
                    required: [ "MaxBitrate" ]
                },
                IngressGatewayBridge: {
                    locationName: "ingressGatewayBridge",
                    type: "structure",
                    members: {
                        InstanceId: {
                            locationName: "instanceId"
                        },
                        MaxBitrate: {
                            locationName: "maxBitrate",
                            type: "integer"
                        },
                        MaxOutputs: {
                            locationName: "maxOutputs",
                            type: "integer"
                        }
                    },
                    required: [ "MaxOutputs", "MaxBitrate" ]
                },
                Name: {
                    locationName: "name"
                },
                Outputs: {
                    shape: "S9",
                    locationName: "outputs"
                },
                PlacementArn: {
                    locationName: "placementArn"
                },
                SourceFailoverConfig: {
                    shape: "S2k",
                    locationName: "sourceFailoverConfig"
                },
                Sources: {
                    shape: "Sk",
                    locationName: "sources"
                }
            },
            required: [ "BridgeArn", "BridgeState", "PlacementArn", "Name" ]
        },
        S2q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Code: {
                        locationName: "code"
                    },
                    Message: {
                        locationName: "message"
                    },
                    ResourceName: {
                        locationName: "resourceName"
                    }
                },
                required: [ "Message", "Code" ]
            }
        },
        S2w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DataTransferSubscriberFeePercent: {
                        locationName: "dataTransferSubscriberFeePercent",
                        type: "integer"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Encryption: {
                        shape: "S17",
                        locationName: "encryption"
                    },
                    EntitlementStatus: {
                        locationName: "entitlementStatus"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Subscribers: {
                        shape: "S16",
                        locationName: "subscribers"
                    }
                },
                required: [ "Subscribers" ]
            }
        },
        S32: {
            type: "structure",
            members: {
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                Description: {
                    locationName: "description"
                },
                EgressIp: {
                    locationName: "egressIp"
                },
                Entitlements: {
                    shape: "S33",
                    locationName: "entitlements"
                },
                FlowArn: {
                    locationName: "flowArn"
                },
                MediaStreams: {
                    shape: "Sz",
                    locationName: "mediaStreams"
                },
                Name: {
                    locationName: "name"
                },
                Outputs: {
                    shape: "S1k",
                    locationName: "outputs"
                },
                Source: {
                    shape: "S24",
                    locationName: "source"
                },
                SourceFailoverConfig: {
                    shape: "S2k",
                    locationName: "sourceFailoverConfig"
                },
                Sources: {
                    shape: "S23",
                    locationName: "sources"
                },
                Status: {
                    locationName: "status"
                },
                VpcInterfaces: {
                    shape: "S2f",
                    locationName: "vpcInterfaces"
                },
                Maintenance: {
                    shape: "S36",
                    locationName: "maintenance"
                }
            },
            required: [ "Status", "AvailabilityZone", "Source", "Name", "Entitlements", "Outputs", "FlowArn" ]
        },
        S33: {
            type: "list",
            member: {
                shape: "S34"
            }
        },
        S34: {
            type: "structure",
            members: {
                DataTransferSubscriberFeePercent: {
                    locationName: "dataTransferSubscriberFeePercent",
                    type: "integer"
                },
                Description: {
                    locationName: "description"
                },
                Encryption: {
                    shape: "S17",
                    locationName: "encryption"
                },
                EntitlementArn: {
                    locationName: "entitlementArn"
                },
                EntitlementStatus: {
                    locationName: "entitlementStatus"
                },
                Name: {
                    locationName: "name"
                },
                Subscribers: {
                    shape: "S16",
                    locationName: "subscribers"
                }
            },
            required: [ "EntitlementArn", "Subscribers", "Name" ]
        },
        S36: {
            type: "structure",
            members: {
                MaintenanceDay: {
                    locationName: "maintenanceDay"
                },
                MaintenanceDeadline: {
                    locationName: "maintenanceDeadline"
                },
                MaintenanceScheduledDate: {
                    locationName: "maintenanceScheduledDate"
                },
                MaintenanceStartHour: {
                    locationName: "maintenanceStartHour"
                }
            }
        },
        S38: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CidrBlock: {
                        locationName: "cidrBlock"
                    },
                    Name: {
                        locationName: "name"
                    }
                },
                required: [ "CidrBlock", "Name" ]
            }
        },
        S3b: {
            type: "structure",
            members: {
                EgressCidrBlocks: {
                    shape: "S16",
                    locationName: "egressCidrBlocks"
                },
                GatewayArn: {
                    locationName: "gatewayArn"
                },
                GatewayMessages: {
                    shape: "S2q",
                    locationName: "gatewayMessages"
                },
                GatewayState: {
                    locationName: "gatewayState"
                },
                Name: {
                    locationName: "name"
                },
                Networks: {
                    shape: "S38",
                    locationName: "networks"
                }
            },
            required: [ "GatewayArn", "Networks", "EgressCidrBlocks", "Name" ]
        },
        S41: {
            type: "structure",
            members: {
                CurrencyCode: {
                    locationName: "currencyCode"
                },
                Duration: {
                    locationName: "duration",
                    type: "integer"
                },
                DurationUnits: {
                    locationName: "durationUnits"
                },
                OfferingArn: {
                    locationName: "offeringArn"
                },
                OfferingDescription: {
                    locationName: "offeringDescription"
                },
                PricePerUnit: {
                    locationName: "pricePerUnit"
                },
                PriceUnits: {
                    locationName: "priceUnits"
                },
                ResourceSpecification: {
                    shape: "S44",
                    locationName: "resourceSpecification"
                }
            },
            required: [ "CurrencyCode", "OfferingArn", "OfferingDescription", "DurationUnits", "Duration", "PricePerUnit", "ResourceSpecification", "PriceUnits" ]
        },
        S44: {
            type: "structure",
            members: {
                ReservedBitrate: {
                    locationName: "reservedBitrate",
                    type: "integer"
                },
                ResourceType: {
                    locationName: "resourceType"
                }
            },
            required: [ "ResourceType" ]
        },
        S48: {
            type: "structure",
            members: {
                CurrencyCode: {
                    locationName: "currencyCode"
                },
                Duration: {
                    locationName: "duration",
                    type: "integer"
                },
                DurationUnits: {
                    locationName: "durationUnits"
                },
                End: {
                    locationName: "end"
                },
                OfferingArn: {
                    locationName: "offeringArn"
                },
                OfferingDescription: {
                    locationName: "offeringDescription"
                },
                PricePerUnit: {
                    locationName: "pricePerUnit"
                },
                PriceUnits: {
                    locationName: "priceUnits"
                },
                ReservationArn: {
                    locationName: "reservationArn"
                },
                ReservationName: {
                    locationName: "reservationName"
                },
                ReservationState: {
                    locationName: "reservationState"
                },
                ResourceSpecification: {
                    shape: "S44",
                    locationName: "resourceSpecification"
                },
                Start: {
                    locationName: "start"
                }
            },
            required: [ "CurrencyCode", "ReservationState", "OfferingArn", "ReservationArn", "Start", "OfferingDescription", "ReservationName", "End", "Duration", "DurationUnits", "PricePerUnit", "ResourceSpecification", "PriceUnits" ]
        },
        S56: {
            type: "map",
            key: {},
            value: {}
        },
        S5w: {
            type: "structure",
            members: {
                FailoverMode: {
                    locationName: "failoverMode"
                },
                RecoveryWindow: {
                    locationName: "recoveryWindow",
                    type: "integer"
                },
                SourcePriority: {
                    shape: "S2m",
                    locationName: "sourcePriority"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        S6c: {
            type: "structure",
            members: {
                Algorithm: {
                    locationName: "algorithm"
                },
                ConstantInitializationVector: {
                    locationName: "constantInitializationVector"
                },
                DeviceId: {
                    locationName: "deviceId"
                },
                KeyType: {
                    locationName: "keyType"
                },
                Region: {
                    locationName: "region"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                SecretArn: {
                    locationName: "secretArn"
                },
                Url: {
                    locationName: "url"
                }
            }
        }
    },
    paginators: {
        ListBridges: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Bridges"
        },
        ListEntitlements: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Entitlements"
        },
        ListFlows: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Flows"
        },
        ListGatewayInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Instances"
        },
        ListGateways: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Gateways"
        },
        ListOfferings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Offerings"
        },
        ListReservations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Reservations"
        }
    },
    waiters: {
        FlowActive: {
            description: "Wait until a flow is active",
            operation: "DescribeFlow",
            delay: 3,
            maxAttempts: 40,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Flow.Status",
                expected: "ACTIVE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Flow.Status",
                expected: "STARTING"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Flow.Status",
                expected: "UPDATING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "retry",
                matcher: "status",
                expected: 503
            }, {
                state: "failure",
                matcher: "path",
                argument: "Flow.Status",
                expected: "ERROR"
            } ]
        },
        FlowStandby: {
            description: "Wait until a flow is in standby mode",
            operation: "DescribeFlow",
            delay: 3,
            maxAttempts: 40,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "Flow.Status",
                expected: "STANDBY"
            }, {
                state: "retry",
                matcher: "path",
                argument: "Flow.Status",
                expected: "STOPPING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "retry",
                matcher: "status",
                expected: 503
            }, {
                state: "failure",
                matcher: "path",
                argument: "Flow.Status",
                expected: "ERROR"
            } ]
        },
        FlowDeleted: {
            description: "Wait until a flow is deleted",
            operation: "DescribeFlow",
            delay: 3,
            maxAttempts: 40,
            acceptors: [ {
                state: "success",
                matcher: "status",
                expected: 404
            }, {
                state: "retry",
                matcher: "path",
                argument: "Flow.Status",
                expected: "DELETING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "retry",
                matcher: "status",
                expected: 503
            }, {
                state: "failure",
                matcher: "path",
                argument: "Flow.Status",
                expected: "ERROR"
            } ]
        }
    }
};

AWS.apiLoader.services["fsx"] = {};

AWS.FSx = AWS.Service.defineService("fsx", [ "2018-03-01" ]);

AWS.apiLoader.services["fsx"]["2018-03-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-03-01",
        endpointPrefix: "fsx",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon FSx",
        serviceId: "FSx",
        signatureVersion: "v4",
        signingName: "fsx",
        targetPrefix: "AWSSimbaAPIService_v20180301",
        uid: "fsx-2018-03-01"
    },
    operations: {
        AssociateFileSystemAliases: {
            input: {
                type: "structure",
                required: [ "FileSystemId", "Aliases" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemId: {},
                    Aliases: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        shape: "S7"
                    }
                }
            }
        },
        CancelDataRepositoryTask: {
            input: {
                type: "structure",
                required: [ "TaskId" ],
                members: {
                    TaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Lifecycle: {},
                    TaskId: {}
                }
            },
            idempotent: true
        },
        CopyBackup: {
            input: {
                type: "structure",
                required: [ "SourceBackupId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    SourceBackupId: {},
                    SourceRegion: {},
                    KmsKeyId: {},
                    CopyTags: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "So"
                    }
                }
            },
            idempotent: true
        },
        CopySnapshotAndUpdateVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId", "SourceSnapshotARN" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeId: {},
                    SourceSnapshotARN: {},
                    CopyStrategy: {},
                    Options: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeId: {},
                    Lifecycle: {},
                    AdministrativeActions: {
                        shape: "S2e"
                    }
                }
            },
            idempotent: true
        },
        CreateBackup: {
            input: {
                type: "structure",
                members: {
                    FileSystemId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    VolumeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "So"
                    }
                }
            },
            idempotent: true
        },
        CreateDataRepositoryAssociation: {
            input: {
                type: "structure",
                required: [ "FileSystemId", "DataRepositoryPath" ],
                members: {
                    FileSystemId: {},
                    FileSystemPath: {},
                    DataRepositoryPath: {},
                    BatchImportMetaDataOnCreate: {
                        type: "boolean"
                    },
                    ImportedFileChunkSize: {
                        type: "integer"
                    },
                    S3: {
                        shape: "S4v"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Association: {
                        shape: "S51"
                    }
                }
            },
            idempotent: true
        },
        CreateDataRepositoryTask: {
            input: {
                type: "structure",
                required: [ "Type", "FileSystemId", "Report" ],
                members: {
                    Type: {},
                    Paths: {
                        shape: "S5a"
                    },
                    FileSystemId: {},
                    Report: {
                        shape: "S5c"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    CapacityToRelease: {
                        type: "long"
                    },
                    ReleaseConfiguration: {
                        shape: "S5g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataRepositoryTask: {
                        shape: "S5l"
                    }
                }
            },
            idempotent: true
        },
        CreateFileCache: {
            input: {
                type: "structure",
                required: [ "FileCacheType", "FileCacheTypeVersion", "StorageCapacity", "SubnetIds" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileCacheType: {},
                    FileCacheTypeVersion: {},
                    StorageCapacity: {
                        type: "integer"
                    },
                    SubnetIds: {
                        shape: "S15"
                    },
                    SecurityGroupIds: {
                        shape: "S5x"
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    CopyTagsToDataRepositoryAssociations: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    LustreConfiguration: {
                        type: "structure",
                        required: [ "PerUnitStorageThroughput", "DeploymentType", "MetadataConfiguration" ],
                        members: {
                            PerUnitStorageThroughput: {
                                type: "integer"
                            },
                            DeploymentType: {},
                            WeeklyMaintenanceStartTime: {},
                            MetadataConfiguration: {
                                shape: "S62"
                            }
                        }
                    },
                    DataRepositoryAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FileCachePath", "DataRepositoryPath" ],
                            members: {
                                FileCachePath: {},
                                DataRepositoryPath: {},
                                DataRepositorySubdirectories: {
                                    shape: "S54"
                                },
                                NFS: {
                                    type: "structure",
                                    required: [ "Version" ],
                                    members: {
                                        Version: {},
                                        DnsIps: {
                                            shape: "S57"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileCache: {
                        type: "structure",
                        members: {
                            OwnerId: {},
                            CreationTime: {
                                type: "timestamp"
                            },
                            FileCacheId: {},
                            FileCacheType: {},
                            FileCacheTypeVersion: {},
                            Lifecycle: {},
                            FailureDetails: {
                                shape: "S6a"
                            },
                            StorageCapacity: {
                                type: "integer"
                            },
                            VpcId: {},
                            SubnetIds: {
                                shape: "S15"
                            },
                            NetworkInterfaceIds: {
                                shape: "S17"
                            },
                            DNSName: {},
                            KmsKeyId: {},
                            ResourceARN: {},
                            Tags: {
                                shape: "Sj"
                            },
                            CopyTagsToDataRepositoryAssociations: {
                                type: "boolean"
                            },
                            LustreConfiguration: {
                                shape: "S6b"
                            },
                            DataRepositoryAssociationIds: {
                                shape: "S6c"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        CreateFileSystem: {
            input: {
                type: "structure",
                required: [ "FileSystemType", "StorageCapacity", "SubnetIds" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemType: {},
                    StorageCapacity: {
                        type: "integer"
                    },
                    StorageType: {},
                    SubnetIds: {
                        shape: "S15"
                    },
                    SecurityGroupIds: {
                        shape: "S5x"
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    KmsKeyId: {},
                    WindowsConfiguration: {
                        shape: "S6e"
                    },
                    LustreConfiguration: {
                        shape: "S6i"
                    },
                    OntapConfiguration: {
                        type: "structure",
                        required: [ "DeploymentType" ],
                        members: {
                            AutomaticBackupRetentionDays: {
                                type: "integer"
                            },
                            DailyAutomaticBackupStartTime: {},
                            DeploymentType: {},
                            EndpointIpAddressRange: {},
                            FsxAdminPassword: {
                                shape: "S4e"
                            },
                            DiskIopsConfiguration: {
                                shape: "S1t"
                            },
                            PreferredSubnetId: {},
                            RouteTableIds: {
                                shape: "S4c"
                            },
                            ThroughputCapacity: {
                                type: "integer"
                            },
                            WeeklyMaintenanceStartTime: {},
                            HAPairs: {
                                type: "integer"
                            },
                            ThroughputCapacityPerHAPair: {
                                type: "integer"
                            }
                        }
                    },
                    FileSystemTypeVersion: {},
                    OpenZFSConfiguration: {
                        shape: "S6l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystem: {
                        shape: "Sx"
                    }
                }
            }
        },
        CreateFileSystemFromBackup: {
            input: {
                type: "structure",
                required: [ "BackupId", "SubnetIds" ],
                members: {
                    BackupId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    SubnetIds: {
                        shape: "S15"
                    },
                    SecurityGroupIds: {
                        shape: "S5x"
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    WindowsConfiguration: {
                        shape: "S6e"
                    },
                    LustreConfiguration: {
                        shape: "S6i"
                    },
                    StorageType: {},
                    KmsKeyId: {},
                    FileSystemTypeVersion: {},
                    OpenZFSConfiguration: {
                        shape: "S6l"
                    },
                    StorageCapacity: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystem: {
                        shape: "Sx"
                    }
                }
            }
        },
        CreateSnapshot: {
            input: {
                type: "structure",
                required: [ "Name", "VolumeId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Name: {},
                    VolumeId: {},
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S41"
                    }
                }
            },
            idempotent: true
        },
        CreateStorageVirtualMachine: {
            input: {
                type: "structure",
                required: [ "FileSystemId", "Name" ],
                members: {
                    ActiveDirectoryConfiguration: {
                        type: "structure",
                        required: [ "NetBiosName" ],
                        members: {
                            NetBiosName: {},
                            SelfManagedActiveDirectoryConfiguration: {
                                shape: "S6f"
                            }
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemId: {},
                    Name: {},
                    SvmAdminPassword: {
                        shape: "S4e"
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    RootVolumeSecurityStyle: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageVirtualMachine: {
                        shape: "S6y"
                    }
                }
            }
        },
        CreateVolume: {
            input: {
                type: "structure",
                required: [ "VolumeType", "Name" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeType: {},
                    Name: {},
                    OntapConfiguration: {
                        shape: "S75"
                    },
                    Tags: {
                        shape: "Sj"
                    },
                    OpenZFSConfiguration: {
                        type: "structure",
                        required: [ "ParentVolumeId" ],
                        members: {
                            ParentVolumeId: {},
                            StorageCapacityReservationGiB: {
                                type: "integer"
                            },
                            StorageCapacityQuotaGiB: {
                                type: "integer"
                            },
                            RecordSizeKiB: {
                                type: "integer"
                            },
                            DataCompressionType: {},
                            CopyTagsToSnapshots: {
                                type: "boolean"
                            },
                            OriginSnapshot: {
                                type: "structure",
                                required: [ "SnapshotARN", "CopyStrategy" ],
                                members: {
                                    SnapshotARN: {},
                                    CopyStrategy: {}
                                }
                            },
                            ReadOnly: {
                                type: "boolean"
                            },
                            NfsExports: {
                                shape: "S3q"
                            },
                            UserAndGroupQuotas: {
                                shape: "S3x"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Volume: {
                        shape: "S2k"
                    }
                }
            }
        },
        CreateVolumeFromBackup: {
            input: {
                type: "structure",
                required: [ "BackupId", "Name" ],
                members: {
                    BackupId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Name: {},
                    OntapConfiguration: {
                        shape: "S75"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Volume: {
                        shape: "S2k"
                    }
                }
            }
        },
        DeleteBackup: {
            input: {
                type: "structure",
                required: [ "BackupId" ],
                members: {
                    BackupId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupId: {},
                    Lifecycle: {}
                }
            },
            idempotent: true
        },
        DeleteDataRepositoryAssociation: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    DeleteDataInFileSystem: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {},
                    Lifecycle: {},
                    DeleteDataInFileSystem: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        DeleteFileCache: {
            input: {
                type: "structure",
                required: [ "FileCacheId" ],
                members: {
                    FileCacheId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileCacheId: {},
                    Lifecycle: {}
                }
            },
            idempotent: true
        },
        DeleteFileSystem: {
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    WindowsConfiguration: {
                        type: "structure",
                        members: {
                            SkipFinalBackup: {
                                type: "boolean"
                            },
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    },
                    LustreConfiguration: {
                        type: "structure",
                        members: {
                            SkipFinalBackup: {
                                type: "boolean"
                            },
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    },
                    OpenZFSConfiguration: {
                        type: "structure",
                        members: {
                            SkipFinalBackup: {
                                type: "boolean"
                            },
                            FinalBackupTags: {
                                shape: "Sj"
                            },
                            Options: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystemId: {},
                    Lifecycle: {},
                    WindowsResponse: {
                        type: "structure",
                        members: {
                            FinalBackupId: {},
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    },
                    LustreResponse: {
                        type: "structure",
                        members: {
                            FinalBackupId: {},
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    },
                    OpenZFSResponse: {
                        type: "structure",
                        members: {
                            FinalBackupId: {},
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        DeleteSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    SnapshotId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {},
                    Lifecycle: {}
                }
            },
            idempotent: true
        },
        DeleteStorageVirtualMachine: {
            input: {
                type: "structure",
                required: [ "StorageVirtualMachineId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    StorageVirtualMachineId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageVirtualMachineId: {},
                    Lifecycle: {}
                }
            }
        },
        DeleteVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeId: {},
                    OntapConfiguration: {
                        type: "structure",
                        members: {
                            SkipFinalBackup: {
                                type: "boolean"
                            },
                            FinalBackupTags: {
                                shape: "Sj"
                            },
                            BypassSnaplockEnterpriseRetention: {
                                type: "boolean"
                            }
                        }
                    },
                    OpenZFSConfiguration: {
                        type: "structure",
                        members: {
                            Options: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeId: {},
                    Lifecycle: {},
                    OntapResponse: {
                        type: "structure",
                        members: {
                            FinalBackupId: {},
                            FinalBackupTags: {
                                shape: "Sj"
                            }
                        }
                    }
                }
            }
        },
        DescribeBackups: {
            input: {
                type: "structure",
                members: {
                    BackupIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        shape: "S8a"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Backups: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDataRepositoryAssociations: {
            input: {
                type: "structure",
                members: {
                    AssociationIds: {
                        shape: "S6c"
                    },
                    Filters: {
                        shape: "S8a"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        type: "list",
                        member: {
                            shape: "S51"
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        DescribeDataRepositoryTasks: {
            input: {
                type: "structure",
                members: {
                    TaskIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataRepositoryTasks: {
                        type: "list",
                        member: {
                            shape: "S5l"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFileCaches: {
            input: {
                type: "structure",
                members: {
                    FileCacheIds: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileCaches: {
                        type: "list",
                        member: {
                            shape: "S90"
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        DescribeFileSystemAliases: {
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        shape: "S7"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFileSystems: {
            input: {
                type: "structure",
                members: {
                    FileSystemIds: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystems: {
                        type: "list",
                        member: {
                            shape: "Sx"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSharedVpcConfiguration: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    EnableFsxRouteTableUpdatesFromParticipantAccounts: {}
                }
            }
        },
        DescribeSnapshots: {
            input: {
                type: "structure",
                members: {
                    SnapshotIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshots: {
                        type: "list",
                        member: {
                            shape: "S41"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStorageVirtualMachines: {
            input: {
                type: "structure",
                members: {
                    StorageVirtualMachineIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageVirtualMachines: {
                        type: "list",
                        member: {
                            shape: "S6y"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeVolumes: {
            input: {
                type: "structure",
                members: {
                    VolumeIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Volumes: {
                        type: "list",
                        member: {
                            shape: "S2k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateFileSystemAliases: {
            input: {
                type: "structure",
                required: [ "FileSystemId", "Aliases" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemId: {},
                    Aliases: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Aliases: {
                        shape: "S7"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sj"
                    },
                    NextToken: {}
                }
            }
        },
        ReleaseFileSystemNfsV3Locks: {
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystem: {
                        shape: "Sx"
                    }
                }
            },
            idempotent: true
        },
        RestoreVolumeFromSnapshot: {
            input: {
                type: "structure",
                required: [ "VolumeId", "SnapshotId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeId: {},
                    SnapshotId: {},
                    Options: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeId: {},
                    Lifecycle: {},
                    AdministrativeActions: {
                        shape: "S2e"
                    }
                }
            },
            idempotent: true
        },
        StartMisconfiguredStateRecovery: {
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    FileSystemId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystem: {
                        shape: "Sx"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateDataRepositoryAssociation: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    ImportedFileChunkSize: {
                        type: "integer"
                    },
                    S3: {
                        shape: "S4v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Association: {
                        shape: "S51"
                    }
                }
            },
            idempotent: true
        },
        UpdateFileCache: {
            input: {
                type: "structure",
                required: [ "FileCacheId" ],
                members: {
                    FileCacheId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LustreConfiguration: {
                        type: "structure",
                        members: {
                            WeeklyMaintenanceStartTime: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileCache: {
                        shape: "S90"
                    }
                }
            },
            idempotent: true
        },
        UpdateFileSystem: {
            input: {
                type: "structure",
                required: [ "FileSystemId" ],
                members: {
                    FileSystemId: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    StorageCapacity: {
                        type: "integer"
                    },
                    WindowsConfiguration: {
                        type: "structure",
                        members: {
                            WeeklyMaintenanceStartTime: {},
                            DailyAutomaticBackupStartTime: {},
                            AutomaticBackupRetentionDays: {
                                type: "integer"
                            },
                            ThroughputCapacity: {
                                type: "integer"
                            },
                            SelfManagedActiveDirectoryConfiguration: {
                                shape: "Sap"
                            },
                            AuditLogConfiguration: {
                                shape: "S6h"
                            },
                            DiskIopsConfiguration: {
                                shape: "S1t"
                            }
                        }
                    },
                    LustreConfiguration: {
                        type: "structure",
                        members: {
                            WeeklyMaintenanceStartTime: {},
                            DailyAutomaticBackupStartTime: {},
                            AutomaticBackupRetentionDays: {
                                type: "integer"
                            },
                            AutoImportPolicy: {},
                            DataCompressionType: {},
                            LogConfiguration: {
                                shape: "S6j"
                            },
                            RootSquashConfiguration: {
                                shape: "S2a"
                            },
                            PerUnitStorageThroughput: {
                                type: "integer"
                            }
                        }
                    },
                    OntapConfiguration: {
                        type: "structure",
                        members: {
                            AutomaticBackupRetentionDays: {
                                type: "integer"
                            },
                            DailyAutomaticBackupStartTime: {},
                            FsxAdminPassword: {
                                shape: "S4e"
                            },
                            WeeklyMaintenanceStartTime: {},
                            DiskIopsConfiguration: {
                                shape: "S1t"
                            },
                            ThroughputCapacity: {
                                type: "integer"
                            },
                            AddRouteTableIds: {
                                shape: "S4c"
                            },
                            RemoveRouteTableIds: {
                                shape: "S4c"
                            },
                            ThroughputCapacityPerHAPair: {
                                type: "integer"
                            }
                        }
                    },
                    OpenZFSConfiguration: {
                        type: "structure",
                        members: {
                            AutomaticBackupRetentionDays: {
                                type: "integer"
                            },
                            CopyTagsToBackups: {
                                type: "boolean"
                            },
                            CopyTagsToVolumes: {
                                type: "boolean"
                            },
                            DailyAutomaticBackupStartTime: {},
                            ThroughputCapacity: {
                                type: "integer"
                            },
                            WeeklyMaintenanceStartTime: {},
                            DiskIopsConfiguration: {
                                shape: "S1t"
                            },
                            AddRouteTableIds: {
                                shape: "S4c"
                            },
                            RemoveRouteTableIds: {
                                shape: "S4c"
                            }
                        }
                    },
                    StorageType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystem: {
                        shape: "Sx"
                    }
                }
            }
        },
        UpdateSharedVpcConfiguration: {
            input: {
                type: "structure",
                members: {
                    EnableFsxRouteTableUpdatesFromParticipantAccounts: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EnableFsxRouteTableUpdatesFromParticipantAccounts: {}
                }
            }
        },
        UpdateSnapshot: {
            input: {
                type: "structure",
                required: [ "Name", "SnapshotId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Name: {},
                    SnapshotId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "S41"
                    }
                }
            },
            idempotent: true
        },
        UpdateStorageVirtualMachine: {
            input: {
                type: "structure",
                required: [ "StorageVirtualMachineId" ],
                members: {
                    ActiveDirectoryConfiguration: {
                        type: "structure",
                        members: {
                            SelfManagedActiveDirectoryConfiguration: {
                                shape: "Sap"
                            },
                            NetBiosName: {}
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    StorageVirtualMachineId: {},
                    SvmAdminPassword: {
                        shape: "S4e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StorageVirtualMachine: {
                        shape: "S6y"
                    }
                }
            }
        },
        UpdateVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeId: {},
                    OntapConfiguration: {
                        type: "structure",
                        members: {
                            JunctionPath: {},
                            SecurityStyle: {},
                            SizeInMegabytes: {
                                type: "integer"
                            },
                            StorageEfficiencyEnabled: {
                                type: "boolean"
                            },
                            TieringPolicy: {
                                shape: "S2t"
                            },
                            SnapshotPolicy: {},
                            CopyTagsToBackups: {
                                type: "boolean"
                            },
                            SnaplockConfiguration: {
                                type: "structure",
                                members: {
                                    AuditLogVolume: {
                                        type: "boolean"
                                    },
                                    AutocommitPeriod: {
                                        shape: "S30"
                                    },
                                    PrivilegedDelete: {},
                                    RetentionPeriod: {
                                        shape: "S34"
                                    },
                                    VolumeAppendModeEnabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            SizeInBytes: {
                                type: "long"
                            }
                        }
                    },
                    Name: {},
                    OpenZFSConfiguration: {
                        type: "structure",
                        members: {
                            StorageCapacityReservationGiB: {
                                type: "integer"
                            },
                            StorageCapacityQuotaGiB: {
                                type: "integer"
                            },
                            RecordSizeKiB: {
                                type: "integer"
                            },
                            DataCompressionType: {},
                            NfsExports: {
                                shape: "S3q"
                            },
                            UserAndGroupQuotas: {
                                shape: "S3x"
                            },
                            ReadOnly: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Volume: {
                        shape: "S2k"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Lifecycle: {}
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        So: {
            type: "structure",
            required: [ "BackupId", "Lifecycle", "Type", "CreationTime", "FileSystem" ],
            members: {
                BackupId: {},
                Lifecycle: {},
                FailureDetails: {
                    type: "structure",
                    members: {
                        Message: {}
                    }
                },
                Type: {},
                ProgressPercent: {
                    type: "integer"
                },
                CreationTime: {
                    type: "timestamp"
                },
                KmsKeyId: {},
                ResourceARN: {},
                Tags: {
                    shape: "Sj"
                },
                FileSystem: {
                    shape: "Sx"
                },
                DirectoryInformation: {
                    type: "structure",
                    members: {
                        DomainName: {},
                        ActiveDirectoryId: {},
                        ResourceARN: {}
                    }
                },
                OwnerId: {},
                SourceBackupId: {},
                SourceBackupRegion: {},
                ResourceType: {},
                Volume: {
                    shape: "S2k"
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                OwnerId: {},
                CreationTime: {
                    type: "timestamp"
                },
                FileSystemId: {},
                FileSystemType: {},
                Lifecycle: {},
                FailureDetails: {
                    type: "structure",
                    members: {
                        Message: {}
                    }
                },
                StorageCapacity: {
                    type: "integer"
                },
                StorageType: {},
                VpcId: {},
                SubnetIds: {
                    shape: "S15"
                },
                NetworkInterfaceIds: {
                    shape: "S17"
                },
                DNSName: {},
                KmsKeyId: {},
                ResourceARN: {},
                Tags: {
                    shape: "Sj"
                },
                WindowsConfiguration: {
                    type: "structure",
                    members: {
                        ActiveDirectoryId: {},
                        SelfManagedActiveDirectoryConfiguration: {
                            shape: "S1c"
                        },
                        DeploymentType: {},
                        RemoteAdministrationEndpoint: {},
                        PreferredSubnetId: {},
                        PreferredFileServerIp: {},
                        ThroughputCapacity: {
                            type: "integer"
                        },
                        MaintenanceOperationsInProgress: {
                            type: "list",
                            member: {}
                        },
                        WeeklyMaintenanceStartTime: {},
                        DailyAutomaticBackupStartTime: {},
                        AutomaticBackupRetentionDays: {
                            type: "integer"
                        },
                        CopyTagsToBackups: {
                            type: "boolean"
                        },
                        Aliases: {
                            shape: "S7"
                        },
                        AuditLogConfiguration: {
                            type: "structure",
                            required: [ "FileAccessAuditLogLevel", "FileShareAccessAuditLogLevel" ],
                            members: {
                                FileAccessAuditLogLevel: {},
                                FileShareAccessAuditLogLevel: {},
                                AuditLogDestination: {}
                            }
                        },
                        DiskIopsConfiguration: {
                            shape: "S1t"
                        }
                    }
                },
                LustreConfiguration: {
                    type: "structure",
                    members: {
                        WeeklyMaintenanceStartTime: {},
                        DataRepositoryConfiguration: {
                            type: "structure",
                            members: {
                                Lifecycle: {},
                                ImportPath: {},
                                ExportPath: {},
                                ImportedFileChunkSize: {
                                    type: "integer"
                                },
                                AutoImportPolicy: {},
                                FailureDetails: {
                                    shape: "S22"
                                }
                            }
                        },
                        DeploymentType: {},
                        PerUnitStorageThroughput: {
                            type: "integer"
                        },
                        MountName: {},
                        DailyAutomaticBackupStartTime: {},
                        AutomaticBackupRetentionDays: {
                            type: "integer"
                        },
                        CopyTagsToBackups: {
                            type: "boolean"
                        },
                        DriveCacheType: {},
                        DataCompressionType: {},
                        LogConfiguration: {
                            shape: "S28"
                        },
                        RootSquashConfiguration: {
                            shape: "S2a"
                        }
                    }
                },
                AdministrativeActions: {
                    shape: "S2e"
                },
                OntapConfiguration: {
                    type: "structure",
                    members: {
                        AutomaticBackupRetentionDays: {
                            type: "integer"
                        },
                        DailyAutomaticBackupStartTime: {},
                        DeploymentType: {},
                        EndpointIpAddressRange: {},
                        Endpoints: {
                            type: "structure",
                            members: {
                                Intercluster: {
                                    shape: "S4a"
                                },
                                Management: {
                                    shape: "S4a"
                                }
                            }
                        },
                        DiskIopsConfiguration: {
                            shape: "S1t"
                        },
                        PreferredSubnetId: {},
                        RouteTableIds: {
                            shape: "S4c"
                        },
                        ThroughputCapacity: {
                            type: "integer"
                        },
                        WeeklyMaintenanceStartTime: {},
                        FsxAdminPassword: {
                            shape: "S4e"
                        },
                        HAPairs: {
                            type: "integer"
                        },
                        ThroughputCapacityPerHAPair: {
                            type: "integer"
                        }
                    }
                },
                FileSystemTypeVersion: {},
                OpenZFSConfiguration: {
                    type: "structure",
                    members: {
                        AutomaticBackupRetentionDays: {
                            type: "integer"
                        },
                        CopyTagsToBackups: {
                            type: "boolean"
                        },
                        CopyTagsToVolumes: {
                            type: "boolean"
                        },
                        DailyAutomaticBackupStartTime: {},
                        DeploymentType: {},
                        ThroughputCapacity: {
                            type: "integer"
                        },
                        WeeklyMaintenanceStartTime: {},
                        DiskIopsConfiguration: {
                            shape: "S1t"
                        },
                        RootVolumeId: {},
                        PreferredSubnetId: {},
                        EndpointIpAddressRange: {},
                        RouteTableIds: {
                            shape: "S4c"
                        },
                        EndpointIpAddress: {}
                    }
                }
            }
        },
        S15: {
            type: "list",
            member: {}
        },
        S17: {
            type: "list",
            member: {}
        },
        S1c: {
            type: "structure",
            members: {
                DomainName: {},
                OrganizationalUnitDistinguishedName: {},
                FileSystemAdministratorsGroup: {},
                UserName: {},
                DnsIps: {
                    shape: "S1h"
                }
            }
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "structure",
            members: {
                Mode: {},
                Iops: {
                    type: "long"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                Message: {}
            }
        },
        S28: {
            type: "structure",
            required: [ "Level" ],
            members: {
                Level: {},
                Destination: {}
            }
        },
        S2a: {
            type: "structure",
            members: {
                RootSquash: {},
                NoSquashNids: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AdministrativeActionType: {},
                    ProgressPercent: {
                        type: "integer"
                    },
                    RequestTime: {
                        type: "timestamp"
                    },
                    Status: {},
                    TargetFileSystemValues: {
                        shape: "Sx"
                    },
                    FailureDetails: {
                        type: "structure",
                        members: {
                            Message: {}
                        }
                    },
                    TargetVolumeValues: {
                        shape: "S2k"
                    },
                    TargetSnapshotValues: {
                        shape: "S41"
                    },
                    TotalTransferBytes: {
                        type: "long"
                    },
                    RemainingTransferBytes: {
                        type: "long"
                    }
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                CreationTime: {
                    type: "timestamp"
                },
                FileSystemId: {},
                Lifecycle: {},
                Name: {},
                OntapConfiguration: {
                    type: "structure",
                    members: {
                        FlexCacheEndpointType: {},
                        JunctionPath: {},
                        SecurityStyle: {},
                        SizeInMegabytes: {
                            type: "integer"
                        },
                        StorageEfficiencyEnabled: {
                            type: "boolean"
                        },
                        StorageVirtualMachineId: {},
                        StorageVirtualMachineRoot: {
                            type: "boolean"
                        },
                        TieringPolicy: {
                            shape: "S2t"
                        },
                        UUID: {},
                        OntapVolumeType: {},
                        SnapshotPolicy: {},
                        CopyTagsToBackups: {
                            type: "boolean"
                        },
                        SnaplockConfiguration: {
                            type: "structure",
                            members: {
                                AuditLogVolume: {
                                    type: "boolean"
                                },
                                AutocommitPeriod: {
                                    shape: "S30"
                                },
                                PrivilegedDelete: {},
                                RetentionPeriod: {
                                    shape: "S34"
                                },
                                SnaplockType: {},
                                VolumeAppendModeEnabled: {
                                    type: "boolean"
                                }
                            }
                        },
                        VolumeStyle: {},
                        AggregateConfiguration: {
                            type: "structure",
                            members: {
                                Aggregates: {
                                    shape: "S3b"
                                },
                                TotalConstituents: {
                                    type: "integer"
                                }
                            }
                        },
                        SizeInBytes: {
                            type: "long"
                        }
                    }
                },
                ResourceARN: {},
                Tags: {
                    shape: "Sj"
                },
                VolumeId: {},
                VolumeType: {},
                LifecycleTransitionReason: {
                    shape: "S3h"
                },
                AdministrativeActions: {
                    shape: "S2e"
                },
                OpenZFSConfiguration: {
                    type: "structure",
                    members: {
                        ParentVolumeId: {},
                        VolumePath: {},
                        StorageCapacityReservationGiB: {
                            type: "integer"
                        },
                        StorageCapacityQuotaGiB: {
                            type: "integer"
                        },
                        RecordSizeKiB: {
                            type: "integer"
                        },
                        DataCompressionType: {},
                        CopyTagsToSnapshots: {
                            type: "boolean"
                        },
                        OriginSnapshot: {
                            type: "structure",
                            members: {
                                SnapshotARN: {},
                                CopyStrategy: {}
                            }
                        },
                        ReadOnly: {
                            type: "boolean"
                        },
                        NfsExports: {
                            shape: "S3q"
                        },
                        UserAndGroupQuotas: {
                            shape: "S3x"
                        },
                        RestoreToSnapshot: {},
                        DeleteIntermediateSnaphots: {
                            type: "boolean"
                        },
                        DeleteClonedVolumes: {
                            type: "boolean"
                        },
                        DeleteIntermediateData: {
                            type: "boolean"
                        },
                        SourceSnapshotARN: {},
                        DestinationSnapshot: {}
                    }
                }
            }
        },
        S2t: {
            type: "structure",
            members: {
                CoolingPeriod: {
                    type: "integer"
                },
                Name: {}
            }
        },
        S30: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Value: {
                    type: "integer"
                }
            }
        },
        S34: {
            type: "structure",
            required: [ "DefaultRetention", "MinimumRetention", "MaximumRetention" ],
            members: {
                DefaultRetention: {
                    shape: "S35"
                },
                MinimumRetention: {
                    shape: "S35"
                },
                MaximumRetention: {
                    shape: "S35"
                }
            }
        },
        S35: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Value: {
                    type: "integer"
                }
            }
        },
        S3b: {
            type: "list",
            member: {}
        },
        S3h: {
            type: "structure",
            members: {
                Message: {}
            }
        },
        S3q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ClientConfigurations" ],
                members: {
                    ClientConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Clients", "Options" ],
                            members: {
                                Clients: {},
                                Options: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S3x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "Id", "StorageCapacityQuotaGiB" ],
                members: {
                    Type: {},
                    Id: {
                        type: "integer"
                    },
                    StorageCapacityQuotaGiB: {
                        type: "integer"
                    }
                }
            }
        },
        S41: {
            type: "structure",
            members: {
                ResourceARN: {},
                SnapshotId: {},
                Name: {},
                VolumeId: {},
                CreationTime: {
                    type: "timestamp"
                },
                Lifecycle: {},
                LifecycleTransitionReason: {
                    shape: "S3h"
                },
                Tags: {
                    shape: "Sj"
                },
                AdministrativeActions: {
                    shape: "S2e"
                }
            }
        },
        S4a: {
            type: "structure",
            members: {
                DNSName: {},
                IpAddresses: {
                    shape: "S4b"
                }
            }
        },
        S4b: {
            type: "list",
            member: {}
        },
        S4c: {
            type: "list",
            member: {}
        },
        S4e: {
            type: "string",
            sensitive: true
        },
        S4v: {
            type: "structure",
            members: {
                AutoImportPolicy: {
                    type: "structure",
                    members: {
                        Events: {
                            shape: "S4x"
                        }
                    }
                },
                AutoExportPolicy: {
                    shape: "S4z"
                }
            }
        },
        S4x: {
            type: "list",
            member: {}
        },
        S4z: {
            type: "structure",
            members: {
                Events: {
                    shape: "S4x"
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                AssociationId: {},
                ResourceARN: {},
                FileSystemId: {},
                Lifecycle: {},
                FailureDetails: {
                    shape: "S22"
                },
                FileSystemPath: {},
                DataRepositoryPath: {},
                BatchImportMetaDataOnCreate: {
                    type: "boolean"
                },
                ImportedFileChunkSize: {
                    type: "integer"
                },
                S3: {
                    shape: "S4v"
                },
                Tags: {
                    shape: "Sj"
                },
                CreationTime: {
                    type: "timestamp"
                },
                FileCacheId: {},
                FileCachePath: {},
                DataRepositorySubdirectories: {
                    shape: "S54"
                },
                NFS: {
                    type: "structure",
                    required: [ "Version" ],
                    members: {
                        Version: {},
                        DnsIps: {
                            shape: "S57"
                        },
                        AutoExportPolicy: {
                            shape: "S4z"
                        }
                    }
                }
            }
        },
        S54: {
            type: "list",
            member: {}
        },
        S57: {
            type: "list",
            member: {}
        },
        S5a: {
            type: "list",
            member: {}
        },
        S5c: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                Path: {},
                Format: {},
                Scope: {}
            }
        },
        S5g: {
            type: "structure",
            members: {
                DurationSinceLastAccess: {
                    type: "structure",
                    members: {
                        Unit: {},
                        Value: {
                            type: "long"
                        }
                    }
                }
            }
        },
        S5l: {
            type: "structure",
            required: [ "TaskId", "Lifecycle", "Type", "CreationTime" ],
            members: {
                TaskId: {},
                Lifecycle: {},
                Type: {},
                CreationTime: {
                    type: "timestamp"
                },
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                ResourceARN: {},
                Tags: {
                    shape: "Sj"
                },
                FileSystemId: {},
                Paths: {
                    shape: "S5a"
                },
                FailureDetails: {
                    type: "structure",
                    members: {
                        Message: {}
                    }
                },
                Status: {
                    type: "structure",
                    members: {
                        TotalCount: {
                            type: "long"
                        },
                        SucceededCount: {
                            type: "long"
                        },
                        FailedCount: {
                            type: "long"
                        },
                        LastUpdatedTime: {
                            type: "timestamp"
                        },
                        ReleasedCapacity: {
                            type: "long"
                        }
                    }
                },
                Report: {
                    shape: "S5c"
                },
                CapacityToRelease: {
                    type: "long"
                },
                FileCacheId: {},
                ReleaseConfiguration: {
                    shape: "S5g"
                }
            }
        },
        S5x: {
            type: "list",
            member: {}
        },
        S62: {
            type: "structure",
            required: [ "StorageCapacity" ],
            members: {
                StorageCapacity: {
                    type: "integer"
                }
            }
        },
        S6a: {
            type: "structure",
            members: {
                Message: {}
            }
        },
        S6b: {
            type: "structure",
            members: {
                PerUnitStorageThroughput: {
                    type: "integer"
                },
                DeploymentType: {},
                MountName: {},
                WeeklyMaintenanceStartTime: {},
                MetadataConfiguration: {
                    shape: "S62"
                },
                LogConfiguration: {
                    shape: "S28"
                }
            }
        },
        S6c: {
            type: "list",
            member: {}
        },
        S6e: {
            type: "structure",
            required: [ "ThroughputCapacity" ],
            members: {
                ActiveDirectoryId: {},
                SelfManagedActiveDirectoryConfiguration: {
                    shape: "S6f"
                },
                DeploymentType: {},
                PreferredSubnetId: {},
                ThroughputCapacity: {
                    type: "integer"
                },
                WeeklyMaintenanceStartTime: {},
                DailyAutomaticBackupStartTime: {},
                AutomaticBackupRetentionDays: {
                    type: "integer"
                },
                CopyTagsToBackups: {
                    type: "boolean"
                },
                Aliases: {
                    shape: "S4"
                },
                AuditLogConfiguration: {
                    shape: "S6h"
                },
                DiskIopsConfiguration: {
                    shape: "S1t"
                }
            }
        },
        S6f: {
            type: "structure",
            required: [ "DomainName", "UserName", "Password", "DnsIps" ],
            members: {
                DomainName: {},
                OrganizationalUnitDistinguishedName: {},
                FileSystemAdministratorsGroup: {},
                UserName: {},
                Password: {
                    shape: "S6g"
                },
                DnsIps: {
                    shape: "S1h"
                }
            }
        },
        S6g: {
            type: "string",
            sensitive: true
        },
        S6h: {
            type: "structure",
            required: [ "FileAccessAuditLogLevel", "FileShareAccessAuditLogLevel" ],
            members: {
                FileAccessAuditLogLevel: {},
                FileShareAccessAuditLogLevel: {},
                AuditLogDestination: {}
            }
        },
        S6i: {
            type: "structure",
            members: {
                WeeklyMaintenanceStartTime: {},
                ImportPath: {},
                ExportPath: {},
                ImportedFileChunkSize: {
                    type: "integer"
                },
                DeploymentType: {},
                AutoImportPolicy: {},
                PerUnitStorageThroughput: {
                    type: "integer"
                },
                DailyAutomaticBackupStartTime: {},
                AutomaticBackupRetentionDays: {
                    type: "integer"
                },
                CopyTagsToBackups: {
                    type: "boolean"
                },
                DriveCacheType: {},
                DataCompressionType: {},
                LogConfiguration: {
                    shape: "S6j"
                },
                RootSquashConfiguration: {
                    shape: "S2a"
                }
            }
        },
        S6j: {
            type: "structure",
            required: [ "Level" ],
            members: {
                Level: {},
                Destination: {}
            }
        },
        S6l: {
            type: "structure",
            required: [ "DeploymentType", "ThroughputCapacity" ],
            members: {
                AutomaticBackupRetentionDays: {
                    type: "integer"
                },
                CopyTagsToBackups: {
                    type: "boolean"
                },
                CopyTagsToVolumes: {
                    type: "boolean"
                },
                DailyAutomaticBackupStartTime: {},
                DeploymentType: {},
                ThroughputCapacity: {
                    type: "integer"
                },
                WeeklyMaintenanceStartTime: {},
                DiskIopsConfiguration: {
                    shape: "S1t"
                },
                RootVolumeConfiguration: {
                    type: "structure",
                    members: {
                        RecordSizeKiB: {
                            type: "integer"
                        },
                        DataCompressionType: {},
                        NfsExports: {
                            shape: "S3q"
                        },
                        UserAndGroupQuotas: {
                            shape: "S3x"
                        },
                        CopyTagsToSnapshots: {
                            type: "boolean"
                        },
                        ReadOnly: {
                            type: "boolean"
                        }
                    }
                },
                PreferredSubnetId: {},
                EndpointIpAddressRange: {},
                RouteTableIds: {
                    shape: "S4c"
                }
            }
        },
        S6y: {
            type: "structure",
            members: {
                ActiveDirectoryConfiguration: {
                    type: "structure",
                    members: {
                        NetBiosName: {},
                        SelfManagedActiveDirectoryConfiguration: {
                            shape: "S1c"
                        }
                    }
                },
                CreationTime: {
                    type: "timestamp"
                },
                Endpoints: {
                    type: "structure",
                    members: {
                        Iscsi: {
                            shape: "S71"
                        },
                        Management: {
                            shape: "S71"
                        },
                        Nfs: {
                            shape: "S71"
                        },
                        Smb: {
                            shape: "S71"
                        }
                    }
                },
                FileSystemId: {},
                Lifecycle: {},
                Name: {},
                ResourceARN: {},
                StorageVirtualMachineId: {},
                Subtype: {},
                UUID: {},
                Tags: {
                    shape: "Sj"
                },
                LifecycleTransitionReason: {
                    shape: "S3h"
                },
                RootVolumeSecurityStyle: {}
            }
        },
        S71: {
            type: "structure",
            members: {
                DNSName: {},
                IpAddresses: {
                    shape: "S4b"
                }
            }
        },
        S75: {
            type: "structure",
            required: [ "StorageVirtualMachineId" ],
            members: {
                JunctionPath: {},
                SecurityStyle: {},
                SizeInMegabytes: {
                    deprecated: true,
                    deprecatedMessage: "This property is deprecated, use SizeInBytes instead",
                    type: "integer"
                },
                StorageEfficiencyEnabled: {
                    type: "boolean"
                },
                StorageVirtualMachineId: {},
                TieringPolicy: {
                    shape: "S2t"
                },
                OntapVolumeType: {},
                SnapshotPolicy: {},
                CopyTagsToBackups: {
                    type: "boolean"
                },
                SnaplockConfiguration: {
                    type: "structure",
                    required: [ "SnaplockType" ],
                    members: {
                        AuditLogVolume: {
                            type: "boolean"
                        },
                        AutocommitPeriod: {
                            shape: "S30"
                        },
                        PrivilegedDelete: {},
                        RetentionPeriod: {
                            shape: "S34"
                        },
                        SnaplockType: {},
                        VolumeAppendModeEnabled: {
                            type: "boolean"
                        }
                    }
                },
                VolumeStyle: {},
                AggregateConfiguration: {
                    type: "structure",
                    members: {
                        Aggregates: {
                            shape: "S3b"
                        },
                        ConstituentsPerAggregate: {
                            type: "integer"
                        }
                    }
                },
                SizeInBytes: {
                    type: "long"
                }
            }
        },
        S8a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S90: {
            type: "structure",
            members: {
                OwnerId: {},
                CreationTime: {
                    type: "timestamp"
                },
                FileCacheId: {},
                FileCacheType: {},
                FileCacheTypeVersion: {},
                Lifecycle: {},
                FailureDetails: {
                    shape: "S6a"
                },
                StorageCapacity: {
                    type: "integer"
                },
                VpcId: {},
                SubnetIds: {
                    shape: "S15"
                },
                NetworkInterfaceIds: {
                    shape: "S17"
                },
                DNSName: {},
                KmsKeyId: {},
                ResourceARN: {},
                LustreConfiguration: {
                    shape: "S6b"
                },
                DataRepositoryAssociationIds: {
                    shape: "S6c"
                }
            }
        },
        Sap: {
            type: "structure",
            members: {
                UserName: {},
                Password: {
                    shape: "S6g"
                },
                DnsIps: {
                    shape: "S1h"
                },
                DomainName: {},
                OrganizationalUnitDistinguishedName: {},
                FileSystemAdministratorsGroup: {}
            }
        }
    },
    paginators: {
        DescribeBackups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeDataRepositoryAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeDataRepositoryTasks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeFileCaches: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeFileSystemAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeFileSystems: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeSnapshots: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeStorageVirtualMachines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "StorageVirtualMachines"
        },
        DescribeVolumes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Volumes"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["securityhub"] = {};

AWS.SecurityHub = AWS.Service.defineService("securityhub", [ "2018-10-26" ]);

AWS.apiLoader.services["securityhub"]["2018-10-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-10-26",
        endpointPrefix: "securityhub",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS SecurityHub",
        serviceId: "SecurityHub",
        signatureVersion: "v4",
        signingName: "securityhub",
        uid: "securityhub-2018-10-26"
    },
    operations: {
        AcceptAdministratorInvitation: {
            http: {
                requestUri: "/administrator"
            },
            input: {
                type: "structure",
                required: [ "AdministratorId", "InvitationId" ],
                members: {
                    AdministratorId: {},
                    InvitationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AcceptInvitation: {
            http: {
                requestUri: "/master"
            },
            input: {
                type: "structure",
                required: [ "MasterId", "InvitationId" ],
                members: {
                    MasterId: {},
                    InvitationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "This API has been deprecated, use AcceptAdministratorInvitation API instead."
        },
        BatchDeleteAutomationRules: {
            http: {
                requestUri: "/automationrules/delete"
            },
            input: {
                type: "structure",
                required: [ "AutomationRulesArns" ],
                members: {
                    AutomationRulesArns: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProcessedAutomationRules: {
                        shape: "S7"
                    },
                    UnprocessedAutomationRules: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchDisableStandards: {
            http: {
                requestUri: "/standards/deregister"
            },
            input: {
                type: "structure",
                required: [ "StandardsSubscriptionArns" ],
                members: {
                    StandardsSubscriptionArns: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StandardsSubscriptions: {
                        shape: "Sf"
                    }
                }
            }
        },
        BatchEnableStandards: {
            http: {
                requestUri: "/standards/register"
            },
            input: {
                type: "structure",
                required: [ "StandardsSubscriptionRequests" ],
                members: {
                    StandardsSubscriptionRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StandardsArn" ],
                            members: {
                                StandardsArn: {},
                                StandardsInput: {
                                    shape: "Sh"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StandardsSubscriptions: {
                        shape: "Sf"
                    }
                }
            }
        },
        BatchGetAutomationRules: {
            http: {
                requestUri: "/automationrules/get"
            },
            input: {
                type: "structure",
                required: [ "AutomationRulesArns" ],
                members: {
                    AutomationRulesArns: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleArn: {},
                                RuleStatus: {},
                                RuleOrder: {
                                    type: "integer"
                                },
                                RuleName: {},
                                Description: {},
                                IsTerminal: {
                                    type: "boolean"
                                },
                                Criteria: {
                                    shape: "Sw"
                                },
                                Actions: {
                                    shape: "S1a"
                                },
                                CreatedAt: {
                                    shape: "S1p"
                                },
                                UpdatedAt: {
                                    shape: "S1p"
                                },
                                CreatedBy: {}
                            }
                        }
                    },
                    UnprocessedAutomationRules: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchGetConfigurationPolicyAssociations: {
            http: {
                requestUri: "/configurationPolicyAssociation/batchget"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationPolicyAssociationIdentifiers" ],
                members: {
                    ConfigurationPolicyAssociationIdentifiers: {
                        type: "list",
                        member: {
                            shape: "S1s"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationPolicyAssociations: {
                        type: "list",
                        member: {
                            shape: "S1w"
                        }
                    },
                    UnprocessedConfigurationPolicyAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConfigurationPolicyAssociationIdentifiers: {
                                    shape: "S1s"
                                },
                                ErrorCode: {},
                                ErrorReason: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetSecurityControls: {
            http: {
                requestUri: "/securityControls/batchGet"
            },
            input: {
                type: "structure",
                required: [ "SecurityControlIds" ],
                members: {
                    SecurityControlIds: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SecurityControls" ],
                members: {
                    SecurityControls: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SecurityControlId", "SecurityControlArn", "Title", "Description", "RemediationUrl", "SeverityRating", "SecurityControlStatus" ],
                            members: {
                                SecurityControlId: {},
                                SecurityControlArn: {},
                                Title: {},
                                Description: {},
                                RemediationUrl: {},
                                SeverityRating: {},
                                SecurityControlStatus: {},
                                UpdateStatus: {},
                                Parameters: {
                                    shape: "S2a"
                                },
                                LastUpdateReason: {}
                            }
                        }
                    },
                    UnprocessedIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SecurityControlId", "ErrorCode" ],
                            members: {
                                SecurityControlId: {},
                                ErrorCode: {},
                                ErrorReason: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetStandardsControlAssociations: {
            http: {
                requestUri: "/associations/batchGet"
            },
            input: {
                type: "structure",
                required: [ "StandardsControlAssociationIds" ],
                members: {
                    StandardsControlAssociationIds: {
                        type: "list",
                        member: {
                            shape: "S2l"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StandardsControlAssociationDetails" ],
                members: {
                    StandardsControlAssociationDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StandardsArn", "SecurityControlId", "SecurityControlArn", "AssociationStatus" ],
                            members: {
                                StandardsArn: {},
                                SecurityControlId: {},
                                SecurityControlArn: {},
                                AssociationStatus: {},
                                RelatedRequirements: {
                                    shape: "S2q"
                                },
                                UpdatedAt: {
                                    shape: "S1p"
                                },
                                UpdatedReason: {},
                                StandardsControlTitle: {},
                                StandardsControlDescription: {},
                                StandardsControlArns: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    UnprocessedAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StandardsControlAssociationId", "ErrorCode" ],
                            members: {
                                StandardsControlAssociationId: {
                                    shape: "S2l"
                                },
                                ErrorCode: {},
                                ErrorReason: {}
                            }
                        }
                    }
                }
            }
        },
        BatchImportFindings: {
            http: {
                requestUri: "/findings/import"
            },
            input: {
                type: "structure",
                required: [ "Findings" ],
                members: {
                    Findings: {
                        type: "list",
                        member: {
                            shape: "S2w"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FailedCount", "SuccessCount" ],
                members: {
                    FailedCount: {
                        type: "integer"
                    },
                    SuccessCount: {
                        type: "integer"
                    },
                    FailedFindings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "ErrorCode", "ErrorMessage" ],
                            members: {
                                Id: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchUpdateAutomationRules: {
            http: {
                method: "PATCH",
                requestUri: "/automationrules/update"
            },
            input: {
                type: "structure",
                required: [ "UpdateAutomationRulesRequestItems" ],
                members: {
                    UpdateAutomationRulesRequestItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleArn" ],
                            members: {
                                RuleArn: {},
                                RuleStatus: {},
                                RuleOrder: {
                                    type: "integer"
                                },
                                Description: {},
                                RuleName: {},
                                IsTerminal: {
                                    type: "boolean"
                                },
                                Criteria: {
                                    shape: "Sw"
                                },
                                Actions: {
                                    shape: "S1a"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProcessedAutomationRules: {
                        shape: "S7"
                    },
                    UnprocessedAutomationRules: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchUpdateFindings: {
            http: {
                method: "PATCH",
                requestUri: "/findings/batchupdate"
            },
            input: {
                type: "structure",
                required: [ "FindingIdentifiers" ],
                members: {
                    FindingIdentifiers: {
                        shape: "Spm"
                    },
                    Note: {
                        shape: "S1e"
                    },
                    Severity: {
                        shape: "S1f"
                    },
                    VerificationState: {},
                    Confidence: {
                        type: "integer"
                    },
                    Criticality: {
                        type: "integer"
                    },
                    Types: {
                        shape: "S1j"
                    },
                    UserDefinedFields: {
                        shape: "S1k"
                    },
                    Workflow: {
                        shape: "S1l"
                    },
                    RelatedFindings: {
                        shape: "S1n"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProcessedFindings", "UnprocessedFindings" ],
                members: {
                    ProcessedFindings: {
                        shape: "Spm"
                    },
                    UnprocessedFindings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FindingIdentifier", "ErrorCode", "ErrorMessage" ],
                            members: {
                                FindingIdentifier: {
                                    shape: "Spn"
                                },
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchUpdateStandardsControlAssociations: {
            http: {
                method: "PATCH",
                requestUri: "/associations"
            },
            input: {
                type: "structure",
                required: [ "StandardsControlAssociationUpdates" ],
                members: {
                    StandardsControlAssociationUpdates: {
                        type: "list",
                        member: {
                            shape: "Spt"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAssociationUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StandardsControlAssociationUpdate", "ErrorCode" ],
                            members: {
                                StandardsControlAssociationUpdate: {
                                    shape: "Spt"
                                },
                                ErrorCode: {},
                                ErrorReason: {}
                            }
                        }
                    }
                }
            }
        },
        CreateActionTarget: {
            http: {
                requestUri: "/actionTargets"
            },
            input: {
                type: "structure",
                required: [ "Name", "Description", "Id" ],
                members: {
                    Name: {},
                    Description: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ActionTargetArn" ],
                members: {
                    ActionTargetArn: {}
                }
            }
        },
        CreateAutomationRule: {
            http: {
                requestUri: "/automationrules/create"
            },
            input: {
                type: "structure",
                required: [ "RuleOrder", "RuleName", "Description", "Criteria", "Actions" ],
                members: {
                    Tags: {
                        shape: "Sq0"
                    },
                    RuleStatus: {},
                    RuleOrder: {
                        type: "integer"
                    },
                    RuleName: {},
                    Description: {},
                    IsTerminal: {
                        type: "boolean"
                    },
                    Criteria: {
                        shape: "Sw"
                    },
                    Actions: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleArn: {}
                }
            }
        },
        CreateConfigurationPolicy: {
            http: {
                requestUri: "/configurationPolicy/create"
            },
            input: {
                type: "structure",
                required: [ "Name", "ConfigurationPolicy" ],
                members: {
                    Name: {},
                    Description: {},
                    ConfigurationPolicy: {
                        shape: "Sq5"
                    },
                    Tags: {
                        shape: "Sq0"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    UpdatedAt: {
                        shape: "S1p"
                    },
                    CreatedAt: {
                        shape: "S1p"
                    },
                    ConfigurationPolicy: {
                        shape: "Sq5"
                    }
                }
            }
        },
        CreateFindingAggregator: {
            http: {
                requestUri: "/findingAggregator/create"
            },
            input: {
                type: "structure",
                required: [ "RegionLinkingMode" ],
                members: {
                    RegionLinkingMode: {},
                    Regions: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FindingAggregatorArn: {},
                    FindingAggregationRegion: {},
                    RegionLinkingMode: {},
                    Regions: {
                        shape: "S23"
                    }
                }
            }
        },
        CreateInsight: {
            http: {
                requestUri: "/insights"
            },
            input: {
                type: "structure",
                required: [ "Name", "Filters", "GroupByAttribute" ],
                members: {
                    Name: {},
                    Filters: {
                        shape: "Sqh"
                    },
                    GroupByAttribute: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {}
                }
            }
        },
        CreateMembers: {
            http: {
                requestUri: "/members"
            },
            input: {
                type: "structure",
                required: [ "AccountDetails" ],
                members: {
                    AccountDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId" ],
                            members: {
                                AccountId: {},
                                Email: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Squ"
                    }
                }
            }
        },
        DeclineInvitations: {
            http: {
                requestUri: "/invitations/decline"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Sqx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Squ"
                    }
                }
            }
        },
        DeleteActionTarget: {
            http: {
                method: "DELETE",
                requestUri: "/actionTargets/{ActionTargetArn+}"
            },
            input: {
                type: "structure",
                required: [ "ActionTargetArn" ],
                members: {
                    ActionTargetArn: {
                        location: "uri",
                        locationName: "ActionTargetArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ActionTargetArn" ],
                members: {
                    ActionTargetArn: {}
                }
            }
        },
        DeleteConfigurationPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/configurationPolicy/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFindingAggregator: {
            http: {
                method: "DELETE",
                requestUri: "/findingAggregator/delete/{FindingAggregatorArn+}"
            },
            input: {
                type: "structure",
                required: [ "FindingAggregatorArn" ],
                members: {
                    FindingAggregatorArn: {
                        location: "uri",
                        locationName: "FindingAggregatorArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInsight: {
            http: {
                method: "DELETE",
                requestUri: "/insights/{InsightArn+}"
            },
            input: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {
                        location: "uri",
                        locationName: "InsightArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {}
                }
            }
        },
        DeleteInvitations: {
            http: {
                requestUri: "/invitations/delete"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Sqx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Squ"
                    }
                }
            }
        },
        DeleteMembers: {
            http: {
                requestUri: "/members/delete"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Sqx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Squ"
                    }
                }
            }
        },
        DescribeActionTargets: {
            http: {
                requestUri: "/actionTargets/get"
            },
            input: {
                type: "structure",
                members: {
                    ActionTargetArns: {
                        shape: "Src"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ActionTargets" ],
                members: {
                    ActionTargets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ActionTargetArn", "Name", "Description" ],
                            members: {
                                ActionTargetArn: {},
                                Name: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeHub: {
            http: {
                method: "GET",
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {
                    HubArn: {
                        location: "querystring",
                        locationName: "HubArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HubArn: {},
                    SubscribedAt: {},
                    AutoEnableControls: {
                        type: "boolean"
                    },
                    ControlFindingGenerator: {}
                }
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/organization/configuration"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AutoEnable: {
                        type: "boolean"
                    },
                    MemberAccountLimitReached: {
                        type: "boolean"
                    },
                    AutoEnableStandards: {},
                    OrganizationConfiguration: {
                        shape: "Sro"
                    }
                }
            }
        },
        DescribeProducts: {
            http: {
                method: "GET",
                requestUri: "/products"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    ProductArn: {
                        location: "querystring",
                        locationName: "ProductArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Products" ],
                members: {
                    Products: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ProductArn" ],
                            members: {
                                ProductArn: {},
                                ProductName: {},
                                CompanyName: {},
                                Description: {},
                                Categories: {
                                    type: "list",
                                    member: {}
                                },
                                IntegrationTypes: {
                                    type: "list",
                                    member: {}
                                },
                                MarketplaceUrl: {},
                                ActivationUrl: {},
                                ProductSubscriptionResourcePolicy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStandards: {
            http: {
                method: "GET",
                requestUri: "/standards"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Standards: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StandardsArn: {},
                                Name: {},
                                Description: {},
                                EnabledByDefault: {
                                    type: "boolean"
                                },
                                StandardsManagedBy: {
                                    type: "structure",
                                    members: {
                                        Company: {},
                                        Product: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStandardsControls: {
            http: {
                method: "GET",
                requestUri: "/standards/controls/{StandardsSubscriptionArn+}"
            },
            input: {
                type: "structure",
                required: [ "StandardsSubscriptionArn" ],
                members: {
                    StandardsSubscriptionArn: {
                        location: "uri",
                        locationName: "StandardsSubscriptionArn"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Controls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StandardsControlArn: {},
                                ControlStatus: {},
                                DisabledReason: {},
                                ControlStatusUpdatedAt: {
                                    shape: "S1p"
                                },
                                ControlId: {},
                                Title: {},
                                Description: {},
                                RemediationUrl: {},
                                SeverityRating: {},
                                RelatedRequirements: {
                                    shape: "S2q"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisableImportFindingsForProduct: {
            http: {
                method: "DELETE",
                requestUri: "/productSubscriptions/{ProductSubscriptionArn+}"
            },
            input: {
                type: "structure",
                required: [ "ProductSubscriptionArn" ],
                members: {
                    ProductSubscriptionArn: {
                        location: "uri",
                        locationName: "ProductSubscriptionArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableOrganizationAdminAccount: {
            http: {
                requestUri: "/organization/admin/disable"
            },
            input: {
                type: "structure",
                required: [ "AdminAccountId" ],
                members: {
                    AdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableSecurityHub: {
            http: {
                method: "DELETE",
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromAdministratorAccount: {
            http: {
                requestUri: "/administrator/disassociate"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromMasterAccount: {
            http: {
                requestUri: "/master/disassociate"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            },
            deprecated: true,
            deprecatedMessage: "This API has been deprecated, use DisassociateFromAdministratorAccount API instead."
        },
        DisassociateMembers: {
            http: {
                requestUri: "/members/disassociate"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Sqx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableImportFindingsForProduct: {
            http: {
                requestUri: "/productSubscriptions"
            },
            input: {
                type: "structure",
                required: [ "ProductArn" ],
                members: {
                    ProductArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductSubscriptionArn: {}
                }
            }
        },
        EnableOrganizationAdminAccount: {
            http: {
                requestUri: "/organization/admin/enable"
            },
            input: {
                type: "structure",
                required: [ "AdminAccountId" ],
                members: {
                    AdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableSecurityHub: {
            http: {
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sq0"
                    },
                    EnableDefaultStandards: {
                        type: "boolean"
                    },
                    ControlFindingGenerator: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAdministratorAccount: {
            http: {
                method: "GET",
                requestUri: "/administrator"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Administrator: {
                        shape: "Ssr"
                    }
                }
            }
        },
        GetConfigurationPolicy: {
            http: {
                method: "GET",
                requestUri: "/configurationPolicy/get/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    UpdatedAt: {
                        shape: "S1p"
                    },
                    CreatedAt: {
                        shape: "S1p"
                    },
                    ConfigurationPolicy: {
                        shape: "Sq5"
                    }
                }
            }
        },
        GetConfigurationPolicyAssociation: {
            http: {
                requestUri: "/configurationPolicyAssociation/get"
            },
            input: {
                type: "structure",
                required: [ "Target" ],
                members: {
                    Target: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationPolicyId: {},
                    TargetId: {},
                    TargetType: {},
                    AssociationType: {},
                    UpdatedAt: {
                        shape: "S1p"
                    },
                    AssociationStatus: {},
                    AssociationStatusMessage: {}
                }
            }
        },
        GetEnabledStandards: {
            http: {
                requestUri: "/standards/get"
            },
            input: {
                type: "structure",
                members: {
                    StandardsSubscriptionArns: {
                        shape: "Sd"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StandardsSubscriptions: {
                        shape: "Sf"
                    },
                    NextToken: {}
                }
            }
        },
        GetFindingAggregator: {
            http: {
                method: "GET",
                requestUri: "/findingAggregator/get/{FindingAggregatorArn+}"
            },
            input: {
                type: "structure",
                required: [ "FindingAggregatorArn" ],
                members: {
                    FindingAggregatorArn: {
                        location: "uri",
                        locationName: "FindingAggregatorArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FindingAggregatorArn: {},
                    FindingAggregationRegion: {},
                    RegionLinkingMode: {},
                    Regions: {
                        shape: "S23"
                    }
                }
            }
        },
        GetFindingHistory: {
            http: {
                requestUri: "/findingHistory/get"
            },
            input: {
                type: "structure",
                required: [ "FindingIdentifier" ],
                members: {
                    FindingIdentifier: {
                        shape: "Spn"
                    },
                    StartTime: {
                        shape: "S1p"
                    },
                    EndTime: {
                        shape: "S1p"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Records: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FindingIdentifier: {
                                    shape: "Spn"
                                },
                                UpdateTime: {
                                    shape: "S1p"
                                },
                                FindingCreated: {
                                    type: "boolean"
                                },
                                UpdateSource: {
                                    type: "structure",
                                    members: {
                                        Type: {},
                                        Identity: {}
                                    }
                                },
                                Updates: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            UpdatedField: {},
                                            OldValue: {},
                                            NewValue: {}
                                        }
                                    }
                                },
                                NextToken: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetFindings: {
            http: {
                requestUri: "/findings"
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Sqh"
                    },
                    SortCriteria: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Field: {},
                                SortOrder: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Findings" ],
                members: {
                    Findings: {
                        type: "list",
                        member: {
                            shape: "S2w"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInsightResults: {
            http: {
                method: "GET",
                requestUri: "/insights/results/{InsightArn+}"
            },
            input: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {
                        location: "uri",
                        locationName: "InsightArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InsightResults" ],
                members: {
                    InsightResults: {
                        type: "structure",
                        required: [ "InsightArn", "GroupByAttribute", "ResultValues" ],
                        members: {
                            InsightArn: {},
                            GroupByAttribute: {},
                            ResultValues: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "GroupByAttributeValue", "Count" ],
                                    members: {
                                        GroupByAttributeValue: {},
                                        Count: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetInsights: {
            http: {
                requestUri: "/insights/get"
            },
            input: {
                type: "structure",
                members: {
                    InsightArns: {
                        shape: "Src"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Insights" ],
                members: {
                    Insights: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "InsightArn", "Name", "Filters", "GroupByAttribute" ],
                            members: {
                                InsightArn: {},
                                Name: {},
                                Filters: {
                                    shape: "Sqh"
                                },
                                GroupByAttribute: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInvitationsCount: {
            http: {
                method: "GET",
                requestUri: "/invitations/count"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    InvitationsCount: {
                        type: "integer"
                    }
                }
            }
        },
        GetMasterAccount: {
            http: {
                method: "GET",
                requestUri: "/master"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Master: {
                        shape: "Ssr"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This API has been deprecated, use GetAdministratorAccount API instead."
        },
        GetMembers: {
            http: {
                requestUri: "/members/get"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Sqx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        shape: "Stt"
                    },
                    UnprocessedAccounts: {
                        shape: "Squ"
                    }
                }
            }
        },
        GetSecurityControlDefinition: {
            http: {
                method: "GET",
                requestUri: "/securityControl/definition"
            },
            input: {
                type: "structure",
                required: [ "SecurityControlId" ],
                members: {
                    SecurityControlId: {
                        location: "querystring",
                        locationName: "SecurityControlId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SecurityControlDefinition" ],
                members: {
                    SecurityControlDefinition: {
                        shape: "Stx"
                    }
                }
            }
        },
        InviteMembers: {
            http: {
                requestUri: "/members/invite"
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "Sqx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedAccounts: {
                        shape: "Squ"
                    }
                }
            }
        },
        ListAutomationRules: {
            http: {
                method: "GET",
                requestUri: "/automationrules/list"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AutomationRulesMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleArn: {},
                                RuleStatus: {},
                                RuleOrder: {
                                    type: "integer"
                                },
                                RuleName: {},
                                Description: {},
                                IsTerminal: {
                                    type: "boolean"
                                },
                                CreatedAt: {
                                    shape: "S1p"
                                },
                                UpdatedAt: {
                                    shape: "S1p"
                                },
                                CreatedBy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConfigurationPolicies: {
            http: {
                method: "GET",
                requestUri: "/configurationPolicy/list"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationPolicySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Id: {},
                                Name: {},
                                Description: {},
                                UpdatedAt: {
                                    shape: "S1p"
                                },
                                ServiceEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConfigurationPolicyAssociations: {
            http: {
                requestUri: "/configurationPolicyAssociation/list"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            ConfigurationPolicyId: {},
                            AssociationType: {},
                            AssociationStatus: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationPolicyAssociationSummaries: {
                        type: "list",
                        member: {
                            shape: "S1w"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEnabledProductsForImport: {
            http: {
                method: "GET",
                requestUri: "/productSubscriptions"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductSubscriptions: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListFindingAggregators: {
            http: {
                method: "GET",
                requestUri: "/findingAggregator/list"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FindingAggregators: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FindingAggregatorArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInvitations: {
            http: {
                method: "GET",
                requestUri: "/invitations"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Invitations: {
                        type: "list",
                        member: {
                            shape: "Ssr"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/members"
            },
            input: {
                type: "structure",
                members: {
                    OnlyAssociated: {
                        location: "querystring",
                        locationName: "OnlyAssociated",
                        type: "boolean"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        shape: "Stt"
                    },
                    NextToken: {}
                }
            }
        },
        ListOrganizationAdminAccounts: {
            http: {
                method: "GET",
                requestUri: "/organization/admin"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdminAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSecurityControlDefinitions: {
            http: {
                method: "GET",
                requestUri: "/securityControls/definitions"
            },
            input: {
                type: "structure",
                members: {
                    StandardsArn: {
                        location: "querystring",
                        locationName: "StandardsArn"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SecurityControlDefinitions" ],
                members: {
                    SecurityControlDefinitions: {
                        type: "list",
                        member: {
                            shape: "Stx"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStandardsControlAssociations: {
            http: {
                method: "GET",
                requestUri: "/associations"
            },
            input: {
                type: "structure",
                required: [ "SecurityControlId" ],
                members: {
                    SecurityControlId: {
                        location: "querystring",
                        locationName: "SecurityControlId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StandardsControlAssociationSummaries" ],
                members: {
                    StandardsControlAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StandardsArn", "SecurityControlId", "SecurityControlArn", "AssociationStatus" ],
                            members: {
                                StandardsArn: {},
                                SecurityControlId: {},
                                SecurityControlArn: {},
                                AssociationStatus: {},
                                RelatedRequirements: {
                                    shape: "S2q"
                                },
                                UpdatedAt: {
                                    shape: "S1p"
                                },
                                UpdatedReason: {},
                                StandardsControlTitle: {},
                                StandardsControlDescription: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sq0"
                    }
                }
            }
        },
        StartConfigurationPolicyAssociation: {
            http: {
                requestUri: "/configurationPolicyAssociation/associate"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationPolicyIdentifier", "Target" ],
                members: {
                    ConfigurationPolicyIdentifier: {},
                    Target: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationPolicyId: {},
                    TargetId: {},
                    TargetType: {},
                    AssociationType: {},
                    UpdatedAt: {
                        shape: "S1p"
                    },
                    AssociationStatus: {},
                    AssociationStatusMessage: {}
                }
            }
        },
        StartConfigurationPolicyDisassociation: {
            http: {
                requestUri: "/configurationPolicyAssociation/disassociate"
            },
            input: {
                type: "structure",
                required: [ "ConfigurationPolicyIdentifier" ],
                members: {
                    Target: {
                        shape: "S1t"
                    },
                    ConfigurationPolicyIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sq0"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}"
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateActionTarget: {
            http: {
                method: "PATCH",
                requestUri: "/actionTargets/{ActionTargetArn+}"
            },
            input: {
                type: "structure",
                required: [ "ActionTargetArn" ],
                members: {
                    ActionTargetArn: {
                        location: "uri",
                        locationName: "ActionTargetArn"
                    },
                    Name: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConfigurationPolicy: {
            http: {
                method: "PATCH",
                requestUri: "/configurationPolicy/{Identifier}"
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    },
                    Name: {},
                    Description: {},
                    UpdatedReason: {},
                    ConfigurationPolicy: {
                        shape: "Sq5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Id: {},
                    Name: {},
                    Description: {},
                    UpdatedAt: {
                        shape: "S1p"
                    },
                    CreatedAt: {
                        shape: "S1p"
                    },
                    ConfigurationPolicy: {
                        shape: "Sq5"
                    }
                }
            }
        },
        UpdateFindingAggregator: {
            http: {
                method: "PATCH",
                requestUri: "/findingAggregator/update"
            },
            input: {
                type: "structure",
                required: [ "FindingAggregatorArn", "RegionLinkingMode" ],
                members: {
                    FindingAggregatorArn: {},
                    RegionLinkingMode: {},
                    Regions: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FindingAggregatorArn: {},
                    FindingAggregationRegion: {},
                    RegionLinkingMode: {},
                    Regions: {
                        shape: "S23"
                    }
                }
            }
        },
        UpdateFindings: {
            http: {
                method: "PATCH",
                requestUri: "/findings"
            },
            input: {
                type: "structure",
                required: [ "Filters" ],
                members: {
                    Filters: {
                        shape: "Sqh"
                    },
                    Note: {
                        shape: "S1e"
                    },
                    RecordState: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateInsight: {
            http: {
                method: "PATCH",
                requestUri: "/insights/{InsightArn+}"
            },
            input: {
                type: "structure",
                required: [ "InsightArn" ],
                members: {
                    InsightArn: {
                        location: "uri",
                        locationName: "InsightArn"
                    },
                    Name: {},
                    Filters: {
                        shape: "Sqh"
                    },
                    GroupByAttribute: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                requestUri: "/organization/configuration"
            },
            input: {
                type: "structure",
                required: [ "AutoEnable" ],
                members: {
                    AutoEnable: {
                        type: "boolean"
                    },
                    AutoEnableStandards: {},
                    OrganizationConfiguration: {
                        shape: "Sro"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSecurityControl: {
            http: {
                method: "PATCH",
                requestUri: "/securityControl/update"
            },
            input: {
                type: "structure",
                required: [ "SecurityControlId", "Parameters" ],
                members: {
                    SecurityControlId: {},
                    Parameters: {
                        shape: "S2a"
                    },
                    LastUpdateReason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSecurityHubConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/accounts"
            },
            input: {
                type: "structure",
                members: {
                    AutoEnableControls: {
                        type: "boolean"
                    },
                    ControlFindingGenerator: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateStandardsControl: {
            http: {
                method: "PATCH",
                requestUri: "/standards/control/{StandardsControlArn+}"
            },
            input: {
                type: "structure",
                required: [ "StandardsControlArn" ],
                members: {
                    StandardsControlArn: {
                        location: "uri",
                        locationName: "StandardsControlArn"
                    },
                    ControlStatus: {},
                    DisabledReason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {}
        },
        S9: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RuleArn: {},
                    ErrorCode: {
                        type: "integer"
                    },
                    ErrorMessage: {}
                }
            }
        },
        Sd: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "list",
            member: {
                type: "structure",
                required: [ "StandardsSubscriptionArn", "StandardsArn", "StandardsInput", "StandardsStatus" ],
                members: {
                    StandardsSubscriptionArn: {},
                    StandardsArn: {},
                    StandardsInput: {
                        shape: "Sh"
                    },
                    StandardsStatus: {},
                    StandardsStatusReason: {
                        type: "structure",
                        required: [ "StatusReasonCode" ],
                        members: {
                            StatusReasonCode: {}
                        }
                    }
                }
            }
        },
        Sh: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "structure",
            members: {
                ProductArn: {
                    shape: "Sx"
                },
                AwsAccountId: {
                    shape: "Sx"
                },
                Id: {
                    shape: "Sx"
                },
                GeneratorId: {
                    shape: "Sx"
                },
                Type: {
                    shape: "Sx"
                },
                FirstObservedAt: {
                    shape: "S10"
                },
                LastObservedAt: {
                    shape: "S10"
                },
                CreatedAt: {
                    shape: "S10"
                },
                UpdatedAt: {
                    shape: "S10"
                },
                Confidence: {
                    shape: "S14"
                },
                Criticality: {
                    shape: "S14"
                },
                Title: {
                    shape: "Sx"
                },
                Description: {
                    shape: "Sx"
                },
                SourceUrl: {
                    shape: "Sx"
                },
                ProductName: {
                    shape: "Sx"
                },
                CompanyName: {
                    shape: "Sx"
                },
                SeverityLabel: {
                    shape: "Sx"
                },
                ResourceType: {
                    shape: "Sx"
                },
                ResourceId: {
                    shape: "Sx"
                },
                ResourcePartition: {
                    shape: "Sx"
                },
                ResourceRegion: {
                    shape: "Sx"
                },
                ResourceTags: {
                    shape: "S17"
                },
                ResourceDetailsOther: {
                    shape: "S17"
                },
                ComplianceStatus: {
                    shape: "Sx"
                },
                ComplianceSecurityControlId: {
                    shape: "Sx"
                },
                ComplianceAssociatedStandardsId: {
                    shape: "Sx"
                },
                VerificationState: {
                    shape: "Sx"
                },
                WorkflowStatus: {
                    shape: "Sx"
                },
                RecordState: {
                    shape: "Sx"
                },
                RelatedFindingsProductArn: {
                    shape: "Sx"
                },
                RelatedFindingsId: {
                    shape: "Sx"
                },
                NoteText: {
                    shape: "Sx"
                },
                NoteUpdatedAt: {
                    shape: "S10"
                },
                NoteUpdatedBy: {
                    shape: "Sx"
                },
                UserDefinedFields: {
                    shape: "S17"
                },
                ResourceApplicationArn: {
                    shape: "Sx"
                },
                ResourceApplicationName: {
                    shape: "Sx"
                },
                AwsAccountName: {
                    shape: "Sx"
                }
            }
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {},
                    Comparison: {}
                }
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Start: {},
                    End: {},
                    DateRange: {
                        type: "structure",
                        members: {
                            Value: {
                                type: "integer"
                            },
                            Unit: {}
                        }
                    }
                }
            }
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Gte: {
                        type: "double"
                    },
                    Lte: {
                        type: "double"
                    },
                    Eq: {
                        type: "double"
                    },
                    Gt: {
                        type: "double"
                    },
                    Lt: {
                        type: "double"
                    }
                }
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {},
                    Comparison: {}
                }
            }
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    FindingFieldsUpdate: {
                        type: "structure",
                        members: {
                            Note: {
                                shape: "S1e"
                            },
                            Severity: {
                                shape: "S1f"
                            },
                            VerificationState: {},
                            Confidence: {
                                type: "integer"
                            },
                            Criticality: {
                                type: "integer"
                            },
                            Types: {
                                shape: "S1j"
                            },
                            UserDefinedFields: {
                                shape: "S1k"
                            },
                            Workflow: {
                                shape: "S1l"
                            },
                            RelatedFindings: {
                                shape: "S1n"
                            }
                        }
                    }
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "Text", "UpdatedBy" ],
            members: {
                Text: {},
                UpdatedBy: {}
            }
        },
        S1f: {
            type: "structure",
            members: {
                Normalized: {
                    type: "integer"
                },
                Product: {
                    type: "double"
                },
                Label: {}
            }
        },
        S1j: {
            type: "list",
            member: {}
        },
        S1k: {
            type: "map",
            key: {},
            value: {}
        },
        S1l: {
            type: "structure",
            members: {
                Status: {}
            }
        },
        S1n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ProductArn", "Id" ],
                members: {
                    ProductArn: {},
                    Id: {}
                }
            }
        },
        S1p: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1s: {
            type: "structure",
            members: {
                Target: {
                    shape: "S1t"
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                AccountId: {},
                OrganizationalUnitId: {},
                RootId: {}
            },
            union: true
        },
        S1w: {
            type: "structure",
            members: {
                ConfigurationPolicyId: {},
                TargetId: {},
                TargetType: {},
                AssociationType: {},
                UpdatedAt: {
                    shape: "S1p"
                },
                AssociationStatus: {},
                AssociationStatusMessage: {}
            }
        },
        S23: {
            type: "list",
            member: {}
        },
        S2a: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "ValueType" ],
                members: {
                    ValueType: {},
                    Value: {
                        type: "structure",
                        members: {
                            Integer: {
                                type: "integer"
                            },
                            IntegerList: {
                                shape: "S2e"
                            },
                            Double: {
                                type: "double"
                            },
                            String: {},
                            StringList: {
                                shape: "S23"
                            },
                            Boolean: {
                                type: "boolean"
                            },
                            Enum: {},
                            EnumList: {
                                shape: "S23"
                            }
                        },
                        union: true
                    }
                }
            }
        },
        S2e: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S2l: {
            type: "structure",
            required: [ "SecurityControlId", "StandardsArn" ],
            members: {
                SecurityControlId: {},
                StandardsArn: {}
            }
        },
        S2q: {
            type: "list",
            member: {}
        },
        S2w: {
            type: "structure",
            required: [ "SchemaVersion", "Id", "ProductArn", "GeneratorId", "AwsAccountId", "CreatedAt", "UpdatedAt", "Title", "Description", "Resources" ],
            members: {
                SchemaVersion: {},
                Id: {},
                ProductArn: {},
                ProductName: {},
                CompanyName: {},
                Region: {},
                GeneratorId: {},
                AwsAccountId: {},
                Types: {
                    shape: "S1j"
                },
                FirstObservedAt: {},
                LastObservedAt: {},
                CreatedAt: {},
                UpdatedAt: {},
                Severity: {
                    type: "structure",
                    members: {
                        Product: {
                            type: "double"
                        },
                        Label: {},
                        Normalized: {
                            type: "integer"
                        },
                        Original: {}
                    }
                },
                Confidence: {
                    type: "integer"
                },
                Criticality: {
                    type: "integer"
                },
                Title: {},
                Description: {},
                Remediation: {
                    type: "structure",
                    members: {
                        Recommendation: {
                            type: "structure",
                            members: {
                                Text: {},
                                Url: {}
                            }
                        }
                    }
                },
                SourceUrl: {},
                ProductFields: {
                    shape: "S1k"
                },
                UserDefinedFields: {
                    shape: "S1k"
                },
                Malware: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Type: {},
                            Path: {},
                            State: {}
                        }
                    }
                },
                Network: {
                    type: "structure",
                    members: {
                        Direction: {},
                        Protocol: {},
                        OpenPortRange: {
                            shape: "S36"
                        },
                        SourceIpV4: {},
                        SourceIpV6: {},
                        SourcePort: {
                            type: "integer"
                        },
                        SourceDomain: {},
                        SourceMac: {},
                        DestinationIpV4: {},
                        DestinationIpV6: {},
                        DestinationPort: {
                            type: "integer"
                        },
                        DestinationDomain: {}
                    }
                },
                NetworkPath: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ComponentId: {},
                            ComponentType: {},
                            Egress: {
                                shape: "S39"
                            },
                            Ingress: {
                                shape: "S39"
                            }
                        }
                    }
                },
                Process: {
                    type: "structure",
                    members: {
                        Name: {},
                        Path: {},
                        Pid: {
                            type: "integer"
                        },
                        ParentPid: {
                            type: "integer"
                        },
                        LaunchedAt: {},
                        TerminatedAt: {}
                    }
                },
                Threats: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            Severity: {},
                            ItemCount: {
                                type: "integer"
                            },
                            FilePaths: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        FilePath: {},
                                        FileName: {},
                                        ResourceId: {},
                                        Hash: {}
                                    }
                                }
                            }
                        }
                    }
                },
                ThreatIntelIndicators: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Type: {},
                            Value: {},
                            Category: {},
                            LastObservedAt: {},
                            Source: {},
                            SourceUrl: {}
                        }
                    }
                },
                Resources: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Type", "Id" ],
                        members: {
                            Type: {},
                            Id: {},
                            Partition: {},
                            Region: {},
                            ResourceRole: {},
                            Tags: {
                                shape: "S1k"
                            },
                            DataClassification: {
                                type: "structure",
                                members: {
                                    DetailedResultsLocation: {},
                                    Result: {
                                        type: "structure",
                                        members: {
                                            MimeType: {},
                                            SizeClassified: {
                                                type: "long"
                                            },
                                            AdditionalOccurrences: {
                                                type: "boolean"
                                            },
                                            Status: {
                                                type: "structure",
                                                members: {
                                                    Code: {},
                                                    Reason: {}
                                                }
                                            },
                                            SensitiveData: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Category: {},
                                                        Detections: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Count: {
                                                                        type: "long"
                                                                    },
                                                                    Type: {},
                                                                    Occurrences: {
                                                                        shape: "S3w"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        TotalCount: {
                                                            type: "long"
                                                        }
                                                    }
                                                }
                                            },
                                            CustomDataIdentifiers: {
                                                type: "structure",
                                                members: {
                                                    Detections: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Count: {
                                                                    type: "long"
                                                                },
                                                                Arn: {},
                                                                Name: {},
                                                                Occurrences: {
                                                                    shape: "S3w"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    TotalCount: {
                                                        type: "long"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Details: {
                                type: "structure",
                                members: {
                                    AwsAutoScalingAutoScalingGroup: {
                                        type: "structure",
                                        members: {
                                            LaunchConfigurationName: {},
                                            LoadBalancerNames: {
                                                shape: "S23"
                                            },
                                            HealthCheckType: {},
                                            HealthCheckGracePeriod: {
                                                type: "integer"
                                            },
                                            CreatedTime: {},
                                            MixedInstancesPolicy: {
                                                type: "structure",
                                                members: {
                                                    InstancesDistribution: {
                                                        type: "structure",
                                                        members: {
                                                            OnDemandAllocationStrategy: {},
                                                            OnDemandBaseCapacity: {
                                                                type: "integer"
                                                            },
                                                            OnDemandPercentageAboveBaseCapacity: {
                                                                type: "integer"
                                                            },
                                                            SpotAllocationStrategy: {},
                                                            SpotInstancePools: {
                                                                type: "integer"
                                                            },
                                                            SpotMaxPrice: {}
                                                        }
                                                    },
                                                    LaunchTemplate: {
                                                        type: "structure",
                                                        members: {
                                                            LaunchTemplateSpecification: {
                                                                type: "structure",
                                                                members: {
                                                                    LaunchTemplateId: {},
                                                                    LaunchTemplateName: {},
                                                                    Version: {}
                                                                }
                                                            },
                                                            Overrides: {
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        InstanceType: {},
                                                                        WeightedCapacity: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            AvailabilityZones: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Value: {}
                                                    }
                                                }
                                            },
                                            LaunchTemplate: {
                                                type: "structure",
                                                members: {
                                                    LaunchTemplateId: {},
                                                    LaunchTemplateName: {},
                                                    Version: {}
                                                }
                                            },
                                            CapacityRebalance: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    AwsCodeBuildProject: {
                                        type: "structure",
                                        members: {
                                            EncryptionKey: {},
                                            Artifacts: {
                                                shape: "S4k"
                                            },
                                            Environment: {
                                                type: "structure",
                                                members: {
                                                    Certificate: {},
                                                    EnvironmentVariables: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Name: {},
                                                                Type: {},
                                                                Value: {}
                                                            }
                                                        }
                                                    },
                                                    PrivilegedMode: {
                                                        type: "boolean"
                                                    },
                                                    ImagePullCredentialsType: {},
                                                    RegistryCredential: {
                                                        type: "structure",
                                                        members: {
                                                            Credential: {},
                                                            CredentialProvider: {}
                                                        }
                                                    },
                                                    Type: {}
                                                }
                                            },
                                            Name: {},
                                            Source: {
                                                type: "structure",
                                                members: {
                                                    Type: {},
                                                    Location: {},
                                                    GitCloneDepth: {
                                                        type: "integer"
                                                    },
                                                    InsecureSsl: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            ServiceRole: {},
                                            LogsConfig: {
                                                type: "structure",
                                                members: {
                                                    CloudWatchLogs: {
                                                        type: "structure",
                                                        members: {
                                                            GroupName: {},
                                                            Status: {},
                                                            StreamName: {}
                                                        }
                                                    },
                                                    S3Logs: {
                                                        type: "structure",
                                                        members: {
                                                            EncryptionDisabled: {
                                                                type: "boolean"
                                                            },
                                                            Location: {},
                                                            Status: {}
                                                        }
                                                    }
                                                }
                                            },
                                            VpcConfig: {
                                                type: "structure",
                                                members: {
                                                    VpcId: {},
                                                    Subnets: {
                                                        shape: "S4v"
                                                    },
                                                    SecurityGroupIds: {
                                                        shape: "S4v"
                                                    }
                                                }
                                            },
                                            SecondaryArtifacts: {
                                                shape: "S4k"
                                            }
                                        }
                                    },
                                    AwsCloudFrontDistribution: {
                                        type: "structure",
                                        members: {
                                            CacheBehaviors: {
                                                type: "structure",
                                                members: {
                                                    Items: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                ViewerProtocolPolicy: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            DefaultCacheBehavior: {
                                                type: "structure",
                                                members: {
                                                    ViewerProtocolPolicy: {}
                                                }
                                            },
                                            DefaultRootObject: {},
                                            DomainName: {},
                                            ETag: {},
                                            LastModifiedTime: {},
                                            Logging: {
                                                type: "structure",
                                                members: {
                                                    Bucket: {},
                                                    Enabled: {
                                                        type: "boolean"
                                                    },
                                                    IncludeCookies: {
                                                        type: "boolean"
                                                    },
                                                    Prefix: {}
                                                }
                                            },
                                            Origins: {
                                                type: "structure",
                                                members: {
                                                    Items: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                DomainName: {},
                                                                Id: {},
                                                                OriginPath: {},
                                                                S3OriginConfig: {
                                                                    type: "structure",
                                                                    members: {
                                                                        OriginAccessIdentity: {}
                                                                    }
                                                                },
                                                                CustomOriginConfig: {
                                                                    type: "structure",
                                                                    members: {
                                                                        HttpPort: {
                                                                            type: "integer"
                                                                        },
                                                                        HttpsPort: {
                                                                            type: "integer"
                                                                        },
                                                                        OriginKeepaliveTimeout: {
                                                                            type: "integer"
                                                                        },
                                                                        OriginProtocolPolicy: {},
                                                                        OriginReadTimeout: {
                                                                            type: "integer"
                                                                        },
                                                                        OriginSslProtocols: {
                                                                            type: "structure",
                                                                            members: {
                                                                                Items: {
                                                                                    shape: "S4v"
                                                                                },
                                                                                Quantity: {
                                                                                    type: "integer"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            OriginGroups: {
                                                type: "structure",
                                                members: {
                                                    Items: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                FailoverCriteria: {
                                                                    type: "structure",
                                                                    members: {
                                                                        StatusCodes: {
                                                                            type: "structure",
                                                                            members: {
                                                                                Items: {
                                                                                    type: "list",
                                                                                    member: {
                                                                                        type: "integer"
                                                                                    }
                                                                                },
                                                                                Quantity: {
                                                                                    type: "integer"
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            ViewerCertificate: {
                                                type: "structure",
                                                members: {
                                                    AcmCertificateArn: {},
                                                    Certificate: {},
                                                    CertificateSource: {},
                                                    CloudFrontDefaultCertificate: {
                                                        type: "boolean"
                                                    },
                                                    IamCertificateId: {},
                                                    MinimumProtocolVersion: {},
                                                    SslSupportMethod: {}
                                                }
                                            },
                                            Status: {},
                                            WebAclId: {}
                                        }
                                    },
                                    AwsEc2Instance: {
                                        type: "structure",
                                        members: {
                                            Type: {},
                                            ImageId: {},
                                            IpV4Addresses: {
                                                shape: "S23"
                                            },
                                            IpV6Addresses: {
                                                shape: "S23"
                                            },
                                            KeyName: {},
                                            IamInstanceProfileArn: {},
                                            VpcId: {},
                                            SubnetId: {},
                                            LaunchedAt: {},
                                            NetworkInterfaces: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        NetworkInterfaceId: {}
                                                    }
                                                }
                                            },
                                            VirtualizationType: {},
                                            MetadataOptions: {
                                                type: "structure",
                                                members: {
                                                    HttpEndpoint: {},
                                                    HttpProtocolIpv6: {},
                                                    HttpPutResponseHopLimit: {
                                                        type: "integer"
                                                    },
                                                    HttpTokens: {},
                                                    InstanceMetadataTags: {}
                                                }
                                            },
                                            Monitoring: {
                                                type: "structure",
                                                members: {
                                                    State: {}
                                                }
                                            }
                                        }
                                    },
                                    AwsEc2NetworkInterface: {
                                        type: "structure",
                                        members: {
                                            Attachment: {
                                                type: "structure",
                                                members: {
                                                    AttachTime: {},
                                                    AttachmentId: {},
                                                    DeleteOnTermination: {
                                                        type: "boolean"
                                                    },
                                                    DeviceIndex: {
                                                        type: "integer"
                                                    },
                                                    InstanceId: {},
                                                    InstanceOwnerId: {},
                                                    Status: {}
                                                }
                                            },
                                            NetworkInterfaceId: {},
                                            SecurityGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        GroupName: {},
                                                        GroupId: {}
                                                    }
                                                }
                                            },
                                            SourceDestCheck: {
                                                type: "boolean"
                                            },
                                            IpV6Addresses: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        IpV6Address: {}
                                                    }
                                                }
                                            },
                                            PrivateIpAddresses: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PrivateIpAddress: {},
                                                        PrivateDnsName: {}
                                                    }
                                                }
                                            },
                                            PublicDnsName: {},
                                            PublicIp: {}
                                        }
                                    },
                                    AwsEc2SecurityGroup: {
                                        type: "structure",
                                        members: {
                                            GroupName: {},
                                            GroupId: {},
                                            OwnerId: {},
                                            VpcId: {},
                                            IpPermissions: {
                                                shape: "S5t"
                                            },
                                            IpPermissionsEgress: {
                                                shape: "S5t"
                                            }
                                        }
                                    },
                                    AwsEc2Volume: {
                                        type: "structure",
                                        members: {
                                            CreateTime: {},
                                            DeviceName: {},
                                            Encrypted: {
                                                type: "boolean"
                                            },
                                            Size: {
                                                type: "integer"
                                            },
                                            SnapshotId: {},
                                            Status: {},
                                            KmsKeyId: {},
                                            Attachments: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AttachTime: {},
                                                        DeleteOnTermination: {
                                                            type: "boolean"
                                                        },
                                                        InstanceId: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            VolumeId: {},
                                            VolumeType: {},
                                            VolumeScanStatus: {}
                                        }
                                    },
                                    AwsEc2Vpc: {
                                        type: "structure",
                                        members: {
                                            CidrBlockAssociationSet: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AssociationId: {},
                                                        CidrBlock: {},
                                                        CidrBlockState: {}
                                                    }
                                                }
                                            },
                                            Ipv6CidrBlockAssociationSet: {
                                                shape: "S69"
                                            },
                                            DhcpOptionsId: {},
                                            State: {}
                                        }
                                    },
                                    AwsEc2Eip: {
                                        type: "structure",
                                        members: {
                                            InstanceId: {},
                                            PublicIp: {},
                                            AllocationId: {},
                                            AssociationId: {},
                                            Domain: {},
                                            PublicIpv4Pool: {},
                                            NetworkBorderGroup: {},
                                            NetworkInterfaceId: {},
                                            NetworkInterfaceOwnerId: {},
                                            PrivateIpAddress: {}
                                        }
                                    },
                                    AwsEc2Subnet: {
                                        type: "structure",
                                        members: {
                                            AssignIpv6AddressOnCreation: {
                                                type: "boolean"
                                            },
                                            AvailabilityZone: {},
                                            AvailabilityZoneId: {},
                                            AvailableIpAddressCount: {
                                                type: "integer"
                                            },
                                            CidrBlock: {},
                                            DefaultForAz: {
                                                type: "boolean"
                                            },
                                            MapPublicIpOnLaunch: {
                                                type: "boolean"
                                            },
                                            OwnerId: {},
                                            State: {},
                                            SubnetArn: {},
                                            SubnetId: {},
                                            VpcId: {},
                                            Ipv6CidrBlockAssociationSet: {
                                                shape: "S69"
                                            }
                                        }
                                    },
                                    AwsEc2NetworkAcl: {
                                        type: "structure",
                                        members: {
                                            IsDefault: {
                                                type: "boolean"
                                            },
                                            NetworkAclId: {},
                                            OwnerId: {},
                                            VpcId: {},
                                            Associations: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        NetworkAclAssociationId: {},
                                                        NetworkAclId: {},
                                                        SubnetId: {}
                                                    }
                                                }
                                            },
                                            Entries: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        CidrBlock: {},
                                                        Egress: {
                                                            type: "boolean"
                                                        },
                                                        IcmpTypeCode: {
                                                            type: "structure",
                                                            members: {
                                                                Code: {
                                                                    type: "integer"
                                                                },
                                                                Type: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        Ipv6CidrBlock: {},
                                                        PortRange: {
                                                            type: "structure",
                                                            members: {
                                                                From: {
                                                                    type: "integer"
                                                                },
                                                                To: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        Protocol: {},
                                                        RuleAction: {},
                                                        RuleNumber: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsElbv2LoadBalancer: {
                                        type: "structure",
                                        members: {
                                            AvailabilityZones: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ZoneName: {},
                                                        SubnetId: {}
                                                    }
                                                }
                                            },
                                            CanonicalHostedZoneId: {},
                                            CreatedTime: {},
                                            DNSName: {},
                                            IpAddressType: {},
                                            Scheme: {},
                                            SecurityGroups: {
                                                type: "list",
                                                member: {}
                                            },
                                            State: {
                                                type: "structure",
                                                members: {
                                                    Code: {},
                                                    Reason: {}
                                                }
                                            },
                                            Type: {},
                                            VpcId: {},
                                            LoadBalancerAttributes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Key: {},
                                                        Value: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsElasticBeanstalkEnvironment: {
                                        type: "structure",
                                        members: {
                                            ApplicationName: {},
                                            Cname: {},
                                            DateCreated: {},
                                            DateUpdated: {},
                                            Description: {},
                                            EndpointUrl: {},
                                            EnvironmentArn: {},
                                            EnvironmentId: {},
                                            EnvironmentLinks: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        EnvironmentName: {},
                                                        LinkName: {}
                                                    }
                                                }
                                            },
                                            EnvironmentName: {},
                                            OptionSettings: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Namespace: {},
                                                        OptionName: {},
                                                        ResourceName: {},
                                                        Value: {}
                                                    }
                                                }
                                            },
                                            PlatformArn: {},
                                            SolutionStackName: {},
                                            Status: {},
                                            Tier: {
                                                type: "structure",
                                                members: {
                                                    Name: {},
                                                    Type: {},
                                                    Version: {}
                                                }
                                            },
                                            VersionLabel: {}
                                        }
                                    },
                                    AwsElasticsearchDomain: {
                                        type: "structure",
                                        members: {
                                            AccessPolicies: {},
                                            DomainEndpointOptions: {
                                                type: "structure",
                                                members: {
                                                    EnforceHTTPS: {
                                                        type: "boolean"
                                                    },
                                                    TLSSecurityPolicy: {}
                                                }
                                            },
                                            DomainId: {},
                                            DomainName: {},
                                            Endpoint: {},
                                            Endpoints: {
                                                shape: "S1k"
                                            },
                                            ElasticsearchVersion: {},
                                            ElasticsearchClusterConfig: {
                                                type: "structure",
                                                members: {
                                                    DedicatedMasterCount: {
                                                        type: "integer"
                                                    },
                                                    DedicatedMasterEnabled: {
                                                        type: "boolean"
                                                    },
                                                    DedicatedMasterType: {},
                                                    InstanceCount: {
                                                        type: "integer"
                                                    },
                                                    InstanceType: {},
                                                    ZoneAwarenessConfig: {
                                                        type: "structure",
                                                        members: {
                                                            AvailabilityZoneCount: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    ZoneAwarenessEnabled: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            EncryptionAtRestOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    },
                                                    KmsKeyId: {}
                                                }
                                            },
                                            LogPublishingOptions: {
                                                type: "structure",
                                                members: {
                                                    IndexSlowLogs: {
                                                        shape: "S73"
                                                    },
                                                    SearchSlowLogs: {
                                                        shape: "S73"
                                                    },
                                                    AuditLogs: {
                                                        shape: "S73"
                                                    }
                                                }
                                            },
                                            NodeToNodeEncryptionOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            ServiceSoftwareOptions: {
                                                type: "structure",
                                                members: {
                                                    AutomatedUpdateDate: {},
                                                    Cancellable: {
                                                        type: "boolean"
                                                    },
                                                    CurrentVersion: {},
                                                    Description: {},
                                                    NewVersion: {},
                                                    UpdateAvailable: {
                                                        type: "boolean"
                                                    },
                                                    UpdateStatus: {}
                                                }
                                            },
                                            VPCOptions: {
                                                type: "structure",
                                                members: {
                                                    AvailabilityZones: {
                                                        shape: "S4v"
                                                    },
                                                    SecurityGroupIds: {
                                                        shape: "S4v"
                                                    },
                                                    SubnetIds: {
                                                        shape: "S4v"
                                                    },
                                                    VPCId: {}
                                                }
                                            }
                                        }
                                    },
                                    AwsS3Bucket: {
                                        type: "structure",
                                        members: {
                                            OwnerId: {},
                                            OwnerName: {},
                                            OwnerAccountId: {},
                                            CreatedAt: {},
                                            ServerSideEncryptionConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Rules: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                ApplyServerSideEncryptionByDefault: {
                                                                    type: "structure",
                                                                    members: {
                                                                        SSEAlgorithm: {},
                                                                        KMSMasterKeyID: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            BucketLifecycleConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Rules: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                AbortIncompleteMultipartUpload: {
                                                                    type: "structure",
                                                                    members: {
                                                                        DaysAfterInitiation: {
                                                                            type: "integer"
                                                                        }
                                                                    }
                                                                },
                                                                ExpirationDate: {},
                                                                ExpirationInDays: {
                                                                    type: "integer"
                                                                },
                                                                ExpiredObjectDeleteMarker: {
                                                                    type: "boolean"
                                                                },
                                                                Filter: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Predicate: {
                                                                            type: "structure",
                                                                            members: {
                                                                                Operands: {
                                                                                    type: "list",
                                                                                    member: {
                                                                                        type: "structure",
                                                                                        members: {
                                                                                            Prefix: {},
                                                                                            Tag: {
                                                                                                type: "structure",
                                                                                                members: {
                                                                                                    Key: {},
                                                                                                    Value: {}
                                                                                                }
                                                                                            },
                                                                                            Type: {}
                                                                                        }
                                                                                    }
                                                                                },
                                                                                Prefix: {},
                                                                                Tag: {
                                                                                    type: "structure",
                                                                                    members: {
                                                                                        Key: {},
                                                                                        Value: {}
                                                                                    }
                                                                                },
                                                                                Type: {}
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                ID: {},
                                                                NoncurrentVersionExpirationInDays: {
                                                                    type: "integer"
                                                                },
                                                                NoncurrentVersionTransitions: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Days: {
                                                                                type: "integer"
                                                                            },
                                                                            StorageClass: {}
                                                                        }
                                                                    }
                                                                },
                                                                Prefix: {},
                                                                Status: {},
                                                                Transitions: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Date: {},
                                                                            Days: {
                                                                                type: "integer"
                                                                            },
                                                                            StorageClass: {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            PublicAccessBlockConfiguration: {
                                                shape: "S7q"
                                            },
                                            AccessControlList: {},
                                            BucketLoggingConfiguration: {
                                                type: "structure",
                                                members: {
                                                    DestinationBucketName: {},
                                                    LogFilePrefix: {}
                                                }
                                            },
                                            BucketWebsiteConfiguration: {
                                                type: "structure",
                                                members: {
                                                    ErrorDocument: {},
                                                    IndexDocumentSuffix: {},
                                                    RedirectAllRequestsTo: {
                                                        type: "structure",
                                                        members: {
                                                            Hostname: {},
                                                            Protocol: {}
                                                        }
                                                    },
                                                    RoutingRules: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Condition: {
                                                                    type: "structure",
                                                                    members: {
                                                                        HttpErrorCodeReturnedEquals: {},
                                                                        KeyPrefixEquals: {}
                                                                    }
                                                                },
                                                                Redirect: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Hostname: {},
                                                                        HttpRedirectCode: {},
                                                                        Protocol: {},
                                                                        ReplaceKeyPrefixWith: {},
                                                                        ReplaceKeyWith: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            BucketNotificationConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Configurations: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Events: {
                                                                    type: "list",
                                                                    member: {}
                                                                },
                                                                Filter: {
                                                                    type: "structure",
                                                                    members: {
                                                                        S3KeyFilter: {
                                                                            type: "structure",
                                                                            members: {
                                                                                FilterRules: {
                                                                                    type: "list",
                                                                                    member: {
                                                                                        type: "structure",
                                                                                        members: {
                                                                                            Name: {},
                                                                                            Value: {}
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                Destination: {},
                                                                Type: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            BucketVersioningConfiguration: {
                                                type: "structure",
                                                members: {
                                                    IsMfaDeleteEnabled: {
                                                        type: "boolean"
                                                    },
                                                    Status: {}
                                                }
                                            },
                                            ObjectLockConfiguration: {
                                                type: "structure",
                                                members: {
                                                    ObjectLockEnabled: {},
                                                    Rule: {
                                                        type: "structure",
                                                        members: {
                                                            DefaultRetention: {
                                                                type: "structure",
                                                                members: {
                                                                    Days: {
                                                                        type: "integer"
                                                                    },
                                                                    Mode: {},
                                                                    Years: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            Name: {}
                                        }
                                    },
                                    AwsS3AccountPublicAccessBlock: {
                                        shape: "S7q"
                                    },
                                    AwsS3Object: {
                                        type: "structure",
                                        members: {
                                            LastModified: {},
                                            ETag: {},
                                            VersionId: {},
                                            ContentType: {},
                                            ServerSideEncryption: {},
                                            SSEKMSKeyId: {}
                                        }
                                    },
                                    AwsSecretsManagerSecret: {
                                        type: "structure",
                                        members: {
                                            RotationRules: {
                                                type: "structure",
                                                members: {
                                                    AutomaticallyAfterDays: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            RotationOccurredWithinFrequency: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            RotationEnabled: {
                                                type: "boolean"
                                            },
                                            RotationLambdaArn: {},
                                            Deleted: {
                                                type: "boolean"
                                            },
                                            Name: {},
                                            Description: {}
                                        }
                                    },
                                    AwsIamAccessKey: {
                                        type: "structure",
                                        members: {
                                            UserName: {
                                                deprecated: true,
                                                deprecatedMessage: "This filter is deprecated. Instead, use PrincipalName."
                                            },
                                            Status: {},
                                            CreatedAt: {},
                                            PrincipalId: {},
                                            PrincipalType: {},
                                            PrincipalName: {},
                                            AccountId: {},
                                            AccessKeyId: {},
                                            SessionContext: {
                                                type: "structure",
                                                members: {
                                                    Attributes: {
                                                        type: "structure",
                                                        members: {
                                                            MfaAuthenticated: {
                                                                type: "boolean"
                                                            },
                                                            CreationDate: {}
                                                        }
                                                    },
                                                    SessionIssuer: {
                                                        type: "structure",
                                                        members: {
                                                            Type: {},
                                                            PrincipalId: {},
                                                            Arn: {},
                                                            AccountId: {},
                                                            UserName: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsIamUser: {
                                        type: "structure",
                                        members: {
                                            AttachedManagedPolicies: {
                                                shape: "S8k"
                                            },
                                            CreateDate: {},
                                            GroupList: {
                                                shape: "S23"
                                            },
                                            Path: {},
                                            PermissionsBoundary: {
                                                shape: "S8m"
                                            },
                                            UserId: {},
                                            UserName: {},
                                            UserPolicyList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PolicyName: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsIamPolicy: {
                                        type: "structure",
                                        members: {
                                            AttachmentCount: {
                                                type: "integer"
                                            },
                                            CreateDate: {},
                                            DefaultVersionId: {},
                                            Description: {},
                                            IsAttachable: {
                                                type: "boolean"
                                            },
                                            Path: {},
                                            PermissionsBoundaryUsageCount: {
                                                type: "integer"
                                            },
                                            PolicyId: {},
                                            PolicyName: {},
                                            PolicyVersionList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        VersionId: {},
                                                        IsDefaultVersion: {
                                                            type: "boolean"
                                                        },
                                                        CreateDate: {}
                                                    }
                                                }
                                            },
                                            UpdateDate: {}
                                        }
                                    },
                                    AwsApiGatewayV2Stage: {
                                        type: "structure",
                                        members: {
                                            ClientCertificateId: {},
                                            CreatedDate: {},
                                            Description: {},
                                            DefaultRouteSettings: {
                                                shape: "S8t"
                                            },
                                            DeploymentId: {},
                                            LastUpdatedDate: {},
                                            RouteSettings: {
                                                shape: "S8t"
                                            },
                                            StageName: {},
                                            StageVariables: {
                                                shape: "S1k"
                                            },
                                            AccessLogSettings: {
                                                shape: "S8u"
                                            },
                                            AutoDeploy: {
                                                type: "boolean"
                                            },
                                            LastDeploymentStatusMessage: {},
                                            ApiGatewayManaged: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    AwsApiGatewayV2Api: {
                                        type: "structure",
                                        members: {
                                            ApiEndpoint: {},
                                            ApiId: {},
                                            ApiKeySelectionExpression: {},
                                            CreatedDate: {},
                                            Description: {},
                                            Version: {},
                                            Name: {},
                                            ProtocolType: {},
                                            RouteSelectionExpression: {},
                                            CorsConfiguration: {
                                                type: "structure",
                                                members: {
                                                    AllowOrigins: {
                                                        shape: "S4v"
                                                    },
                                                    AllowCredentials: {
                                                        type: "boolean"
                                                    },
                                                    ExposeHeaders: {
                                                        shape: "S4v"
                                                    },
                                                    MaxAge: {
                                                        type: "integer"
                                                    },
                                                    AllowMethods: {
                                                        shape: "S4v"
                                                    },
                                                    AllowHeaders: {
                                                        shape: "S4v"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsDynamoDbTable: {
                                        type: "structure",
                                        members: {
                                            AttributeDefinitions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AttributeName: {},
                                                        AttributeType: {}
                                                    }
                                                }
                                            },
                                            BillingModeSummary: {
                                                type: "structure",
                                                members: {
                                                    BillingMode: {},
                                                    LastUpdateToPayPerRequestDateTime: {}
                                                }
                                            },
                                            CreationDateTime: {},
                                            GlobalSecondaryIndexes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Backfilling: {
                                                            type: "boolean"
                                                        },
                                                        IndexArn: {},
                                                        IndexName: {},
                                                        IndexSizeBytes: {
                                                            type: "long"
                                                        },
                                                        IndexStatus: {},
                                                        ItemCount: {
                                                            type: "integer"
                                                        },
                                                        KeySchema: {
                                                            shape: "S94"
                                                        },
                                                        Projection: {
                                                            shape: "S96"
                                                        },
                                                        ProvisionedThroughput: {
                                                            shape: "S97"
                                                        }
                                                    }
                                                }
                                            },
                                            GlobalTableVersion: {},
                                            ItemCount: {
                                                type: "integer"
                                            },
                                            KeySchema: {
                                                shape: "S94"
                                            },
                                            LatestStreamArn: {},
                                            LatestStreamLabel: {},
                                            LocalSecondaryIndexes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        IndexArn: {},
                                                        IndexName: {},
                                                        KeySchema: {
                                                            shape: "S94"
                                                        },
                                                        Projection: {
                                                            shape: "S96"
                                                        }
                                                    }
                                                }
                                            },
                                            ProvisionedThroughput: {
                                                shape: "S97"
                                            },
                                            Replicas: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        GlobalSecondaryIndexes: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    IndexName: {},
                                                                    ProvisionedThroughputOverride: {
                                                                        shape: "S9e"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        KmsMasterKeyId: {},
                                                        ProvisionedThroughputOverride: {
                                                            shape: "S9e"
                                                        },
                                                        RegionName: {},
                                                        ReplicaStatus: {},
                                                        ReplicaStatusDescription: {}
                                                    }
                                                }
                                            },
                                            RestoreSummary: {
                                                type: "structure",
                                                members: {
                                                    SourceBackupArn: {},
                                                    SourceTableArn: {},
                                                    RestoreDateTime: {},
                                                    RestoreInProgress: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            SseDescription: {
                                                type: "structure",
                                                members: {
                                                    InaccessibleEncryptionDateTime: {},
                                                    Status: {},
                                                    SseType: {},
                                                    KmsMasterKeyArn: {}
                                                }
                                            },
                                            StreamSpecification: {
                                                type: "structure",
                                                members: {
                                                    StreamEnabled: {
                                                        type: "boolean"
                                                    },
                                                    StreamViewType: {}
                                                }
                                            },
                                            TableId: {},
                                            TableName: {},
                                            TableSizeBytes: {
                                                type: "long"
                                            },
                                            TableStatus: {},
                                            DeletionProtectionEnabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    AwsApiGatewayStage: {
                                        type: "structure",
                                        members: {
                                            DeploymentId: {},
                                            ClientCertificateId: {},
                                            StageName: {},
                                            Description: {},
                                            CacheClusterEnabled: {
                                                type: "boolean"
                                            },
                                            CacheClusterSize: {},
                                            CacheClusterStatus: {},
                                            MethodSettings: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        MetricsEnabled: {
                                                            type: "boolean"
                                                        },
                                                        LoggingLevel: {},
                                                        DataTraceEnabled: {
                                                            type: "boolean"
                                                        },
                                                        ThrottlingBurstLimit: {
                                                            type: "integer"
                                                        },
                                                        ThrottlingRateLimit: {
                                                            type: "double"
                                                        },
                                                        CachingEnabled: {
                                                            type: "boolean"
                                                        },
                                                        CacheTtlInSeconds: {
                                                            type: "integer"
                                                        },
                                                        CacheDataEncrypted: {
                                                            type: "boolean"
                                                        },
                                                        RequireAuthorizationForCacheControl: {
                                                            type: "boolean"
                                                        },
                                                        UnauthorizedCacheControlHeaderStrategy: {},
                                                        HttpMethod: {},
                                                        ResourcePath: {}
                                                    }
                                                }
                                            },
                                            Variables: {
                                                shape: "S1k"
                                            },
                                            DocumentationVersion: {},
                                            AccessLogSettings: {
                                                shape: "S8u"
                                            },
                                            CanarySettings: {
                                                type: "structure",
                                                members: {
                                                    PercentTraffic: {
                                                        type: "double"
                                                    },
                                                    DeploymentId: {},
                                                    StageVariableOverrides: {
                                                        shape: "S1k"
                                                    },
                                                    UseStageCache: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            TracingEnabled: {
                                                type: "boolean"
                                            },
                                            CreatedDate: {},
                                            LastUpdatedDate: {},
                                            WebAclArn: {}
                                        }
                                    },
                                    AwsApiGatewayRestApi: {
                                        type: "structure",
                                        members: {
                                            Id: {},
                                            Name: {},
                                            Description: {},
                                            CreatedDate: {},
                                            Version: {},
                                            BinaryMediaTypes: {
                                                shape: "S4v"
                                            },
                                            MinimumCompressionSize: {
                                                type: "integer"
                                            },
                                            ApiKeySource: {},
                                            EndpointConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Types: {
                                                        shape: "S4v"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsCloudTrailTrail: {
                                        type: "structure",
                                        members: {
                                            CloudWatchLogsLogGroupArn: {},
                                            CloudWatchLogsRoleArn: {},
                                            HasCustomEventSelectors: {
                                                type: "boolean"
                                            },
                                            HomeRegion: {},
                                            IncludeGlobalServiceEvents: {
                                                type: "boolean"
                                            },
                                            IsMultiRegionTrail: {
                                                type: "boolean"
                                            },
                                            IsOrganizationTrail: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            LogFileValidationEnabled: {
                                                type: "boolean"
                                            },
                                            Name: {},
                                            S3BucketName: {},
                                            S3KeyPrefix: {},
                                            SnsTopicArn: {},
                                            SnsTopicName: {},
                                            TrailArn: {}
                                        }
                                    },
                                    AwsSsmPatchCompliance: {
                                        type: "structure",
                                        members: {
                                            Patch: {
                                                type: "structure",
                                                members: {
                                                    ComplianceSummary: {
                                                        type: "structure",
                                                        members: {
                                                            Status: {},
                                                            CompliantCriticalCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantHighCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantMediumCount: {
                                                                type: "integer"
                                                            },
                                                            ExecutionType: {},
                                                            NonCompliantCriticalCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantInformationalCount: {
                                                                type: "integer"
                                                            },
                                                            NonCompliantInformationalCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantUnspecifiedCount: {
                                                                type: "integer"
                                                            },
                                                            NonCompliantLowCount: {
                                                                type: "integer"
                                                            },
                                                            NonCompliantHighCount: {
                                                                type: "integer"
                                                            },
                                                            CompliantLowCount: {
                                                                type: "integer"
                                                            },
                                                            ComplianceType: {},
                                                            PatchBaselineId: {},
                                                            OverallSeverity: {},
                                                            NonCompliantMediumCount: {
                                                                type: "integer"
                                                            },
                                                            NonCompliantUnspecifiedCount: {
                                                                type: "integer"
                                                            },
                                                            PatchGroup: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsCertificateManagerCertificate: {
                                        type: "structure",
                                        members: {
                                            CertificateAuthorityArn: {},
                                            CreatedAt: {},
                                            DomainName: {},
                                            DomainValidationOptions: {
                                                shape: "S9t"
                                            },
                                            ExtendedKeyUsages: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        OId: {}
                                                    }
                                                }
                                            },
                                            FailureReason: {},
                                            ImportedAt: {},
                                            InUseBy: {
                                                shape: "S23"
                                            },
                                            IssuedAt: {},
                                            Issuer: {},
                                            KeyAlgorithm: {},
                                            KeyUsages: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {}
                                                    }
                                                }
                                            },
                                            NotAfter: {},
                                            NotBefore: {},
                                            Options: {
                                                type: "structure",
                                                members: {
                                                    CertificateTransparencyLoggingPreference: {}
                                                }
                                            },
                                            RenewalEligibility: {},
                                            RenewalSummary: {
                                                type: "structure",
                                                members: {
                                                    DomainValidationOptions: {
                                                        shape: "S9t"
                                                    },
                                                    RenewalStatus: {},
                                                    RenewalStatusReason: {},
                                                    UpdatedAt: {}
                                                }
                                            },
                                            Serial: {},
                                            SignatureAlgorithm: {},
                                            Status: {},
                                            Subject: {},
                                            SubjectAlternativeNames: {
                                                shape: "S23"
                                            },
                                            Type: {}
                                        }
                                    },
                                    AwsRedshiftCluster: {
                                        type: "structure",
                                        members: {
                                            AllowVersionUpgrade: {
                                                type: "boolean"
                                            },
                                            AutomatedSnapshotRetentionPeriod: {
                                                type: "integer"
                                            },
                                            AvailabilityZone: {},
                                            ClusterAvailabilityStatus: {},
                                            ClusterCreateTime: {},
                                            ClusterIdentifier: {},
                                            ClusterNodes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        NodeRole: {},
                                                        PrivateIpAddress: {},
                                                        PublicIpAddress: {}
                                                    }
                                                }
                                            },
                                            ClusterParameterGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ClusterParameterStatusList: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    ParameterName: {},
                                                                    ParameterApplyStatus: {},
                                                                    ParameterApplyErrorDescription: {}
                                                                }
                                                            }
                                                        },
                                                        ParameterApplyStatus: {},
                                                        ParameterGroupName: {}
                                                    }
                                                }
                                            },
                                            ClusterPublicKey: {},
                                            ClusterRevisionNumber: {},
                                            ClusterSecurityGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ClusterSecurityGroupName: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            ClusterSnapshotCopyStatus: {
                                                type: "structure",
                                                members: {
                                                    DestinationRegion: {},
                                                    ManualSnapshotRetentionPeriod: {
                                                        type: "integer"
                                                    },
                                                    RetentionPeriod: {
                                                        type: "integer"
                                                    },
                                                    SnapshotCopyGrantName: {}
                                                }
                                            },
                                            ClusterStatus: {},
                                            ClusterSubnetGroupName: {},
                                            ClusterVersion: {},
                                            DBName: {},
                                            DeferredMaintenanceWindows: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DeferMaintenanceEndTime: {},
                                                        DeferMaintenanceIdentifier: {},
                                                        DeferMaintenanceStartTime: {}
                                                    }
                                                }
                                            },
                                            ElasticIpStatus: {
                                                type: "structure",
                                                members: {
                                                    ElasticIp: {},
                                                    Status: {}
                                                }
                                            },
                                            ElasticResizeNumberOfNodeOptions: {},
                                            Encrypted: {
                                                type: "boolean"
                                            },
                                            Endpoint: {
                                                type: "structure",
                                                members: {
                                                    Address: {},
                                                    Port: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            EnhancedVpcRouting: {
                                                type: "boolean"
                                            },
                                            ExpectedNextSnapshotScheduleTime: {},
                                            ExpectedNextSnapshotScheduleTimeStatus: {},
                                            HsmStatus: {
                                                type: "structure",
                                                members: {
                                                    HsmClientCertificateIdentifier: {},
                                                    HsmConfigurationIdentifier: {},
                                                    Status: {}
                                                }
                                            },
                                            IamRoles: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ApplyStatus: {},
                                                        IamRoleArn: {}
                                                    }
                                                }
                                            },
                                            KmsKeyId: {},
                                            MaintenanceTrackName: {},
                                            ManualSnapshotRetentionPeriod: {
                                                type: "integer"
                                            },
                                            MasterUsername: {},
                                            NextMaintenanceWindowStartTime: {},
                                            NodeType: {},
                                            NumberOfNodes: {
                                                type: "integer"
                                            },
                                            PendingActions: {
                                                shape: "S23"
                                            },
                                            PendingModifiedValues: {
                                                type: "structure",
                                                members: {
                                                    AutomatedSnapshotRetentionPeriod: {
                                                        type: "integer"
                                                    },
                                                    ClusterIdentifier: {},
                                                    ClusterType: {},
                                                    ClusterVersion: {},
                                                    EncryptionType: {},
                                                    EnhancedVpcRouting: {
                                                        type: "boolean"
                                                    },
                                                    MaintenanceTrackName: {},
                                                    MasterUserPassword: {},
                                                    NodeType: {},
                                                    NumberOfNodes: {
                                                        type: "integer"
                                                    },
                                                    PubliclyAccessible: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            PreferredMaintenanceWindow: {},
                                            PubliclyAccessible: {
                                                type: "boolean"
                                            },
                                            ResizeInfo: {
                                                type: "structure",
                                                members: {
                                                    AllowCancelResize: {
                                                        type: "boolean"
                                                    },
                                                    ResizeType: {}
                                                }
                                            },
                                            RestoreStatus: {
                                                type: "structure",
                                                members: {
                                                    CurrentRestoreRateInMegaBytesPerSecond: {
                                                        type: "double"
                                                    },
                                                    ElapsedTimeInSeconds: {
                                                        type: "long"
                                                    },
                                                    EstimatedTimeToCompletionInSeconds: {
                                                        type: "long"
                                                    },
                                                    ProgressInMegaBytes: {
                                                        type: "long"
                                                    },
                                                    SnapshotSizeInMegaBytes: {
                                                        type: "long"
                                                    },
                                                    Status: {}
                                                }
                                            },
                                            SnapshotScheduleIdentifier: {},
                                            SnapshotScheduleState: {},
                                            VpcId: {},
                                            VpcSecurityGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Status: {},
                                                        VpcSecurityGroupId: {}
                                                    }
                                                }
                                            },
                                            LoggingStatus: {
                                                type: "structure",
                                                members: {
                                                    BucketName: {},
                                                    LastFailureMessage: {},
                                                    LastFailureTime: {},
                                                    LastSuccessfulDeliveryTime: {},
                                                    LoggingEnabled: {
                                                        type: "boolean"
                                                    },
                                                    S3KeyPrefix: {}
                                                }
                                            }
                                        }
                                    },
                                    AwsElbLoadBalancer: {
                                        type: "structure",
                                        members: {
                                            AvailabilityZones: {
                                                shape: "S23"
                                            },
                                            BackendServerDescriptions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        InstancePort: {
                                                            type: "integer"
                                                        },
                                                        PolicyNames: {
                                                            shape: "S23"
                                                        }
                                                    }
                                                }
                                            },
                                            CanonicalHostedZoneName: {},
                                            CanonicalHostedZoneNameID: {},
                                            CreatedTime: {},
                                            DnsName: {},
                                            HealthCheck: {
                                                type: "structure",
                                                members: {
                                                    HealthyThreshold: {
                                                        type: "integer"
                                                    },
                                                    Interval: {
                                                        type: "integer"
                                                    },
                                                    Target: {},
                                                    Timeout: {
                                                        type: "integer"
                                                    },
                                                    UnhealthyThreshold: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            Instances: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        InstanceId: {}
                                                    }
                                                }
                                            },
                                            ListenerDescriptions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Listener: {
                                                            type: "structure",
                                                            members: {
                                                                InstancePort: {
                                                                    type: "integer"
                                                                },
                                                                InstanceProtocol: {},
                                                                LoadBalancerPort: {
                                                                    type: "integer"
                                                                },
                                                                Protocol: {},
                                                                SslCertificateId: {}
                                                            }
                                                        },
                                                        PolicyNames: {
                                                            shape: "S23"
                                                        }
                                                    }
                                                }
                                            },
                                            LoadBalancerAttributes: {
                                                type: "structure",
                                                members: {
                                                    AccessLog: {
                                                        type: "structure",
                                                        members: {
                                                            EmitInterval: {
                                                                type: "integer"
                                                            },
                                                            Enabled: {
                                                                type: "boolean"
                                                            },
                                                            S3BucketName: {},
                                                            S3BucketPrefix: {}
                                                        }
                                                    },
                                                    ConnectionDraining: {
                                                        type: "structure",
                                                        members: {
                                                            Enabled: {
                                                                type: "boolean"
                                                            },
                                                            Timeout: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    ConnectionSettings: {
                                                        type: "structure",
                                                        members: {
                                                            IdleTimeout: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    CrossZoneLoadBalancing: {
                                                        type: "structure",
                                                        members: {
                                                            Enabled: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    AdditionalAttributes: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Key: {},
                                                                Value: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            LoadBalancerName: {},
                                            Policies: {
                                                type: "structure",
                                                members: {
                                                    AppCookieStickinessPolicies: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                CookieName: {},
                                                                PolicyName: {}
                                                            }
                                                        }
                                                    },
                                                    LbCookieStickinessPolicies: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                CookieExpirationPeriod: {
                                                                    type: "long"
                                                                },
                                                                PolicyName: {}
                                                            }
                                                        }
                                                    },
                                                    OtherPolicies: {
                                                        shape: "S23"
                                                    }
                                                }
                                            },
                                            Scheme: {},
                                            SecurityGroups: {
                                                shape: "S23"
                                            },
                                            SourceSecurityGroup: {
                                                type: "structure",
                                                members: {
                                                    GroupName: {},
                                                    OwnerAlias: {}
                                                }
                                            },
                                            Subnets: {
                                                shape: "S23"
                                            },
                                            VpcId: {}
                                        }
                                    },
                                    AwsIamGroup: {
                                        type: "structure",
                                        members: {
                                            AttachedManagedPolicies: {
                                                shape: "S8k"
                                            },
                                            CreateDate: {},
                                            GroupId: {},
                                            GroupName: {},
                                            GroupPolicyList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PolicyName: {}
                                                    }
                                                }
                                            },
                                            Path: {}
                                        }
                                    },
                                    AwsIamRole: {
                                        type: "structure",
                                        members: {
                                            AssumeRolePolicyDocument: {},
                                            AttachedManagedPolicies: {
                                                shape: "S8k"
                                            },
                                            CreateDate: {},
                                            InstanceProfileList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Arn: {},
                                                        CreateDate: {},
                                                        InstanceProfileId: {},
                                                        InstanceProfileName: {},
                                                        Path: {},
                                                        Roles: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Arn: {},
                                                                    AssumeRolePolicyDocument: {},
                                                                    CreateDate: {},
                                                                    Path: {},
                                                                    RoleId: {},
                                                                    RoleName: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            PermissionsBoundary: {
                                                shape: "S8m"
                                            },
                                            RoleId: {},
                                            RoleName: {},
                                            RolePolicyList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PolicyName: {}
                                                    }
                                                }
                                            },
                                            MaxSessionDuration: {
                                                type: "integer"
                                            },
                                            Path: {}
                                        }
                                    },
                                    AwsKmsKey: {
                                        type: "structure",
                                        members: {
                                            AWSAccountId: {},
                                            CreationDate: {
                                                type: "double"
                                            },
                                            KeyId: {},
                                            KeyManager: {},
                                            KeyState: {},
                                            Origin: {},
                                            Description: {},
                                            KeyRotationStatus: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    AwsLambdaFunction: {
                                        type: "structure",
                                        members: {
                                            Code: {
                                                type: "structure",
                                                members: {
                                                    S3Bucket: {},
                                                    S3Key: {},
                                                    S3ObjectVersion: {},
                                                    ZipFile: {}
                                                }
                                            },
                                            CodeSha256: {},
                                            DeadLetterConfig: {
                                                type: "structure",
                                                members: {
                                                    TargetArn: {}
                                                }
                                            },
                                            Environment: {
                                                type: "structure",
                                                members: {
                                                    Variables: {
                                                        shape: "S1k"
                                                    },
                                                    Error: {
                                                        type: "structure",
                                                        members: {
                                                            ErrorCode: {},
                                                            Message: {}
                                                        }
                                                    }
                                                }
                                            },
                                            FunctionName: {},
                                            Handler: {},
                                            KmsKeyArn: {},
                                            LastModified: {},
                                            Layers: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Arn: {},
                                                        CodeSize: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            },
                                            MasterArn: {},
                                            MemorySize: {
                                                type: "integer"
                                            },
                                            RevisionId: {},
                                            Role: {},
                                            Runtime: {},
                                            Timeout: {
                                                type: "integer"
                                            },
                                            TracingConfig: {
                                                type: "structure",
                                                members: {
                                                    Mode: {}
                                                }
                                            },
                                            VpcConfig: {
                                                type: "structure",
                                                members: {
                                                    SecurityGroupIds: {
                                                        shape: "S4v"
                                                    },
                                                    SubnetIds: {
                                                        shape: "S4v"
                                                    },
                                                    VpcId: {}
                                                }
                                            },
                                            Version: {},
                                            Architectures: {
                                                shape: "S4v"
                                            },
                                            PackageType: {}
                                        }
                                    },
                                    AwsLambdaLayerVersion: {
                                        type: "structure",
                                        members: {
                                            Version: {
                                                type: "long"
                                            },
                                            CompatibleRuntimes: {
                                                shape: "S4v"
                                            },
                                            CreatedDate: {}
                                        }
                                    },
                                    AwsRdsDbInstance: {
                                        type: "structure",
                                        members: {
                                            AssociatedRoles: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        RoleArn: {},
                                                        FeatureName: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            CACertificateIdentifier: {},
                                            DBClusterIdentifier: {},
                                            DBInstanceIdentifier: {},
                                            DBInstanceClass: {},
                                            DbInstancePort: {
                                                type: "integer"
                                            },
                                            DbiResourceId: {},
                                            DBName: {},
                                            DeletionProtection: {
                                                type: "boolean"
                                            },
                                            Endpoint: {
                                                shape: "Sc1"
                                            },
                                            Engine: {},
                                            EngineVersion: {},
                                            IAMDatabaseAuthenticationEnabled: {
                                                type: "boolean"
                                            },
                                            InstanceCreateTime: {},
                                            KmsKeyId: {},
                                            PubliclyAccessible: {
                                                type: "boolean"
                                            },
                                            StorageEncrypted: {
                                                type: "boolean"
                                            },
                                            TdeCredentialArn: {},
                                            VpcSecurityGroups: {
                                                shape: "Sc2"
                                            },
                                            MultiAz: {
                                                type: "boolean"
                                            },
                                            EnhancedMonitoringResourceArn: {},
                                            DbInstanceStatus: {},
                                            MasterUsername: {},
                                            AllocatedStorage: {
                                                type: "integer"
                                            },
                                            PreferredBackupWindow: {},
                                            BackupRetentionPeriod: {
                                                type: "integer"
                                            },
                                            DbSecurityGroups: {
                                                shape: "S23"
                                            },
                                            DbParameterGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DbParameterGroupName: {},
                                                        ParameterApplyStatus: {}
                                                    }
                                                }
                                            },
                                            AvailabilityZone: {},
                                            DbSubnetGroup: {
                                                type: "structure",
                                                members: {
                                                    DbSubnetGroupName: {},
                                                    DbSubnetGroupDescription: {},
                                                    VpcId: {},
                                                    SubnetGroupStatus: {},
                                                    Subnets: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                SubnetIdentifier: {},
                                                                SubnetAvailabilityZone: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Name: {}
                                                                    }
                                                                },
                                                                SubnetStatus: {}
                                                            }
                                                        }
                                                    },
                                                    DbSubnetGroupArn: {}
                                                }
                                            },
                                            PreferredMaintenanceWindow: {},
                                            PendingModifiedValues: {
                                                type: "structure",
                                                members: {
                                                    DbInstanceClass: {},
                                                    AllocatedStorage: {
                                                        type: "integer"
                                                    },
                                                    MasterUserPassword: {},
                                                    Port: {
                                                        type: "integer"
                                                    },
                                                    BackupRetentionPeriod: {
                                                        type: "integer"
                                                    },
                                                    MultiAZ: {
                                                        type: "boolean"
                                                    },
                                                    EngineVersion: {},
                                                    LicenseModel: {},
                                                    Iops: {
                                                        type: "integer"
                                                    },
                                                    DbInstanceIdentifier: {},
                                                    StorageType: {},
                                                    CaCertificateIdentifier: {},
                                                    DbSubnetGroupName: {},
                                                    PendingCloudWatchLogsExports: {
                                                        type: "structure",
                                                        members: {
                                                            LogTypesToEnable: {
                                                                shape: "S23"
                                                            },
                                                            LogTypesToDisable: {
                                                                shape: "S23"
                                                            }
                                                        }
                                                    },
                                                    ProcessorFeatures: {
                                                        shape: "Scc"
                                                    }
                                                }
                                            },
                                            LatestRestorableTime: {},
                                            AutoMinorVersionUpgrade: {
                                                type: "boolean"
                                            },
                                            ReadReplicaSourceDBInstanceIdentifier: {},
                                            ReadReplicaDBInstanceIdentifiers: {
                                                shape: "S23"
                                            },
                                            ReadReplicaDBClusterIdentifiers: {
                                                shape: "S23"
                                            },
                                            LicenseModel: {},
                                            Iops: {
                                                type: "integer"
                                            },
                                            OptionGroupMemberships: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        OptionGroupName: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            CharacterSetName: {},
                                            SecondaryAvailabilityZone: {},
                                            StatusInfos: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        StatusType: {},
                                                        Normal: {
                                                            type: "boolean"
                                                        },
                                                        Status: {},
                                                        Message: {}
                                                    }
                                                }
                                            },
                                            StorageType: {},
                                            DomainMemberships: {
                                                shape: "Sci"
                                            },
                                            CopyTagsToSnapshot: {
                                                type: "boolean"
                                            },
                                            MonitoringInterval: {
                                                type: "integer"
                                            },
                                            MonitoringRoleArn: {},
                                            PromotionTier: {
                                                type: "integer"
                                            },
                                            Timezone: {},
                                            PerformanceInsightsEnabled: {
                                                type: "boolean"
                                            },
                                            PerformanceInsightsKmsKeyId: {},
                                            PerformanceInsightsRetentionPeriod: {
                                                type: "integer"
                                            },
                                            EnabledCloudWatchLogsExports: {
                                                shape: "S23"
                                            },
                                            ProcessorFeatures: {
                                                shape: "Scc"
                                            },
                                            ListenerEndpoint: {
                                                shape: "Sc1"
                                            },
                                            MaxAllocatedStorage: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    AwsSnsTopic: {
                                        type: "structure",
                                        members: {
                                            KmsMasterKeyId: {},
                                            Subscription: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Endpoint: {},
                                                        Protocol: {}
                                                    }
                                                }
                                            },
                                            TopicName: {},
                                            Owner: {},
                                            SqsSuccessFeedbackRoleArn: {},
                                            SqsFailureFeedbackRoleArn: {},
                                            ApplicationSuccessFeedbackRoleArn: {},
                                            FirehoseSuccessFeedbackRoleArn: {},
                                            FirehoseFailureFeedbackRoleArn: {},
                                            HttpSuccessFeedbackRoleArn: {},
                                            HttpFailureFeedbackRoleArn: {}
                                        }
                                    },
                                    AwsSqsQueue: {
                                        type: "structure",
                                        members: {
                                            KmsDataKeyReusePeriodSeconds: {
                                                type: "integer"
                                            },
                                            KmsMasterKeyId: {},
                                            QueueName: {},
                                            DeadLetterTargetArn: {}
                                        }
                                    },
                                    AwsWafWebAcl: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            DefaultAction: {},
                                            Rules: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Action: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {}
                                                            }
                                                        },
                                                        ExcludedRules: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    RuleId: {}
                                                                }
                                                            }
                                                        },
                                                        OverrideAction: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {}
                                                            }
                                                        },
                                                        Priority: {
                                                            type: "integer"
                                                        },
                                                        RuleId: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            WebAclId: {}
                                        }
                                    },
                                    AwsRdsDbSnapshot: {
                                        type: "structure",
                                        members: {
                                            DbSnapshotIdentifier: {},
                                            DbInstanceIdentifier: {},
                                            SnapshotCreateTime: {},
                                            Engine: {},
                                            AllocatedStorage: {
                                                type: "integer"
                                            },
                                            Status: {},
                                            Port: {
                                                type: "integer"
                                            },
                                            AvailabilityZone: {},
                                            VpcId: {},
                                            InstanceCreateTime: {},
                                            MasterUsername: {},
                                            EngineVersion: {},
                                            LicenseModel: {},
                                            SnapshotType: {},
                                            Iops: {
                                                type: "integer"
                                            },
                                            OptionGroupName: {},
                                            PercentProgress: {
                                                type: "integer"
                                            },
                                            SourceRegion: {},
                                            SourceDbSnapshotIdentifier: {},
                                            StorageType: {},
                                            TdeCredentialArn: {},
                                            Encrypted: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            Timezone: {},
                                            IamDatabaseAuthenticationEnabled: {
                                                type: "boolean"
                                            },
                                            ProcessorFeatures: {
                                                shape: "Scc"
                                            },
                                            DbiResourceId: {}
                                        }
                                    },
                                    AwsRdsDbClusterSnapshot: {
                                        type: "structure",
                                        members: {
                                            AvailabilityZones: {
                                                shape: "S23"
                                            },
                                            SnapshotCreateTime: {},
                                            Engine: {},
                                            AllocatedStorage: {
                                                type: "integer"
                                            },
                                            Status: {},
                                            Port: {
                                                type: "integer"
                                            },
                                            VpcId: {},
                                            ClusterCreateTime: {},
                                            MasterUsername: {},
                                            EngineVersion: {},
                                            LicenseModel: {},
                                            SnapshotType: {},
                                            PercentProgress: {
                                                type: "integer"
                                            },
                                            StorageEncrypted: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            DbClusterIdentifier: {},
                                            DbClusterSnapshotIdentifier: {},
                                            IamDatabaseAuthenticationEnabled: {
                                                type: "boolean"
                                            },
                                            DbClusterSnapshotAttributes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AttributeName: {},
                                                        AttributeValues: {
                                                            shape: "S4v"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsRdsDbCluster: {
                                        type: "structure",
                                        members: {
                                            AllocatedStorage: {
                                                type: "integer"
                                            },
                                            AvailabilityZones: {
                                                shape: "S23"
                                            },
                                            BackupRetentionPeriod: {
                                                type: "integer"
                                            },
                                            DatabaseName: {},
                                            Status: {},
                                            Endpoint: {},
                                            ReaderEndpoint: {},
                                            CustomEndpoints: {
                                                shape: "S23"
                                            },
                                            MultiAz: {
                                                type: "boolean"
                                            },
                                            Engine: {},
                                            EngineVersion: {},
                                            Port: {
                                                type: "integer"
                                            },
                                            MasterUsername: {},
                                            PreferredBackupWindow: {},
                                            PreferredMaintenanceWindow: {},
                                            ReadReplicaIdentifiers: {
                                                shape: "S23"
                                            },
                                            VpcSecurityGroups: {
                                                shape: "Sc2"
                                            },
                                            HostedZoneId: {},
                                            StorageEncrypted: {
                                                type: "boolean"
                                            },
                                            KmsKeyId: {},
                                            DbClusterResourceId: {},
                                            AssociatedRoles: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        RoleArn: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            ClusterCreateTime: {},
                                            EnabledCloudWatchLogsExports: {
                                                shape: "S23"
                                            },
                                            EngineMode: {},
                                            DeletionProtection: {
                                                type: "boolean"
                                            },
                                            HttpEndpointEnabled: {
                                                type: "boolean"
                                            },
                                            ActivityStreamStatus: {},
                                            CopyTagsToSnapshot: {
                                                type: "boolean"
                                            },
                                            CrossAccountClone: {
                                                type: "boolean"
                                            },
                                            DomainMemberships: {
                                                shape: "Sci"
                                            },
                                            DbClusterParameterGroup: {},
                                            DbSubnetGroup: {},
                                            DbClusterOptionGroupMemberships: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DbClusterOptionGroupName: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            DbClusterIdentifier: {},
                                            DbClusterMembers: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        IsClusterWriter: {
                                                            type: "boolean"
                                                        },
                                                        PromotionTier: {
                                                            type: "integer"
                                                        },
                                                        DbInstanceIdentifier: {},
                                                        DbClusterParameterGroupStatus: {}
                                                    }
                                                }
                                            },
                                            IamDatabaseAuthenticationEnabled: {
                                                type: "boolean"
                                            },
                                            AutoMinorVersionUpgrade: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    AwsEcsCluster: {
                                        type: "structure",
                                        members: {
                                            ClusterArn: {},
                                            ActiveServicesCount: {
                                                type: "integer"
                                            },
                                            CapacityProviders: {
                                                shape: "S4v"
                                            },
                                            ClusterSettings: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Value: {}
                                                    }
                                                }
                                            },
                                            Configuration: {
                                                type: "structure",
                                                members: {
                                                    ExecuteCommandConfiguration: {
                                                        type: "structure",
                                                        members: {
                                                            KmsKeyId: {},
                                                            LogConfiguration: {
                                                                type: "structure",
                                                                members: {
                                                                    CloudWatchEncryptionEnabled: {
                                                                        type: "boolean"
                                                                    },
                                                                    CloudWatchLogGroupName: {},
                                                                    S3BucketName: {},
                                                                    S3EncryptionEnabled: {
                                                                        type: "boolean"
                                                                    },
                                                                    S3KeyPrefix: {}
                                                                }
                                                            },
                                                            Logging: {}
                                                        }
                                                    }
                                                }
                                            },
                                            DefaultCapacityProviderStrategy: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Base: {
                                                            type: "integer"
                                                        },
                                                        CapacityProvider: {},
                                                        Weight: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            },
                                            ClusterName: {},
                                            RegisteredContainerInstancesCount: {
                                                type: "integer"
                                            },
                                            RunningTasksCount: {
                                                type: "integer"
                                            },
                                            Status: {}
                                        }
                                    },
                                    AwsEcsContainer: {
                                        shape: "Sde"
                                    },
                                    AwsEcsTaskDefinition: {
                                        type: "structure",
                                        members: {
                                            ContainerDefinitions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Command: {
                                                            shape: "S4v"
                                                        },
                                                        Cpu: {
                                                            type: "integer"
                                                        },
                                                        DependsOn: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Condition: {},
                                                                    ContainerName: {}
                                                                }
                                                            }
                                                        },
                                                        DisableNetworking: {
                                                            type: "boolean"
                                                        },
                                                        DnsSearchDomains: {
                                                            shape: "S4v"
                                                        },
                                                        DnsServers: {
                                                            shape: "S4v"
                                                        },
                                                        DockerLabels: {
                                                            shape: "S1k"
                                                        },
                                                        DockerSecurityOptions: {
                                                            shape: "S4v"
                                                        },
                                                        EntryPoint: {
                                                            shape: "S4v"
                                                        },
                                                        Environment: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    Value: {}
                                                                }
                                                            }
                                                        },
                                                        EnvironmentFiles: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Type: {},
                                                                    Value: {}
                                                                }
                                                            }
                                                        },
                                                        Essential: {
                                                            type: "boolean"
                                                        },
                                                        ExtraHosts: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Hostname: {},
                                                                    IpAddress: {}
                                                                }
                                                            }
                                                        },
                                                        FirelensConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                Options: {
                                                                    shape: "S1k"
                                                                },
                                                                Type: {}
                                                            }
                                                        },
                                                        HealthCheck: {
                                                            type: "structure",
                                                            members: {
                                                                Command: {
                                                                    shape: "S4v"
                                                                },
                                                                Interval: {
                                                                    type: "integer"
                                                                },
                                                                Retries: {
                                                                    type: "integer"
                                                                },
                                                                StartPeriod: {
                                                                    type: "integer"
                                                                },
                                                                Timeout: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        Hostname: {},
                                                        Image: {},
                                                        Interactive: {
                                                            type: "boolean"
                                                        },
                                                        Links: {
                                                            shape: "S4v"
                                                        },
                                                        LinuxParameters: {
                                                            type: "structure",
                                                            members: {
                                                                Capabilities: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Add: {
                                                                            shape: "S4v"
                                                                        },
                                                                        Drop: {
                                                                            shape: "S4v"
                                                                        }
                                                                    }
                                                                },
                                                                Devices: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            ContainerPath: {},
                                                                            HostPath: {},
                                                                            Permissions: {
                                                                                shape: "S4v"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                InitProcessEnabled: {
                                                                    type: "boolean"
                                                                },
                                                                MaxSwap: {
                                                                    type: "integer"
                                                                },
                                                                SharedMemorySize: {
                                                                    type: "integer"
                                                                },
                                                                Swappiness: {
                                                                    type: "integer"
                                                                },
                                                                Tmpfs: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            ContainerPath: {},
                                                                            MountOptions: {
                                                                                shape: "S4v"
                                                                            },
                                                                            Size: {
                                                                                type: "integer"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        LogConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                LogDriver: {},
                                                                Options: {
                                                                    shape: "S1k"
                                                                },
                                                                SecretOptions: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Name: {},
                                                                            ValueFrom: {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Memory: {
                                                            type: "integer"
                                                        },
                                                        MemoryReservation: {
                                                            type: "integer"
                                                        },
                                                        MountPoints: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    ContainerPath: {},
                                                                    ReadOnly: {
                                                                        type: "boolean"
                                                                    },
                                                                    SourceVolume: {}
                                                                }
                                                            }
                                                        },
                                                        Name: {},
                                                        PortMappings: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    ContainerPort: {
                                                                        type: "integer"
                                                                    },
                                                                    HostPort: {
                                                                        type: "integer"
                                                                    },
                                                                    Protocol: {}
                                                                }
                                                            }
                                                        },
                                                        Privileged: {
                                                            type: "boolean"
                                                        },
                                                        PseudoTerminal: {
                                                            type: "boolean"
                                                        },
                                                        ReadonlyRootFilesystem: {
                                                            type: "boolean"
                                                        },
                                                        RepositoryCredentials: {
                                                            type: "structure",
                                                            members: {
                                                                CredentialsParameter: {}
                                                            }
                                                        },
                                                        ResourceRequirements: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Type: {},
                                                                    Value: {}
                                                                }
                                                            }
                                                        },
                                                        Secrets: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    ValueFrom: {}
                                                                }
                                                            }
                                                        },
                                                        StartTimeout: {
                                                            type: "integer"
                                                        },
                                                        StopTimeout: {
                                                            type: "integer"
                                                        },
                                                        SystemControls: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Namespace: {},
                                                                    Value: {}
                                                                }
                                                            }
                                                        },
                                                        Ulimits: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    HardLimit: {
                                                                        type: "integer"
                                                                    },
                                                                    Name: {},
                                                                    SoftLimit: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        User: {},
                                                        VolumesFrom: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    ReadOnly: {
                                                                        type: "boolean"
                                                                    },
                                                                    SourceContainer: {}
                                                                }
                                                            }
                                                        },
                                                        WorkingDirectory: {}
                                                    }
                                                }
                                            },
                                            Cpu: {},
                                            ExecutionRoleArn: {},
                                            Family: {},
                                            InferenceAccelerators: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DeviceName: {},
                                                        DeviceType: {}
                                                    }
                                                }
                                            },
                                            IpcMode: {},
                                            Memory: {},
                                            NetworkMode: {},
                                            PidMode: {},
                                            PlacementConstraints: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Expression: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            ProxyConfiguration: {
                                                type: "structure",
                                                members: {
                                                    ContainerName: {},
                                                    ProxyConfigurationProperties: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Name: {},
                                                                Value: {}
                                                            }
                                                        }
                                                    },
                                                    Type: {}
                                                }
                                            },
                                            RequiresCompatibilities: {
                                                shape: "S4v"
                                            },
                                            TaskRoleArn: {},
                                            Volumes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DockerVolumeConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                Autoprovision: {
                                                                    type: "boolean"
                                                                },
                                                                Driver: {},
                                                                DriverOpts: {
                                                                    shape: "S1k"
                                                                },
                                                                Labels: {
                                                                    shape: "S1k"
                                                                },
                                                                Scope: {}
                                                            }
                                                        },
                                                        EfsVolumeConfiguration: {
                                                            type: "structure",
                                                            members: {
                                                                AuthorizationConfig: {
                                                                    type: "structure",
                                                                    members: {
                                                                        AccessPointId: {},
                                                                        Iam: {}
                                                                    }
                                                                },
                                                                FilesystemId: {},
                                                                RootDirectory: {},
                                                                TransitEncryption: {},
                                                                TransitEncryptionPort: {
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        Host: {
                                                            type: "structure",
                                                            members: {
                                                                SourcePath: {}
                                                            }
                                                        },
                                                        Name: {}
                                                    }
                                                }
                                            },
                                            Status: {}
                                        }
                                    },
                                    Container: {
                                        type: "structure",
                                        members: {
                                            ContainerRuntime: {},
                                            Name: {},
                                            ImageId: {},
                                            ImageName: {},
                                            LaunchedAt: {},
                                            VolumeMounts: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        MountPath: {}
                                                    }
                                                }
                                            },
                                            Privileged: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    Other: {
                                        shape: "S1k"
                                    },
                                    AwsRdsEventSubscription: {
                                        type: "structure",
                                        members: {
                                            CustSubscriptionId: {},
                                            CustomerAwsId: {},
                                            Enabled: {
                                                type: "boolean"
                                            },
                                            EventCategoriesList: {
                                                shape: "S4v"
                                            },
                                            EventSubscriptionArn: {},
                                            SnsTopicArn: {},
                                            SourceIdsList: {
                                                shape: "S4v"
                                            },
                                            SourceType: {},
                                            Status: {},
                                            SubscriptionCreationTime: {}
                                        }
                                    },
                                    AwsEcsService: {
                                        type: "structure",
                                        members: {
                                            CapacityProviderStrategy: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Base: {
                                                            type: "integer"
                                                        },
                                                        CapacityProvider: {},
                                                        Weight: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            },
                                            Cluster: {},
                                            DeploymentConfiguration: {
                                                type: "structure",
                                                members: {
                                                    DeploymentCircuitBreaker: {
                                                        type: "structure",
                                                        members: {
                                                            Enable: {
                                                                type: "boolean"
                                                            },
                                                            Rollback: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    MaximumPercent: {
                                                        type: "integer"
                                                    },
                                                    MinimumHealthyPercent: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            DeploymentController: {
                                                type: "structure",
                                                members: {
                                                    Type: {}
                                                }
                                            },
                                            DesiredCount: {
                                                type: "integer"
                                            },
                                            EnableEcsManagedTags: {
                                                type: "boolean"
                                            },
                                            EnableExecuteCommand: {
                                                type: "boolean"
                                            },
                                            HealthCheckGracePeriodSeconds: {
                                                type: "integer"
                                            },
                                            LaunchType: {},
                                            LoadBalancers: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ContainerName: {},
                                                        ContainerPort: {
                                                            type: "integer"
                                                        },
                                                        LoadBalancerName: {},
                                                        TargetGroupArn: {}
                                                    }
                                                }
                                            },
                                            Name: {},
                                            NetworkConfiguration: {
                                                type: "structure",
                                                members: {
                                                    AwsVpcConfiguration: {
                                                        type: "structure",
                                                        members: {
                                                            AssignPublicIp: {},
                                                            SecurityGroups: {
                                                                shape: "S4v"
                                                            },
                                                            Subnets: {
                                                                shape: "S4v"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            PlacementConstraints: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Expression: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            PlacementStrategies: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Field: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            PlatformVersion: {},
                                            PropagateTags: {},
                                            Role: {},
                                            SchedulingStrategy: {},
                                            ServiceArn: {},
                                            ServiceName: {},
                                            ServiceRegistries: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ContainerName: {},
                                                        ContainerPort: {
                                                            type: "integer"
                                                        },
                                                        Port: {
                                                            type: "integer"
                                                        },
                                                        RegistryArn: {}
                                                    }
                                                }
                                            },
                                            TaskDefinition: {}
                                        }
                                    },
                                    AwsAutoScalingLaunchConfiguration: {
                                        type: "structure",
                                        members: {
                                            AssociatePublicIpAddress: {
                                                type: "boolean"
                                            },
                                            BlockDeviceMappings: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DeviceName: {},
                                                        Ebs: {
                                                            type: "structure",
                                                            members: {
                                                                DeleteOnTermination: {
                                                                    type: "boolean"
                                                                },
                                                                Encrypted: {
                                                                    type: "boolean"
                                                                },
                                                                Iops: {
                                                                    type: "integer"
                                                                },
                                                                SnapshotId: {},
                                                                VolumeSize: {
                                                                    type: "integer"
                                                                },
                                                                VolumeType: {}
                                                            }
                                                        },
                                                        NoDevice: {
                                                            type: "boolean"
                                                        },
                                                        VirtualName: {}
                                                    }
                                                }
                                            },
                                            ClassicLinkVpcId: {},
                                            ClassicLinkVpcSecurityGroups: {
                                                shape: "S4v"
                                            },
                                            CreatedTime: {},
                                            EbsOptimized: {
                                                type: "boolean"
                                            },
                                            IamInstanceProfile: {},
                                            ImageId: {},
                                            InstanceMonitoring: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            InstanceType: {},
                                            KernelId: {},
                                            KeyName: {},
                                            LaunchConfigurationName: {},
                                            PlacementTenancy: {},
                                            RamdiskId: {},
                                            SecurityGroups: {
                                                shape: "S4v"
                                            },
                                            SpotPrice: {},
                                            UserData: {},
                                            MetadataOptions: {
                                                type: "structure",
                                                members: {
                                                    HttpEndpoint: {},
                                                    HttpPutResponseHopLimit: {
                                                        type: "integer"
                                                    },
                                                    HttpTokens: {}
                                                }
                                            }
                                        }
                                    },
                                    AwsEc2VpnConnection: {
                                        type: "structure",
                                        members: {
                                            VpnConnectionId: {},
                                            State: {},
                                            CustomerGatewayId: {},
                                            CustomerGatewayConfiguration: {},
                                            Type: {},
                                            VpnGatewayId: {},
                                            Category: {},
                                            VgwTelemetry: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AcceptedRouteCount: {
                                                            type: "integer"
                                                        },
                                                        CertificateArn: {},
                                                        LastStatusChange: {},
                                                        OutsideIpAddress: {},
                                                        Status: {},
                                                        StatusMessage: {}
                                                    }
                                                }
                                            },
                                            Options: {
                                                type: "structure",
                                                members: {
                                                    StaticRoutesOnly: {
                                                        type: "boolean"
                                                    },
                                                    TunnelOptions: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                DpdTimeoutSeconds: {
                                                                    type: "integer"
                                                                },
                                                                IkeVersions: {
                                                                    shape: "S4v"
                                                                },
                                                                OutsideIpAddress: {},
                                                                Phase1DhGroupNumbers: {
                                                                    shape: "S2e"
                                                                },
                                                                Phase1EncryptionAlgorithms: {
                                                                    shape: "S4v"
                                                                },
                                                                Phase1IntegrityAlgorithms: {
                                                                    shape: "S4v"
                                                                },
                                                                Phase1LifetimeSeconds: {
                                                                    type: "integer"
                                                                },
                                                                Phase2DhGroupNumbers: {
                                                                    shape: "S2e"
                                                                },
                                                                Phase2EncryptionAlgorithms: {
                                                                    shape: "S4v"
                                                                },
                                                                Phase2IntegrityAlgorithms: {
                                                                    shape: "S4v"
                                                                },
                                                                Phase2LifetimeSeconds: {
                                                                    type: "integer"
                                                                },
                                                                PreSharedKey: {},
                                                                RekeyFuzzPercentage: {
                                                                    type: "integer"
                                                                },
                                                                RekeyMarginTimeSeconds: {
                                                                    type: "integer"
                                                                },
                                                                ReplayWindowSize: {
                                                                    type: "integer"
                                                                },
                                                                TunnelInsideCidr: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            Routes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DestinationCidrBlock: {},
                                                        State: {}
                                                    }
                                                }
                                            },
                                            TransitGatewayId: {}
                                        }
                                    },
                                    AwsEcrContainerImage: {
                                        type: "structure",
                                        members: {
                                            RegistryId: {},
                                            RepositoryName: {},
                                            Architecture: {},
                                            ImageDigest: {},
                                            ImageTags: {
                                                shape: "S4v"
                                            },
                                            ImagePublishedAt: {}
                                        }
                                    },
                                    AwsOpenSearchServiceDomain: {
                                        type: "structure",
                                        members: {
                                            Arn: {},
                                            AccessPolicies: {},
                                            DomainName: {},
                                            Id: {},
                                            DomainEndpoint: {},
                                            EngineVersion: {},
                                            EncryptionAtRestOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    },
                                                    KmsKeyId: {}
                                                }
                                            },
                                            NodeToNodeEncryptionOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            ServiceSoftwareOptions: {
                                                type: "structure",
                                                members: {
                                                    AutomatedUpdateDate: {},
                                                    Cancellable: {
                                                        type: "boolean"
                                                    },
                                                    CurrentVersion: {},
                                                    Description: {},
                                                    NewVersion: {},
                                                    UpdateAvailable: {
                                                        type: "boolean"
                                                    },
                                                    UpdateStatus: {},
                                                    OptionalDeployment: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            ClusterConfig: {
                                                type: "structure",
                                                members: {
                                                    InstanceCount: {
                                                        type: "integer"
                                                    },
                                                    WarmEnabled: {
                                                        type: "boolean"
                                                    },
                                                    WarmCount: {
                                                        type: "integer"
                                                    },
                                                    DedicatedMasterEnabled: {
                                                        type: "boolean"
                                                    },
                                                    ZoneAwarenessConfig: {
                                                        type: "structure",
                                                        members: {
                                                            AvailabilityZoneCount: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    DedicatedMasterCount: {
                                                        type: "integer"
                                                    },
                                                    InstanceType: {},
                                                    WarmType: {},
                                                    ZoneAwarenessEnabled: {
                                                        type: "boolean"
                                                    },
                                                    DedicatedMasterType: {}
                                                }
                                            },
                                            DomainEndpointOptions: {
                                                type: "structure",
                                                members: {
                                                    CustomEndpointCertificateArn: {},
                                                    CustomEndpointEnabled: {
                                                        type: "boolean"
                                                    },
                                                    EnforceHTTPS: {
                                                        type: "boolean"
                                                    },
                                                    CustomEndpoint: {},
                                                    TLSSecurityPolicy: {}
                                                }
                                            },
                                            VpcOptions: {
                                                type: "structure",
                                                members: {
                                                    SecurityGroupIds: {
                                                        shape: "S4v"
                                                    },
                                                    SubnetIds: {
                                                        shape: "S4v"
                                                    }
                                                }
                                            },
                                            LogPublishingOptions: {
                                                type: "structure",
                                                members: {
                                                    IndexSlowLogs: {
                                                        shape: "Sg3"
                                                    },
                                                    SearchSlowLogs: {
                                                        shape: "Sg3"
                                                    },
                                                    AuditLogs: {
                                                        shape: "Sg3"
                                                    }
                                                }
                                            },
                                            DomainEndpoints: {
                                                shape: "S1k"
                                            },
                                            AdvancedSecurityOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    },
                                                    InternalUserDatabaseEnabled: {
                                                        type: "boolean"
                                                    },
                                                    MasterUserOptions: {
                                                        type: "structure",
                                                        members: {
                                                            MasterUserArn: {},
                                                            MasterUserName: {},
                                                            MasterUserPassword: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsEc2VpcEndpointService: {
                                        type: "structure",
                                        members: {
                                            AcceptanceRequired: {
                                                type: "boolean"
                                            },
                                            AvailabilityZones: {
                                                shape: "S4v"
                                            },
                                            BaseEndpointDnsNames: {
                                                shape: "S4v"
                                            },
                                            ManagesVpcEndpoints: {
                                                type: "boolean"
                                            },
                                            GatewayLoadBalancerArns: {
                                                shape: "S4v"
                                            },
                                            NetworkLoadBalancerArns: {
                                                shape: "S4v"
                                            },
                                            PrivateDnsName: {},
                                            ServiceId: {},
                                            ServiceName: {},
                                            ServiceState: {},
                                            ServiceType: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        ServiceType: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsXrayEncryptionConfig: {
                                        type: "structure",
                                        members: {
                                            KeyId: {},
                                            Status: {},
                                            Type: {}
                                        }
                                    },
                                    AwsWafRateBasedRule: {
                                        type: "structure",
                                        members: {
                                            MetricName: {},
                                            Name: {},
                                            RateKey: {},
                                            RateLimit: {
                                                type: "long"
                                            },
                                            RuleId: {},
                                            MatchPredicates: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DataId: {},
                                                        Negated: {
                                                            type: "boolean"
                                                        },
                                                        Type: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsWafRegionalRateBasedRule: {
                                        type: "structure",
                                        members: {
                                            MetricName: {},
                                            Name: {},
                                            RateKey: {},
                                            RateLimit: {
                                                type: "long"
                                            },
                                            RuleId: {},
                                            MatchPredicates: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DataId: {},
                                                        Negated: {
                                                            type: "boolean"
                                                        },
                                                        Type: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsEcrRepository: {
                                        type: "structure",
                                        members: {
                                            Arn: {},
                                            ImageScanningConfiguration: {
                                                type: "structure",
                                                members: {
                                                    ScanOnPush: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            ImageTagMutability: {},
                                            LifecyclePolicy: {
                                                type: "structure",
                                                members: {
                                                    LifecyclePolicyText: {},
                                                    RegistryId: {}
                                                }
                                            },
                                            RepositoryName: {},
                                            RepositoryPolicyText: {}
                                        }
                                    },
                                    AwsEksCluster: {
                                        type: "structure",
                                        members: {
                                            Arn: {},
                                            CertificateAuthorityData: {},
                                            ClusterStatus: {},
                                            Endpoint: {},
                                            Name: {},
                                            ResourcesVpcConfig: {
                                                type: "structure",
                                                members: {
                                                    SecurityGroupIds: {
                                                        shape: "S4v"
                                                    },
                                                    SubnetIds: {
                                                        shape: "S4v"
                                                    },
                                                    EndpointPublicAccess: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            RoleArn: {},
                                            Version: {},
                                            Logging: {
                                                type: "structure",
                                                members: {
                                                    ClusterLogging: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Enabled: {
                                                                    type: "boolean"
                                                                },
                                                                Types: {
                                                                    shape: "S4v"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsNetworkFirewallFirewallPolicy: {
                                        type: "structure",
                                        members: {
                                            FirewallPolicy: {
                                                type: "structure",
                                                members: {
                                                    StatefulRuleGroupReferences: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                ResourceArn: {}
                                                            }
                                                        }
                                                    },
                                                    StatelessCustomActions: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                ActionDefinition: {
                                                                    shape: "Sgu"
                                                                },
                                                                ActionName: {}
                                                            }
                                                        }
                                                    },
                                                    StatelessDefaultActions: {
                                                        shape: "S4v"
                                                    },
                                                    StatelessFragmentDefaultActions: {
                                                        shape: "S4v"
                                                    },
                                                    StatelessRuleGroupReferences: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Priority: {
                                                                    type: "integer"
                                                                },
                                                                ResourceArn: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            FirewallPolicyArn: {},
                                            FirewallPolicyId: {},
                                            FirewallPolicyName: {},
                                            Description: {}
                                        }
                                    },
                                    AwsNetworkFirewallFirewall: {
                                        type: "structure",
                                        members: {
                                            DeleteProtection: {
                                                type: "boolean"
                                            },
                                            Description: {},
                                            FirewallArn: {},
                                            FirewallId: {},
                                            FirewallName: {},
                                            FirewallPolicyArn: {},
                                            FirewallPolicyChangeProtection: {
                                                type: "boolean"
                                            },
                                            SubnetChangeProtection: {
                                                type: "boolean"
                                            },
                                            SubnetMappings: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        SubnetId: {}
                                                    }
                                                }
                                            },
                                            VpcId: {}
                                        }
                                    },
                                    AwsNetworkFirewallRuleGroup: {
                                        type: "structure",
                                        members: {
                                            Capacity: {
                                                type: "integer"
                                            },
                                            Description: {},
                                            RuleGroup: {
                                                type: "structure",
                                                members: {
                                                    RuleVariables: {
                                                        type: "structure",
                                                        members: {
                                                            IpSets: {
                                                                type: "structure",
                                                                members: {
                                                                    Definition: {
                                                                        shape: "S4v"
                                                                    }
                                                                }
                                                            },
                                                            PortSets: {
                                                                type: "structure",
                                                                members: {
                                                                    Definition: {
                                                                        shape: "S4v"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    RulesSource: {
                                                        type: "structure",
                                                        members: {
                                                            RulesSourceList: {
                                                                type: "structure",
                                                                members: {
                                                                    GeneratedRulesType: {},
                                                                    TargetTypes: {
                                                                        shape: "S4v"
                                                                    },
                                                                    Targets: {
                                                                        shape: "S4v"
                                                                    }
                                                                }
                                                            },
                                                            RulesString: {},
                                                            StatefulRules: {
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        Action: {},
                                                                        Header: {
                                                                            type: "structure",
                                                                            members: {
                                                                                Destination: {},
                                                                                DestinationPort: {},
                                                                                Direction: {},
                                                                                Protocol: {},
                                                                                Source: {},
                                                                                SourcePort: {}
                                                                            }
                                                                        },
                                                                        RuleOptions: {
                                                                            type: "list",
                                                                            member: {
                                                                                type: "structure",
                                                                                members: {
                                                                                    Keyword: {},
                                                                                    Settings: {
                                                                                        type: "list",
                                                                                        member: {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            StatelessRulesAndCustomActions: {
                                                                type: "structure",
                                                                members: {
                                                                    CustomActions: {
                                                                        type: "list",
                                                                        member: {
                                                                            type: "structure",
                                                                            members: {
                                                                                ActionDefinition: {
                                                                                    shape: "Sgu"
                                                                                },
                                                                                ActionName: {}
                                                                            }
                                                                        }
                                                                    },
                                                                    StatelessRules: {
                                                                        type: "list",
                                                                        member: {
                                                                            type: "structure",
                                                                            members: {
                                                                                Priority: {
                                                                                    type: "integer"
                                                                                },
                                                                                RuleDefinition: {
                                                                                    type: "structure",
                                                                                    members: {
                                                                                        Actions: {
                                                                                            shape: "S4v"
                                                                                        },
                                                                                        MatchAttributes: {
                                                                                            type: "structure",
                                                                                            members: {
                                                                                                DestinationPorts: {
                                                                                                    type: "list",
                                                                                                    member: {
                                                                                                        type: "structure",
                                                                                                        members: {
                                                                                                            FromPort: {
                                                                                                                type: "integer"
                                                                                                            },
                                                                                                            ToPort: {
                                                                                                                type: "integer"
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                },
                                                                                                Destinations: {
                                                                                                    type: "list",
                                                                                                    member: {
                                                                                                        type: "structure",
                                                                                                        members: {
                                                                                                            AddressDefinition: {}
                                                                                                        }
                                                                                                    }
                                                                                                },
                                                                                                Protocols: {
                                                                                                    type: "list",
                                                                                                    member: {
                                                                                                        type: "integer"
                                                                                                    }
                                                                                                },
                                                                                                SourcePorts: {
                                                                                                    type: "list",
                                                                                                    member: {
                                                                                                        type: "structure",
                                                                                                        members: {
                                                                                                            FromPort: {
                                                                                                                type: "integer"
                                                                                                            },
                                                                                                            ToPort: {
                                                                                                                type: "integer"
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                },
                                                                                                Sources: {
                                                                                                    type: "list",
                                                                                                    member: {
                                                                                                        type: "structure",
                                                                                                        members: {
                                                                                                            AddressDefinition: {}
                                                                                                        }
                                                                                                    }
                                                                                                },
                                                                                                TcpFlags: {
                                                                                                    type: "list",
                                                                                                    member: {
                                                                                                        type: "structure",
                                                                                                        members: {
                                                                                                            Flags: {
                                                                                                                shape: "S4v"
                                                                                                            },
                                                                                                            Masks: {
                                                                                                                shape: "S4v"
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            RuleGroupArn: {},
                                            RuleGroupId: {},
                                            RuleGroupName: {},
                                            Type: {}
                                        }
                                    },
                                    AwsRdsDbSecurityGroup: {
                                        type: "structure",
                                        members: {
                                            DbSecurityGroupArn: {},
                                            DbSecurityGroupDescription: {},
                                            DbSecurityGroupName: {},
                                            Ec2SecurityGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Ec2SecurityGroupId: {},
                                                        Ec2SecurityGroupName: {},
                                                        Ec2SecurityGroupOwnerId: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            IpRanges: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        CidrIp: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            OwnerId: {},
                                            VpcId: {}
                                        }
                                    },
                                    AwsKinesisStream: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Arn: {},
                                            StreamEncryption: {
                                                type: "structure",
                                                members: {
                                                    EncryptionType: {},
                                                    KeyId: {}
                                                }
                                            },
                                            ShardCount: {
                                                type: "integer"
                                            },
                                            RetentionPeriodHours: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    AwsEc2TransitGateway: {
                                        type: "structure",
                                        members: {
                                            Id: {},
                                            Description: {},
                                            DefaultRouteTablePropagation: {},
                                            AutoAcceptSharedAttachments: {},
                                            DefaultRouteTableAssociation: {},
                                            TransitGatewayCidrBlocks: {
                                                shape: "S4v"
                                            },
                                            AssociationDefaultRouteTableId: {},
                                            PropagationDefaultRouteTableId: {},
                                            VpnEcmpSupport: {},
                                            DnsSupport: {},
                                            MulticastSupport: {},
                                            AmazonSideAsn: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    AwsEfsAccessPoint: {
                                        type: "structure",
                                        members: {
                                            AccessPointId: {},
                                            Arn: {},
                                            ClientToken: {},
                                            FileSystemId: {},
                                            PosixUser: {
                                                type: "structure",
                                                members: {
                                                    Gid: {},
                                                    SecondaryGids: {
                                                        shape: "S4v"
                                                    },
                                                    Uid: {}
                                                }
                                            },
                                            RootDirectory: {
                                                type: "structure",
                                                members: {
                                                    CreationInfo: {
                                                        type: "structure",
                                                        members: {
                                                            OwnerGid: {},
                                                            OwnerUid: {},
                                                            Permissions: {}
                                                        }
                                                    },
                                                    Path: {}
                                                }
                                            }
                                        }
                                    },
                                    AwsCloudFormationStack: {
                                        type: "structure",
                                        members: {
                                            Capabilities: {
                                                shape: "S4v"
                                            },
                                            CreationTime: {},
                                            Description: {},
                                            DisableRollback: {
                                                type: "boolean"
                                            },
                                            DriftInformation: {
                                                type: "structure",
                                                members: {
                                                    StackDriftStatus: {}
                                                }
                                            },
                                            EnableTerminationProtection: {
                                                type: "boolean"
                                            },
                                            LastUpdatedTime: {},
                                            NotificationArns: {
                                                shape: "S4v"
                                            },
                                            Outputs: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Description: {},
                                                        OutputKey: {},
                                                        OutputValue: {}
                                                    }
                                                }
                                            },
                                            RoleArn: {},
                                            StackId: {},
                                            StackName: {},
                                            StackStatus: {},
                                            StackStatusReason: {},
                                            TimeoutInMinutes: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    AwsCloudWatchAlarm: {
                                        type: "structure",
                                        members: {
                                            ActionsEnabled: {
                                                type: "boolean"
                                            },
                                            AlarmActions: {
                                                shape: "S4v"
                                            },
                                            AlarmArn: {},
                                            AlarmConfigurationUpdatedTimestamp: {},
                                            AlarmDescription: {},
                                            AlarmName: {},
                                            ComparisonOperator: {},
                                            DatapointsToAlarm: {
                                                type: "integer"
                                            },
                                            Dimensions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Value: {}
                                                    }
                                                }
                                            },
                                            EvaluateLowSampleCountPercentile: {},
                                            EvaluationPeriods: {
                                                type: "integer"
                                            },
                                            ExtendedStatistic: {},
                                            InsufficientDataActions: {
                                                shape: "S4v"
                                            },
                                            MetricName: {},
                                            Namespace: {},
                                            OkActions: {
                                                shape: "S4v"
                                            },
                                            Period: {
                                                type: "integer"
                                            },
                                            Statistic: {},
                                            Threshold: {
                                                type: "double"
                                            },
                                            ThresholdMetricId: {},
                                            TreatMissingData: {},
                                            Unit: {}
                                        }
                                    },
                                    AwsEc2VpcPeeringConnection: {
                                        type: "structure",
                                        members: {
                                            AccepterVpcInfo: {
                                                shape: "Sii"
                                            },
                                            ExpirationTime: {},
                                            RequesterVpcInfo: {
                                                shape: "Sii"
                                            },
                                            Status: {
                                                type: "structure",
                                                members: {
                                                    Code: {},
                                                    Message: {}
                                                }
                                            },
                                            VpcPeeringConnectionId: {}
                                        }
                                    },
                                    AwsWafRegionalRuleGroup: {
                                        type: "structure",
                                        members: {
                                            MetricName: {},
                                            Name: {},
                                            RuleGroupId: {},
                                            Rules: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Action: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {}
                                                            }
                                                        },
                                                        Priority: {
                                                            type: "integer"
                                                        },
                                                        RuleId: {},
                                                        Type: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsWafRegionalRule: {
                                        type: "structure",
                                        members: {
                                            MetricName: {},
                                            Name: {},
                                            PredicateList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DataId: {},
                                                        Negated: {
                                                            type: "boolean"
                                                        },
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            RuleId: {}
                                        }
                                    },
                                    AwsWafRegionalWebAcl: {
                                        type: "structure",
                                        members: {
                                            DefaultAction: {},
                                            MetricName: {},
                                            Name: {},
                                            RulesList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Action: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {}
                                                            }
                                                        },
                                                        OverrideAction: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {}
                                                            }
                                                        },
                                                        Priority: {
                                                            type: "integer"
                                                        },
                                                        RuleId: {},
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            WebAclId: {}
                                        }
                                    },
                                    AwsWafRule: {
                                        type: "structure",
                                        members: {
                                            MetricName: {},
                                            Name: {},
                                            PredicateList: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        DataId: {},
                                                        Negated: {
                                                            type: "boolean"
                                                        },
                                                        Type: {}
                                                    }
                                                }
                                            },
                                            RuleId: {}
                                        }
                                    },
                                    AwsWafRuleGroup: {
                                        type: "structure",
                                        members: {
                                            MetricName: {},
                                            Name: {},
                                            RuleGroupId: {},
                                            Rules: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Action: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {}
                                                            }
                                                        },
                                                        Priority: {
                                                            type: "integer"
                                                        },
                                                        RuleId: {},
                                                        Type: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsEcsTask: {
                                        type: "structure",
                                        members: {
                                            ClusterArn: {},
                                            TaskDefinitionArn: {},
                                            Version: {},
                                            CreatedAt: {},
                                            StartedAt: {},
                                            StartedBy: {},
                                            Group: {},
                                            Volumes: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Host: {
                                                            type: "structure",
                                                            members: {
                                                                SourcePath: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            Containers: {
                                                type: "list",
                                                member: {
                                                    shape: "Sde"
                                                }
                                            }
                                        }
                                    },
                                    AwsBackupBackupVault: {
                                        type: "structure",
                                        members: {
                                            BackupVaultArn: {},
                                            BackupVaultName: {},
                                            EncryptionKeyArn: {},
                                            Notifications: {
                                                type: "structure",
                                                members: {
                                                    BackupVaultEvents: {
                                                        shape: "S4v"
                                                    },
                                                    SnsTopicArn: {}
                                                }
                                            },
                                            AccessPolicy: {}
                                        }
                                    },
                                    AwsBackupBackupPlan: {
                                        type: "structure",
                                        members: {
                                            BackupPlan: {
                                                type: "structure",
                                                members: {
                                                    BackupPlanName: {},
                                                    AdvancedBackupSettings: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                BackupOptions: {
                                                                    shape: "S1k"
                                                                },
                                                                ResourceType: {}
                                                            }
                                                        }
                                                    },
                                                    BackupPlanRule: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                TargetBackupVault: {},
                                                                StartWindowMinutes: {
                                                                    type: "long"
                                                                },
                                                                ScheduleExpression: {},
                                                                RuleName: {},
                                                                RuleId: {},
                                                                EnableContinuousBackup: {
                                                                    type: "boolean"
                                                                },
                                                                CompletionWindowMinutes: {
                                                                    type: "long"
                                                                },
                                                                CopyActions: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            DestinationBackupVaultArn: {},
                                                                            Lifecycle: {
                                                                                shape: "Sjn"
                                                                            }
                                                                        }
                                                                    }
                                                                },
                                                                Lifecycle: {
                                                                    shape: "Sjn"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            BackupPlanArn: {},
                                            BackupPlanId: {},
                                            VersionId: {}
                                        }
                                    },
                                    AwsBackupRecoveryPoint: {
                                        type: "structure",
                                        members: {
                                            BackupSizeInBytes: {
                                                type: "long"
                                            },
                                            BackupVaultArn: {},
                                            BackupVaultName: {},
                                            CalculatedLifecycle: {
                                                type: "structure",
                                                members: {
                                                    DeleteAt: {},
                                                    MoveToColdStorageAt: {}
                                                }
                                            },
                                            CompletionDate: {},
                                            CreatedBy: {
                                                type: "structure",
                                                members: {
                                                    BackupPlanArn: {},
                                                    BackupPlanId: {},
                                                    BackupPlanVersion: {},
                                                    BackupRuleId: {}
                                                }
                                            },
                                            CreationDate: {},
                                            EncryptionKeyArn: {},
                                            IamRoleArn: {},
                                            IsEncrypted: {
                                                type: "boolean"
                                            },
                                            LastRestoreTime: {},
                                            Lifecycle: {
                                                type: "structure",
                                                members: {
                                                    DeleteAfterDays: {
                                                        type: "long"
                                                    },
                                                    MoveToColdStorageAfterDays: {
                                                        type: "long"
                                                    }
                                                }
                                            },
                                            RecoveryPointArn: {},
                                            ResourceArn: {},
                                            ResourceType: {},
                                            SourceBackupVaultArn: {},
                                            Status: {},
                                            StatusMessage: {},
                                            StorageClass: {}
                                        }
                                    },
                                    AwsEc2LaunchTemplate: {
                                        type: "structure",
                                        members: {
                                            LaunchTemplateName: {},
                                            Id: {},
                                            LaunchTemplateData: {
                                                type: "structure",
                                                members: {
                                                    BlockDeviceMappingSet: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                DeviceName: {},
                                                                Ebs: {
                                                                    type: "structure",
                                                                    members: {
                                                                        DeleteOnTermination: {
                                                                            type: "boolean"
                                                                        },
                                                                        Encrypted: {
                                                                            type: "boolean"
                                                                        },
                                                                        Iops: {
                                                                            type: "integer"
                                                                        },
                                                                        KmsKeyId: {},
                                                                        SnapshotId: {},
                                                                        Throughput: {
                                                                            type: "integer"
                                                                        },
                                                                        VolumeSize: {
                                                                            type: "integer"
                                                                        },
                                                                        VolumeType: {}
                                                                    }
                                                                },
                                                                NoDevice: {},
                                                                VirtualName: {}
                                                            }
                                                        }
                                                    },
                                                    CapacityReservationSpecification: {
                                                        type: "structure",
                                                        members: {
                                                            CapacityReservationPreference: {},
                                                            CapacityReservationTarget: {
                                                                type: "structure",
                                                                members: {
                                                                    CapacityReservationId: {},
                                                                    CapacityReservationResourceGroupArn: {}
                                                                }
                                                            }
                                                        }
                                                    },
                                                    CpuOptions: {
                                                        type: "structure",
                                                        members: {
                                                            CoreCount: {
                                                                type: "integer"
                                                            },
                                                            ThreadsPerCore: {
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    CreditSpecification: {
                                                        type: "structure",
                                                        members: {
                                                            CpuCredits: {}
                                                        }
                                                    },
                                                    DisableApiStop: {
                                                        type: "boolean"
                                                    },
                                                    DisableApiTermination: {
                                                        type: "boolean"
                                                    },
                                                    EbsOptimized: {
                                                        type: "boolean"
                                                    },
                                                    ElasticGpuSpecificationSet: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Type: {}
                                                            }
                                                        }
                                                    },
                                                    ElasticInferenceAcceleratorSet: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                Count: {
                                                                    type: "integer"
                                                                },
                                                                Type: {}
                                                            }
                                                        }
                                                    },
                                                    EnclaveOptions: {
                                                        type: "structure",
                                                        members: {
                                                            Enabled: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    HibernationOptions: {
                                                        type: "structure",
                                                        members: {
                                                            Configured: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    IamInstanceProfile: {
                                                        type: "structure",
                                                        members: {
                                                            Arn: {},
                                                            Name: {}
                                                        }
                                                    },
                                                    ImageId: {},
                                                    InstanceInitiatedShutdownBehavior: {},
                                                    InstanceMarketOptions: {
                                                        type: "structure",
                                                        members: {
                                                            MarketType: {},
                                                            SpotOptions: {
                                                                type: "structure",
                                                                members: {
                                                                    BlockDurationMinutes: {
                                                                        type: "integer"
                                                                    },
                                                                    InstanceInterruptionBehavior: {},
                                                                    MaxPrice: {},
                                                                    SpotInstanceType: {},
                                                                    ValidUntil: {}
                                                                }
                                                            }
                                                        }
                                                    },
                                                    InstanceRequirements: {
                                                        type: "structure",
                                                        members: {
                                                            AcceleratorCount: {
                                                                type: "structure",
                                                                members: {
                                                                    Max: {
                                                                        type: "integer"
                                                                    },
                                                                    Min: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            },
                                                            AcceleratorManufacturers: {
                                                                shape: "S4v"
                                                            },
                                                            AcceleratorNames: {
                                                                shape: "S4v"
                                                            },
                                                            AcceleratorTotalMemoryMiB: {
                                                                type: "structure",
                                                                members: {
                                                                    Max: {
                                                                        type: "integer"
                                                                    },
                                                                    Min: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            },
                                                            AcceleratorTypes: {
                                                                shape: "S4v"
                                                            },
                                                            BareMetal: {},
                                                            BaselineEbsBandwidthMbps: {
                                                                type: "structure",
                                                                members: {
                                                                    Max: {
                                                                        type: "integer"
                                                                    },
                                                                    Min: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            },
                                                            BurstablePerformance: {},
                                                            CpuManufacturers: {
                                                                shape: "S4v"
                                                            },
                                                            ExcludedInstanceTypes: {
                                                                shape: "S4v"
                                                            },
                                                            InstanceGenerations: {
                                                                shape: "S4v"
                                                            },
                                                            LocalStorage: {},
                                                            LocalStorageTypes: {
                                                                shape: "S4v"
                                                            },
                                                            MemoryGiBPerVCpu: {
                                                                type: "structure",
                                                                members: {
                                                                    Max: {
                                                                        type: "double"
                                                                    },
                                                                    Min: {
                                                                        type: "double"
                                                                    }
                                                                }
                                                            },
                                                            MemoryMiB: {
                                                                type: "structure",
                                                                members: {
                                                                    Max: {
                                                                        type: "integer"
                                                                    },
                                                                    Min: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            },
                                                            NetworkInterfaceCount: {
                                                                type: "structure",
                                                                members: {
                                                                    Max: {
                                                                        type: "integer"
                                                                    },
                                                                    Min: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            },
                                                            OnDemandMaxPricePercentageOverLowestPrice: {
                                                                type: "integer"
                                                            },
                                                            RequireHibernateSupport: {
                                                                type: "boolean"
                                                            },
                                                            SpotMaxPricePercentageOverLowestPrice: {
                                                                type: "integer"
                                                            },
                                                            TotalLocalStorageGB: {
                                                                type: "structure",
                                                                members: {
                                                                    Max: {
                                                                        type: "double"
                                                                    },
                                                                    Min: {
                                                                        type: "double"
                                                                    }
                                                                }
                                                            },
                                                            VCpuCount: {
                                                                type: "structure",
                                                                members: {
                                                                    Max: {
                                                                        type: "integer"
                                                                    },
                                                                    Min: {
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    InstanceType: {},
                                                    KernelId: {},
                                                    KeyName: {},
                                                    LicenseSet: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                LicenseConfigurationArn: {}
                                                            }
                                                        }
                                                    },
                                                    MaintenanceOptions: {
                                                        type: "structure",
                                                        members: {
                                                            AutoRecovery: {}
                                                        }
                                                    },
                                                    MetadataOptions: {
                                                        type: "structure",
                                                        members: {
                                                            HttpEndpoint: {},
                                                            HttpProtocolIpv6: {},
                                                            HttpTokens: {},
                                                            HttpPutResponseHopLimit: {
                                                                type: "integer"
                                                            },
                                                            InstanceMetadataTags: {}
                                                        }
                                                    },
                                                    Monitoring: {
                                                        type: "structure",
                                                        members: {
                                                            Enabled: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    NetworkInterfaceSet: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                AssociateCarrierIpAddress: {
                                                                    type: "boolean"
                                                                },
                                                                AssociatePublicIpAddress: {
                                                                    type: "boolean"
                                                                },
                                                                DeleteOnTermination: {
                                                                    type: "boolean"
                                                                },
                                                                Description: {},
                                                                DeviceIndex: {
                                                                    type: "integer"
                                                                },
                                                                Groups: {
                                                                    shape: "S4v"
                                                                },
                                                                InterfaceType: {},
                                                                Ipv4PrefixCount: {
                                                                    type: "integer"
                                                                },
                                                                Ipv4Prefixes: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Ipv4Prefix: {}
                                                                        }
                                                                    }
                                                                },
                                                                Ipv6AddressCount: {
                                                                    type: "integer"
                                                                },
                                                                Ipv6Addresses: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Ipv6Address: {}
                                                                        }
                                                                    }
                                                                },
                                                                Ipv6PrefixCount: {
                                                                    type: "integer"
                                                                },
                                                                Ipv6Prefixes: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Ipv6Prefix: {}
                                                                        }
                                                                    }
                                                                },
                                                                NetworkCardIndex: {
                                                                    type: "integer"
                                                                },
                                                                NetworkInterfaceId: {},
                                                                PrivateIpAddress: {},
                                                                PrivateIpAddresses: {
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Primary: {
                                                                                type: "boolean"
                                                                            },
                                                                            PrivateIpAddress: {}
                                                                        }
                                                                    }
                                                                },
                                                                SecondaryPrivateIpAddressCount: {
                                                                    type: "integer"
                                                                },
                                                                SubnetId: {}
                                                            }
                                                        }
                                                    },
                                                    Placement: {
                                                        type: "structure",
                                                        members: {
                                                            Affinity: {},
                                                            AvailabilityZone: {},
                                                            GroupName: {},
                                                            HostId: {},
                                                            HostResourceGroupArn: {},
                                                            PartitionNumber: {
                                                                type: "integer"
                                                            },
                                                            SpreadDomain: {},
                                                            Tenancy: {}
                                                        }
                                                    },
                                                    PrivateDnsNameOptions: {
                                                        type: "structure",
                                                        members: {
                                                            EnableResourceNameDnsAAAARecord: {
                                                                type: "boolean"
                                                            },
                                                            EnableResourceNameDnsARecord: {
                                                                type: "boolean"
                                                            },
                                                            HostnameType: {}
                                                        }
                                                    },
                                                    RamDiskId: {},
                                                    SecurityGroupIdSet: {
                                                        shape: "S4v"
                                                    },
                                                    SecurityGroupSet: {
                                                        shape: "S4v"
                                                    },
                                                    UserData: {}
                                                }
                                            },
                                            DefaultVersionNumber: {
                                                type: "long"
                                            },
                                            LatestVersionNumber: {
                                                type: "long"
                                            }
                                        }
                                    },
                                    AwsSageMakerNotebookInstance: {
                                        type: "structure",
                                        members: {
                                            AcceleratorTypes: {
                                                shape: "S4v"
                                            },
                                            AdditionalCodeRepositories: {
                                                shape: "S4v"
                                            },
                                            DefaultCodeRepository: {},
                                            DirectInternetAccess: {},
                                            FailureReason: {},
                                            InstanceMetadataServiceConfiguration: {
                                                type: "structure",
                                                members: {
                                                    MinimumInstanceMetadataServiceVersion: {}
                                                }
                                            },
                                            InstanceType: {},
                                            KmsKeyId: {},
                                            NetworkInterfaceId: {},
                                            NotebookInstanceArn: {},
                                            NotebookInstanceLifecycleConfigName: {},
                                            NotebookInstanceName: {},
                                            NotebookInstanceStatus: {},
                                            PlatformIdentifier: {},
                                            RoleArn: {},
                                            RootAccess: {},
                                            SecurityGroups: {
                                                shape: "S4v"
                                            },
                                            SubnetId: {},
                                            Url: {},
                                            VolumeSizeInGB: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    AwsWafv2WebAcl: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Arn: {},
                                            ManagedbyFirewallManager: {
                                                type: "boolean"
                                            },
                                            Id: {},
                                            Capacity: {
                                                type: "long"
                                            },
                                            CaptchaConfig: {
                                                type: "structure",
                                                members: {
                                                    ImmunityTimeProperty: {
                                                        type: "structure",
                                                        members: {
                                                            ImmunityTime: {
                                                                type: "long"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            DefaultAction: {
                                                type: "structure",
                                                members: {
                                                    Allow: {
                                                        shape: "Sl6"
                                                    },
                                                    Block: {
                                                        shape: "Sla"
                                                    }
                                                }
                                            },
                                            Description: {},
                                            Rules: {
                                                shape: "Slc"
                                            },
                                            VisibilityConfig: {
                                                shape: "Slh"
                                            }
                                        }
                                    },
                                    AwsWafv2RuleGroup: {
                                        type: "structure",
                                        members: {
                                            Capacity: {
                                                type: "long"
                                            },
                                            Description: {},
                                            Id: {},
                                            Name: {},
                                            Arn: {},
                                            Rules: {
                                                shape: "Slc"
                                            },
                                            Scope: {},
                                            VisibilityConfig: {
                                                shape: "Slh"
                                            }
                                        }
                                    },
                                    AwsEc2RouteTable: {
                                        type: "structure",
                                        members: {
                                            AssociationSet: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AssociationState: {
                                                            type: "structure",
                                                            members: {
                                                                State: {},
                                                                StatusMessage: {}
                                                            }
                                                        },
                                                        GatewayId: {},
                                                        Main: {
                                                            type: "boolean"
                                                        },
                                                        RouteTableAssociationId: {},
                                                        RouteTableId: {},
                                                        SubnetId: {}
                                                    }
                                                }
                                            },
                                            OwnerId: {},
                                            PropagatingVgwSet: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        GatewayId: {}
                                                    }
                                                }
                                            },
                                            RouteTableId: {},
                                            RouteSet: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        CarrierGatewayId: {},
                                                        CoreNetworkArn: {},
                                                        DestinationCidrBlock: {},
                                                        DestinationIpv6CidrBlock: {},
                                                        DestinationPrefixListId: {},
                                                        EgressOnlyInternetGatewayId: {},
                                                        GatewayId: {},
                                                        InstanceId: {},
                                                        InstanceOwnerId: {},
                                                        LocalGatewayId: {},
                                                        NatGatewayId: {},
                                                        NetworkInterfaceId: {},
                                                        Origin: {},
                                                        State: {},
                                                        TransitGatewayId: {},
                                                        VpcPeeringConnectionId: {}
                                                    }
                                                }
                                            },
                                            VpcId: {}
                                        }
                                    },
                                    AwsAmazonMqBroker: {
                                        type: "structure",
                                        members: {
                                            AuthenticationStrategy: {},
                                            AutoMinorVersionUpgrade: {
                                                type: "boolean"
                                            },
                                            BrokerArn: {},
                                            BrokerName: {},
                                            DeploymentMode: {},
                                            EncryptionOptions: {
                                                type: "structure",
                                                members: {
                                                    KmsKeyId: {},
                                                    UseAwsOwnedKey: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            EngineType: {},
                                            EngineVersion: {},
                                            HostInstanceType: {},
                                            BrokerId: {},
                                            LdapServerMetadata: {
                                                type: "structure",
                                                members: {
                                                    Hosts: {
                                                        shape: "S23"
                                                    },
                                                    RoleBase: {},
                                                    RoleName: {},
                                                    RoleSearchMatching: {},
                                                    RoleSearchSubtree: {
                                                        type: "boolean"
                                                    },
                                                    ServiceAccountUsername: {},
                                                    UserBase: {},
                                                    UserRoleName: {},
                                                    UserSearchMatching: {},
                                                    UserSearchSubtree: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            Logs: {
                                                type: "structure",
                                                members: {
                                                    Audit: {
                                                        type: "boolean"
                                                    },
                                                    General: {
                                                        type: "boolean"
                                                    },
                                                    AuditLogGroup: {},
                                                    GeneralLogGroup: {},
                                                    Pending: {
                                                        type: "structure",
                                                        members: {
                                                            Audit: {
                                                                type: "boolean"
                                                            },
                                                            General: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            MaintenanceWindowStartTime: {
                                                type: "structure",
                                                members: {
                                                    DayOfWeek: {},
                                                    TimeOfDay: {},
                                                    TimeZone: {}
                                                }
                                            },
                                            PubliclyAccessible: {
                                                type: "boolean"
                                            },
                                            SecurityGroups: {
                                                shape: "S23"
                                            },
                                            StorageType: {},
                                            SubnetIds: {
                                                shape: "S23"
                                            },
                                            Users: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        PendingChange: {},
                                                        Username: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsAppSyncGraphQlApi: {
                                        type: "structure",
                                        members: {
                                            ApiId: {},
                                            Id: {},
                                            OpenIdConnectConfig: {
                                                shape: "Sm0"
                                            },
                                            Name: {},
                                            LambdaAuthorizerConfig: {
                                                shape: "Sm1"
                                            },
                                            XrayEnabled: {
                                                type: "boolean"
                                            },
                                            Arn: {},
                                            UserPoolConfig: {
                                                shape: "Sm2"
                                            },
                                            AuthenticationType: {},
                                            LogConfig: {
                                                type: "structure",
                                                members: {
                                                    CloudWatchLogsRoleArn: {},
                                                    ExcludeVerboseContent: {
                                                        type: "boolean"
                                                    },
                                                    FieldLogLevel: {}
                                                }
                                            },
                                            AdditionalAuthenticationProviders: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        AuthenticationType: {},
                                                        LambdaAuthorizerConfig: {
                                                            shape: "Sm1"
                                                        },
                                                        OpenIdConnectConfig: {
                                                            shape: "Sm0"
                                                        },
                                                        UserPoolConfig: {
                                                            shape: "Sm2"
                                                        }
                                                    }
                                                }
                                            },
                                            WafWebAclArn: {}
                                        }
                                    },
                                    AwsEventSchemasRegistry: {
                                        type: "structure",
                                        members: {
                                            Description: {},
                                            RegistryArn: {},
                                            RegistryName: {}
                                        }
                                    },
                                    AwsGuardDutyDetector: {
                                        type: "structure",
                                        members: {
                                            DataSources: {
                                                type: "structure",
                                                members: {
                                                    CloudTrail: {
                                                        type: "structure",
                                                        members: {
                                                            Status: {}
                                                        }
                                                    },
                                                    DnsLogs: {
                                                        type: "structure",
                                                        members: {
                                                            Status: {}
                                                        }
                                                    },
                                                    FlowLogs: {
                                                        type: "structure",
                                                        members: {
                                                            Status: {}
                                                        }
                                                    },
                                                    Kubernetes: {
                                                        type: "structure",
                                                        members: {
                                                            AuditLogs: {
                                                                type: "structure",
                                                                members: {
                                                                    Status: {}
                                                                }
                                                            }
                                                        }
                                                    },
                                                    MalwareProtection: {
                                                        type: "structure",
                                                        members: {
                                                            ScanEc2InstanceWithFindings: {
                                                                type: "structure",
                                                                members: {
                                                                    EbsVolumes: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Reason: {},
                                                                            Status: {}
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            ServiceRole: {}
                                                        }
                                                    },
                                                    S3Logs: {
                                                        type: "structure",
                                                        members: {
                                                            Status: {}
                                                        }
                                                    }
                                                }
                                            },
                                            Features: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Status: {}
                                                    }
                                                }
                                            },
                                            FindingPublishingFrequency: {},
                                            ServiceRole: {},
                                            Status: {}
                                        }
                                    },
                                    AwsStepFunctionStateMachine: {
                                        type: "structure",
                                        members: {
                                            Label: {},
                                            LoggingConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Destinations: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            members: {
                                                                CloudWatchLogsLogGroup: {
                                                                    type: "structure",
                                                                    members: {
                                                                        LogGroupArn: {}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    IncludeExecutionData: {
                                                        type: "boolean"
                                                    },
                                                    Level: {}
                                                }
                                            },
                                            Name: {},
                                            RoleArn: {},
                                            StateMachineArn: {},
                                            Status: {},
                                            TracingConfiguration: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    }
                                                }
                                            },
                                            Type: {}
                                        }
                                    },
                                    AwsAthenaWorkGroup: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Description: {},
                                            State: {},
                                            Configuration: {
                                                type: "structure",
                                                members: {
                                                    ResultConfiguration: {
                                                        type: "structure",
                                                        members: {
                                                            EncryptionConfiguration: {
                                                                type: "structure",
                                                                members: {
                                                                    EncryptionOption: {},
                                                                    KmsKey: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsEventsEventbus: {
                                        type: "structure",
                                        members: {
                                            Arn: {},
                                            Name: {},
                                            Policy: {}
                                        }
                                    },
                                    AwsDmsEndpoint: {
                                        type: "structure",
                                        members: {
                                            CertificateArn: {},
                                            DatabaseName: {},
                                            EndpointArn: {},
                                            EndpointIdentifier: {},
                                            EndpointType: {},
                                            EngineName: {},
                                            ExternalId: {},
                                            ExtraConnectionAttributes: {},
                                            KmsKeyId: {},
                                            Port: {
                                                type: "integer"
                                            },
                                            ServerName: {},
                                            SslMode: {},
                                            Username: {}
                                        }
                                    },
                                    AwsEventsEndpoint: {
                                        type: "structure",
                                        members: {
                                            Arn: {},
                                            Description: {},
                                            EndpointId: {},
                                            EndpointUrl: {},
                                            EventBuses: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        EventBusArn: {}
                                                    }
                                                }
                                            },
                                            Name: {},
                                            ReplicationConfig: {
                                                type: "structure",
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            RoleArn: {},
                                            RoutingConfig: {
                                                type: "structure",
                                                members: {
                                                    FailoverConfig: {
                                                        type: "structure",
                                                        members: {
                                                            Primary: {
                                                                type: "structure",
                                                                members: {
                                                                    HealthCheck: {}
                                                                }
                                                            },
                                                            Secondary: {
                                                                type: "structure",
                                                                members: {
                                                                    Route: {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            State: {},
                                            StateReason: {}
                                        }
                                    },
                                    AwsDmsReplicationTask: {
                                        type: "structure",
                                        members: {
                                            CdcStartPosition: {},
                                            CdcStartTime: {},
                                            CdcStopPosition: {},
                                            MigrationType: {},
                                            Id: {},
                                            ResourceIdentifier: {},
                                            ReplicationInstanceArn: {},
                                            ReplicationTaskIdentifier: {},
                                            ReplicationTaskSettings: {},
                                            SourceEndpointArn: {},
                                            TableMappings: {},
                                            TargetEndpointArn: {},
                                            TaskData: {}
                                        }
                                    },
                                    AwsDmsReplicationInstance: {
                                        type: "structure",
                                        members: {
                                            AllocatedStorage: {
                                                type: "integer"
                                            },
                                            AutoMinorVersionUpgrade: {
                                                type: "boolean"
                                            },
                                            AvailabilityZone: {},
                                            EngineVersion: {},
                                            KmsKeyId: {},
                                            MultiAZ: {
                                                type: "boolean"
                                            },
                                            PreferredMaintenanceWindow: {},
                                            PubliclyAccessible: {
                                                type: "boolean"
                                            },
                                            ReplicationInstanceClass: {},
                                            ReplicationInstanceIdentifier: {},
                                            ReplicationSubnetGroup: {
                                                type: "structure",
                                                members: {
                                                    ReplicationSubnetGroupIdentifier: {}
                                                }
                                            },
                                            VpcSecurityGroups: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        VpcSecurityGroupId: {}
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsRoute53HostedZone: {
                                        type: "structure",
                                        members: {
                                            HostedZone: {
                                                type: "structure",
                                                members: {
                                                    Id: {},
                                                    Name: {},
                                                    Config: {
                                                        type: "structure",
                                                        members: {
                                                            Comment: {}
                                                        }
                                                    }
                                                }
                                            },
                                            Vpcs: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Id: {},
                                                        Region: {}
                                                    }
                                                }
                                            },
                                            NameServers: {
                                                type: "list",
                                                member: {}
                                            },
                                            QueryLoggingConfig: {
                                                type: "structure",
                                                members: {
                                                    CloudWatchLogsLogGroupArn: {
                                                        type: "structure",
                                                        members: {
                                                            CloudWatchLogsLogGroupArn: {},
                                                            HostedZoneId: {},
                                                            Id: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    AwsMskCluster: {
                                        type: "structure",
                                        members: {
                                            ClusterInfo: {
                                                type: "structure",
                                                members: {
                                                    EncryptionInfo: {
                                                        type: "structure",
                                                        members: {
                                                            EncryptionInTransit: {
                                                                type: "structure",
                                                                members: {
                                                                    InCluster: {
                                                                        type: "boolean"
                                                                    },
                                                                    ClientBroker: {}
                                                                }
                                                            },
                                                            EncryptionAtRest: {
                                                                type: "structure",
                                                                members: {
                                                                    DataVolumeKMSKeyId: {}
                                                                }
                                                            }
                                                        }
                                                    },
                                                    CurrentVersion: {},
                                                    NumberOfBrokerNodes: {
                                                        type: "integer"
                                                    },
                                                    ClusterName: {},
                                                    ClientAuthentication: {
                                                        type: "structure",
                                                        members: {
                                                            Sasl: {
                                                                type: "structure",
                                                                members: {
                                                                    Iam: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Enabled: {
                                                                                type: "boolean"
                                                                            }
                                                                        }
                                                                    },
                                                                    Scram: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Enabled: {
                                                                                type: "boolean"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            Unauthenticated: {
                                                                type: "structure",
                                                                members: {
                                                                    Enabled: {
                                                                        type: "boolean"
                                                                    }
                                                                }
                                                            },
                                                            Tls: {
                                                                type: "structure",
                                                                members: {
                                                                    CertificateAuthorityArnList: {
                                                                        shape: "S23"
                                                                    },
                                                                    Enabled: {
                                                                        type: "boolean"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    },
                                                    EnhancedMonitoring: {}
                                                }
                                            }
                                        }
                                    },
                                    AwsS3AccessPoint: {
                                        type: "structure",
                                        members: {
                                            AccessPointArn: {},
                                            Alias: {},
                                            Bucket: {},
                                            BucketAccountId: {},
                                            Name: {},
                                            NetworkOrigin: {},
                                            PublicAccessBlockConfiguration: {
                                                shape: "S7q"
                                            },
                                            VpcConfiguration: {
                                                type: "structure",
                                                members: {
                                                    VpcId: {}
                                                }
                                            }
                                        }
                                    },
                                    AwsEc2ClientVpnEndpoint: {
                                        type: "structure",
                                        members: {
                                            ClientVpnEndpointId: {},
                                            Description: {},
                                            ClientCidrBlock: {},
                                            DnsServer: {
                                                shape: "S23"
                                            },
                                            SplitTunnel: {
                                                type: "boolean"
                                            },
                                            TransportProtocol: {},
                                            VpnPort: {
                                                type: "integer"
                                            },
                                            ServerCertificateArn: {},
                                            AuthenticationOptions: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Type: {},
                                                        ActiveDirectory: {
                                                            type: "structure",
                                                            members: {
                                                                DirectoryId: {}
                                                            }
                                                        },
                                                        MutualAuthentication: {
                                                            type: "structure",
                                                            members: {
                                                                ClientRootCertificateChain: {}
                                                            }
                                                        },
                                                        FederatedAuthentication: {
                                                            type: "structure",
                                                            members: {
                                                                SamlProviderArn: {},
                                                                SelfServiceSamlProviderArn: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            ConnectionLogOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    },
                                                    CloudwatchLogGroup: {},
                                                    CloudwatchLogStream: {}
                                                }
                                            },
                                            SecurityGroupIdSet: {
                                                shape: "S23"
                                            },
                                            VpcId: {},
                                            SelfServicePortalUrl: {},
                                            ClientConnectOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    },
                                                    LambdaFunctionArn: {},
                                                    Status: {
                                                        type: "structure",
                                                        members: {
                                                            Code: {},
                                                            Message: {}
                                                        }
                                                    }
                                                }
                                            },
                                            SessionTimeoutHours: {
                                                type: "integer"
                                            },
                                            ClientLoginBannerOptions: {
                                                type: "structure",
                                                members: {
                                                    Enabled: {
                                                        type: "boolean"
                                                    },
                                                    BannerText: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            ApplicationName: {},
                            ApplicationArn: {}
                        }
                    }
                },
                Compliance: {
                    type: "structure",
                    members: {
                        Status: {},
                        RelatedRequirements: {
                            shape: "S2q"
                        },
                        StatusReasons: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "ReasonCode" ],
                                members: {
                                    ReasonCode: {},
                                    Description: {}
                                }
                            }
                        },
                        SecurityControlId: {},
                        AssociatedStandards: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    StandardsId: {}
                                }
                            }
                        },
                        SecurityControlParameters: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Name: {},
                                    Value: {
                                        shape: "S1j"
                                    }
                                }
                            }
                        }
                    }
                },
                VerificationState: {},
                WorkflowState: {
                    type: "string",
                    deprecated: true,
                    deprecatedMessage: "This filter is deprecated. Instead, use SeverityLabel or FindingProviderFieldsSeverityLabel."
                },
                Workflow: {
                    type: "structure",
                    members: {
                        Status: {}
                    }
                },
                RecordState: {},
                RelatedFindings: {
                    shape: "S1n"
                },
                Note: {
                    type: "structure",
                    required: [ "Text", "UpdatedBy", "UpdatedAt" ],
                    members: {
                        Text: {},
                        UpdatedBy: {},
                        UpdatedAt: {}
                    }
                },
                Vulnerabilities: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Id" ],
                        members: {
                            Id: {},
                            VulnerablePackages: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        Version: {},
                                        Epoch: {},
                                        Release: {},
                                        Architecture: {},
                                        PackageManager: {},
                                        FilePath: {},
                                        FixedInVersion: {},
                                        Remediation: {},
                                        SourceLayerHash: {},
                                        SourceLayerArn: {}
                                    }
                                }
                            },
                            Cvss: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Version: {},
                                        BaseScore: {
                                            type: "double"
                                        },
                                        BaseVector: {},
                                        Source: {},
                                        Adjustments: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Metric: {},
                                                    Reason: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            RelatedVulnerabilities: {
                                shape: "S23"
                            },
                            Vendor: {
                                type: "structure",
                                required: [ "Name" ],
                                members: {
                                    Name: {},
                                    Url: {},
                                    VendorSeverity: {},
                                    VendorCreatedAt: {},
                                    VendorUpdatedAt: {}
                                }
                            },
                            ReferenceUrls: {
                                shape: "S23"
                            },
                            FixAvailable: {},
                            EpssScore: {
                                type: "double"
                            },
                            ExploitAvailable: {},
                            CodeVulnerabilities: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Cwes: {
                                            shape: "S1j"
                                        },
                                        FilePath: {
                                            type: "structure",
                                            members: {
                                                EndLine: {
                                                    type: "integer"
                                                },
                                                FileName: {},
                                                FilePath: {},
                                                StartLine: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        SourceArn: {}
                                    }
                                }
                            }
                        }
                    }
                },
                PatchSummary: {
                    type: "structure",
                    required: [ "Id" ],
                    members: {
                        Id: {},
                        InstalledCount: {
                            type: "integer"
                        },
                        MissingCount: {
                            type: "integer"
                        },
                        FailedCount: {
                            type: "integer"
                        },
                        InstalledOtherCount: {
                            type: "integer"
                        },
                        InstalledRejectedCount: {
                            type: "integer"
                        },
                        InstalledPendingReboot: {
                            type: "integer"
                        },
                        OperationStartTime: {},
                        OperationEndTime: {},
                        RebootOption: {},
                        Operation: {}
                    }
                },
                Action: {
                    type: "structure",
                    members: {
                        ActionType: {},
                        NetworkConnectionAction: {
                            type: "structure",
                            members: {
                                ConnectionDirection: {},
                                RemoteIpDetails: {
                                    shape: "Sox"
                                },
                                RemotePortDetails: {
                                    type: "structure",
                                    members: {
                                        Port: {
                                            type: "integer"
                                        },
                                        PortName: {}
                                    }
                                },
                                LocalPortDetails: {
                                    shape: "Sp3"
                                },
                                Protocol: {},
                                Blocked: {
                                    type: "boolean"
                                }
                            }
                        },
                        AwsApiCallAction: {
                            type: "structure",
                            members: {
                                Api: {},
                                ServiceName: {},
                                CallerType: {},
                                RemoteIpDetails: {
                                    shape: "Sox"
                                },
                                DomainDetails: {
                                    type: "structure",
                                    members: {
                                        Domain: {}
                                    }
                                },
                                AffectedResources: {
                                    shape: "S1k"
                                },
                                FirstSeen: {},
                                LastSeen: {}
                            }
                        },
                        DnsRequestAction: {
                            type: "structure",
                            members: {
                                Domain: {},
                                Protocol: {},
                                Blocked: {
                                    type: "boolean"
                                }
                            }
                        },
                        PortProbeAction: {
                            type: "structure",
                            members: {
                                PortProbeDetails: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            LocalPortDetails: {
                                                shape: "Sp3"
                                            },
                                            LocalIpDetails: {
                                                type: "structure",
                                                members: {
                                                    IpAddressV4: {}
                                                }
                                            },
                                            RemoteIpDetails: {
                                                shape: "Sox"
                                            }
                                        }
                                    }
                                },
                                Blocked: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                FindingProviderFields: {
                    type: "structure",
                    members: {
                        Confidence: {
                            type: "integer"
                        },
                        Criticality: {
                            type: "integer"
                        },
                        RelatedFindings: {
                            shape: "S1n"
                        },
                        Severity: {
                            type: "structure",
                            members: {
                                Label: {},
                                Original: {}
                            }
                        },
                        Types: {
                            shape: "S1j"
                        }
                    }
                },
                Sample: {
                    type: "boolean"
                },
                GeneratorDetails: {
                    type: "structure",
                    members: {
                        Name: {},
                        Description: {},
                        Labels: {
                            shape: "S1j"
                        }
                    }
                },
                ProcessedAt: {},
                AwsAccountName: {}
            }
        },
        S36: {
            type: "structure",
            members: {
                Begin: {
                    type: "integer"
                },
                End: {
                    type: "integer"
                }
            }
        },
        S39: {
            type: "structure",
            members: {
                Protocol: {},
                Destination: {
                    shape: "S3a"
                },
                Source: {
                    shape: "S3a"
                }
            }
        },
        S3a: {
            type: "structure",
            members: {
                Address: {
                    shape: "S23"
                },
                PortRanges: {
                    type: "list",
                    member: {
                        shape: "S36"
                    }
                }
            }
        },
        S3w: {
            type: "structure",
            members: {
                LineRanges: {
                    shape: "S3x"
                },
                OffsetRanges: {
                    shape: "S3x"
                },
                Pages: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PageNumber: {
                                type: "long"
                            },
                            LineRange: {
                                shape: "S3y"
                            },
                            OffsetRange: {
                                shape: "S3y"
                            }
                        }
                    }
                },
                Records: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            JsonPath: {},
                            RecordIndex: {
                                type: "long"
                            }
                        }
                    }
                },
                Cells: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Column: {
                                type: "long"
                            },
                            Row: {
                                type: "long"
                            },
                            ColumnName: {},
                            CellReference: {}
                        }
                    }
                }
            }
        },
        S3x: {
            type: "list",
            member: {
                shape: "S3y"
            }
        },
        S3y: {
            type: "structure",
            members: {
                Start: {
                    type: "long"
                },
                End: {
                    type: "long"
                },
                StartColumn: {
                    type: "long"
                }
            }
        },
        S4k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ArtifactIdentifier: {},
                    EncryptionDisabled: {
                        type: "boolean"
                    },
                    Location: {},
                    Name: {},
                    NamespaceType: {},
                    OverrideArtifactName: {
                        type: "boolean"
                    },
                    Packaging: {},
                    Path: {},
                    Type: {}
                }
            }
        },
        S4v: {
            type: "list",
            member: {}
        },
        S5t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IpProtocol: {},
                    FromPort: {
                        type: "integer"
                    },
                    ToPort: {
                        type: "integer"
                    },
                    UserIdGroupPairs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupId: {},
                                GroupName: {},
                                PeeringStatus: {},
                                UserId: {},
                                VpcId: {},
                                VpcPeeringConnectionId: {}
                            }
                        }
                    },
                    IpRanges: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CidrIp: {}
                            }
                        }
                    },
                    Ipv6Ranges: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CidrIpv6: {}
                            }
                        }
                    },
                    PrefixListIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PrefixListId: {}
                            }
                        }
                    }
                }
            }
        },
        S69: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AssociationId: {},
                    Ipv6CidrBlock: {},
                    CidrBlockState: {}
                }
            }
        },
        S73: {
            type: "structure",
            members: {
                CloudWatchLogsLogGroupArn: {},
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S7q: {
            type: "structure",
            members: {
                BlockPublicAcls: {
                    type: "boolean"
                },
                BlockPublicPolicy: {
                    type: "boolean"
                },
                IgnorePublicAcls: {
                    type: "boolean"
                },
                RestrictPublicBuckets: {
                    type: "boolean"
                }
            }
        },
        S8k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PolicyName: {},
                    PolicyArn: {}
                }
            }
        },
        S8m: {
            type: "structure",
            members: {
                PermissionsBoundaryArn: {},
                PermissionsBoundaryType: {}
            }
        },
        S8t: {
            type: "structure",
            members: {
                DetailedMetricsEnabled: {
                    type: "boolean"
                },
                LoggingLevel: {},
                DataTraceEnabled: {
                    type: "boolean"
                },
                ThrottlingBurstLimit: {
                    type: "integer"
                },
                ThrottlingRateLimit: {
                    type: "double"
                }
            }
        },
        S8u: {
            type: "structure",
            members: {
                Format: {},
                DestinationArn: {}
            }
        },
        S94: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AttributeName: {},
                    KeyType: {}
                }
            }
        },
        S96: {
            type: "structure",
            members: {
                NonKeyAttributes: {
                    shape: "S23"
                },
                ProjectionType: {}
            }
        },
        S97: {
            type: "structure",
            members: {
                LastDecreaseDateTime: {},
                LastIncreaseDateTime: {},
                NumberOfDecreasesToday: {
                    type: "integer"
                },
                ReadCapacityUnits: {
                    type: "integer"
                },
                WriteCapacityUnits: {
                    type: "integer"
                }
            }
        },
        S9e: {
            type: "structure",
            members: {
                ReadCapacityUnits: {
                    type: "integer"
                }
            }
        },
        S9t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DomainName: {},
                    ResourceRecord: {
                        type: "structure",
                        members: {
                            Name: {},
                            Type: {},
                            Value: {}
                        }
                    },
                    ValidationDomain: {},
                    ValidationEmails: {
                        shape: "S23"
                    },
                    ValidationMethod: {},
                    ValidationStatus: {}
                }
            }
        },
        Sc1: {
            type: "structure",
            members: {
                Address: {},
                Port: {
                    type: "integer"
                },
                HostedZoneId: {}
            }
        },
        Sc2: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    VpcSecurityGroupId: {},
                    Status: {}
                }
            }
        },
        Scc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        Sci: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Domain: {},
                    Status: {},
                    Fqdn: {},
                    IamRoleName: {}
                }
            }
        },
        Sde: {
            type: "structure",
            members: {
                Name: {},
                Image: {},
                MountPoints: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SourceVolume: {},
                            ContainerPath: {}
                        }
                    }
                },
                Privileged: {
                    type: "boolean"
                }
            }
        },
        Sg3: {
            type: "structure",
            members: {
                CloudWatchLogsLogGroupArn: {},
                Enabled: {
                    type: "boolean"
                }
            }
        },
        Sgu: {
            type: "structure",
            members: {
                PublishMetricAction: {
                    type: "structure",
                    members: {
                        Dimensions: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Value: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        Sii: {
            type: "structure",
            members: {
                CidrBlock: {},
                CidrBlockSet: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CidrBlock: {}
                        }
                    }
                },
                Ipv6CidrBlockSet: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Ipv6CidrBlock: {}
                        }
                    }
                },
                OwnerId: {},
                PeeringOptions: {
                    type: "structure",
                    members: {
                        AllowDnsResolutionFromRemoteVpc: {
                            type: "boolean"
                        },
                        AllowEgressFromLocalClassicLinkToRemoteVpc: {
                            type: "boolean"
                        },
                        AllowEgressFromLocalVpcToRemoteClassicLink: {
                            type: "boolean"
                        }
                    }
                },
                Region: {},
                VpcId: {}
            }
        },
        Sjn: {
            type: "structure",
            members: {
                DeleteAfterDays: {
                    type: "long"
                },
                MoveToColdStorageAfterDays: {
                    type: "long"
                }
            }
        },
        Sl6: {
            type: "structure",
            members: {
                CustomRequestHandling: {
                    shape: "Sl7"
                }
            }
        },
        Sl7: {
            type: "structure",
            members: {
                InsertHeaders: {
                    shape: "Sl8"
                }
            }
        },
        Sl8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        Sla: {
            type: "structure",
            members: {
                CustomResponse: {
                    type: "structure",
                    members: {
                        CustomResponseBodyKey: {},
                        ResponseCode: {
                            type: "integer"
                        },
                        ResponseHeaders: {
                            shape: "Sl8"
                        }
                    }
                }
            }
        },
        Slc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Action: {
                        type: "structure",
                        members: {
                            Allow: {
                                shape: "Sl6"
                            },
                            Block: {
                                shape: "Sla"
                            },
                            Captcha: {
                                type: "structure",
                                members: {
                                    CustomRequestHandling: {
                                        shape: "Sl7"
                                    }
                                }
                            },
                            Count: {
                                type: "structure",
                                members: {
                                    CustomRequestHandling: {
                                        shape: "Sl7"
                                    }
                                }
                            }
                        }
                    },
                    Name: {},
                    OverrideAction: {},
                    Priority: {
                        type: "integer"
                    },
                    VisibilityConfig: {
                        shape: "Slh"
                    }
                }
            }
        },
        Slh: {
            type: "structure",
            members: {
                CloudWatchMetricsEnabled: {
                    type: "boolean"
                },
                MetricName: {},
                SampledRequestsEnabled: {
                    type: "boolean"
                }
            }
        },
        Sm0: {
            type: "structure",
            members: {
                AuthTtL: {
                    type: "long"
                },
                ClientId: {},
                IatTtL: {
                    type: "long"
                },
                Issuer: {}
            }
        },
        Sm1: {
            type: "structure",
            members: {
                AuthorizerResultTtlInSeconds: {
                    type: "integer"
                },
                AuthorizerUri: {},
                IdentityValidationExpression: {}
            }
        },
        Sm2: {
            type: "structure",
            members: {
                AppIdClientRegex: {},
                AwsRegion: {},
                DefaultAction: {},
                UserPoolId: {}
            }
        },
        Sox: {
            type: "structure",
            members: {
                IpAddressV4: {},
                Organization: {
                    type: "structure",
                    members: {
                        Asn: {
                            type: "integer"
                        },
                        AsnOrg: {},
                        Isp: {},
                        Org: {}
                    }
                },
                Country: {
                    type: "structure",
                    members: {
                        CountryCode: {},
                        CountryName: {}
                    }
                },
                City: {
                    type: "structure",
                    members: {
                        CityName: {}
                    }
                },
                GeoLocation: {
                    type: "structure",
                    members: {
                        Lon: {
                            type: "double"
                        },
                        Lat: {
                            type: "double"
                        }
                    }
                }
            }
        },
        Sp3: {
            type: "structure",
            members: {
                Port: {
                    type: "integer"
                },
                PortName: {}
            }
        },
        Spm: {
            type: "list",
            member: {
                shape: "Spn"
            }
        },
        Spn: {
            type: "structure",
            required: [ "Id", "ProductArn" ],
            members: {
                Id: {},
                ProductArn: {}
            }
        },
        Spt: {
            type: "structure",
            required: [ "StandardsArn", "SecurityControlId", "AssociationStatus" ],
            members: {
                StandardsArn: {},
                SecurityControlId: {},
                AssociationStatus: {},
                UpdatedReason: {}
            }
        },
        Sq0: {
            type: "map",
            key: {},
            value: {}
        },
        Sq5: {
            type: "structure",
            members: {
                SecurityHub: {
                    type: "structure",
                    members: {
                        ServiceEnabled: {
                            type: "boolean"
                        },
                        EnabledStandardIdentifiers: {
                            type: "list",
                            member: {}
                        },
                        SecurityControlsConfiguration: {
                            type: "structure",
                            members: {
                                EnabledSecurityControlIdentifiers: {
                                    type: "list",
                                    member: {}
                                },
                                DisabledSecurityControlIdentifiers: {
                                    type: "list",
                                    member: {}
                                },
                                SecurityControlCustomParameters: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            SecurityControlId: {},
                                            Parameters: {
                                                shape: "S2a"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            union: true
        },
        Sqh: {
            type: "structure",
            members: {
                ProductArn: {
                    shape: "Sx"
                },
                AwsAccountId: {
                    shape: "Sx"
                },
                Id: {
                    shape: "Sx"
                },
                GeneratorId: {
                    shape: "Sx"
                },
                Region: {
                    shape: "Sx"
                },
                Type: {
                    shape: "Sx"
                },
                FirstObservedAt: {
                    shape: "S10"
                },
                LastObservedAt: {
                    shape: "S10"
                },
                CreatedAt: {
                    shape: "S10"
                },
                UpdatedAt: {
                    shape: "S10"
                },
                SeverityProduct: {
                    shape: "S14",
                    deprecated: true,
                    deprecatedMessage: "This filter is deprecated. Instead, use FindingProviderSeverityOriginal."
                },
                SeverityNormalized: {
                    shape: "S14",
                    deprecated: true,
                    deprecatedMessage: "This filter is deprecated. Instead, use SeverityLabel or FindingProviderFieldsSeverityLabel."
                },
                SeverityLabel: {
                    shape: "Sx"
                },
                Confidence: {
                    shape: "S14"
                },
                Criticality: {
                    shape: "S14"
                },
                Title: {
                    shape: "Sx"
                },
                Description: {
                    shape: "Sx"
                },
                RecommendationText: {
                    shape: "Sx"
                },
                SourceUrl: {
                    shape: "Sx"
                },
                ProductFields: {
                    shape: "S17"
                },
                ProductName: {
                    shape: "Sx"
                },
                CompanyName: {
                    shape: "Sx"
                },
                UserDefinedFields: {
                    shape: "S17"
                },
                MalwareName: {
                    shape: "Sx"
                },
                MalwareType: {
                    shape: "Sx"
                },
                MalwarePath: {
                    shape: "Sx"
                },
                MalwareState: {
                    shape: "Sx"
                },
                NetworkDirection: {
                    shape: "Sx"
                },
                NetworkProtocol: {
                    shape: "Sx"
                },
                NetworkSourceIpV4: {
                    shape: "Sqi"
                },
                NetworkSourceIpV6: {
                    shape: "Sqi"
                },
                NetworkSourcePort: {
                    shape: "S14"
                },
                NetworkSourceDomain: {
                    shape: "Sx"
                },
                NetworkSourceMac: {
                    shape: "Sx"
                },
                NetworkDestinationIpV4: {
                    shape: "Sqi"
                },
                NetworkDestinationIpV6: {
                    shape: "Sqi"
                },
                NetworkDestinationPort: {
                    shape: "S14"
                },
                NetworkDestinationDomain: {
                    shape: "Sx"
                },
                ProcessName: {
                    shape: "Sx"
                },
                ProcessPath: {
                    shape: "Sx"
                },
                ProcessPid: {
                    shape: "S14"
                },
                ProcessParentPid: {
                    shape: "S14"
                },
                ProcessLaunchedAt: {
                    shape: "S10"
                },
                ProcessTerminatedAt: {
                    shape: "S10"
                },
                ThreatIntelIndicatorType: {
                    shape: "Sx"
                },
                ThreatIntelIndicatorValue: {
                    shape: "Sx"
                },
                ThreatIntelIndicatorCategory: {
                    shape: "Sx"
                },
                ThreatIntelIndicatorLastObservedAt: {
                    shape: "S10"
                },
                ThreatIntelIndicatorSource: {
                    shape: "Sx"
                },
                ThreatIntelIndicatorSourceUrl: {
                    shape: "Sx"
                },
                ResourceType: {
                    shape: "Sx"
                },
                ResourceId: {
                    shape: "Sx"
                },
                ResourcePartition: {
                    shape: "Sx"
                },
                ResourceRegion: {
                    shape: "Sx"
                },
                ResourceTags: {
                    shape: "S17"
                },
                ResourceAwsEc2InstanceType: {
                    shape: "Sx"
                },
                ResourceAwsEc2InstanceImageId: {
                    shape: "Sx"
                },
                ResourceAwsEc2InstanceIpV4Addresses: {
                    shape: "Sqi"
                },
                ResourceAwsEc2InstanceIpV6Addresses: {
                    shape: "Sqi"
                },
                ResourceAwsEc2InstanceKeyName: {
                    shape: "Sx"
                },
                ResourceAwsEc2InstanceIamInstanceProfileArn: {
                    shape: "Sx"
                },
                ResourceAwsEc2InstanceVpcId: {
                    shape: "Sx"
                },
                ResourceAwsEc2InstanceSubnetId: {
                    shape: "Sx"
                },
                ResourceAwsEc2InstanceLaunchedAt: {
                    shape: "S10"
                },
                ResourceAwsS3BucketOwnerId: {
                    shape: "Sx"
                },
                ResourceAwsS3BucketOwnerName: {
                    shape: "Sx"
                },
                ResourceAwsIamAccessKeyUserName: {
                    shape: "Sx",
                    deprecated: true,
                    deprecatedMessage: "This filter is deprecated. Instead, use ResourceAwsIamAccessKeyPrincipalName."
                },
                ResourceAwsIamAccessKeyPrincipalName: {
                    shape: "Sx"
                },
                ResourceAwsIamAccessKeyStatus: {
                    shape: "Sx"
                },
                ResourceAwsIamAccessKeyCreatedAt: {
                    shape: "S10"
                },
                ResourceAwsIamUserUserName: {
                    shape: "Sx"
                },
                ResourceContainerName: {
                    shape: "Sx"
                },
                ResourceContainerImageId: {
                    shape: "Sx"
                },
                ResourceContainerImageName: {
                    shape: "Sx"
                },
                ResourceContainerLaunchedAt: {
                    shape: "S10"
                },
                ResourceDetailsOther: {
                    shape: "S17"
                },
                ComplianceStatus: {
                    shape: "Sx"
                },
                VerificationState: {
                    shape: "Sx"
                },
                WorkflowState: {
                    shape: "Sx"
                },
                WorkflowStatus: {
                    shape: "Sx"
                },
                RecordState: {
                    shape: "Sx"
                },
                RelatedFindingsProductArn: {
                    shape: "Sx"
                },
                RelatedFindingsId: {
                    shape: "Sx"
                },
                NoteText: {
                    shape: "Sx"
                },
                NoteUpdatedAt: {
                    shape: "S10"
                },
                NoteUpdatedBy: {
                    shape: "Sx"
                },
                Keyword: {
                    deprecated: true,
                    deprecatedMessage: "The Keyword property is deprecated.",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Value: {}
                        }
                    }
                },
                FindingProviderFieldsConfidence: {
                    shape: "S14"
                },
                FindingProviderFieldsCriticality: {
                    shape: "S14"
                },
                FindingProviderFieldsRelatedFindingsId: {
                    shape: "Sx"
                },
                FindingProviderFieldsRelatedFindingsProductArn: {
                    shape: "Sx"
                },
                FindingProviderFieldsSeverityLabel: {
                    shape: "Sx"
                },
                FindingProviderFieldsSeverityOriginal: {
                    shape: "Sx"
                },
                FindingProviderFieldsTypes: {
                    shape: "Sx"
                },
                Sample: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Value: {
                                type: "boolean"
                            }
                        }
                    }
                },
                ComplianceSecurityControlId: {
                    shape: "Sx"
                },
                ComplianceAssociatedStandardsId: {
                    shape: "Sx"
                },
                VulnerabilitiesExploitAvailable: {
                    shape: "Sx"
                },
                VulnerabilitiesFixAvailable: {
                    shape: "Sx"
                },
                ComplianceSecurityControlParametersName: {
                    shape: "Sx"
                },
                ComplianceSecurityControlParametersValue: {
                    shape: "Sx"
                },
                AwsAccountName: {
                    shape: "Sx"
                },
                ResourceApplicationName: {
                    shape: "Sx"
                },
                ResourceApplicationArn: {
                    shape: "Sx"
                }
            }
        },
        Sqi: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Cidr: {}
                }
            }
        },
        Squ: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    ProcessingResult: {}
                }
            }
        },
        Sqx: {
            type: "list",
            member: {}
        },
        Src: {
            type: "list",
            member: {}
        },
        Sro: {
            type: "structure",
            members: {
                ConfigurationType: {},
                Status: {},
                StatusMessage: {}
            }
        },
        Ssr: {
            type: "structure",
            members: {
                AccountId: {},
                InvitationId: {},
                InvitedAt: {
                    shape: "S1p"
                },
                MemberStatus: {}
            }
        },
        Stt: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AccountId: {},
                    Email: {},
                    MasterId: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use AdministratorId instead."
                    },
                    AdministratorId: {},
                    MemberStatus: {},
                    InvitedAt: {
                        shape: "S1p"
                    },
                    UpdatedAt: {
                        shape: "S1p"
                    }
                }
            }
        },
        Stx: {
            type: "structure",
            required: [ "SecurityControlId", "Title", "Description", "RemediationUrl", "SeverityRating", "CurrentRegionAvailability" ],
            members: {
                SecurityControlId: {},
                Title: {},
                Description: {},
                RemediationUrl: {},
                SeverityRating: {},
                CurrentRegionAvailability: {},
                CustomizableProperties: {
                    type: "list",
                    member: {}
                },
                ParameterDefinitions: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "Description", "ConfigurationOptions" ],
                        members: {
                            Description: {},
                            ConfigurationOptions: {
                                type: "structure",
                                members: {
                                    Integer: {
                                        type: "structure",
                                        members: {
                                            DefaultValue: {
                                                type: "integer"
                                            },
                                            Min: {
                                                type: "integer"
                                            },
                                            Max: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    IntegerList: {
                                        type: "structure",
                                        members: {
                                            DefaultValue: {
                                                shape: "S2e"
                                            },
                                            Min: {
                                                type: "integer"
                                            },
                                            Max: {
                                                type: "integer"
                                            },
                                            MaxItems: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    Double: {
                                        type: "structure",
                                        members: {
                                            DefaultValue: {
                                                type: "double"
                                            },
                                            Min: {
                                                type: "double"
                                            },
                                            Max: {
                                                type: "double"
                                            }
                                        }
                                    },
                                    String: {
                                        type: "structure",
                                        members: {
                                            DefaultValue: {},
                                            Re2Expression: {},
                                            ExpressionDescription: {}
                                        }
                                    },
                                    StringList: {
                                        type: "structure",
                                        members: {
                                            DefaultValue: {
                                                shape: "S23"
                                            },
                                            Re2Expression: {},
                                            MaxItems: {
                                                type: "integer"
                                            },
                                            ExpressionDescription: {}
                                        }
                                    },
                                    Boolean: {
                                        type: "structure",
                                        members: {
                                            DefaultValue: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    Enum: {
                                        type: "structure",
                                        members: {
                                            DefaultValue: {},
                                            AllowedValues: {
                                                shape: "S23"
                                            }
                                        }
                                    },
                                    EnumList: {
                                        type: "structure",
                                        members: {
                                            DefaultValue: {
                                                shape: "S23"
                                            },
                                            MaxItems: {
                                                type: "integer"
                                            },
                                            AllowedValues: {
                                                shape: "S23"
                                            }
                                        }
                                    }
                                },
                                union: true
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeActionTargets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ActionTargets"
        },
        DescribeProducts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Products"
        },
        DescribeStandards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Standards"
        },
        DescribeStandardsControls: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Controls"
        },
        GetEnabledStandards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "StandardsSubscriptions"
        },
        GetFindingHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Records"
        },
        GetFindings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Findings"
        },
        GetInsights: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Insights"
        },
        ListConfigurationPolicies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ConfigurationPolicySummaries"
        },
        ListConfigurationPolicyAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ConfigurationPolicyAssociationSummaries"
        },
        ListEnabledProductsForImport: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ProductSubscriptions"
        },
        ListFindingAggregators: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FindingAggregators"
        },
        ListInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Invitations"
        },
        ListMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Members"
        },
        ListOrganizationAdminAccounts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AdminAccounts"
        },
        ListSecurityControlDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SecurityControlDefinitions"
        },
        ListStandardsControlAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "StandardsControlAssociationSummaries"
        }
    }
};

AWS.apiLoader.services["appmesh"] = {};

AWS.AppMesh = AWS.Service.defineService("appmesh", [ "2018-10-01", "2019-01-25" ]);

AWS.apiLoader.services["appmesh"]["2019-01-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-01-25",
        endpointPrefix: "appmesh",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS App Mesh",
        serviceId: "App Mesh",
        signatureVersion: "v4",
        signingName: "appmesh",
        uid: "appmesh-2019-01-25"
    },
    operations: {
        CreateGatewayRoute: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gatewayRouteName", "meshName", "spec", "virtualGatewayName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    gatewayRouteName: {},
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S5"
                    },
                    tags: {
                        shape: "S1a"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoute" ],
                members: {
                    gatewayRoute: {
                        shape: "S1f"
                    }
                },
                payload: "gatewayRoute"
            },
            idempotent: true
        },
        CreateMesh: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {},
                    spec: {
                        shape: "S1m"
                    },
                    tags: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "mesh" ],
                members: {
                    mesh: {
                        shape: "S1s"
                    }
                },
                payload: "mesh"
            },
            idempotent: true
        },
        CreateRoute: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "routeName", "spec", "virtualRouterName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    routeName: {},
                    spec: {
                        shape: "S1w"
                    },
                    tags: {
                        shape: "S1a"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "route" ],
                members: {
                    route: {
                        shape: "S2x"
                    }
                },
                payload: "route"
            },
            idempotent: true
        },
        CreateVirtualGateway: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualGatewayName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S31"
                    },
                    tags: {
                        shape: "S1a"
                    },
                    virtualGatewayName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateway" ],
                members: {
                    virtualGateway: {
                        shape: "S4h"
                    }
                },
                payload: "virtualGateway"
            },
            idempotent: true
        },
        CreateVirtualNode: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualNodeName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S4l"
                    },
                    tags: {
                        shape: "S1a"
                    },
                    virtualNodeName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNode" ],
                members: {
                    virtualNode: {
                        shape: "S63"
                    }
                },
                payload: "virtualNode"
            },
            idempotent: true
        },
        CreateVirtualRouter: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualRouterName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S67"
                    },
                    tags: {
                        shape: "S1a"
                    },
                    virtualRouterName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouter" ],
                members: {
                    virtualRouter: {
                        shape: "S6b"
                    }
                },
                payload: "virtualRouter"
            },
            idempotent: true
        },
        CreateVirtualService: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualServiceName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S6f"
                    },
                    tags: {
                        shape: "S1a"
                    },
                    virtualServiceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "virtualService" ],
                members: {
                    virtualService: {
                        shape: "S6k"
                    }
                },
                payload: "virtualService"
            },
            idempotent: true
        },
        DeleteGatewayRoute: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gatewayRouteName", "meshName", "virtualGatewayName" ],
                members: {
                    gatewayRouteName: {
                        location: "uri",
                        locationName: "gatewayRouteName"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoute" ],
                members: {
                    gatewayRoute: {
                        shape: "S1f"
                    }
                },
                payload: "gatewayRoute"
            },
            idempotent: true
        },
        DeleteMesh: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "mesh" ],
                members: {
                    mesh: {
                        shape: "S1s"
                    }
                },
                payload: "mesh"
            },
            idempotent: true
        },
        DeleteRoute: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "routeName", "virtualRouterName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    routeName: {
                        location: "uri",
                        locationName: "routeName"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "route" ],
                members: {
                    route: {
                        shape: "S2x"
                    }
                },
                payload: "route"
            },
            idempotent: true
        },
        DeleteVirtualGateway: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualGatewayName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateway" ],
                members: {
                    virtualGateway: {
                        shape: "S4h"
                    }
                },
                payload: "virtualGateway"
            },
            idempotent: true
        },
        DeleteVirtualNode: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualNodeName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualNodeName: {
                        location: "uri",
                        locationName: "virtualNodeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNode" ],
                members: {
                    virtualNode: {
                        shape: "S63"
                    }
                },
                payload: "virtualNode"
            },
            idempotent: true
        },
        DeleteVirtualRouter: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualRouterName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouter" ],
                members: {
                    virtualRouter: {
                        shape: "S6b"
                    }
                },
                payload: "virtualRouter"
            },
            idempotent: true
        },
        DeleteVirtualService: {
            http: {
                method: "DELETE",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualServiceName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualServiceName: {
                        location: "uri",
                        locationName: "virtualServiceName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualService" ],
                members: {
                    virtualService: {
                        shape: "S6k"
                    }
                },
                payload: "virtualService"
            },
            idempotent: true
        },
        DescribeGatewayRoute: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gatewayRouteName", "meshName", "virtualGatewayName" ],
                members: {
                    gatewayRouteName: {
                        location: "uri",
                        locationName: "gatewayRouteName"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoute" ],
                members: {
                    gatewayRoute: {
                        shape: "S1f"
                    }
                },
                payload: "gatewayRoute"
            }
        },
        DescribeMesh: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "mesh" ],
                members: {
                    mesh: {
                        shape: "S1s"
                    }
                },
                payload: "mesh"
            }
        },
        DescribeRoute: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "routeName", "virtualRouterName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    routeName: {
                        location: "uri",
                        locationName: "routeName"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "route" ],
                members: {
                    route: {
                        shape: "S2x"
                    }
                },
                payload: "route"
            }
        },
        DescribeVirtualGateway: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualGatewayName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateway" ],
                members: {
                    virtualGateway: {
                        shape: "S4h"
                    }
                },
                payload: "virtualGateway"
            }
        },
        DescribeVirtualNode: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualNodeName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualNodeName: {
                        location: "uri",
                        locationName: "virtualNodeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNode" ],
                members: {
                    virtualNode: {
                        shape: "S63"
                    }
                },
                payload: "virtualNode"
            }
        },
        DescribeVirtualRouter: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualRouterName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouter" ],
                members: {
                    virtualRouter: {
                        shape: "S6b"
                    }
                },
                payload: "virtualRouter"
            }
        },
        DescribeVirtualService: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualServiceName" ],
                members: {
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    virtualServiceName: {
                        location: "uri",
                        locationName: "virtualServiceName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualService" ],
                members: {
                    virtualService: {
                        shape: "S6k"
                    }
                },
                payload: "virtualService"
            }
        },
        ListGatewayRoutes: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualGatewayName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoutes" ],
                members: {
                    gatewayRoutes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "gatewayRouteName", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualGatewayName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                gatewayRouteName: {},
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualGatewayName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMeshes: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "meshes" ],
                members: {
                    meshes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRoutes: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "virtualRouterName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "routes" ],
                members: {
                    nextToken: {},
                    routes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "routeName", "version", "virtualRouterName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                routeName: {},
                                version: {
                                    type: "long"
                                },
                                virtualRouterName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v20190125/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    nextToken: {},
                    tags: {
                        shape: "S1a"
                    }
                }
            }
        },
        ListVirtualGateways: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateways" ],
                members: {
                    nextToken: {},
                    virtualGateways: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualGatewayName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualGatewayName: {}
                            }
                        }
                    }
                }
            }
        },
        ListVirtualNodes: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNodes" ],
                members: {
                    nextToken: {},
                    virtualNodes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualNodeName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualNodeName: {}
                            }
                        }
                    }
                }
            }
        },
        ListVirtualRouters: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouters" ],
                members: {
                    nextToken: {},
                    virtualRouters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualRouterName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualRouterName: {}
                            }
                        }
                    }
                }
            }
        },
        ListVirtualServices: {
            http: {
                method: "GET",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualServices" ],
                members: {
                    nextToken: {},
                    virtualServices: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdAt", "lastUpdatedAt", "meshName", "meshOwner", "resourceOwner", "version", "virtualServiceName" ],
                            members: {
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                lastUpdatedAt: {
                                    type: "timestamp"
                                },
                                meshName: {},
                                meshOwner: {},
                                resourceOwner: {},
                                version: {
                                    type: "long"
                                },
                                virtualServiceName: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/tag",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/untag",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateGatewayRoute: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateway/{virtualGatewayName}/gatewayRoutes/{gatewayRouteName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "gatewayRouteName", "meshName", "spec", "virtualGatewayName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    gatewayRouteName: {
                        location: "uri",
                        locationName: "gatewayRouteName"
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S5"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "gatewayRoute" ],
                members: {
                    gatewayRoute: {
                        shape: "S1f"
                    }
                },
                payload: "gatewayRoute"
            },
            idempotent: true
        },
        UpdateMesh: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    spec: {
                        shape: "S1m"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "mesh" ],
                members: {
                    mesh: {
                        shape: "S1s"
                    }
                },
                payload: "mesh"
            },
            idempotent: true
        },
        UpdateRoute: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouter/{virtualRouterName}/routes/{routeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "routeName", "spec", "virtualRouterName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    routeName: {
                        location: "uri",
                        locationName: "routeName"
                    },
                    spec: {
                        shape: "S1w"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "route" ],
                members: {
                    route: {
                        shape: "S2x"
                    }
                },
                payload: "route"
            },
            idempotent: true
        },
        UpdateVirtualGateway: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualGateways/{virtualGatewayName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualGatewayName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S31"
                    },
                    virtualGatewayName: {
                        location: "uri",
                        locationName: "virtualGatewayName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualGateway" ],
                members: {
                    virtualGateway: {
                        shape: "S4h"
                    }
                },
                payload: "virtualGateway"
            },
            idempotent: true
        },
        UpdateVirtualNode: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualNodes/{virtualNodeName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualNodeName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S4l"
                    },
                    virtualNodeName: {
                        location: "uri",
                        locationName: "virtualNodeName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualNode" ],
                members: {
                    virtualNode: {
                        shape: "S63"
                    }
                },
                payload: "virtualNode"
            },
            idempotent: true
        },
        UpdateVirtualRouter: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualRouters/{virtualRouterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualRouterName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S67"
                    },
                    virtualRouterName: {
                        location: "uri",
                        locationName: "virtualRouterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualRouter" ],
                members: {
                    virtualRouter: {
                        shape: "S6b"
                    }
                },
                payload: "virtualRouter"
            },
            idempotent: true
        },
        UpdateVirtualService: {
            http: {
                method: "PUT",
                requestUri: "/v20190125/meshes/{meshName}/virtualServices/{virtualServiceName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "meshName", "spec", "virtualServiceName" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    meshName: {
                        location: "uri",
                        locationName: "meshName"
                    },
                    meshOwner: {
                        location: "querystring",
                        locationName: "meshOwner"
                    },
                    spec: {
                        shape: "S6f"
                    },
                    virtualServiceName: {
                        location: "uri",
                        locationName: "virtualServiceName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "virtualService" ],
                members: {
                    virtualService: {
                        shape: "S6k"
                    }
                },
                payload: "virtualService"
            },
            idempotent: true
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                grpcRoute: {
                    type: "structure",
                    required: [ "action", "match" ],
                    members: {
                        action: {
                            type: "structure",
                            required: [ "target" ],
                            members: {
                                rewrite: {
                                    type: "structure",
                                    members: {
                                        hostname: {
                                            shape: "S9"
                                        }
                                    }
                                },
                                target: {
                                    shape: "Sb"
                                }
                            }
                        },
                        match: {
                            type: "structure",
                            members: {
                                hostname: {
                                    shape: "Sf"
                                },
                                metadata: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name" ],
                                        members: {
                                            invert: {
                                                type: "boolean"
                                            },
                                            match: {
                                                type: "structure",
                                                members: {
                                                    exact: {},
                                                    prefix: {},
                                                    range: {
                                                        shape: "Sn"
                                                    },
                                                    regex: {},
                                                    suffix: {}
                                                },
                                                union: true
                                            },
                                            name: {}
                                        }
                                    }
                                },
                                port: {
                                    type: "integer"
                                },
                                serviceName: {}
                            }
                        }
                    }
                },
                http2Route: {
                    shape: "Sr"
                },
                httpRoute: {
                    shape: "Sr"
                },
                priority: {
                    type: "integer"
                }
            }
        },
        S9: {
            type: "structure",
            members: {
                defaultTargetHostname: {}
            }
        },
        Sb: {
            type: "structure",
            required: [ "virtualService" ],
            members: {
                port: {
                    type: "integer"
                },
                virtualService: {
                    type: "structure",
                    required: [ "virtualServiceName" ],
                    members: {
                        virtualServiceName: {}
                    }
                }
            }
        },
        Sf: {
            type: "structure",
            members: {
                exact: {},
                suffix: {}
            }
        },
        Sn: {
            type: "structure",
            required: [ "end", "start" ],
            members: {
                end: {
                    type: "long"
                },
                start: {
                    type: "long"
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "action", "match" ],
            members: {
                action: {
                    type: "structure",
                    required: [ "target" ],
                    members: {
                        rewrite: {
                            type: "structure",
                            members: {
                                hostname: {
                                    shape: "S9"
                                },
                                path: {
                                    type: "structure",
                                    members: {
                                        exact: {}
                                    }
                                },
                                prefix: {
                                    type: "structure",
                                    members: {
                                        defaultPrefix: {},
                                        value: {}
                                    }
                                }
                            }
                        },
                        target: {
                            shape: "Sb"
                        }
                    }
                },
                match: {
                    type: "structure",
                    members: {
                        headers: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    invert: {
                                        type: "boolean"
                                    },
                                    match: {
                                        shape: "S11"
                                    },
                                    name: {}
                                }
                            }
                        },
                        hostname: {
                            shape: "Sf"
                        },
                        method: {},
                        path: {
                            shape: "S13"
                        },
                        port: {
                            type: "integer"
                        },
                        prefix: {},
                        queryParameters: {
                            shape: "S15"
                        }
                    }
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                exact: {},
                prefix: {},
                range: {
                    shape: "Sn"
                },
                regex: {},
                suffix: {}
            },
            union: true
        },
        S13: {
            type: "structure",
            members: {
                exact: {},
                regex: {}
            }
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    match: {
                        type: "structure",
                        members: {
                            exact: {}
                        }
                    },
                    name: {}
                }
            }
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S1f: {
            type: "structure",
            required: [ "gatewayRouteName", "meshName", "metadata", "spec", "status", "virtualGatewayName" ],
            members: {
                gatewayRouteName: {},
                meshName: {},
                metadata: {
                    shape: "S1g"
                },
                spec: {
                    shape: "S5"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualGatewayName: {}
            }
        },
        S1g: {
            type: "structure",
            required: [ "arn", "createdAt", "lastUpdatedAt", "meshOwner", "resourceOwner", "uid", "version" ],
            members: {
                arn: {},
                createdAt: {
                    type: "timestamp"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                meshOwner: {},
                resourceOwner: {},
                uid: {},
                version: {
                    type: "long"
                }
            }
        },
        S1m: {
            type: "structure",
            members: {
                egressFilter: {
                    type: "structure",
                    required: [ "type" ],
                    members: {
                        type: {}
                    }
                },
                serviceDiscovery: {
                    type: "structure",
                    members: {
                        ipPreference: {}
                    }
                }
            }
        },
        S1s: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1g"
                },
                spec: {
                    shape: "S1m"
                },
                status: {
                    type: "structure",
                    members: {
                        status: {}
                    }
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                grpcRoute: {
                    type: "structure",
                    required: [ "action", "match" ],
                    members: {
                        action: {
                            type: "structure",
                            required: [ "weightedTargets" ],
                            members: {
                                weightedTargets: {
                                    shape: "S1z"
                                }
                            }
                        },
                        match: {
                            type: "structure",
                            members: {
                                metadata: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name" ],
                                        members: {
                                            invert: {
                                                type: "boolean"
                                            },
                                            match: {
                                                type: "structure",
                                                members: {
                                                    exact: {},
                                                    prefix: {},
                                                    range: {
                                                        shape: "Sn"
                                                    },
                                                    regex: {},
                                                    suffix: {}
                                                },
                                                union: true
                                            },
                                            name: {}
                                        }
                                    }
                                },
                                methodName: {},
                                port: {
                                    type: "integer"
                                },
                                serviceName: {}
                            }
                        },
                        retryPolicy: {
                            type: "structure",
                            required: [ "maxRetries", "perRetryTimeout" ],
                            members: {
                                grpcRetryEvents: {
                                    type: "list",
                                    member: {}
                                },
                                httpRetryEvents: {
                                    shape: "S2a"
                                },
                                maxRetries: {
                                    type: "long"
                                },
                                perRetryTimeout: {
                                    shape: "S2d"
                                },
                                tcpRetryEvents: {
                                    shape: "S2g"
                                }
                            }
                        },
                        timeout: {
                            shape: "S2i"
                        }
                    }
                },
                http2Route: {
                    shape: "S2j"
                },
                httpRoute: {
                    shape: "S2j"
                },
                priority: {
                    type: "integer"
                },
                tcpRoute: {
                    type: "structure",
                    required: [ "action" ],
                    members: {
                        action: {
                            type: "structure",
                            required: [ "weightedTargets" ],
                            members: {
                                weightedTargets: {
                                    shape: "S1z"
                                }
                            }
                        },
                        match: {
                            type: "structure",
                            members: {
                                port: {
                                    type: "integer"
                                }
                            }
                        },
                        timeout: {
                            shape: "S2v"
                        }
                    }
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                required: [ "virtualNode", "weight" ],
                members: {
                    port: {
                        type: "integer"
                    },
                    virtualNode: {},
                    weight: {
                        type: "integer"
                    }
                }
            }
        },
        S2a: {
            type: "list",
            member: {}
        },
        S2d: {
            type: "structure",
            members: {
                unit: {},
                value: {
                    type: "long"
                }
            }
        },
        S2g: {
            type: "list",
            member: {}
        },
        S2i: {
            type: "structure",
            members: {
                idle: {
                    shape: "S2d"
                },
                perRequest: {
                    shape: "S2d"
                }
            }
        },
        S2j: {
            type: "structure",
            required: [ "action", "match" ],
            members: {
                action: {
                    type: "structure",
                    required: [ "weightedTargets" ],
                    members: {
                        weightedTargets: {
                            shape: "S1z"
                        }
                    }
                },
                match: {
                    type: "structure",
                    members: {
                        headers: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "name" ],
                                members: {
                                    invert: {
                                        type: "boolean"
                                    },
                                    match: {
                                        shape: "S11"
                                    },
                                    name: {}
                                }
                            }
                        },
                        method: {},
                        path: {
                            shape: "S13"
                        },
                        port: {
                            type: "integer"
                        },
                        prefix: {},
                        queryParameters: {
                            shape: "S15"
                        },
                        scheme: {}
                    }
                },
                retryPolicy: {
                    type: "structure",
                    required: [ "maxRetries", "perRetryTimeout" ],
                    members: {
                        httpRetryEvents: {
                            shape: "S2a"
                        },
                        maxRetries: {
                            type: "long"
                        },
                        perRetryTimeout: {
                            shape: "S2d"
                        },
                        tcpRetryEvents: {
                            shape: "S2g"
                        }
                    }
                },
                timeout: {
                    shape: "S2q"
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                idle: {
                    shape: "S2d"
                },
                perRequest: {
                    shape: "S2d"
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                idle: {
                    shape: "S2d"
                }
            }
        },
        S2x: {
            type: "structure",
            required: [ "meshName", "metadata", "routeName", "spec", "status", "virtualRouterName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1g"
                },
                routeName: {},
                spec: {
                    shape: "S1w"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualRouterName: {}
            }
        },
        S31: {
            type: "structure",
            required: [ "listeners" ],
            members: {
                backendDefaults: {
                    type: "structure",
                    members: {
                        clientPolicy: {
                            type: "structure",
                            members: {
                                tls: {
                                    type: "structure",
                                    required: [ "validation" ],
                                    members: {
                                        certificate: {
                                            type: "structure",
                                            members: {
                                                file: {
                                                    shape: "S36"
                                                },
                                                sds: {
                                                    shape: "S38"
                                                }
                                            },
                                            union: true
                                        },
                                        enforce: {
                                            type: "boolean"
                                        },
                                        ports: {
                                            shape: "S3a"
                                        },
                                        validation: {
                                            type: "structure",
                                            required: [ "trust" ],
                                            members: {
                                                subjectAlternativeNames: {
                                                    shape: "S3d"
                                                },
                                                trust: {
                                                    type: "structure",
                                                    members: {
                                                        acm: {
                                                            type: "structure",
                                                            required: [ "certificateAuthorityArns" ],
                                                            members: {
                                                                certificateAuthorityArns: {
                                                                    type: "list",
                                                                    member: {}
                                                                }
                                                            }
                                                        },
                                                        file: {
                                                            shape: "S3k"
                                                        },
                                                        sds: {
                                                            shape: "S3l"
                                                        }
                                                    },
                                                    union: true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                listeners: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "portMapping" ],
                        members: {
                            connectionPool: {
                                type: "structure",
                                members: {
                                    grpc: {
                                        type: "structure",
                                        required: [ "maxRequests" ],
                                        members: {
                                            maxRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    http: {
                                        type: "structure",
                                        required: [ "maxConnections" ],
                                        members: {
                                            maxConnections: {
                                                type: "integer"
                                            },
                                            maxPendingRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    http2: {
                                        type: "structure",
                                        required: [ "maxRequests" ],
                                        members: {
                                            maxRequests: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                union: true
                            },
                            healthCheck: {
                                type: "structure",
                                required: [ "healthyThreshold", "intervalMillis", "protocol", "timeoutMillis", "unhealthyThreshold" ],
                                members: {
                                    healthyThreshold: {
                                        type: "integer"
                                    },
                                    intervalMillis: {
                                        type: "long"
                                    },
                                    path: {},
                                    port: {
                                        type: "integer"
                                    },
                                    protocol: {},
                                    timeoutMillis: {
                                        type: "long"
                                    },
                                    unhealthyThreshold: {
                                        type: "integer"
                                    }
                                }
                            },
                            portMapping: {
                                type: "structure",
                                required: [ "port", "protocol" ],
                                members: {
                                    port: {
                                        type: "integer"
                                    },
                                    protocol: {}
                                }
                            },
                            tls: {
                                type: "structure",
                                required: [ "certificate", "mode" ],
                                members: {
                                    certificate: {
                                        type: "structure",
                                        members: {
                                            acm: {
                                                type: "structure",
                                                required: [ "certificateArn" ],
                                                members: {
                                                    certificateArn: {}
                                                }
                                            },
                                            file: {
                                                shape: "S36"
                                            },
                                            sds: {
                                                shape: "S38"
                                            }
                                        },
                                        union: true
                                    },
                                    mode: {},
                                    validation: {
                                        type: "structure",
                                        required: [ "trust" ],
                                        members: {
                                            subjectAlternativeNames: {
                                                shape: "S3d"
                                            },
                                            trust: {
                                                type: "structure",
                                                members: {
                                                    file: {
                                                        shape: "S3k"
                                                    },
                                                    sds: {
                                                        shape: "S3l"
                                                    }
                                                },
                                                union: true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                logging: {
                    type: "structure",
                    members: {
                        accessLog: {
                            type: "structure",
                            members: {
                                file: {
                                    type: "structure",
                                    required: [ "path" ],
                                    members: {
                                        format: {
                                            shape: "S4a"
                                        },
                                        path: {}
                                    }
                                }
                            },
                            union: true
                        }
                    }
                }
            }
        },
        S36: {
            type: "structure",
            required: [ "certificateChain", "privateKey" ],
            members: {
                certificateChain: {},
                privateKey: {}
            }
        },
        S38: {
            type: "structure",
            required: [ "secretName" ],
            members: {
                secretName: {}
            }
        },
        S3a: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S3d: {
            type: "structure",
            required: [ "match" ],
            members: {
                match: {
                    type: "structure",
                    required: [ "exact" ],
                    members: {
                        exact: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S3k: {
            type: "structure",
            required: [ "certificateChain" ],
            members: {
                certificateChain: {}
            }
        },
        S3l: {
            type: "structure",
            required: [ "secretName" ],
            members: {
                secretName: {}
            }
        },
        S4a: {
            type: "structure",
            members: {
                json: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "key", "value" ],
                        members: {
                            key: {},
                            value: {}
                        }
                    }
                },
                text: {}
            },
            union: true
        },
        S4h: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status", "virtualGatewayName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1g"
                },
                spec: {
                    shape: "S31"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualGatewayName: {}
            }
        },
        S4l: {
            type: "structure",
            members: {
                backendDefaults: {
                    type: "structure",
                    members: {
                        clientPolicy: {
                            shape: "S4n"
                        }
                    }
                },
                backends: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            virtualService: {
                                type: "structure",
                                required: [ "virtualServiceName" ],
                                members: {
                                    clientPolicy: {
                                        shape: "S4n"
                                    },
                                    virtualServiceName: {}
                                }
                            }
                        },
                        union: true
                    }
                },
                listeners: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "portMapping" ],
                        members: {
                            connectionPool: {
                                type: "structure",
                                members: {
                                    grpc: {
                                        type: "structure",
                                        required: [ "maxRequests" ],
                                        members: {
                                            maxRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    http: {
                                        type: "structure",
                                        required: [ "maxConnections" ],
                                        members: {
                                            maxConnections: {
                                                type: "integer"
                                            },
                                            maxPendingRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    http2: {
                                        type: "structure",
                                        required: [ "maxRequests" ],
                                        members: {
                                            maxRequests: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    tcp: {
                                        type: "structure",
                                        required: [ "maxConnections" ],
                                        members: {
                                            maxConnections: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                union: true
                            },
                            healthCheck: {
                                type: "structure",
                                required: [ "healthyThreshold", "intervalMillis", "protocol", "timeoutMillis", "unhealthyThreshold" ],
                                members: {
                                    healthyThreshold: {
                                        type: "integer"
                                    },
                                    intervalMillis: {
                                        type: "long"
                                    },
                                    path: {},
                                    port: {
                                        type: "integer"
                                    },
                                    protocol: {},
                                    timeoutMillis: {
                                        type: "long"
                                    },
                                    unhealthyThreshold: {
                                        type: "integer"
                                    }
                                }
                            },
                            outlierDetection: {
                                type: "structure",
                                required: [ "baseEjectionDuration", "interval", "maxEjectionPercent", "maxServerErrors" ],
                                members: {
                                    baseEjectionDuration: {
                                        shape: "S2d"
                                    },
                                    interval: {
                                        shape: "S2d"
                                    },
                                    maxEjectionPercent: {
                                        type: "integer"
                                    },
                                    maxServerErrors: {
                                        type: "long"
                                    }
                                }
                            },
                            portMapping: {
                                shape: "S5h"
                            },
                            timeout: {
                                type: "structure",
                                members: {
                                    grpc: {
                                        shape: "S2i"
                                    },
                                    http: {
                                        shape: "S2q"
                                    },
                                    http2: {
                                        shape: "S2q"
                                    },
                                    tcp: {
                                        shape: "S2v"
                                    }
                                },
                                union: true
                            },
                            tls: {
                                type: "structure",
                                required: [ "certificate", "mode" ],
                                members: {
                                    certificate: {
                                        type: "structure",
                                        members: {
                                            acm: {
                                                type: "structure",
                                                required: [ "certificateArn" ],
                                                members: {
                                                    certificateArn: {}
                                                }
                                            },
                                            file: {
                                                shape: "S4q"
                                            },
                                            sds: {
                                                shape: "S4r"
                                            }
                                        },
                                        union: true
                                    },
                                    mode: {},
                                    validation: {
                                        type: "structure",
                                        required: [ "trust" ],
                                        members: {
                                            subjectAlternativeNames: {
                                                shape: "S3d"
                                            },
                                            trust: {
                                                type: "structure",
                                                members: {
                                                    file: {
                                                        shape: "S4x"
                                                    },
                                                    sds: {
                                                        shape: "S4y"
                                                    }
                                                },
                                                union: true
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                logging: {
                    type: "structure",
                    members: {
                        accessLog: {
                            type: "structure",
                            members: {
                                file: {
                                    type: "structure",
                                    required: [ "path" ],
                                    members: {
                                        format: {
                                            shape: "S4a"
                                        },
                                        path: {}
                                    }
                                }
                            },
                            union: true
                        }
                    }
                },
                serviceDiscovery: {
                    type: "structure",
                    members: {
                        awsCloudMap: {
                            type: "structure",
                            required: [ "namespaceName", "serviceName" ],
                            members: {
                                attributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "key", "value" ],
                                        members: {
                                            key: {},
                                            value: {}
                                        }
                                    }
                                },
                                ipPreference: {},
                                namespaceName: {},
                                serviceName: {}
                            }
                        },
                        dns: {
                            type: "structure",
                            required: [ "hostname" ],
                            members: {
                                hostname: {},
                                ipPreference: {},
                                responseType: {}
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S4n: {
            type: "structure",
            members: {
                tls: {
                    type: "structure",
                    required: [ "validation" ],
                    members: {
                        certificate: {
                            type: "structure",
                            members: {
                                file: {
                                    shape: "S4q"
                                },
                                sds: {
                                    shape: "S4r"
                                }
                            },
                            union: true
                        },
                        enforce: {
                            type: "boolean"
                        },
                        ports: {
                            shape: "S3a"
                        },
                        validation: {
                            type: "structure",
                            required: [ "trust" ],
                            members: {
                                subjectAlternativeNames: {
                                    shape: "S3d"
                                },
                                trust: {
                                    type: "structure",
                                    members: {
                                        acm: {
                                            type: "structure",
                                            required: [ "certificateAuthorityArns" ],
                                            members: {
                                                certificateAuthorityArns: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        },
                                        file: {
                                            shape: "S4x"
                                        },
                                        sds: {
                                            shape: "S4y"
                                        }
                                    },
                                    union: true
                                }
                            }
                        }
                    }
                }
            }
        },
        S4q: {
            type: "structure",
            required: [ "certificateChain", "privateKey" ],
            members: {
                certificateChain: {},
                privateKey: {}
            }
        },
        S4r: {
            type: "structure",
            required: [ "secretName" ],
            members: {
                secretName: {}
            }
        },
        S4x: {
            type: "structure",
            required: [ "certificateChain" ],
            members: {
                certificateChain: {}
            }
        },
        S4y: {
            type: "structure",
            required: [ "secretName" ],
            members: {
                secretName: {}
            }
        },
        S5h: {
            type: "structure",
            required: [ "port", "protocol" ],
            members: {
                port: {
                    type: "integer"
                },
                protocol: {}
            }
        },
        S63: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status", "virtualNodeName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1g"
                },
                spec: {
                    shape: "S4l"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualNodeName: {}
            }
        },
        S67: {
            type: "structure",
            members: {
                listeners: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "portMapping" ],
                        members: {
                            portMapping: {
                                shape: "S5h"
                            }
                        }
                    }
                }
            }
        },
        S6b: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status", "virtualRouterName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1g"
                },
                spec: {
                    shape: "S67"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualRouterName: {}
            }
        },
        S6f: {
            type: "structure",
            members: {
                provider: {
                    type: "structure",
                    members: {
                        virtualNode: {
                            type: "structure",
                            required: [ "virtualNodeName" ],
                            members: {
                                virtualNodeName: {}
                            }
                        },
                        virtualRouter: {
                            type: "structure",
                            required: [ "virtualRouterName" ],
                            members: {
                                virtualRouterName: {}
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S6k: {
            type: "structure",
            required: [ "meshName", "metadata", "spec", "status", "virtualServiceName" ],
            members: {
                meshName: {},
                metadata: {
                    shape: "S1g"
                },
                spec: {
                    shape: "S6f"
                },
                status: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        status: {}
                    }
                },
                virtualServiceName: {}
            }
        }
    },
    paginators: {
        ListGatewayRoutes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "gatewayRoutes"
        },
        ListMeshes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "meshes"
        },
        ListRoutes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "routes"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "tags"
        },
        ListVirtualGateways: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "virtualGateways"
        },
        ListVirtualNodes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "virtualNodes"
        },
        ListVirtualRouters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "virtualRouters"
        },
        ListVirtualServices: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "limit",
            result_key: "virtualServices"
        }
    }
};

AWS.apiLoader.services["licensemanager"] = {};

AWS.LicenseManager = AWS.Service.defineService("licensemanager", [ "2018-08-01" ]);

AWS.apiLoader.services["licensemanager"]["2018-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-08-01",
        endpointPrefix: "license-manager",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS License Manager",
        serviceId: "License Manager",
        signatureVersion: "v4",
        targetPrefix: "AWSLicenseManager",
        uid: "license-manager-2018-08-01"
    },
    operations: {
        AcceptGrant: {
            input: {
                type: "structure",
                required: [ "GrantArn" ],
                members: {
                    GrantArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        CheckInLicense: {
            input: {
                type: "structure",
                required: [ "LicenseConsumptionToken" ],
                members: {
                    LicenseConsumptionToken: {},
                    Beneficiary: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CheckoutBorrowLicense: {
            input: {
                type: "structure",
                required: [ "LicenseArn", "Entitlements", "DigitalSignatureMethod", "ClientToken" ],
                members: {
                    LicenseArn: {},
                    Entitlements: {
                        shape: "S9"
                    },
                    DigitalSignatureMethod: {},
                    NodeId: {},
                    CheckoutMetadata: {
                        shape: "Sd"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseArn: {},
                    LicenseConsumptionToken: {},
                    EntitlementsAllowed: {
                        shape: "S9"
                    },
                    NodeId: {},
                    SignedToken: {},
                    IssuedAt: {},
                    Expiration: {},
                    CheckoutMetadata: {
                        shape: "Sd"
                    }
                }
            }
        },
        CheckoutLicense: {
            input: {
                type: "structure",
                required: [ "ProductSKU", "CheckoutType", "KeyFingerprint", "Entitlements", "ClientToken" ],
                members: {
                    ProductSKU: {},
                    CheckoutType: {},
                    KeyFingerprint: {},
                    Entitlements: {
                        shape: "S9"
                    },
                    ClientToken: {},
                    Beneficiary: {},
                    NodeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CheckoutType: {},
                    LicenseConsumptionToken: {},
                    EntitlementsAllowed: {
                        shape: "S9"
                    },
                    SignedToken: {},
                    NodeId: {},
                    IssuedAt: {},
                    Expiration: {},
                    LicenseArn: {}
                }
            }
        },
        CreateGrant: {
            input: {
                type: "structure",
                required: [ "ClientToken", "GrantName", "LicenseArn", "Principals", "HomeRegion", "AllowedOperations" ],
                members: {
                    ClientToken: {},
                    GrantName: {},
                    LicenseArn: {},
                    Principals: {
                        type: "list",
                        member: {}
                    },
                    HomeRegion: {},
                    AllowedOperations: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        CreateGrantVersion: {
            input: {
                type: "structure",
                required: [ "ClientToken", "GrantArn" ],
                members: {
                    ClientToken: {},
                    GrantArn: {},
                    GrantName: {},
                    AllowedOperations: {
                        shape: "So"
                    },
                    Status: {},
                    StatusReason: {},
                    SourceVersion: {},
                    Options: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        CreateLicense: {
            input: {
                type: "structure",
                required: [ "LicenseName", "ProductName", "ProductSKU", "Issuer", "HomeRegion", "Validity", "Entitlements", "Beneficiary", "ConsumptionConfiguration", "ClientToken" ],
                members: {
                    LicenseName: {},
                    ProductName: {},
                    ProductSKU: {},
                    Issuer: {
                        shape: "Sx"
                    },
                    HomeRegion: {},
                    Validity: {
                        shape: "Sy"
                    },
                    Entitlements: {
                        shape: "Sz"
                    },
                    Beneficiary: {},
                    ConsumptionConfiguration: {
                        shape: "S14"
                    },
                    LicenseMetadata: {
                        shape: "Sd"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        CreateLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "Name", "LicenseCountingType" ],
                members: {
                    Name: {},
                    Description: {},
                    LicenseCountingType: {},
                    LicenseCount: {
                        type: "long"
                    },
                    LicenseCountHardLimit: {
                        type: "boolean"
                    },
                    LicenseRules: {
                        shape: "S1e"
                    },
                    Tags: {
                        shape: "S1f"
                    },
                    DisassociateWhenNotFound: {
                        type: "boolean"
                    },
                    ProductInformationList: {
                        shape: "S1h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurationArn: {}
                }
            }
        },
        CreateLicenseConversionTaskForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "SourceLicenseContext", "DestinationLicenseContext" ],
                members: {
                    ResourceArn: {},
                    SourceLicenseContext: {
                        shape: "S1n"
                    },
                    DestinationLicenseContext: {
                        shape: "S1n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConversionTaskId: {}
                }
            }
        },
        CreateLicenseManagerReportGenerator: {
            input: {
                type: "structure",
                required: [ "ReportGeneratorName", "Type", "ReportContext", "ReportFrequency", "ClientToken" ],
                members: {
                    ReportGeneratorName: {},
                    Type: {
                        shape: "S1t"
                    },
                    ReportContext: {
                        shape: "S1v"
                    },
                    ReportFrequency: {
                        shape: "S1x"
                    },
                    ClientToken: {},
                    Description: {},
                    Tags: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseManagerReportGeneratorArn: {}
                }
            }
        },
        CreateLicenseVersion: {
            input: {
                type: "structure",
                required: [ "LicenseArn", "LicenseName", "ProductName", "Issuer", "HomeRegion", "Validity", "Entitlements", "ConsumptionConfiguration", "Status", "ClientToken" ],
                members: {
                    LicenseArn: {},
                    LicenseName: {},
                    ProductName: {},
                    Issuer: {
                        shape: "Sx"
                    },
                    HomeRegion: {},
                    Validity: {
                        shape: "Sy"
                    },
                    LicenseMetadata: {
                        shape: "Sd"
                    },
                    Entitlements: {
                        shape: "Sz"
                    },
                    ConsumptionConfiguration: {
                        shape: "S14"
                    },
                    Status: {},
                    ClientToken: {},
                    SourceVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseArn: {},
                    Version: {},
                    Status: {}
                }
            }
        },
        CreateToken: {
            input: {
                type: "structure",
                required: [ "LicenseArn", "ClientToken" ],
                members: {
                    LicenseArn: {},
                    RoleArns: {
                        shape: "S1w"
                    },
                    ExpirationInDays: {
                        type: "integer"
                    },
                    TokenProperties: {
                        shape: "S25"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TokenId: {},
                    TokenType: {},
                    Token: {}
                }
            }
        },
        DeleteGrant: {
            input: {
                type: "structure",
                required: [ "GrantArn", "Version" ],
                members: {
                    GrantArn: {},
                    StatusReason: {},
                    Version: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        DeleteLicense: {
            input: {
                type: "structure",
                required: [ "LicenseArn", "SourceVersion" ],
                members: {
                    LicenseArn: {},
                    SourceVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    DeletionDate: {}
                }
            }
        },
        DeleteLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLicenseManagerReportGenerator: {
            input: {
                type: "structure",
                required: [ "LicenseManagerReportGeneratorArn" ],
                members: {
                    LicenseManagerReportGeneratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteToken: {
            input: {
                type: "structure",
                required: [ "TokenId" ],
                members: {
                    TokenId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ExtendLicenseConsumption: {
            input: {
                type: "structure",
                required: [ "LicenseConsumptionToken" ],
                members: {
                    LicenseConsumptionToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConsumptionToken: {},
                    Expiration: {}
                }
            }
        },
        GetAccessToken: {
            input: {
                type: "structure",
                required: [ "Token" ],
                members: {
                    Token: {},
                    TokenProperties: {
                        shape: "S25"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccessToken: {}
                }
            }
        },
        GetGrant: {
            input: {
                type: "structure",
                required: [ "GrantArn" ],
                members: {
                    GrantArn: {},
                    Version: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Grant: {
                        shape: "S2r"
                    }
                }
            }
        },
        GetLicense: {
            input: {
                type: "structure",
                required: [ "LicenseArn" ],
                members: {
                    LicenseArn: {},
                    Version: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    License: {
                        shape: "S2u"
                    }
                }
            }
        },
        GetLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurationId: {},
                    LicenseConfigurationArn: {},
                    Name: {},
                    Description: {},
                    LicenseCountingType: {},
                    LicenseRules: {
                        shape: "S1e"
                    },
                    LicenseCount: {
                        type: "long"
                    },
                    LicenseCountHardLimit: {
                        type: "boolean"
                    },
                    ConsumedLicenses: {
                        type: "long"
                    },
                    Status: {},
                    OwnerAccountId: {},
                    ConsumedLicenseSummaryList: {
                        shape: "S2y"
                    },
                    ManagedResourceSummaryList: {
                        shape: "S31"
                    },
                    Tags: {
                        shape: "S1f"
                    },
                    ProductInformationList: {
                        shape: "S1h"
                    },
                    AutomatedDiscoveryInformation: {
                        shape: "S33"
                    },
                    DisassociateWhenNotFound: {
                        type: "boolean"
                    }
                }
            }
        },
        GetLicenseConversionTask: {
            input: {
                type: "structure",
                required: [ "LicenseConversionTaskId" ],
                members: {
                    LicenseConversionTaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConversionTaskId: {},
                    ResourceArn: {},
                    SourceLicenseContext: {
                        shape: "S1n"
                    },
                    DestinationLicenseContext: {
                        shape: "S1n"
                    },
                    StatusMessage: {},
                    Status: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    LicenseConversionTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetLicenseManagerReportGenerator: {
            input: {
                type: "structure",
                required: [ "LicenseManagerReportGeneratorArn" ],
                members: {
                    LicenseManagerReportGeneratorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportGenerator: {
                        shape: "S3a"
                    }
                }
            }
        },
        GetLicenseUsage: {
            input: {
                type: "structure",
                required: [ "LicenseArn" ],
                members: {
                    LicenseArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseUsage: {
                        type: "structure",
                        members: {
                            EntitlementUsages: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Name", "ConsumedValue", "Unit" ],
                                    members: {
                                        Name: {},
                                        ConsumedValue: {},
                                        MaxCount: {},
                                        Unit: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetServiceSettings: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    S3BucketArn: {},
                    SnsTopicArn: {},
                    OrganizationConfiguration: {
                        shape: "S3j"
                    },
                    EnableCrossAccountsDiscovery: {
                        type: "boolean"
                    },
                    LicenseManagerResourceShareArn: {}
                }
            }
        },
        ListAssociationsForLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurationAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                ResourceType: {},
                                ResourceOwnerId: {},
                                AssociationTime: {
                                    type: "timestamp"
                                },
                                AmiAssociationScope: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDistributedGrants: {
            input: {
                type: "structure",
                members: {
                    GrantArns: {
                        shape: "S1w"
                    },
                    Filters: {
                        shape: "S3p"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Grants: {
                        shape: "S3w"
                    },
                    NextToken: {}
                }
            }
        },
        ListFailuresForLicenseConfigurationOperations: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseOperationFailureList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                ResourceType: {},
                                ErrorMessage: {},
                                FailureTime: {
                                    type: "timestamp"
                                },
                                OperationName: {},
                                ResourceOwnerId: {},
                                OperationRequestedBy: {},
                                MetadataList: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseConfigurations: {
            input: {
                type: "structure",
                members: {
                    LicenseConfigurationArns: {
                        shape: "S1e"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S42"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LicenseConfigurationId: {},
                                LicenseConfigurationArn: {},
                                Name: {},
                                Description: {},
                                LicenseCountingType: {},
                                LicenseRules: {
                                    shape: "S1e"
                                },
                                LicenseCount: {
                                    type: "long"
                                },
                                LicenseCountHardLimit: {
                                    type: "boolean"
                                },
                                DisassociateWhenNotFound: {
                                    type: "boolean"
                                },
                                ConsumedLicenses: {
                                    type: "long"
                                },
                                Status: {},
                                OwnerAccountId: {},
                                ConsumedLicenseSummaryList: {
                                    shape: "S2y"
                                },
                                ManagedResourceSummaryList: {
                                    shape: "S31"
                                },
                                ProductInformationList: {
                                    shape: "S1h"
                                },
                                AutomatedDiscoveryInformation: {
                                    shape: "S33"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseConversionTasks: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S42"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConversionTasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LicenseConversionTaskId: {},
                                ResourceArn: {},
                                SourceLicenseContext: {
                                    shape: "S1n"
                                },
                                DestinationLicenseContext: {
                                    shape: "S1n"
                                },
                                Status: {},
                                StatusMessage: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                LicenseConversionTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseManagerReportGenerators: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S3p"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportGenerators: {
                        type: "list",
                        member: {
                            shape: "S3a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseSpecificationsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseSpecifications: {
                        shape: "S4f"
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenseVersions: {
            input: {
                type: "structure",
                required: [ "LicenseArn" ],
                members: {
                    LicenseArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Licenses: {
                        shape: "S4j"
                    },
                    NextToken: {}
                }
            }
        },
        ListLicenses: {
            input: {
                type: "structure",
                members: {
                    LicenseArns: {
                        shape: "S1w"
                    },
                    Filters: {
                        shape: "S3p"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Licenses: {
                        shape: "S4j"
                    },
                    NextToken: {}
                }
            }
        },
        ListReceivedGrants: {
            input: {
                type: "structure",
                members: {
                    GrantArns: {
                        shape: "S1w"
                    },
                    Filters: {
                        shape: "S3p"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Grants: {
                        shape: "S3w"
                    },
                    NextToken: {}
                }
            }
        },
        ListReceivedGrantsForOrganization: {
            input: {
                type: "structure",
                required: [ "LicenseArn" ],
                members: {
                    LicenseArn: {},
                    Filters: {
                        shape: "S3p"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Grants: {
                        shape: "S3w"
                    },
                    NextToken: {}
                }
            }
        },
        ListReceivedLicenses: {
            input: {
                type: "structure",
                members: {
                    LicenseArns: {
                        shape: "S1w"
                    },
                    Filters: {
                        shape: "S3p"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Licenses: {
                        shape: "S4s"
                    },
                    NextToken: {}
                }
            }
        },
        ListReceivedLicensesForOrganization: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S3p"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Licenses: {
                        shape: "S4s"
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceInventory: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Condition" ],
                            members: {
                                Name: {},
                                Condition: {},
                                Value: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceInventoryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceId: {},
                                ResourceType: {},
                                ResourceArn: {},
                                Platform: {},
                                PlatformVersion: {},
                                ResourceOwningAccountId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1f"
                    }
                }
            }
        },
        ListTokens: {
            input: {
                type: "structure",
                members: {
                    TokenIds: {
                        shape: "S1e"
                    },
                    Filters: {
                        shape: "S3p"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tokens: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TokenId: {},
                                TokenType: {},
                                LicenseArn: {},
                                ExpirationTime: {},
                                TokenProperties: {
                                    shape: "S25"
                                },
                                RoleArns: {
                                    shape: "S1w"
                                },
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUsageForLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S42"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LicenseConfigurationUsageList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceArn: {},
                                ResourceType: {},
                                ResourceStatus: {},
                                ResourceOwnerId: {},
                                AssociationTime: {
                                    type: "timestamp"
                                },
                                ConsumedLicenses: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        RejectGrant: {
            input: {
                type: "structure",
                required: [ "GrantArn" ],
                members: {
                    GrantArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GrantArn: {},
                    Status: {},
                    Version: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S1f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLicenseConfiguration: {
            input: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    LicenseConfigurationStatus: {},
                    LicenseRules: {
                        shape: "S1e"
                    },
                    LicenseCount: {
                        type: "long"
                    },
                    LicenseCountHardLimit: {
                        type: "boolean"
                    },
                    Name: {},
                    Description: {},
                    ProductInformationList: {
                        shape: "S1h"
                    },
                    DisassociateWhenNotFound: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLicenseManagerReportGenerator: {
            input: {
                type: "structure",
                required: [ "LicenseManagerReportGeneratorArn", "ReportGeneratorName", "Type", "ReportContext", "ReportFrequency", "ClientToken" ],
                members: {
                    LicenseManagerReportGeneratorArn: {},
                    ReportGeneratorName: {},
                    Type: {
                        shape: "S1t"
                    },
                    ReportContext: {
                        shape: "S1v"
                    },
                    ReportFrequency: {
                        shape: "S1x"
                    },
                    ClientToken: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLicenseSpecificationsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    AddLicenseSpecifications: {
                        shape: "S4f"
                    },
                    RemoveLicenseSpecifications: {
                        shape: "S4f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateServiceSettings: {
            input: {
                type: "structure",
                members: {
                    S3BucketArn: {},
                    SnsTopicArn: {},
                    OrganizationConfiguration: {
                        shape: "S3j"
                    },
                    EnableCrossAccountsDiscovery: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Unit" ],
                members: {
                    Name: {},
                    Value: {},
                    Unit: {}
                }
            }
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        So: {
            type: "list",
            member: {}
        },
        St: {
            type: "structure",
            members: {
                ActivationOverrideBehavior: {}
            }
        },
        Sx: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                SignKey: {}
            }
        },
        Sy: {
            type: "structure",
            required: [ "Begin" ],
            members: {
                Begin: {},
                End: {}
            }
        },
        Sz: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Unit" ],
                members: {
                    Name: {},
                    Value: {},
                    MaxCount: {
                        type: "long"
                    },
                    Overage: {
                        type: "boolean"
                    },
                    Unit: {},
                    AllowCheckIn: {
                        type: "boolean"
                    }
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                RenewType: {},
                ProvisionalConfiguration: {
                    type: "structure",
                    required: [ "MaxTimeToLiveInMinutes" ],
                    members: {
                        MaxTimeToLiveInMinutes: {
                            type: "integer"
                        }
                    }
                },
                BorrowConfiguration: {
                    type: "structure",
                    required: [ "AllowEarlyCheckIn", "MaxTimeToLiveInMinutes" ],
                    members: {
                        AllowEarlyCheckIn: {
                            type: "boolean"
                        },
                        MaxTimeToLiveInMinutes: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1e: {
            type: "list",
            member: {}
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ResourceType", "ProductInformationFilterList" ],
                members: {
                    ResourceType: {},
                    ProductInformationFilterList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ProductInformationFilterName", "ProductInformationFilterComparator" ],
                            members: {
                                ProductInformationFilterName: {},
                                ProductInformationFilterValue: {
                                    shape: "S1e"
                                },
                                ProductInformationFilterComparator: {}
                            }
                        }
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                UsageOperation: {}
            }
        },
        S1t: {
            type: "list",
            member: {}
        },
        S1v: {
            type: "structure",
            required: [ "licenseConfigurationArns" ],
            members: {
                licenseConfigurationArns: {
                    shape: "S1w"
                }
            }
        },
        S1w: {
            type: "list",
            member: {}
        },
        S1x: {
            type: "structure",
            members: {
                value: {
                    type: "integer"
                },
                period: {}
            }
        },
        S25: {
            type: "list",
            member: {}
        },
        S2r: {
            type: "structure",
            required: [ "GrantArn", "GrantName", "ParentArn", "LicenseArn", "GranteePrincipalArn", "HomeRegion", "GrantStatus", "Version", "GrantedOperations" ],
            members: {
                GrantArn: {},
                GrantName: {},
                ParentArn: {},
                LicenseArn: {},
                GranteePrincipalArn: {},
                HomeRegion: {},
                GrantStatus: {},
                StatusReason: {},
                Version: {},
                GrantedOperations: {
                    shape: "So"
                },
                Options: {
                    shape: "St"
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                LicenseArn: {},
                LicenseName: {},
                ProductName: {},
                ProductSKU: {},
                Issuer: {
                    shape: "S2v"
                },
                HomeRegion: {},
                Status: {},
                Validity: {
                    shape: "Sy"
                },
                Beneficiary: {},
                Entitlements: {
                    shape: "Sz"
                },
                ConsumptionConfiguration: {
                    shape: "S14"
                },
                LicenseMetadata: {
                    shape: "Sd"
                },
                CreateTime: {},
                Version: {}
            }
        },
        S2v: {
            type: "structure",
            members: {
                Name: {},
                SignKey: {},
                KeyFingerprint: {}
            }
        },
        S2y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceType: {},
                    ConsumedLicenses: {
                        type: "long"
                    }
                }
            }
        },
        S31: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceType: {},
                    AssociationCount: {
                        type: "long"
                    }
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                LastRunTime: {
                    type: "timestamp"
                }
            }
        },
        S3a: {
            type: "structure",
            members: {
                ReportGeneratorName: {},
                ReportType: {
                    shape: "S1t"
                },
                ReportContext: {
                    shape: "S1v"
                },
                ReportFrequency: {
                    shape: "S1x"
                },
                LicenseManagerReportGeneratorArn: {},
                LastRunStatus: {},
                LastRunFailureReason: {},
                LastReportGenerationTime: {},
                ReportCreatorAccount: {},
                Description: {},
                S3Location: {
                    type: "structure",
                    members: {
                        bucket: {},
                        keyPrefix: {}
                    }
                },
                CreateTime: {},
                Tags: {
                    shape: "S1f"
                }
            }
        },
        S3j: {
            type: "structure",
            required: [ "EnableIntegration" ],
            members: {
                EnableIntegration: {
                    type: "boolean"
                }
            }
        },
        S3p: {
            type: "list",
            member: {
                shape: "S3q"
            }
        },
        S3q: {
            type: "structure",
            members: {
                Name: {},
                Values: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3w: {
            type: "list",
            member: {
                shape: "S2r"
            }
        },
        S42: {
            type: "list",
            member: {
                shape: "S3q"
            }
        },
        S4f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "LicenseConfigurationArn" ],
                members: {
                    LicenseConfigurationArn: {},
                    AmiAssociationScope: {}
                }
            }
        },
        S4j: {
            type: "list",
            member: {
                shape: "S2u"
            }
        },
        S4s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LicenseArn: {},
                    LicenseName: {},
                    ProductName: {},
                    ProductSKU: {},
                    Issuer: {
                        shape: "S2v"
                    },
                    HomeRegion: {},
                    Status: {},
                    Validity: {
                        shape: "Sy"
                    },
                    Beneficiary: {},
                    Entitlements: {
                        shape: "Sz"
                    },
                    ConsumptionConfiguration: {
                        shape: "S14"
                    },
                    LicenseMetadata: {
                        shape: "Sd"
                    },
                    CreateTime: {},
                    Version: {},
                    ReceivedMetadata: {
                        type: "structure",
                        members: {
                            ReceivedStatus: {},
                            ReceivedStatusReason: {},
                            AllowedOperations: {
                                shape: "So"
                            }
                        }
                    }
                }
            }
        }
    },
    paginators: {}
};

